/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 61 generated on 2013-04-08 07:24:33.583866
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==61);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50;
x0=IKcos(j[0]);
x1=IKcos(j[2]);
x2=IKsin(j[0]);
x3=IKsin(j[1]);
x4=IKsin(j[2]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKsin(j[4]);
x8=IKcos(j[4]);
x9=IKcos(j[5]);
x10=IKcos(j[1]);
x11=IKsin(j[5]);
x12=((IkReal(0.329950000000000))*(x2));
x13=((IkReal(1.00000000000000))*(x6));
x14=((IkReal(0.119063000000000))*(x7));
x15=((IkReal(1.00000000000000))*(x3));
x16=((IkReal(1.00000000000000))*(x2));
x17=((IkReal(0.119063000000000))*(x8));
x18=((IkReal(1.00000000000000))*(x8));
x19=((IkReal(1.00000000000000))*(x10));
x20=((IkReal(0.119063000000000))*(x10));
x21=((IkReal(0.0100000000000000))*(x10));
x22=((IkReal(1.00000000000000))*(x7));
x23=((x10)*(x4));
x24=((x0)*(x4));
x25=((IkReal(-1.00000000000000))*(x5));
x26=((x1)*(x3));
x27=((x2)*(x4));
x28=((x0)*(x1));
x29=((x1)*(x2));
x30=((x0)*(x11));
x31=((x1)*(x10));
x32=((x11)*(x2));
x33=((x10)*(x9));
x34=((x15)*(x27));
x35=((x28)+(((IkReal(-1.00000000000000))*(x34))));
x36=((((IkReal(-1.00000000000000))*(x16)*(x4)))+(((x0)*(x26))));
x37=((((x24)*(x3)))+(x29));
x38=((((IkReal(-1.00000000000000))*(x24)))+(((IkReal(-1.00000000000000))*(x15)*(x29))));
x39=((((x23)*(x5)))+(((IkReal(-1.00000000000000))*(x13)*(x31))));
x40=((x37)*(x6));
x41=((x35)*(x6));
x42=((x36)*(x5));
x43=((((x1)*(x19)*(x5)))+(((x13)*(x23))));
x44=((x39)*(x8));
x45=((((x5)*(((((IkReal(-1.00000000000000))*(x15)*(x24)))+(((IkReal(-1.00000000000000))*(x1)*(x16)))))))+(((x36)*(x6))));
x46=((((x38)*(x6)))+(((x5)*(((((IkReal(-1.00000000000000))*(x28)))+(x34))))));
x47=((((x25)*(x38)))+(((IkReal(-1.00000000000000))*(x41))));
x48=((((IkReal(-1.00000000000000))*(x18)*(x39)))+(((IkReal(-1.00000000000000))*(x22)*(x43))));
x49=((((IkReal(-1.00000000000000))*(x18)*(x45)))+(((x22)*(((((IkReal(-1.00000000000000))*(x25)*(x36)))+(((IkReal(1.00000000000000))*(x40))))))));
x50=((((IkReal(-1.00000000000000))*(x22)*(x47)))+(((IkReal(-1.00000000000000))*(x18)*(x46))));
eerot[0]=((((x8)*(((((x38)*(x5)))+(x41)))))+(((x46)*(x7))));
eerot[1]=((((IkReal(-1.00000000000000))*(x16)*(x33)))+(((x11)*(x50))));
eerot[2]=((((x10)*(x32)))+(((x50)*(x9))));
eetrans[0]=((IkReal(3.23500000000000e-5))+(((x9)*(((((x17)*(x46)))+(((x14)*(x47)))))))+(((x6)*(((((IkReal(-0.329950000000000))*(x24)))+(((IkReal(-1.00000000000000))*(x12)*(x26)))))))+(((IkReal(-0.330080000000000))*(x24)))+(((IkReal(-1.00000000000000))*(x20)*(x32)))+(((x5)*(((((x12)*(x3)*(x4)))+(((IkReal(-0.329950000000000))*(x28)))))))+(((IkReal(-0.330080000000000))*(x2)*(x26)))+(((IkReal(-1.00000000000000))*(x2)*(x21))));
eerot[3]=((((x45)*(x7)))+(((x8)*(((x42)+(x40))))));
eerot[4]=((((x11)*(x49)))+(((x0)*(x33))));
eerot[5]=((((IkReal(-1.00000000000000))*(x19)*(x30)))+(((x49)*(x9))));
IkReal x51=((x0)*(x26));
IkReal x52=((IkReal(1.00000000000000))*(x12));
eetrans[1]=((IkReal(0.0885000000000000))+(((x0)*(x21)))+(((IkReal(-0.330080000000000))*(x27)))+(((x20)*(x30)))+(((x6)*(((((IkReal(0.329950000000000))*(x51)))+(((IkReal(-1.00000000000000))*(x4)*(x52)))))))+(((x5)*(((((IkReal(-0.329950000000000))*(x24)*(x3)))+(((IkReal(-1.00000000000000))*(x1)*(x52)))))))+(((x9)*(((((x14)*(((((IkReal(-1.00000000000000))*(x13)*(x37)))+(((IkReal(-1.00000000000000))*(x42)))))))+(((x17)*(x45)))))))+(((IkReal(0.330080000000000))*(x51))));
eerot[6]=((((x39)*(x7)))+(((IkReal(-1.00000000000000))*(x43)*(x8))));
eerot[7]=((((x11)*(x48)))+(((x3)*(x9))));
eerot[8]=((((IkReal(-1.00000000000000))*(x11)*(x15)))+(((x48)*(x9))));
eetrans[2]=((IkReal(-0.164520000000000))+(((x9)*(((((x14)*(x43)))+(((x17)*(x39)))))))+(((IkReal(0.119063000000000))*(x11)*(x3)))+(((IkReal(-0.330080000000000))*(x31)))+(((IkReal(0.329950000000000))*(x23)*(x5)))+(((IkReal(-0.329950000000000))*(x31)*(x6)))+(((IkReal(0.0100000000000000))*(x3))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j13,cj13,sj13,htj13,j14,cj14,sj14,htj14,j15,cj15,sj15,htj15,j16,cj16,sj16,htj16,j17,cj17,sj17,htj17,j18,cj18,sj18,htj18,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij13[2], _nj13,_ij14[2], _nj14,_ij15[2], _nj15,_ij16[2], _nj16,_ij17[2], _nj17,_ij18[2], _nj18;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j13=numeric_limits<IkReal>::quiet_NaN(); _ij13[0] = -1; _ij13[1] = -1; _nj13 = -1; j14=numeric_limits<IkReal>::quiet_NaN(); _ij14[0] = -1; _ij14[1] = -1; _nj14 = -1; j15=numeric_limits<IkReal>::quiet_NaN(); _ij15[0] = -1; _ij15[1] = -1; _nj15 = -1; j16=numeric_limits<IkReal>::quiet_NaN(); _ij16[0] = -1; _ij16[1] = -1; _nj16 = -1; j17=numeric_limits<IkReal>::quiet_NaN(); _ij17[0] = -1; _ij17[1] = -1; _nj17 = -1; j18=numeric_limits<IkReal>::quiet_NaN(); _ij18[0] = -1; _ij18[1] = -1; _nj18 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((IkReal(-1.00000000000000))*(r02));
new_r01=r01;
new_r02=r00;
new_px=((IkReal(-3.23500000000000e-5))+(((IkReal(0.119063000000000))*(r02)))+(px));
new_r10=((IkReal(-1.00000000000000))*(r12));
new_r11=r11;
new_r12=r10;
new_py=((IkReal(-0.0885000000000000))+(((IkReal(0.119063000000000))*(r12)))+(py));
new_r20=((IkReal(-1.00000000000000))*(r22));
new_r21=r21;
new_r22=r20;
new_pz=((IkReal(0.164520000000000))+(((IkReal(0.119063000000000))*(r22)))+(pz));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((pz)*(pz))+((py)*(py)));
npx=((((py)*(r10)))+(((pz)*(r20)))+(((px)*(r00))));
npy=((((px)*(r01)))+(((pz)*(r21)))+(((py)*(r11))));
npz=((((py)*(r12)))+(((pz)*(r22)))+(((px)*(r02))));
rxp0_0=((((IkReal(-1.00000000000000))*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((IkReal(-1.00000000000000))*(pz)*(r00))));
rxp0_2=((((py)*(r00)))+(((IkReal(-1.00000000000000))*(px)*(r10))));
rxp1_0=((((pz)*(r11)))+(((IkReal(-1.00000000000000))*(py)*(r21))));
rxp1_1=((((IkReal(-1.00000000000000))*(pz)*(r01)))+(((px)*(r21))));
rxp1_2=((((py)*(r01)))+(((IkReal(-1.00000000000000))*(px)*(r11))));
rxp2_0=((((IkReal(-1.00000000000000))*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((IkReal(-1.00000000000000))*(pz)*(r02))));
rxp2_2=((((py)*(r02)))+(((IkReal(-1.00000000000000))*(px)*(r12))));
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
cj16array[0]=((IkReal(-1.00045917269079))+(((IkReal(4.59095103717664))*(pp))));
if( cj16array[0] >= -1-IKFAST_SINCOS_THRESH && cj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKacos(cj16array[0]);
    sj16array[0] = IKsin(j16array[0]);
    cj16array[1] = cj16array[0];
    j16array[1] = -j16array[0];
    sj16array[1] = -sj16array[0];
}
else if( isnan(cj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

{
IkReal dummyeval[1];
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((IkReal(1.00000000000000))+(((IkReal(1.00078815341683))*((sj16)*(sj16))))+(((IkReal(2.00078799818154))*(cj16)))+(((IkReal(1.00078815341683))*((cj16)*(cj16)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j17array[2], cj17array[2], sj17array[2];
bool j17valid[2]={false};
_nj17 = 2;
IkReal x53=((IkReal(0.329950000000000))+(((IkReal(0.330080000000000))*(cj16))));
if( IKabs(((IkReal(0.330080000000000))*(sj16))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x53) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x54=((IkReal(1.00000000000000))*(IKatan2(((IkReal(0.330080000000000))*(sj16)), x53)));
if( ((((x53)*(x53))+(((IkReal(0.108952806400000))*((sj16)*(sj16)))))) < (IkReal)-0.00001 )
    continue;
if( (((npz)*(((IKabs(IKabs(IKsqrt((((x53)*(x53))+(((IkReal(0.108952806400000))*((sj16)*(sj16)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x53)*(x53))+(((IkReal(0.108952806400000))*((sj16)*(sj16))))))))):(IkReal)1.0e30)))) < -1-IKFAST_SINCOS_THRESH || (((npz)*(((IKabs(IKabs(IKsqrt((((x53)*(x53))+(((IkReal(0.108952806400000))*((sj16)*(sj16)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x53)*(x53))+(((IkReal(0.108952806400000))*((sj16)*(sj16))))))))):(IkReal)1.0e30)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x55=IKasin(((npz)*(((IKabs(IKabs(IKsqrt((((x53)*(x53))+(((IkReal(0.108952806400000))*((sj16)*(sj16)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x53)*(x53))+(((IkReal(0.108952806400000))*((sj16)*(sj16))))))))):(IkReal)1.0e30))));
j17array[0]=((x55)+(((IkReal(-1.00000000000000))*(x54))));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
j17array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x55)))+(((IkReal(-1.00000000000000))*(x54))));
sj17array[1]=IKsin(j17array[1]);
cj17array[1]=IKcos(j17array[1]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
if( j17array[1] > IKPI )
{
    j17array[1]-=IK2PI;
}
else if( j17array[1] < -IKPI )
{    j17array[1]+=IK2PI;
}
j17valid[1] = true;
for(int ij17 = 0; ij17 < 2; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 2; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];

{
IkReal dummyeval[1];
IkReal gconst0;
IkReal x56=((IkReal(100.000000000000))*(sj17));
gconst0=IKsign(((((x56)*((npy)*(npy))))+(((x56)*((npx)*(npx))))));
dummyeval[0]=((((sj17)*((npy)*(npy))))+(((sj17)*((npx)*(npx)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst1;
IkReal x57=((IkReal(100.000000000000))*(cj17));
gconst1=IKsign(((((x57)*((npx)*(npx))))+(((x57)*((npy)*(npy))))));
dummyeval[0]=((((cj17)*((npx)*(npx))))+(((cj17)*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x58=((IkReal(0.329950000000000))+(((IkReal(-1.00000000000000))*(npz)))+(((IkReal(0.330080000000000))*(cj16))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j17)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.217919808900000))+(pp)+(((IkReal(-0.217819792000000))*(cj16))));
evalcond[2]=x58;
evalcond[3]=x58;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
gconst2=IKsign(((((IkReal(12500.0000000000))*((npx)*(npx))))+(((IkReal(12500.0000000000))*((npy)*(npy))))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
IkReal x59=((IkReal(4126.00000000000))*(sj16));
if( IKabs(((gconst2)*(((((npy)*(x59)))+(((IkReal(125.000000000000))*(npx))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((((IkReal(125.000000000000))*(npy)))+(((IkReal(-1.00000000000000))*(npx)*(x59))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j18array[0]=IKatan2(((gconst2)*(((((npy)*(x59)))+(((IkReal(125.000000000000))*(npx)))))), ((gconst2)*(((((IkReal(125.000000000000))*(npy)))+(((IkReal(-1.00000000000000))*(npx)*(x59)))))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[2];
IkReal x60=IKcos(j18);
IkReal x61=IKsin(j18);
IkReal x62=((IkReal(1.00000000000000))*(npy));
evalcond[0]=((IkReal(0.0100000000000000))+(((IkReal(-1.00000000000000))*(npx)*(x61)))+(((IkReal(-1.00000000000000))*(x60)*(x62))));
evalcond[1]=((((npx)*(x60)))+(((IkReal(-1.00000000000000))*(x61)*(x62)))+(((IkReal(0.330080000000000))*(sj16))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x204=((IkReal(0.330080000000000))*(cj16));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j17)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.217919808900000))+(pp)+(((IkReal(-0.217819792000000))*(cj16))));
evalcond[2]=((IkReal(-0.329950000000000))+(((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-1.00000000000000))*(x204))));
evalcond[3]=((IkReal(0.329950000000000))+(npz)+(x204));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(((((IkReal(12500.0000000000))*((npx)*(npx))))+(((IkReal(12500.0000000000))*((npy)*(npy))))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
IkReal x205=((IkReal(4126.00000000000))*(sj16));
if( IKabs(((gconst3)*(((((IkReal(125.000000000000))*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(x205))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((((npx)*(x205)))+(((IkReal(125.000000000000))*(npy))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j18array[0]=IKatan2(((gconst3)*(((((IkReal(125.000000000000))*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(x205)))))), ((gconst3)*(((((npx)*(x205)))+(((IkReal(125.000000000000))*(npy)))))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[2];
IkReal x206=IKsin(j18);
IkReal x207=IKcos(j18);
IkReal x208=((IkReal(1.00000000000000))*(x207));
evalcond[0]=((IkReal(0.0100000000000000))+(((IkReal(-1.00000000000000))*(npx)*(x206)))+(((IkReal(-1.00000000000000))*(npy)*(x208))));
evalcond[1]=((((IkReal(-1.00000000000000))*(npx)*(x208)))+(((npy)*(x206)))+(((IkReal(0.330080000000000))*(sj16))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x209=((((IkReal(-1.00000000000000))*(npz)))+(((IkReal(0.330080000000000))*(sj16))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j17)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.217919808900000))+(pp)+(((IkReal(-0.217819792000000))*(cj16))));
evalcond[2]=x209;
evalcond[3]=x209;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign(((((IkReal(100.000000000000))*((npy)*(npy))))+(((IkReal(100.000000000000))*((npx)*(npx))))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
IkReal x210=((IkReal(33.0080000000000))*(cj16));
if( IKabs(((gconst4)*(((((IkReal(-1.00000000000000))*(npy)*(x210)))+(npx)+(((IkReal(-32.9950000000000))*(npy))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst4)*(((npy)+(((IkReal(32.9950000000000))*(npx)))+(((npx)*(x210))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j18array[0]=IKatan2(((gconst4)*(((((IkReal(-1.00000000000000))*(npy)*(x210)))+(npx)+(((IkReal(-32.9950000000000))*(npy)))))), ((gconst4)*(((npy)+(((IkReal(32.9950000000000))*(npx)))+(((npx)*(x210)))))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[2];
IkReal x211=IKsin(j18);
IkReal x212=IKcos(j18);
IkReal x213=((IkReal(1.00000000000000))*(x212));
evalcond[0]=((IkReal(0.0100000000000000))+(((IkReal(-1.00000000000000))*(npy)*(x213)))+(((IkReal(-1.00000000000000))*(npx)*(x211))));
evalcond[1]=((IkReal(0.329950000000000))+(((IkReal(0.330080000000000))*(cj16)))+(((IkReal(-1.00000000000000))*(npx)*(x213)))+(((npy)*(x211))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x214=((IkReal(0.330080000000000))*(sj16));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j17, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.217919808900000))+(pp)+(((IkReal(-0.217819792000000))*(cj16))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x214)))+(((IkReal(-1.00000000000000))*(npz))));
evalcond[3]=((x214)+(npz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign(((((IkReal(100.000000000000))*((npy)*(npy))))+(((IkReal(100.000000000000))*((npx)*(npx))))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
IkReal x215=((IkReal(33.0080000000000))*(cj16));
if( IKabs(((gconst5)*(((npx)+(((npy)*(x215)))+(((IkReal(32.9950000000000))*(npy))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst5)*(((((IkReal(-32.9950000000000))*(npx)))+(npy)+(((IkReal(-1.00000000000000))*(npx)*(x215))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j18array[0]=IKatan2(((gconst5)*(((npx)+(((npy)*(x215)))+(((IkReal(32.9950000000000))*(npy)))))), ((gconst5)*(((((IkReal(-32.9950000000000))*(npx)))+(npy)+(((IkReal(-1.00000000000000))*(npx)*(x215)))))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[2];
IkReal x216=IKcos(j18);
IkReal x217=IKsin(j18);
IkReal x218=((IkReal(1.00000000000000))*(npy));
evalcond[0]=((IkReal(0.0100000000000000))+(((IkReal(-1.00000000000000))*(npx)*(x217)))+(((IkReal(-1.00000000000000))*(x216)*(x218))));
evalcond[1]=((IkReal(0.329950000000000))+(((IkReal(-1.00000000000000))*(x217)*(x218)))+(((IkReal(0.330080000000000))*(cj16)))+(((npx)*(x216))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
IkReal x219=((IkReal(33.0080000000000))*(cj16));
IkReal x220=((IkReal(100.000000000000))*(npz)*(sj17));
if( IKabs(((gconst1)*(((((npy)*(x220)))+(((cj17)*(npx)))+(((IkReal(-32.9950000000000))*(npy)))+(((IkReal(-1.00000000000000))*(npy)*(x219))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((IkReal(-1.00000000000000))*(npx)*(x220)))+(((npx)*(x219)))+(((cj17)*(npy)))+(((IkReal(32.9950000000000))*(npx))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j18array[0]=IKatan2(((gconst1)*(((((npy)*(x220)))+(((cj17)*(npx)))+(((IkReal(-32.9950000000000))*(npy)))+(((IkReal(-1.00000000000000))*(npy)*(x219)))))), ((gconst1)*(((((IkReal(-1.00000000000000))*(npx)*(x220)))+(((npx)*(x219)))+(((cj17)*(npy)))+(((IkReal(32.9950000000000))*(npx)))))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[4];
IkReal x221=IKcos(j18);
IkReal x222=IKsin(j18);
IkReal x223=((IkReal(1.00000000000000))*(npz));
IkReal x224=((IkReal(0.330080000000000))*(cj16));
IkReal x225=((IkReal(0.330080000000000))*(sj16));
IkReal x226=((IkReal(1.00000000000000))*(x221));
IkReal x227=((npy)*(x222));
evalcond[0]=((IkReal(0.0100000000000000))+(((IkReal(-1.00000000000000))*(npy)*(x226)))+(((IkReal(-1.00000000000000))*(npx)*(x222))));
evalcond[1]=((((npx)*(sj17)*(x221)))+(x225)+(((IkReal(-1.00000000000000))*(cj17)*(x223)))+(((IkReal(-1.00000000000000))*(sj17)*(x227))));
evalcond[2]=((IkReal(0.329950000000000))+(((cj17)*(x227)))+(((IkReal(-1.00000000000000))*(sj17)*(x223)))+(x224)+(((IkReal(-1.00000000000000))*(cj17)*(npx)*(x226))));
evalcond[3]=((((IkReal(0.329950000000000))*(cj17)))+(((IkReal(-1.00000000000000))*(sj17)*(x225)))+(((cj17)*(x224)))+(x227)+(((IkReal(-1.00000000000000))*(npx)*(x226))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
IkReal x228=((IkReal(33.0080000000000))*(sj16));
IkReal x229=((IkReal(100.000000000000))*(cj17)*(npz));
if( IKabs(((gconst0)*(((((npy)*(x228)))+(((npx)*(sj17)))+(((IkReal(-1.00000000000000))*(npy)*(x229))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((npy)*(sj17)))+(((npx)*(x229)))+(((IkReal(-1.00000000000000))*(npx)*(x228))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j18array[0]=IKatan2(((gconst0)*(((((npy)*(x228)))+(((npx)*(sj17)))+(((IkReal(-1.00000000000000))*(npy)*(x229)))))), ((gconst0)*(((((npy)*(sj17)))+(((npx)*(x229)))+(((IkReal(-1.00000000000000))*(npx)*(x228)))))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[4];
IkReal x230=IKcos(j18);
IkReal x231=IKsin(j18);
IkReal x232=((IkReal(1.00000000000000))*(npz));
IkReal x233=((IkReal(0.330080000000000))*(cj16));
IkReal x234=((IkReal(0.330080000000000))*(sj16));
IkReal x235=((IkReal(1.00000000000000))*(x230));
IkReal x236=((npy)*(x231));
evalcond[0]=((IkReal(0.0100000000000000))+(((IkReal(-1.00000000000000))*(npx)*(x231)))+(((IkReal(-1.00000000000000))*(npy)*(x235))));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj17)*(x236)))+(x234)+(((IkReal(-1.00000000000000))*(cj17)*(x232)))+(((npx)*(sj17)*(x230))));
evalcond[2]=((IkReal(0.329950000000000))+(((IkReal(-1.00000000000000))*(cj17)*(npx)*(x235)))+(x233)+(((IkReal(-1.00000000000000))*(sj17)*(x232)))+(((cj17)*(x236))));
evalcond[3]=((((IkReal(0.329950000000000))*(cj17)))+(x236)+(((cj17)*(x233)))+(((IkReal(-1.00000000000000))*(npx)*(x235)))+(((IkReal(-1.00000000000000))*(sj17)*(x234))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j18array[2], cj18array[2], sj18array[2];
bool j18valid[2]={false};
_nj18 = 2;
if( IKabs(((IkReal(-1.00000000000000))*(npy))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(npx))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x237=((IkReal(1.00000000000000))*(IKatan2(((IkReal(-1.00000000000000))*(npy)), ((IkReal(-1.00000000000000))*(npx)))));
if( ((((npy)*(npy))+((npx)*(npx)))) < (IkReal)-0.00001 )
    continue;
if( (((IkReal(0.0100000000000000))*(((IKabs(IKabs(IKsqrt((((npy)*(npy))+((npx)*(npx)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((npy)*(npy))+((npx)*(npx))))))):(IkReal)1.0e30)))) < -1-IKFAST_SINCOS_THRESH || (((IkReal(0.0100000000000000))*(((IKabs(IKabs(IKsqrt((((npy)*(npy))+((npx)*(npx)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((npy)*(npy))+((npx)*(npx))))))):(IkReal)1.0e30)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x238=IKasin(((IkReal(0.0100000000000000))*(((IKabs(IKabs(IKsqrt((((npy)*(npy))+((npx)*(npx)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((npy)*(npy))+((npx)*(npx))))))):(IkReal)1.0e30))));
j18array[0]=((((IkReal(-1.00000000000000))*(x238)))+(((IkReal(-1.00000000000000))*(x237))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
j18array[1]=((IkReal(3.14159265358979))+(x238)+(((IkReal(-1.00000000000000))*(x237))));
sj18array[1]=IKsin(j18array[1]);
cj18array[1]=IKcos(j18array[1]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
if( j18array[1] > IKPI )
{
    j18array[1]-=IK2PI;
}
else if( j18array[1] < -IKPI )
{    j18array[1]+=IK2PI;
}
j18valid[1] = true;
for(int ij18 = 0; ij18 < 2; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 2; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

{
IkReal dummyeval[1];
IkReal gconst6;
IkReal x239=((IkReal(2063.00000000000))*(cj16));
IkReal x240=((npy)*(sj18));
IkReal x241=((cj18)*(npx));
gconst6=IKsign(((((IkReal(-2062.18750000000))*(x241)))+(((x239)*(x240)))+(((IkReal(2062.18750000000))*(x240)))+(((IkReal(2063.00000000000))*(npz)*(sj16)))+(((IkReal(-1.00000000000000))*(x239)*(x241)))));
IkReal x242=((npy)*(sj18));
IkReal x243=((cj18)*(npx));
IkReal x244=((IkReal(1.00039399909077))*(cj16));
dummyeval[0]=((((x242)*(x244)))+(((IkReal(-1.00000000000000))*(x243)))+(((IkReal(-1.00000000000000))*(x243)*(x244)))+(x242)+(((IkReal(1.00039399909077))*(npz)*(sj16))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal x245=((IkReal(1.00039399909077))*(sj16));
dummyeval[0]=((((IkReal(1.00039399909077))*(cj16)*(npz)))+(npz)+(((cj18)*(npx)*(x245)))+(((IkReal(-1.00000000000000))*(npy)*(sj18)*(x245))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
IkReal x246=((IkReal(2063.00000000000))*(sj16));
IkReal x247=((cj18)*(npx));
IkReal x248=((npy)*(sj18));
IkReal x249=((IkReal(6250.00000000000))*(npz));
IkReal x250=((IkReal(12893750.0000000))*(sj16));
IkReal x251=((cj16)*(npz));
if( IKabs(((((IKabs(((((IkReal(12888671.8750000))*(npz)))+(((x247)*(x250)))+(((IkReal(-1.00000000000000))*(x248)*(x250)))+(((IkReal(12893750.0000000))*(x251))))) != 0)?((IkReal)1/(((((IkReal(12888671.8750000))*(npz)))+(((x247)*(x250)))+(((IkReal(-1.00000000000000))*(x248)*(x250)))+(((IkReal(12893750.0000000))*(x251)))))):(IkReal)1.0e30))*(((((IkReal(-4255969.00000000))*((sj16)*(sj16))))+(((IkReal(39062500.0000000))*((npz)*(npz)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((x246)*(x247)))+(((IkReal(2062.18750000000))*(npz)))+(((IkReal(2063.00000000000))*(x251)))+(((IkReal(-1.00000000000000))*(x246)*(x248))))) != 0)?((IkReal)1/(((((x246)*(x247)))+(((IkReal(2062.18750000000))*(npz)))+(((IkReal(2063.00000000000))*(x251)))+(((IkReal(-1.00000000000000))*(x246)*(x248)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(x248)*(x249)))+(((x247)*(x249)))+(((IkReal(680.955040000000))*(cj16)*(sj16)))+(((IkReal(680.686850000000))*(sj16))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(12888671.8750000))*(npz)))+(((x247)*(x250)))+(((IkReal(-1.00000000000000))*(x248)*(x250)))+(((IkReal(12893750.0000000))*(x251))))) != 0)?((IkReal)1/(((((IkReal(12888671.8750000))*(npz)))+(((x247)*(x250)))+(((IkReal(-1.00000000000000))*(x248)*(x250)))+(((IkReal(12893750.0000000))*(x251)))))):(IkReal)1.0e30))*(((((IkReal(-4255969.00000000))*((sj16)*(sj16))))+(((IkReal(39062500.0000000))*((npz)*(npz))))))))+IKsqr(((((IKabs(((((x246)*(x247)))+(((IkReal(2062.18750000000))*(npz)))+(((IkReal(2063.00000000000))*(x251)))+(((IkReal(-1.00000000000000))*(x246)*(x248))))) != 0)?((IkReal)1/(((((x246)*(x247)))+(((IkReal(2062.18750000000))*(npz)))+(((IkReal(2063.00000000000))*(x251)))+(((IkReal(-1.00000000000000))*(x246)*(x248)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(x248)*(x249)))+(((x247)*(x249)))+(((IkReal(680.955040000000))*(cj16)*(sj16)))+(((IkReal(680.686850000000))*(sj16)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((((IKabs(((((IkReal(12888671.8750000))*(npz)))+(((x247)*(x250)))+(((IkReal(-1.00000000000000))*(x248)*(x250)))+(((IkReal(12893750.0000000))*(x251))))) != 0)?((IkReal)1/(((((IkReal(12888671.8750000))*(npz)))+(((x247)*(x250)))+(((IkReal(-1.00000000000000))*(x248)*(x250)))+(((IkReal(12893750.0000000))*(x251)))))):(IkReal)1.0e30))*(((((IkReal(-4255969.00000000))*((sj16)*(sj16))))+(((IkReal(39062500.0000000))*((npz)*(npz))))))), ((((IKabs(((((x246)*(x247)))+(((IkReal(2062.18750000000))*(npz)))+(((IkReal(2063.00000000000))*(x251)))+(((IkReal(-1.00000000000000))*(x246)*(x248))))) != 0)?((IkReal)1/(((((x246)*(x247)))+(((IkReal(2062.18750000000))*(npz)))+(((IkReal(2063.00000000000))*(x251)))+(((IkReal(-1.00000000000000))*(x246)*(x248)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(x248)*(x249)))+(((x247)*(x249)))+(((IkReal(680.955040000000))*(cj16)*(sj16)))+(((IkReal(680.686850000000))*(sj16)))))));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[4];
IkReal x252=IKsin(j17);
IkReal x253=IKcos(j17);
IkReal x254=((npy)*(sj18));
IkReal x255=((IkReal(0.330080000000000))*(cj16));
IkReal x256=((IkReal(1.00000000000000))*(npz));
IkReal x257=((IkReal(0.330080000000000))*(sj16));
IkReal x258=((IkReal(1.00000000000000))*(cj18)*(npx));
evalcond[0]=((((IkReal(-1.00000000000000))*(x256)))+(((x252)*(x255)))+(((x253)*(x257)))+(((IkReal(0.329950000000000))*(x252))));
evalcond[1]=((x257)+(((IkReal(-1.00000000000000))*(x252)*(x254)))+(((IkReal(-1.00000000000000))*(x253)*(x256)))+(((cj18)*(npx)*(x252))));
evalcond[2]=((IkReal(0.329950000000000))+(((x253)*(x254)))+(x255)+(((IkReal(-1.00000000000000))*(x252)*(x256)))+(((IkReal(-1.00000000000000))*(x253)*(x258))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x252)*(x257)))+(((IkReal(-1.00000000000000))*(x258)))+(((x253)*(x255)))+(x254)+(((IkReal(0.329950000000000))*(x253))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
IkReal x259=((IkReal(6250.00000000000))*(npz));
if( IKabs(((gconst6)*(((((IkReal(-1.00000000000000))*(cj18)*(npx)*(x259)))+(((IkReal(680.955040000000))*(cj16)*(sj16)))+(((IkReal(680.686850000000))*(sj16)))+(((npy)*(sj18)*(x259))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst6)*(((IkReal(-680.418765625000))+(((npz)*(x259)))+(((IkReal(-680.955040000000))*((cj16)*(cj16))))+(((IkReal(-1361.37370000000))*(cj16))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j17array[0]=IKatan2(((gconst6)*(((((IkReal(-1.00000000000000))*(cj18)*(npx)*(x259)))+(((IkReal(680.955040000000))*(cj16)*(sj16)))+(((IkReal(680.686850000000))*(sj16)))+(((npy)*(sj18)*(x259)))))), ((gconst6)*(((IkReal(-680.418765625000))+(((npz)*(x259)))+(((IkReal(-680.955040000000))*((cj16)*(cj16))))+(((IkReal(-1361.37370000000))*(cj16)))))));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[4];
IkReal x260=IKsin(j17);
IkReal x261=IKcos(j17);
IkReal x262=((npy)*(sj18));
IkReal x263=((IkReal(0.330080000000000))*(cj16));
IkReal x264=((IkReal(1.00000000000000))*(npz));
IkReal x265=((IkReal(0.330080000000000))*(sj16));
IkReal x266=((IkReal(1.00000000000000))*(cj18)*(npx));
evalcond[0]=((((IkReal(0.329950000000000))*(x260)))+(((x261)*(x265)))+(((x260)*(x263)))+(((IkReal(-1.00000000000000))*(x264))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x261)*(x264)))+(((cj18)*(npx)*(x260)))+(((IkReal(-1.00000000000000))*(x260)*(x262)))+(x265));
evalcond[2]=((IkReal(0.329950000000000))+(((IkReal(-1.00000000000000))*(x260)*(x264)))+(((IkReal(-1.00000000000000))*(x261)*(x266)))+(((x261)*(x262)))+(x263));
evalcond[3]=((((IkReal(-1.00000000000000))*(x260)*(x265)))+(((IkReal(0.329950000000000))*(x261)))+(((x261)*(x263)))+(((IkReal(-1.00000000000000))*(x266)))+(x262));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j18array[2], cj18array[2], sj18array[2];
bool j18valid[2]={false};
_nj18 = 2;
if( IKabs(((IkReal(-1.00000000000000))*(npy))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(npx))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x267=((IkReal(1.00000000000000))*(IKatan2(((IkReal(-1.00000000000000))*(npy)), ((IkReal(-1.00000000000000))*(npx)))));
if( ((((npy)*(npy))+((npx)*(npx)))) < (IkReal)-0.00001 )
    continue;
if( (((IkReal(0.0100000000000000))*(((IKabs(IKabs(IKsqrt((((npy)*(npy))+((npx)*(npx)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((npy)*(npy))+((npx)*(npx))))))):(IkReal)1.0e30)))) < -1-IKFAST_SINCOS_THRESH || (((IkReal(0.0100000000000000))*(((IKabs(IKabs(IKsqrt((((npy)*(npy))+((npx)*(npx)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((npy)*(npy))+((npx)*(npx))))))):(IkReal)1.0e30)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x268=IKasin(((IkReal(0.0100000000000000))*(((IKabs(IKabs(IKsqrt((((npy)*(npy))+((npx)*(npx)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((npy)*(npy))+((npx)*(npx))))))):(IkReal)1.0e30))));
j18array[0]=((((IkReal(-1.00000000000000))*(x267)))+(((IkReal(-1.00000000000000))*(x268))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
j18array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x267)))+(x268));
sj18array[1]=IKsin(j18array[1]);
cj18array[1]=IKcos(j18array[1]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
if( j18array[1] > IKPI )
{
    j18array[1]-=IK2PI;
}
else if( j18array[1] < -IKPI )
{    j18array[1]+=IK2PI;
}
j18valid[1] = true;
for(int ij18 = 0; ij18 < 2; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 2; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

{
IkReal dummyeval[1];
IkReal gconst6;
IkReal x269=((IkReal(2063.00000000000))*(cj16));
IkReal x270=((npy)*(sj18));
IkReal x271=((cj18)*(npx));
gconst6=IKsign(((((IkReal(2062.18750000000))*(x270)))+(((IkReal(-2062.18750000000))*(x271)))+(((x269)*(x270)))+(((IkReal(2063.00000000000))*(npz)*(sj16)))+(((IkReal(-1.00000000000000))*(x269)*(x271)))));
IkReal x272=((npy)*(sj18));
IkReal x273=((cj18)*(npx));
IkReal x274=((IkReal(1.00039399909077))*(cj16));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x273)))+(x272)+(((IkReal(-1.00000000000000))*(x273)*(x274)))+(((x272)*(x274)))+(((IkReal(1.00039399909077))*(npz)*(sj16))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal x275=((IkReal(1.00039399909077))*(sj16));
dummyeval[0]=((((IkReal(1.00039399909077))*(cj16)*(npz)))+(((IkReal(-1.00000000000000))*(npy)*(sj18)*(x275)))+(((cj18)*(npx)*(x275)))+(npz));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
IkReal x276=((IkReal(2063.00000000000))*(sj16));
IkReal x277=((cj18)*(npx));
IkReal x278=((npy)*(sj18));
IkReal x279=((IkReal(6250.00000000000))*(npz));
IkReal x280=((IkReal(12893750.0000000))*(sj16));
IkReal x281=((cj16)*(npz));
if( IKabs(((((IKabs(((((IkReal(12888671.8750000))*(npz)))+(((IkReal(12893750.0000000))*(x281)))+(((IkReal(-1.00000000000000))*(x278)*(x280)))+(((x277)*(x280))))) != 0)?((IkReal)1/(((((IkReal(12888671.8750000))*(npz)))+(((IkReal(12893750.0000000))*(x281)))+(((IkReal(-1.00000000000000))*(x278)*(x280)))+(((x277)*(x280)))))):(IkReal)1.0e30))*(((((IkReal(-4255969.00000000))*((sj16)*(sj16))))+(((IkReal(39062500.0000000))*((npz)*(npz)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(2063.00000000000))*(x281)))+(((IkReal(2062.18750000000))*(npz)))+(((IkReal(-1.00000000000000))*(x276)*(x278)))+(((x276)*(x277))))) != 0)?((IkReal)1/(((((IkReal(2063.00000000000))*(x281)))+(((IkReal(2062.18750000000))*(npz)))+(((IkReal(-1.00000000000000))*(x276)*(x278)))+(((x276)*(x277)))))):(IkReal)1.0e30))*(((((x277)*(x279)))+(((IkReal(680.955040000000))*(cj16)*(sj16)))+(((IkReal(-1.00000000000000))*(x278)*(x279)))+(((IkReal(680.686850000000))*(sj16))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(12888671.8750000))*(npz)))+(((IkReal(12893750.0000000))*(x281)))+(((IkReal(-1.00000000000000))*(x278)*(x280)))+(((x277)*(x280))))) != 0)?((IkReal)1/(((((IkReal(12888671.8750000))*(npz)))+(((IkReal(12893750.0000000))*(x281)))+(((IkReal(-1.00000000000000))*(x278)*(x280)))+(((x277)*(x280)))))):(IkReal)1.0e30))*(((((IkReal(-4255969.00000000))*((sj16)*(sj16))))+(((IkReal(39062500.0000000))*((npz)*(npz))))))))+IKsqr(((((IKabs(((((IkReal(2063.00000000000))*(x281)))+(((IkReal(2062.18750000000))*(npz)))+(((IkReal(-1.00000000000000))*(x276)*(x278)))+(((x276)*(x277))))) != 0)?((IkReal)1/(((((IkReal(2063.00000000000))*(x281)))+(((IkReal(2062.18750000000))*(npz)))+(((IkReal(-1.00000000000000))*(x276)*(x278)))+(((x276)*(x277)))))):(IkReal)1.0e30))*(((((x277)*(x279)))+(((IkReal(680.955040000000))*(cj16)*(sj16)))+(((IkReal(-1.00000000000000))*(x278)*(x279)))+(((IkReal(680.686850000000))*(sj16)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((((IKabs(((((IkReal(12888671.8750000))*(npz)))+(((IkReal(12893750.0000000))*(x281)))+(((IkReal(-1.00000000000000))*(x278)*(x280)))+(((x277)*(x280))))) != 0)?((IkReal)1/(((((IkReal(12888671.8750000))*(npz)))+(((IkReal(12893750.0000000))*(x281)))+(((IkReal(-1.00000000000000))*(x278)*(x280)))+(((x277)*(x280)))))):(IkReal)1.0e30))*(((((IkReal(-4255969.00000000))*((sj16)*(sj16))))+(((IkReal(39062500.0000000))*((npz)*(npz))))))), ((((IKabs(((((IkReal(2063.00000000000))*(x281)))+(((IkReal(2062.18750000000))*(npz)))+(((IkReal(-1.00000000000000))*(x276)*(x278)))+(((x276)*(x277))))) != 0)?((IkReal)1/(((((IkReal(2063.00000000000))*(x281)))+(((IkReal(2062.18750000000))*(npz)))+(((IkReal(-1.00000000000000))*(x276)*(x278)))+(((x276)*(x277)))))):(IkReal)1.0e30))*(((((x277)*(x279)))+(((IkReal(680.955040000000))*(cj16)*(sj16)))+(((IkReal(-1.00000000000000))*(x278)*(x279)))+(((IkReal(680.686850000000))*(sj16)))))));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[4];
IkReal x282=IKsin(j17);
IkReal x283=IKcos(j17);
IkReal x284=((npy)*(sj18));
IkReal x285=((IkReal(0.330080000000000))*(cj16));
IkReal x286=((IkReal(1.00000000000000))*(npz));
IkReal x287=((IkReal(0.330080000000000))*(sj16));
IkReal x288=((IkReal(1.00000000000000))*(cj18)*(npx));
evalcond[0]=((((x282)*(x285)))+(((IkReal(0.329950000000000))*(x282)))+(((x283)*(x287)))+(((IkReal(-1.00000000000000))*(x286))));
evalcond[1]=((x287)+(((cj18)*(npx)*(x282)))+(((IkReal(-1.00000000000000))*(x282)*(x284)))+(((IkReal(-1.00000000000000))*(x283)*(x286))));
evalcond[2]=((IkReal(0.329950000000000))+(((x283)*(x284)))+(x285)+(((IkReal(-1.00000000000000))*(x283)*(x288)))+(((IkReal(-1.00000000000000))*(x282)*(x286))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x288)))+(x284)+(((IkReal(0.329950000000000))*(x283)))+(((IkReal(-1.00000000000000))*(x282)*(x287)))+(((x283)*(x285))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
IkReal x289=((IkReal(6250.00000000000))*(npz));
if( IKabs(((gconst6)*(((((IkReal(680.955040000000))*(cj16)*(sj16)))+(((IkReal(-1.00000000000000))*(cj18)*(npx)*(x289)))+(((npy)*(sj18)*(x289)))+(((IkReal(680.686850000000))*(sj16))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst6)*(((IkReal(-680.418765625000))+(((npz)*(x289)))+(((IkReal(-680.955040000000))*((cj16)*(cj16))))+(((IkReal(-1361.37370000000))*(cj16))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j17array[0]=IKatan2(((gconst6)*(((((IkReal(680.955040000000))*(cj16)*(sj16)))+(((IkReal(-1.00000000000000))*(cj18)*(npx)*(x289)))+(((npy)*(sj18)*(x289)))+(((IkReal(680.686850000000))*(sj16)))))), ((gconst6)*(((IkReal(-680.418765625000))+(((npz)*(x289)))+(((IkReal(-680.955040000000))*((cj16)*(cj16))))+(((IkReal(-1361.37370000000))*(cj16)))))));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[4];
IkReal x290=IKsin(j17);
IkReal x291=IKcos(j17);
IkReal x292=((npy)*(sj18));
IkReal x293=((IkReal(0.330080000000000))*(cj16));
IkReal x294=((IkReal(1.00000000000000))*(npz));
IkReal x295=((IkReal(0.330080000000000))*(sj16));
IkReal x296=((IkReal(1.00000000000000))*(cj18)*(npx));
evalcond[0]=((((x291)*(x295)))+(((IkReal(0.329950000000000))*(x290)))+(((x290)*(x293)))+(((IkReal(-1.00000000000000))*(x294))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x290)*(x292)))+(((IkReal(-1.00000000000000))*(x291)*(x294)))+(x295)+(((cj18)*(npx)*(x290))));
evalcond[2]=((IkReal(0.329950000000000))+(x293)+(((IkReal(-1.00000000000000))*(x290)*(x294)))+(((IkReal(-1.00000000000000))*(x291)*(x296)))+(((x291)*(x292))));
evalcond[3]=((((x291)*(x293)))+(((IkReal(-1.00000000000000))*(x290)*(x295)))+(x292)+(((IkReal(-1.00000000000000))*(x296)))+(((IkReal(0.329950000000000))*(x291))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x63=((cj17)*(r22));
IkReal x64=((IkReal(1.00000000000000))*(sj18));
IkReal x65=((IkReal(1.00000000000000))*(sj16));
IkReal x66=((IkReal(-1.00000000000000))*(sj17));
IkReal x67=((((cj18)*(r00)))+(((IkReal(-1.00000000000000))*(r01)*(x64))));
IkReal x68=((((IkReal(-1.00000000000000))*(r11)*(x64)))+(((cj18)*(r10))));
IkReal x69=((((cj18)*(r20)))+(((IkReal(-1.00000000000000))*(r21)*(x64))));
IkReal x70=((sj17)*(x69));
IkReal x71=((((cj17)*(x67)))+(((r02)*(sj17))));
IkReal x72=((((cj17)*(x68)))+(((r12)*(sj17))));
IkReal x73=((((cj17)*(x69)))+(((r22)*(sj17))));
IkReal x74=((((cj17)*(r02)))+(((x66)*(x67))));
IkReal x75=((((x66)*(x68)))+(((cj17)*(r12))));
new_r00=((((cj16)*(x74)))+(((IkReal(-1.00000000000000))*(x65)*(x71))));
new_r01=((((sj16)*(x74)))+(((cj16)*(x71))));
new_r02=((((cj18)*(r01)))+(((r00)*(sj18))));
new_r10=((((IkReal(-1.00000000000000))*(x65)*(x72)))+(((cj16)*(x75))));
new_r11=((((sj16)*(x75)))+(((cj16)*(x72))));
new_r12=((((r10)*(sj18)))+(((cj18)*(r11))));
new_r20=((((IkReal(-1.00000000000000))*(x65)*(x73)))+(((cj16)*(((((IkReal(-1.00000000000000))*(x70)))+(x63))))));
new_r21=((((sj16)*(((((x66)*(x69)))+(x63)))))+(((cj16)*(x73))));
new_r22=((((cj18)*(r21)))+(((r20)*(sj18))));
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
sj14array[0]=new_r22;
if( sj14array[0] >= -1-IKFAST_SINCOS_THRESH && sj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKasin(sj14array[0]);
    cj14array[0] = IKcos(j14array[0]);
    sj14array[1] = sj14array[0];
    j14array[1] = j14array[0] > 0 ? (IKPI-j14array[0]) : (-IKPI-j14array[0]);
    cj14array[1] = -cj14array[0];
}
else if( isnan(sj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
IkReal dummyeval[1];
IkReal gconst9;
gconst9=IKsign(cj14);
dummyeval[0]=cj14;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst7;
gconst7=IKsign(((((IkReal(-1.00000000000000))*((new_r02)*(new_r02))))+(((IkReal(-1.00000000000000))*((new_r12)*(new_r12))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((new_r02)*(new_r02))))+(((IkReal(-1.00000000000000))*((new_r12)*(new_r12)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst8;
gconst8=IKsign(((((cj14)*(new_r00)*(new_r02)))+(((cj14)*(new_r10)*(new_r12)))));
dummyeval[0]=((((cj14)*(new_r00)*(new_r02)))+(((cj14)*(new_r10)*(new_r12))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
IkReal x76=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j14)), IkReal(6.28318530717959))));
evalcond[1]=x76;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x76;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j13array[2], cj13array[2], sj13array[2];
bool j13valid[2]={false};
_nj13 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x77=IKatan2(new_r02, new_r12);
j13array[0]=((IkReal(-1.00000000000000))*(x77));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
j13array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x77))));
sj13array[1]=IKsin(j13array[1]);
cj13array[1]=IKcos(j13array[1]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
if( j13array[1] > IKPI )
{
    j13array[1]-=IK2PI;
}
else if( j13array[1] < -IKPI )
{    j13array[1]+=IK2PI;
}
j13valid[1] = true;
for(int ij13 = 0; ij13 < 2; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 2; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[1];
evalcond[0]=((((new_r12)*(IKcos(j13))))+(((IkReal(-1.00000000000000))*(new_r02)*(IKsin(j13)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj13)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj13))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj13)))+(((cj13)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj13)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj13)))))+IKsqr(((((new_r10)*(sj13)))+(((cj13)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj13)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj13)))), ((((new_r10)*(sj13)))+(((cj13)*(new_r00)))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[4];
IkReal x78=IKsin(j15);
IkReal x79=((IkReal(1.00000000000000))*(sj13));
IkReal x80=((IkReal(1.00000000000000))*(IKcos(j15)));
evalcond[0]=((((cj13)*(new_r01)))+(((new_r11)*(sj13)))+(x78));
evalcond[1]=((((new_r10)*(sj13)))+(((IkReal(-1.00000000000000))*(x80)))+(((cj13)*(new_r00))));
evalcond[2]=((((cj13)*(new_r10)))+(((IkReal(-1.00000000000000))*(x78)))+(((IkReal(-1.00000000000000))*(new_r00)*(x79))));
evalcond[3]=((((cj13)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x79)))+(((IkReal(-1.00000000000000))*(x80))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j14)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[5]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[6]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j13array[2], cj13array[2], sj13array[2];
bool j13valid[2]={false};
_nj13 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x81=IKatan2(new_r02, new_r12);
j13array[0]=((IkReal(-1.00000000000000))*(x81));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
j13array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x81))));
sj13array[1]=IKsin(j13array[1]);
cj13array[1]=IKcos(j13array[1]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
if( j13array[1] > IKPI )
{
    j13array[1]-=IK2PI;
}
else if( j13array[1] < -IKPI )
{    j13array[1]+=IK2PI;
}
j13valid[1] = true;
for(int ij13 = 0; ij13 < 2; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 2; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[1];
evalcond[0]=((((new_r12)*(IKcos(j13))))+(((IkReal(-1.00000000000000))*(new_r02)*(IKsin(j13)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj13)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj13))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj13)))+(((cj13)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj13)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj13)))))+IKsqr(((((new_r10)*(sj13)))+(((cj13)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj13)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj13)))), ((((new_r10)*(sj13)))+(((cj13)*(new_r00)))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[4];
IkReal x82=IKsin(j15);
IkReal x83=IKcos(j15);
IkReal x84=((IkReal(1.00000000000000))*(sj13));
evalcond[0]=((((cj13)*(new_r01)))+(((new_r11)*(sj13)))+(x82));
evalcond[1]=((((IkReal(-1.00000000000000))*(x83)))+(((new_r10)*(sj13)))+(((cj13)*(new_r00))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x84)))+(((cj13)*(new_r10)))+(x82));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x84)))+(((cj13)*(new_r11)))+(x83));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x85=((gconst8)*(new_r20)*(sj14));
if( IKabs(((new_r02)*(x85))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r12)*(x85))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j13array[0]=IKatan2(((new_r02)*(x85)), ((IkReal(-1.00000000000000))*(new_r12)*(x85)));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x86=IKcos(j13);
IkReal x87=IKsin(j13);
IkReal x88=((IkReal(1.00000000000000))*(cj14));
IkReal x89=((new_r12)*(x86));
IkReal x90=((cj14)*(x86));
IkReal x91=((x87)*(x88));
IkReal x92=((IkReal(1.00000000000000))*(new_r02)*(x87));
evalcond[0]=((((new_r12)*(x87)))+(((new_r02)*(x86))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x88)))+(((IkReal(-1.00000000000000))*(x92)))+(x89));
evalcond[2]=((((new_r20)*(sj14)))+(((IkReal(-1.00000000000000))*(new_r00)*(x91)))+(((new_r10)*(x90))));
evalcond[3]=((((new_r11)*(x90)))+(((IkReal(-1.00000000000000))*(new_r01)*(x91)))+(((new_r21)*(sj14))));
evalcond[4]=((((IkReal(-1.00000000000000))*(sj14)*(x92)))+(((sj14)*(x89)))+(((IkReal(-1.00000000000000))*(new_r22)*(x88))));
evalcond[5]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r02)*(x91)))+(((cj14)*(x89)))+(((new_r22)*(sj14))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst10;
gconst10=IKsign(cj14);
dummyeval[0]=cj14;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj14;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj14;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x93=((IkReal(-1.00000000000000))+(new_r22));
IkReal x94=((((cj13)*(new_r02)))+(((new_r12)*(sj13))));
IkReal x95=((((IkReal(-1.00000000000000))*(new_r02)*(sj13)))+(((cj13)*(new_r12))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j14)), IkReal(6.28318530717959))));
evalcond[1]=x93;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x94;
evalcond[5]=x94;
evalcond[6]=x95;
evalcond[7]=new_r20;
evalcond[8]=new_r21;
evalcond[9]=x95;
evalcond[10]=x93;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj13)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj13))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj13)))+(((cj13)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj13)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj13)))))+IKsqr(((((new_r10)*(sj13)))+(((cj13)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj13)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj13)))), ((((new_r10)*(sj13)))+(((cj13)*(new_r00)))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[4];
IkReal x96=IKsin(j15);
IkReal x97=((IkReal(1.00000000000000))*(sj13));
IkReal x98=((IkReal(1.00000000000000))*(IKcos(j15)));
evalcond[0]=((((cj13)*(new_r01)))+(((new_r11)*(sj13)))+(x96));
evalcond[1]=((((new_r10)*(sj13)))+(((cj13)*(new_r00)))+(((IkReal(-1.00000000000000))*(x98))));
evalcond[2]=((((cj13)*(new_r10)))+(((IkReal(-1.00000000000000))*(x96)))+(((IkReal(-1.00000000000000))*(new_r00)*(x97))));
evalcond[3]=((((cj13)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x97)))+(((IkReal(-1.00000000000000))*(x98))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x99=((cj13)*(new_r12));
IkReal x100=((new_r02)*(sj13));
IkReal x101=((((cj13)*(new_r02)))+(((new_r12)*(sj13))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j14)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x101;
evalcond[5]=x101;
evalcond[6]=((((IkReal(-1.00000000000000))*(x100)))+(x99));
evalcond[7]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[8]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[9]=((((IkReal(-1.00000000000000))*(x99)))+(x100));
evalcond[10]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj13)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj13))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj13)))+(((cj13)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj13)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj13)))))+IKsqr(((((new_r10)*(sj13)))+(((cj13)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj13)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj13)))), ((((new_r10)*(sj13)))+(((cj13)*(new_r00)))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[4];
IkReal x102=IKsin(j15);
IkReal x103=IKcos(j15);
IkReal x104=((IkReal(1.00000000000000))*(sj13));
evalcond[0]=((((cj13)*(new_r01)))+(((new_r11)*(sj13)))+(x102));
evalcond[1]=((((new_r10)*(sj13)))+(((IkReal(-1.00000000000000))*(x103)))+(((cj13)*(new_r00))));
evalcond[2]=((((cj13)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x104)))+(x102));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x104)))+(((cj13)*(new_r11)))+(x103));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj13)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj13))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj14) != 0)?((IkReal)1/(cj14)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj13)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj13)))))+IKsqr(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj14) != 0)?((IkReal)1/(cj14)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj13)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj13)))), ((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj14) != 0)?((IkReal)1/(cj14)):(IkReal)1.0e30))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[8];
IkReal x105=IKsin(j15);
IkReal x106=IKcos(j15);
IkReal x107=((IkReal(1.00000000000000))*(cj14));
IkReal x108=((cj13)*(new_r11));
IkReal x109=((cj13)*(new_r10));
IkReal x110=((IkReal(1.00000000000000))*(x106));
IkReal x111=((IkReal(1.00000000000000))*(new_r00)*(sj13));
IkReal x112=((IkReal(1.00000000000000))*(new_r01)*(sj13));
IkReal x113=((IkReal(1.00000000000000))*(x105));
evalcond[0]=((new_r20)+(((cj14)*(x105))));
evalcond[1]=((new_r21)+(((cj14)*(x106))));
evalcond[2]=((((cj13)*(new_r01)))+(((new_r11)*(sj13)))+(x105));
evalcond[3]=((((new_r10)*(sj13)))+(((IkReal(-1.00000000000000))*(x110)))+(((cj13)*(new_r00))));
evalcond[4]=((((IkReal(-1.00000000000000))*(sj14)*(x113)))+(((IkReal(-1.00000000000000))*(x111)))+(x109));
evalcond[5]=((((IkReal(-1.00000000000000))*(x112)))+(x108)+(((IkReal(-1.00000000000000))*(sj14)*(x110))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r20)*(x107)))+(((IkReal(-1.00000000000000))*(x113)))+(((sj14)*(x109)))+(((IkReal(-1.00000000000000))*(sj14)*(x111))));
evalcond[7]=((((sj14)*(x108)))+(((IkReal(-1.00000000000000))*(sj14)*(x112)))+(((IkReal(-1.00000000000000))*(new_r21)*(x107)))+(((IkReal(-1.00000000000000))*(x110))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(cj14) != 0)?((IkReal)1/(cj14)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj13)))+(((cj13)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(cj14) != 0)?((IkReal)1/(cj14)):(IkReal)1.0e30))))+IKsqr(((((new_r10)*(sj13)))+(((cj13)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(cj14) != 0)?((IkReal)1/(cj14)):(IkReal)1.0e30))), ((((new_r10)*(sj13)))+(((cj13)*(new_r00)))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[8];
IkReal x114=IKsin(j15);
IkReal x115=IKcos(j15);
IkReal x116=((IkReal(1.00000000000000))*(cj14));
IkReal x117=((cj13)*(new_r11));
IkReal x118=((cj13)*(new_r10));
IkReal x119=((IkReal(1.00000000000000))*(x115));
IkReal x120=((IkReal(1.00000000000000))*(new_r00)*(sj13));
IkReal x121=((IkReal(1.00000000000000))*(new_r01)*(sj13));
IkReal x122=((IkReal(1.00000000000000))*(x114));
evalcond[0]=((new_r20)+(((cj14)*(x114))));
evalcond[1]=((new_r21)+(((cj14)*(x115))));
evalcond[2]=((((cj13)*(new_r01)))+(((new_r11)*(sj13)))+(x114));
evalcond[3]=((((new_r10)*(sj13)))+(((cj13)*(new_r00)))+(((IkReal(-1.00000000000000))*(x119))));
evalcond[4]=((((IkReal(-1.00000000000000))*(sj14)*(x122)))+(((IkReal(-1.00000000000000))*(x120)))+(x118));
evalcond[5]=((((IkReal(-1.00000000000000))*(sj14)*(x119)))+(x117)+(((IkReal(-1.00000000000000))*(x121))));
evalcond[6]=((((sj14)*(x118)))+(((IkReal(-1.00000000000000))*(sj14)*(x120)))+(((IkReal(-1.00000000000000))*(x122)))+(((IkReal(-1.00000000000000))*(new_r20)*(x116))));
evalcond[7]=((((sj14)*(x117)))+(((IkReal(-1.00000000000000))*(sj14)*(x121)))+(((IkReal(-1.00000000000000))*(new_r21)*(x116)))+(((IkReal(-1.00000000000000))*(x119))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x123=((IkReal(-1.00000000000000))*(gconst10));
if( IKabs(((new_r20)*(x123))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r21)*(x123))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j15array[0]=IKatan2(((new_r20)*(x123)), ((new_r21)*(x123)));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[8];
IkReal x124=IKsin(j15);
IkReal x125=IKcos(j15);
IkReal x126=((IkReal(1.00000000000000))*(cj14));
IkReal x127=((cj13)*(new_r11));
IkReal x128=((cj13)*(new_r10));
IkReal x129=((IkReal(1.00000000000000))*(x125));
IkReal x130=((IkReal(1.00000000000000))*(new_r00)*(sj13));
IkReal x131=((IkReal(1.00000000000000))*(new_r01)*(sj13));
IkReal x132=((IkReal(1.00000000000000))*(x124));
evalcond[0]=((new_r20)+(((cj14)*(x124))));
evalcond[1]=((new_r21)+(((cj14)*(x125))));
evalcond[2]=((((cj13)*(new_r01)))+(((new_r11)*(sj13)))+(x124));
evalcond[3]=((((new_r10)*(sj13)))+(((IkReal(-1.00000000000000))*(x129)))+(((cj13)*(new_r00))));
evalcond[4]=((x128)+(((IkReal(-1.00000000000000))*(sj14)*(x132)))+(((IkReal(-1.00000000000000))*(x130))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x131)))+(x127)+(((IkReal(-1.00000000000000))*(sj14)*(x129))));
evalcond[6]=((((IkReal(-1.00000000000000))*(sj14)*(x130)))+(((IkReal(-1.00000000000000))*(new_r20)*(x126)))+(((sj14)*(x128)))+(((IkReal(-1.00000000000000))*(x132))));
evalcond[7]=((((sj14)*(x127)))+(((IkReal(-1.00000000000000))*(new_r21)*(x126)))+(((IkReal(-1.00000000000000))*(x129)))+(((IkReal(-1.00000000000000))*(sj14)*(x131))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x133=((cj14)*(gconst7));
if( IKabs(((new_r02)*(x133))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r12)*(x133))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j13array[0]=IKatan2(((new_r02)*(x133)), ((IkReal(-1.00000000000000))*(new_r12)*(x133)));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x134=IKcos(j13);
IkReal x135=IKsin(j13);
IkReal x136=((IkReal(1.00000000000000))*(cj14));
IkReal x137=((new_r12)*(x134));
IkReal x138=((cj14)*(x134));
IkReal x139=((x135)*(x136));
IkReal x140=((IkReal(1.00000000000000))*(new_r02)*(x135));
evalcond[0]=((((new_r02)*(x134)))+(((new_r12)*(x135))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x136)))+(((IkReal(-1.00000000000000))*(x140)))+(x137));
evalcond[2]=((((new_r20)*(sj14)))+(((new_r10)*(x138)))+(((IkReal(-1.00000000000000))*(new_r00)*(x139))));
evalcond[3]=((((new_r11)*(x138)))+(((new_r21)*(sj14)))+(((IkReal(-1.00000000000000))*(new_r01)*(x139))));
evalcond[4]=((((IkReal(-1.00000000000000))*(sj14)*(x140)))+(((IkReal(-1.00000000000000))*(new_r22)*(x136)))+(((sj14)*(x137))));
evalcond[5]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r02)*(x139)))+(((cj14)*(x137)))+(((new_r22)*(sj14))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst10;
gconst10=IKsign(cj14);
dummyeval[0]=cj14;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj14;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj14;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x141=((IkReal(-1.00000000000000))+(new_r22));
IkReal x142=((((cj13)*(new_r02)))+(((new_r12)*(sj13))));
IkReal x143=((((IkReal(-1.00000000000000))*(new_r02)*(sj13)))+(((cj13)*(new_r12))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j14)), IkReal(6.28318530717959))));
evalcond[1]=x141;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x142;
evalcond[5]=x142;
evalcond[6]=x143;
evalcond[7]=new_r20;
evalcond[8]=new_r21;
evalcond[9]=x143;
evalcond[10]=x141;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj13)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj13))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj13)))+(((cj13)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj13)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj13)))))+IKsqr(((((new_r10)*(sj13)))+(((cj13)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj13)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj13)))), ((((new_r10)*(sj13)))+(((cj13)*(new_r00)))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[4];
IkReal x144=IKsin(j15);
IkReal x145=((IkReal(1.00000000000000))*(sj13));
IkReal x146=((IkReal(1.00000000000000))*(IKcos(j15)));
evalcond[0]=((((cj13)*(new_r01)))+(((new_r11)*(sj13)))+(x144));
evalcond[1]=((((new_r10)*(sj13)))+(((IkReal(-1.00000000000000))*(x146)))+(((cj13)*(new_r00))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x145)))+(((cj13)*(new_r10)))+(((IkReal(-1.00000000000000))*(x144))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x145)))+(((cj13)*(new_r11)))+(((IkReal(-1.00000000000000))*(x146))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x147=((cj13)*(new_r12));
IkReal x148=((new_r02)*(sj13));
IkReal x149=((((cj13)*(new_r02)))+(((new_r12)*(sj13))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j14)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x149;
evalcond[5]=x149;
evalcond[6]=((((IkReal(-1.00000000000000))*(x148)))+(x147));
evalcond[7]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[8]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[9]=((((IkReal(-1.00000000000000))*(x147)))+(x148));
evalcond[10]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj13)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj13))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj13)))+(((cj13)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj13)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj13)))))+IKsqr(((((new_r10)*(sj13)))+(((cj13)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj13)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj13)))), ((((new_r10)*(sj13)))+(((cj13)*(new_r00)))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[4];
IkReal x150=IKsin(j15);
IkReal x151=IKcos(j15);
IkReal x152=((IkReal(1.00000000000000))*(sj13));
evalcond[0]=((((cj13)*(new_r01)))+(x150)+(((new_r11)*(sj13))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x151)))+(((new_r10)*(sj13)))+(((cj13)*(new_r00))));
evalcond[2]=((((cj13)*(new_r10)))+(x150)+(((IkReal(-1.00000000000000))*(new_r00)*(x152))));
evalcond[3]=((x151)+(((cj13)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x152))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj13)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj13))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj14) != 0)?((IkReal)1/(cj14)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj13)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj13)))))+IKsqr(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj14) != 0)?((IkReal)1/(cj14)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj13)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj13)))), ((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj14) != 0)?((IkReal)1/(cj14)):(IkReal)1.0e30))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[8];
IkReal x153=IKsin(j15);
IkReal x154=IKcos(j15);
IkReal x155=((IkReal(1.00000000000000))*(cj14));
IkReal x156=((cj13)*(new_r11));
IkReal x157=((cj13)*(new_r10));
IkReal x158=((IkReal(1.00000000000000))*(x154));
IkReal x159=((IkReal(1.00000000000000))*(new_r00)*(sj13));
IkReal x160=((IkReal(1.00000000000000))*(new_r01)*(sj13));
IkReal x161=((IkReal(1.00000000000000))*(x153));
evalcond[0]=((new_r20)+(((cj14)*(x153))));
evalcond[1]=((new_r21)+(((cj14)*(x154))));
evalcond[2]=((((cj13)*(new_r01)))+(x153)+(((new_r11)*(sj13))));
evalcond[3]=((((new_r10)*(sj13)))+(((IkReal(-1.00000000000000))*(x158)))+(((cj13)*(new_r00))));
evalcond[4]=((x157)+(((IkReal(-1.00000000000000))*(sj14)*(x161)))+(((IkReal(-1.00000000000000))*(x159))));
evalcond[5]=((x156)+(((IkReal(-1.00000000000000))*(x160)))+(((IkReal(-1.00000000000000))*(sj14)*(x158))));
evalcond[6]=((((sj14)*(x157)))+(((IkReal(-1.00000000000000))*(new_r20)*(x155)))+(((IkReal(-1.00000000000000))*(x161)))+(((IkReal(-1.00000000000000))*(sj14)*(x159))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r21)*(x155)))+(((IkReal(-1.00000000000000))*(sj14)*(x160)))+(((IkReal(-1.00000000000000))*(x158)))+(((sj14)*(x156))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(cj14) != 0)?((IkReal)1/(cj14)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj13)))+(((cj13)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(cj14) != 0)?((IkReal)1/(cj14)):(IkReal)1.0e30))))+IKsqr(((((new_r10)*(sj13)))+(((cj13)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(cj14) != 0)?((IkReal)1/(cj14)):(IkReal)1.0e30))), ((((new_r10)*(sj13)))+(((cj13)*(new_r00)))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[8];
IkReal x162=IKsin(j15);
IkReal x163=IKcos(j15);
IkReal x164=((IkReal(1.00000000000000))*(cj14));
IkReal x165=((cj13)*(new_r11));
IkReal x166=((cj13)*(new_r10));
IkReal x167=((IkReal(1.00000000000000))*(x163));
IkReal x168=((IkReal(1.00000000000000))*(new_r00)*(sj13));
IkReal x169=((IkReal(1.00000000000000))*(new_r01)*(sj13));
IkReal x170=((IkReal(1.00000000000000))*(x162));
evalcond[0]=((((cj14)*(x162)))+(new_r20));
evalcond[1]=((new_r21)+(((cj14)*(x163))));
evalcond[2]=((((cj13)*(new_r01)))+(((new_r11)*(sj13)))+(x162));
evalcond[3]=((((new_r10)*(sj13)))+(((IkReal(-1.00000000000000))*(x167)))+(((cj13)*(new_r00))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x168)))+(((IkReal(-1.00000000000000))*(sj14)*(x170)))+(x166));
evalcond[5]=((((IkReal(-1.00000000000000))*(x169)))+(x165)+(((IkReal(-1.00000000000000))*(sj14)*(x167))));
evalcond[6]=((((IkReal(-1.00000000000000))*(sj14)*(x168)))+(((IkReal(-1.00000000000000))*(new_r20)*(x164)))+(((sj14)*(x166)))+(((IkReal(-1.00000000000000))*(x170))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r21)*(x164)))+(((IkReal(-1.00000000000000))*(x167)))+(((sj14)*(x165)))+(((IkReal(-1.00000000000000))*(sj14)*(x169))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x171=((IkReal(-1.00000000000000))*(gconst10));
if( IKabs(((new_r20)*(x171))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r21)*(x171))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j15array[0]=IKatan2(((new_r20)*(x171)), ((new_r21)*(x171)));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[8];
IkReal x172=IKsin(j15);
IkReal x173=IKcos(j15);
IkReal x174=((IkReal(1.00000000000000))*(cj14));
IkReal x175=((cj13)*(new_r11));
IkReal x176=((cj13)*(new_r10));
IkReal x177=((IkReal(1.00000000000000))*(x173));
IkReal x178=((IkReal(1.00000000000000))*(new_r00)*(sj13));
IkReal x179=((IkReal(1.00000000000000))*(new_r01)*(sj13));
IkReal x180=((IkReal(1.00000000000000))*(x172));
evalcond[0]=((new_r20)+(((cj14)*(x172))));
evalcond[1]=((((cj14)*(x173)))+(new_r21));
evalcond[2]=((((cj13)*(new_r01)))+(x172)+(((new_r11)*(sj13))));
evalcond[3]=((((new_r10)*(sj13)))+(((IkReal(-1.00000000000000))*(x177)))+(((cj13)*(new_r00))));
evalcond[4]=((x176)+(((IkReal(-1.00000000000000))*(x178)))+(((IkReal(-1.00000000000000))*(sj14)*(x180))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x179)))+(x175)+(((IkReal(-1.00000000000000))*(sj14)*(x177))));
evalcond[6]=((((IkReal(-1.00000000000000))*(sj14)*(x178)))+(((sj14)*(x176)))+(((IkReal(-1.00000000000000))*(x180)))+(((IkReal(-1.00000000000000))*(new_r20)*(x174))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r21)*(x174)))+(((sj14)*(x175)))+(((IkReal(-1.00000000000000))*(sj14)*(x179)))+(((IkReal(-1.00000000000000))*(x177))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x181=((IkReal(-1.00000000000000))*(gconst9));
if( IKabs(((new_r20)*(x181))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r21)*(x181))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j15array[0]=IKatan2(((new_r20)*(x181)), ((new_r21)*(x181)));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[2];
evalcond[0]=((new_r20)+(((cj14)*(IKsin(j15)))));
evalcond[1]=((new_r21)+(((cj14)*(IKcos(j15)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst11;
gconst11=IKsign(((((IkReal(-1.00000000000000))*(new_r02)*(new_r11)))+(((new_r01)*(new_r12)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r02)*(new_r11)))+(((new_r01)*(new_r12))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst12;
gconst12=IKsign(((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x182=((cj15)*(gconst12));
if( IKabs(((new_r02)*(x182))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r12)*(x182))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j13array[0]=IKatan2(((new_r02)*(x182)), ((IkReal(-1.00000000000000))*(new_r12)*(x182)));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[12];
IkReal x183=IKcos(j13);
IkReal x184=IKsin(j13);
IkReal x185=((IkReal(1.00000000000000))*(cj15));
IkReal x186=((IkReal(1.00000000000000))*(sj15));
IkReal x187=((IkReal(1.00000000000000))*(cj14));
IkReal x188=((new_r02)*(x184));
IkReal x189=((new_r11)*(x183));
IkReal x190=((new_r10)*(x183));
IkReal x191=((IkReal(1.00000000000000))*(x184));
IkReal x192=((new_r12)*(x183));
evalcond[0]=((((new_r02)*(x183)))+(((new_r12)*(x184))));
evalcond[1]=((((new_r01)*(x183)))+(sj15)+(((new_r11)*(x184))));
evalcond[2]=((((new_r10)*(x184)))+(((IkReal(-1.00000000000000))*(x185)))+(((new_r00)*(x183))));
evalcond[3]=((x192)+(((IkReal(-1.00000000000000))*(x188)))+(((IkReal(-1.00000000000000))*(x187))));
evalcond[4]=((x190)+(((IkReal(-1.00000000000000))*(new_r00)*(x191)))+(((IkReal(-1.00000000000000))*(sj14)*(x186))));
evalcond[5]=((((IkReal(-1.00000000000000))*(new_r01)*(x191)))+(x189)+(((IkReal(-1.00000000000000))*(sj14)*(x185))));
evalcond[6]=((((cj14)*(x190)))+(((new_r20)*(sj14)))+(((IkReal(-1.00000000000000))*(new_r00)*(x184)*(x187))));
evalcond[7]=((((cj14)*(x189)))+(((IkReal(-1.00000000000000))*(new_r01)*(x184)*(x187)))+(((new_r21)*(sj14))));
evalcond[8]=((((sj14)*(x192)))+(((IkReal(-1.00000000000000))*(new_r22)*(x187)))+(((IkReal(-1.00000000000000))*(sj14)*(x188))));
evalcond[9]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(x187)*(x188)))+(((new_r22)*(sj14)))+(((cj14)*(x192))));
evalcond[10]=((((sj14)*(x190)))+(((IkReal(-1.00000000000000))*(new_r20)*(x187)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj14)*(x191)))+(((IkReal(-1.00000000000000))*(x186))));
evalcond[11]=((((IkReal(-1.00000000000000))*(new_r21)*(x187)))+(((IkReal(-1.00000000000000))*(x185)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj14)*(x191)))+(((sj14)*(x189))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x193=((gconst11)*(sj15));
if( IKabs(((new_r02)*(x193))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r12)*(x193))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j13array[0]=IKatan2(((new_r02)*(x193)), ((IkReal(-1.00000000000000))*(new_r12)*(x193)));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[12];
IkReal x194=IKcos(j13);
IkReal x195=IKsin(j13);
IkReal x196=((IkReal(1.00000000000000))*(cj15));
IkReal x197=((IkReal(1.00000000000000))*(sj15));
IkReal x198=((IkReal(1.00000000000000))*(cj14));
IkReal x199=((new_r02)*(x195));
IkReal x200=((new_r11)*(x194));
IkReal x201=((new_r10)*(x194));
IkReal x202=((IkReal(1.00000000000000))*(x195));
IkReal x203=((new_r12)*(x194));
evalcond[0]=((((new_r12)*(x195)))+(((new_r02)*(x194))));
evalcond[1]=((((new_r11)*(x195)))+(((new_r01)*(x194)))+(sj15));
evalcond[2]=((((new_r00)*(x194)))+(((IkReal(-1.00000000000000))*(x196)))+(((new_r10)*(x195))));
evalcond[3]=((x203)+(((IkReal(-1.00000000000000))*(x198)))+(((IkReal(-1.00000000000000))*(x199))));
evalcond[4]=((x201)+(((IkReal(-1.00000000000000))*(new_r00)*(x202)))+(((IkReal(-1.00000000000000))*(sj14)*(x197))));
evalcond[5]=((((IkReal(-1.00000000000000))*(sj14)*(x196)))+(x200)+(((IkReal(-1.00000000000000))*(new_r01)*(x202))));
evalcond[6]=((((new_r20)*(sj14)))+(((IkReal(-1.00000000000000))*(new_r00)*(x195)*(x198)))+(((cj14)*(x201))));
evalcond[7]=((((cj14)*(x200)))+(((new_r21)*(sj14)))+(((IkReal(-1.00000000000000))*(new_r01)*(x195)*(x198))));
evalcond[8]=((((IkReal(-1.00000000000000))*(sj14)*(x199)))+(((IkReal(-1.00000000000000))*(new_r22)*(x198)))+(((sj14)*(x203))));
evalcond[9]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(x198)*(x199)))+(((cj14)*(x203)))+(((new_r22)*(sj14))));
evalcond[10]=((((IkReal(-1.00000000000000))*(new_r20)*(x198)))+(((sj14)*(x201)))+(((IkReal(-1.00000000000000))*(x197)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj14)*(x202))));
evalcond[11]=((((IkReal(-1.00000000000000))*(new_r21)*(x198)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj14)*(x202)))+(((IkReal(-1.00000000000000))*(x196)))+(((sj14)*(x200))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "e888b9f8cb1ed38b9ea56194abfcb71d"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
