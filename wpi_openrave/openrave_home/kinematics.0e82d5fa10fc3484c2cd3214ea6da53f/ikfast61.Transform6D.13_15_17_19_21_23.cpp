/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 61 generated on 2013-03-22 14:02:59.354312
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==61);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72,x73,x74,x75,x76,x77,x78,x79,x80,x81;
x0=IKsin(j[0]);
x1=IKcos(j[0]);
x2=IKcos(j[2]);
x3=IKsin(j[1]);
x4=IKsin(j[2]);
x5=IKcos(j[3]);
x6=IKcos(j[1]);
x7=IKsin(j[3]);
x8=IKsin(j[4]);
x9=IKcos(j[4]);
x10=IKsin(j[5]);
x11=IKcos(j[5]);
x12=((IkReal(0.0777371000000000))*(x8));
x13=((IkReal(0.163958060000000))*(x4));
x14=((IkReal(0.707106781186548))*(x11));
x15=((IkReal(0.707106781186548))*(x8));
x16=((IkReal(1.72792099421454e-6))*(x2));
x17=((IkReal(1.00000000000000e-6))*(x9));
x18=((IkReal(0.0110681000000000))*(x6));
x19=((IkReal(1.00000000000000))*(x4));
x20=((IkReal(1.00000000000000))*(x7));
x21=((IkReal(0.0219906200000000))*(x3));
x22=((IkReal(0.0219935900000000))*(x4));
x23=((IkReal(1.00000000000000))*(x0));
x24=((IkReal(0.707106781186548))*(x10));
x25=((IkReal(1.00000000000000))*(x8));
x26=((IkReal(1.00000000000000))*(x2));
x27=((IkReal(0.182004560000000))*(x6));
x28=((IkReal(0.0219906200000000))*(x4));
x29=((IkReal(0.707106781186548))*(x9));
x30=((IkReal(1.72792099421454e-6))*(x4));
x31=((IkReal(0.0777371000000000))*(x9));
x32=((IkReal(1.00000000000000))*(x9));
x33=((IkReal(-1.00000000000000))*(x8));
x34=((x0)*(x3));
x35=((x0)*(x2));
x36=((x3)*(x5));
x37=((x1)*(x4));
x38=((x6)*(x8));
x39=((x2)*(x9));
x40=((x5)*(x6));
x41=((IkReal(-1.00000000000000))*(x9));
x42=((x6)*(x7));
x43=((x1)*(x2));
x44=((x3)*(x7));
x45=((x1)*(x3));
x46=((x0)*(x20)*(x6));
x47=((x2)*(x29)*(x6));
x48=((x19)*(x45));
x49=((((x34)*(x4)))+(x43));
x50=((((IkReal(-1.00000000000000))*(x1)*(x19)))+(((x2)*(x34))));
x51=((x44)+(((x4)*(x40))));
x52=((((IkReal(-1.00000000000000))*(x19)*(x42)))+(x36));
x53=((((IkReal(-1.00000000000000))*(x48)))+(x35));
x54=((x48)+(((IkReal(-1.00000000000000))*(x2)*(x23))));
x55=((((IkReal(-1.00000000000000))*(x1)*(x26)))+(((IkReal(-1.00000000000000))*(x19)*(x34))));
x56=((((IkReal(-1.00000000000000))*(x0)*(x19)))+(((IkReal(-1.00000000000000))*(x26)*(x45))));
x57=((x50)*(x8));
x58=((x49)*(x5));
x59=((x5)*(x53));
x60=((x51)*(x9));
x61=((x29)*(x50));
x62=((x14)*(x52));
x63=((x54)*(x7));
x64=((x56)*(x8));
x65=((x55)*(x7));
x66=((x15)*(((((IkReal(-1.00000000000000))*(x20)*(x3)))+(((IkReal(-1.00000000000000))*(x19)*(x40))))));
x67=((x29)*(x56));
x68=((x58)+(((IkReal(-1.00000000000000))*(x46))));
x69=((x59)+(((x1)*(x42))));
x70=((((IkReal(-1.00000000000000))*(x23)*(x40)))+(x65));
x71=((x68)*(x9));
x72=((x15)*(((x46)+(((IkReal(-1.00000000000000))*(x58))))));
x73=((x14)*(((x63)+(((x1)*(x40))))));
x74=((x66)+(x47));
x75=((x14)*(x70));
x76=((x24)*(((((IkReal(-1.00000000000000))*(x2)*(x25)*(x6)))+(((IkReal(-1.00000000000000))*(x32)*(x51))))));
x77=((x15)*(((((IkReal(-1.00000000000000))*(x1)*(x42)))+(((IkReal(-1.00000000000000))*(x59))))));
x78=((x61)+(x72));
x79=((((IkReal(-1.00000000000000))*(x25)*(x56)))+(((IkReal(-1.00000000000000))*(x32)*(x69))));
x80=((x62)+(x76));
x81=((x67)+(x77));
eerot[0]=((((x24)*(((((x33)*(x50)))+(((x41)*(x68)))))))+(((IkReal(-1.00000000000000))*(x78)))+(x75));
eerot[1]=((x75)+(x78)+(((x24)*(((((IkReal(-1.00000000000000))*(x32)*(x68)))+(((IkReal(-1.00000000000000))*(x25)*(x50))))))));
eerot[2]=((((x10)*(x70)))+(((x11)*(((x57)+(x71))))));
IkReal x82=((x0)*(x42));
IkReal x83=((x0)*(x40));
IkReal x84=((IkReal(1.00000000000000))*(x0));
eetrans[0]=((IkReal(0.0122581200000000))+(((IkReal(-0.163958060000000))*(x83)))+(((x9)*(((((IkReal(0.0110681000000000))*(x2)*(x34)))+(((IkReal(-0.0110681000000000))*(x37)))))))+(((IkReal(-1.00000000000000))*(x27)*(x84)))+(((IkReal(0.0219906200000000))*(x82)))+(((x22)*(x34)))+(((x9)*(((((IkReal(1.72792099421454e-6))*(x58)))+(((IkReal(-1.72792099421454e-6))*(x82)))))))+(((x10)*(((((IkReal(-1.00000000000000))*(x31)*(x68)))+(((IkReal(-1.00000000000000))*(x12)*(x50)))))))+(((x8)*(((((x0)*(x18)*(x7)))+(((IkReal(-0.0110681000000000))*(x58)))))))+(((IkReal(0.0219935900000000))*(x43)))+(((x5)*(((((IkReal(-1.00000000000000))*(x21)*(x4)*(x84)))+(((IkReal(-0.0219906200000000))*(x43)))))))+(((x10)*(((((IkReal(-1.00000000000000e-6))*(x65)))+(((IkReal(1.00000000000000e-6))*(x83)))))))+(((x11)*(((((IkReal(-1.00000000000000e-6))*(x57)))+(((IkReal(-1.00000000000000e-6))*(x71)))))))+(((x11)*(((((IkReal(0.0777371000000000))*(x65)))+(((IkReal(-0.0777371000000000))*(x83)))))))+(((x8)*(((((IkReal(-1.00000000000000))*(x1)*(x30)))+(((x16)*(x34)))))))+(((x7)*(((((IkReal(-1.00000000000000))*(x13)*(x34)))+(((IkReal(-0.163958060000000))*(x43))))))));
eerot[3]=((x80)+(((IkReal(-1.00000000000000))*(x74))));
eerot[4]=((x74)+(x80));
eerot[5]=((((x11)*(((x60)+(((x2)*(x38)))))))+(((x10)*(x52))));
IkReal x85=((IkReal(1.00000000000000))*(x51));
IkReal x86=((x4)*(x42));
eetrans[1]=((IkReal(-0.211026872287262))+(((x9)*(((((IkReal(1.72792099421454e-6))*(x44)))+(((x30)*(x40)))))))+(((IkReal(0.163958060000000))*(x36)))+(((x16)*(x38)))+(((x18)*(x39)))+(((x8)*(((((IkReal(-0.0110681000000000))*(x44)))+(((IkReal(-1.00000000000000))*(x18)*(x4)*(x5)))))))+(((IkReal(-1.00000000000000))*(x13)*(x42)))+(((IkReal(-1.00000000000000))*(x28)*(x40)))+(((x10)*(((((IkReal(-1.00000000000000e-6))*(x36)))+(((IkReal(1.00000000000000e-6))*(x86)))))))+(((IkReal(-1.00000000000000))*(x21)*(x7)))+(((x11)*(((((IkReal(-1.00000000000000e-6))*(x2)*(x38)))+(((IkReal(-1.00000000000000))*(x17)*(x85)))))))+(((x22)*(x6)))+(((x10)*(((((IkReal(-1.00000000000000))*(x12)*(x2)*(x6)))+(((IkReal(-1.00000000000000))*(x31)*(x85)))))))+(((x11)*(((((IkReal(-0.0777371000000000))*(x86)))+(((IkReal(0.0777371000000000))*(x36)))))))+(((IkReal(0.182004560000000))*(x3))));
eerot[6]=((((IkReal(-1.00000000000000))*(x24)*(((((x33)*(x56)))+(((x41)*(x69)))))))+(((IkReal(-1.00000000000000))*(x73)))+(x81));
eerot[7]=((((IkReal(-1.00000000000000))*(x73)))+(((IkReal(-1.00000000000000))*(x24)*(x79)))+(((IkReal(-1.00000000000000))*(x81))));
eerot[8]=((((x10)*(((((IkReal(-1.00000000000000))*(x1)*(x40)))+(((IkReal(-1.00000000000000))*(x20)*(x54)))))))+(((x11)*(x79))));
IkReal x87=((x1)*(x42));
IkReal x88=((x1)*(x40));
eetrans[2]=((IkReal(0.0486356000000000))+(((IkReal(-1.00000000000000))*(x1)*(x27)))+(((x8)*(((((x16)*(x45)))+(((x0)*(x30)))))))+(((x7)*(((((IkReal(-1.00000000000000))*(x13)*(x45)))+(((IkReal(0.163958060000000))*(x35)))))))+(((IkReal(0.0219906200000000))*(x87)))+(((x11)*(((((IkReal(-0.0777371000000000))*(x88)))+(((IkReal(-0.0777371000000000))*(x63)))))))+(((x22)*(x45)))+(((IkReal(-0.0219935900000000))*(x35)))+(((x8)*(((((x1)*(x18)*(x7)))+(((IkReal(0.0110681000000000))*(x59)))))))+(((x10)*(((((x31)*(x69)))+(((x12)*(x56)))))))+(((x9)*(((((IkReal(-1.72792099421454e-6))*(x87)))+(((IkReal(-1.72792099421454e-6))*(x59)))))))+(((x5)*(((((IkReal(0.0219906200000000))*(x35)))+(((IkReal(-1.00000000000000))*(x21)*(x37)))))))+(((x9)*(((((IkReal(0.0110681000000000))*(x0)*(x4)))+(((IkReal(0.0110681000000000))*(x3)*(x43)))))))+(((x11)*(((((IkReal(1.00000000000000e-6))*(x64)))+(((x17)*(x69)))))))+(((x10)*(((((IkReal(1.00000000000000e-6))*(x63)))+(((IkReal(1.00000000000000e-6))*(x88)))))))+(((IkReal(-0.163958060000000))*(x88))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j13,cj13,sj13,htj13,j15,cj15,sj15,htj15,j17,cj17,sj17,htj17,j19,cj19,sj19,htj19,j21,cj21,sj21,htj21,j23,cj23,sj23,htj23,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij13[2], _nj13,_ij15[2], _nj15,_ij17[2], _nj17,_ij19[2], _nj19,_ij21[2], _nj21,_ij23[2], _nj23;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j13=numeric_limits<IkReal>::quiet_NaN(); _ij13[0] = -1; _ij13[1] = -1; _nj13 = -1; j15=numeric_limits<IkReal>::quiet_NaN(); _ij15[0] = -1; _ij15[1] = -1; _nj15 = -1; j17=numeric_limits<IkReal>::quiet_NaN(); _ij17[0] = -1; _ij17[1] = -1; _nj17 = -1; j19=numeric_limits<IkReal>::quiet_NaN(); _ij19[0] = -1; _ij19[1] = -1; _nj19 = -1; j21=numeric_limits<IkReal>::quiet_NaN(); _ij21[0] = -1; _ij21[1] = -1; _nj21 = -1; j23=numeric_limits<IkReal>::quiet_NaN(); _ij23[0] = -1; _ij23[1] = -1; _nj23 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r02;
new_r01=((((IkReal(0.707106781186548))*(r01)))+(((IkReal(0.707106781186548))*(r00))));
new_r02=((((IkReal(-0.707106781186548))*(r00)))+(((IkReal(0.707106781186548))*(r01))));
new_px=((IkReal(-0.0122581200000000))+(((IkReal(1.00000000000000e-6))*(r02)))+(px)+(((IkReal(-0.0471421019949259))*(r00)))+(((IkReal(-0.0627947591246276))*(r01))));
new_r10=((IkReal(-1.00000000000000))*(r22));
new_r11=((((IkReal(-0.707106781186548))*(r20)))+(((IkReal(-0.707106781186548))*(r21))));
new_r12=((((IkReal(0.707106781186548))*(r20)))+(((IkReal(-0.707106781186548))*(r21))));
new_py=((IkReal(0.0486356000000000))+(((IkReal(0.0627947591246276))*(r21)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(0.0471421019949259))*(r20)))+(((IkReal(-1.00000000000000e-6))*(r22))));
new_r20=r12;
new_r21=((((IkReal(0.707106781186548))*(r10)))+(((IkReal(0.707106781186548))*(r11))));
new_r22=((((IkReal(-0.707106781186548))*(r10)))+(((IkReal(0.707106781186548))*(r11))));
new_pz=((IkReal(0.211026872287262))+(((IkReal(-0.0627947591246276))*(r11)))+(((IkReal(1.00000000000000e-6))*(r12)))+(((IkReal(-0.0471421019949259))*(r10)))+(py));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((pz)*(pz))+((py)*(py)));
npx=((((py)*(r10)))+(((pz)*(r20)))+(((px)*(r00))));
npy=((((px)*(r01)))+(((pz)*(r21)))+(((py)*(r11))));
npz=((((py)*(r12)))+(((pz)*(r22)))+(((px)*(r02))));
rxp0_0=((((IkReal(-1.00000000000000))*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((IkReal(-1.00000000000000))*(pz)*(r00))));
rxp0_2=((((py)*(r00)))+(((IkReal(-1.00000000000000))*(px)*(r10))));
rxp1_0=((((pz)*(r11)))+(((IkReal(-1.00000000000000))*(py)*(r21))));
rxp1_1=((((IkReal(-1.00000000000000))*(pz)*(r01)))+(((px)*(r21))));
rxp1_2=((((py)*(r01)))+(((IkReal(-1.00000000000000))*(px)*(r11))));
rxp2_0=((((IkReal(-1.00000000000000))*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((IkReal(-1.00000000000000))*(pz)*(r02))));
rxp2_2=((((py)*(r02)))+(((IkReal(-1.00000000000000))*(px)*(r12))));
{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=((IkReal(-0.345962620000000))+(npy));
IkReal gconst1;
gconst1=((IkReal(2.00000000000000))*(npx));
IkReal gconst2;
gconst2=((IkReal(-0.345962620000000))+(((IkReal(-1.00000000000000))*(npy))));
IkReal gconst3;
gconst3=((IkReal(0.119690134443100))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(3.45584198842907e-6))*(npx))));
IkReal gconst4;
gconst4=((IkReal(-6.91168397685815e-6))*(npy));
IkReal gconst5;
gconst5=((IkReal(0.119690134443100))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-3.45584198842907e-6))*(npx))));
IkReal gconst6;
gconst6=((IkReal(-0.345962620000000))+(npy));
IkReal gconst7;
gconst7=((IkReal(2.00000000000000))*(npx));
IkReal gconst8;
gconst8=((IkReal(-0.345962620000000))+(((IkReal(-1.00000000000000))*(npy))));
IkReal gconst9;
gconst9=((IkReal(0.119690134443100))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(3.45584198842907e-6))*(npx))));
IkReal gconst10;
gconst10=((IkReal(-6.91168397685815e-6))*(npy));
IkReal gconst11;
gconst11=((IkReal(0.119690134443100))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-3.45584198842907e-6))*(npx))));
IkReal gconst12;
gconst12=IkReal(0.0439871800000000);
IkReal gconst13;
gconst13=IkReal(0.0439871800000000);
IkReal gconst14;
gconst14=IkReal(-0.0304336778642504);
IkReal gconst15;
gconst15=IkReal(-0.0304336778642504);
IkReal gconst16;
gconst16=IkReal(0.0439871800000000);
IkReal gconst17;
gconst17=IkReal(0.0439871800000000);
IkReal gconst18;
gconst18=IkReal(-0.0304336778642504);
IkReal gconst19;
gconst19=IkReal(-0.0304336778642504);
IkReal gconst20;
gconst20=((IkReal(0.0180465000000000))+(npy));
IkReal gconst21;
gconst21=((IkReal(2.00000000000000))*(npx));
IkReal gconst22;
gconst22=((IkReal(0.0180465000000000))+(((IkReal(-1.00000000000000))*(npy))));
IkReal gconst23;
gconst23=((IkReal(0.00226028688858839))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(3.45584198842907e-6))*(npx))));
IkReal gconst24;
gconst24=((IkReal(-6.91168397685815e-6))*(npy));
IkReal gconst25;
gconst25=((IkReal(0.00226028688858839))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-3.45584198842907e-6))*(npx))));
IkReal gconst26;
gconst26=((IkReal(0.0180465000000000))+(npy));
IkReal gconst27;
gconst27=((IkReal(2.00000000000000))*(npx));
IkReal gconst28;
gconst28=((IkReal(0.0180465000000000))+(((IkReal(-1.00000000000000))*(npy))));
IkReal gconst29;
gconst29=((IkReal(0.00226028688858839))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(3.45584198842907e-6))*(npx))));
IkReal gconst30;
gconst30=((IkReal(-6.91168397685815e-6))*(npy));
IkReal gconst31;
gconst31=((IkReal(0.00226028688858839))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-3.45584198842907e-6))*(npx))));
IkReal x89=((gconst22)*(gconst29));
IkReal x90=((gconst21)*(gconst25));
IkReal x91=((gconst26)*(gconst30));
IkReal x92=((gconst20)*(gconst25));
IkReal x93=((gconst26)*(gconst31));
dummyeval[0]=((((gconst28)*(gconst29)*(x92)))+(((gconst22)*(gconst23)*(x93)))+(((x90)*(x91)))+(((IkReal(-1.00000000000000))*(gconst23)*(gconst28)*(x89)))+(((IkReal(-1.00000000000000))*(gconst27)*(gconst29)*(x90)))+(((IkReal(-1.00000000000000))*(gconst22)*(gconst24)*(x91)))+(((IkReal(-1.00000000000000))*(x92)*(x93)))+(((gconst24)*(gconst27)*(x89))));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[8+1], zeror[8];
int numroots;
IkReal x94=((gconst27)*(gconst29));
IkReal x95=((gconst22)*(gconst4));
IkReal x96=((IkReal(1.00000000000000))*(gconst25));
IkReal x97=((gconst19)*(gconst26));
IkReal x98=((IkReal(1.00000000000000))*(gconst3));
IkReal x99=((gconst8)*(gconst9));
IkReal x100=((gconst17)*(gconst18));
IkReal x101=((gconst20)*(gconst25));
IkReal x102=((gconst0)*(gconst5));
IkReal x103=((IkReal(1.00000000000000))*(gconst11));
IkReal x104=((gconst22)*(gconst23));
IkReal x105=((gconst16)*(gconst19));
IkReal x106=((gconst27)*(gconst9));
IkReal x107=((gconst11)*(gconst6));
IkReal x108=((gconst13)*(gconst3));
IkReal x109=((gconst2)*(gconst8));
IkReal x110=((gconst14)*(gconst2));
IkReal x111=((gconst11)*(gconst16));
IkReal x112=((gconst7)*(gconst9));
IkReal x113=((gconst13)*(gconst4));
IkReal x114=((gconst15)*(gconst20));
IkReal x115=((gconst2)*(gconst23));
IkReal x116=((gconst28)*(gconst29));
IkReal x117=((gconst17)*(gconst9));
IkReal x118=((IkReal(1.00000000000000))*(gconst21));
IkReal x119=((gconst26)*(gconst31));
IkReal x120=((gconst22)*(gconst3));
IkReal x121=((gconst17)*(gconst29));
IkReal x122=((gconst12)*(gconst25));
IkReal x123=((IkReal(1.00000000000000))*(gconst5));
IkReal x124=((gconst19)*(gconst6));
IkReal x125=((gconst18)*(gconst28));
IkReal x126=((gconst29)*(gconst8));
IkReal x127=((gconst13)*(gconst23));
IkReal x128=((gconst10)*(gconst6));
IkReal x129=((gconst2)*(gconst24));
IkReal x130=((IkReal(1.00000000000000))*(gconst15));
IkReal x131=((gconst1)*(gconst25));
IkReal x132=((gconst22)*(gconst24));
IkReal x133=((IkReal(1.00000000000000))*(gconst14));
IkReal x134=((gconst0)*(gconst25));
IkReal x135=((gconst1)*(gconst7));
IkReal x136=((gconst2)*(gconst3));
IkReal x137=((gconst26)*(gconst30));
IkReal x138=((gconst31)*(gconst6));
IkReal x139=((IkReal(1.00000000000000))*(gconst10));
IkReal x140=((gconst15)*(gconst6));
IkReal x141=((gconst2)*(gconst4));
IkReal x142=((gconst1)*(gconst15));
IkReal x143=((gconst18)*(gconst7));
IkReal x144=((gconst12)*(gconst16));
IkReal x145=((gconst18)*(gconst27));
IkReal x146=((gconst12)*(gconst5));
IkReal x147=((gconst28)*(gconst9));
IkReal x148=((gconst21)*(gconst5));
IkReal x149=((gconst1)*(gconst5));
IkReal x150=((gconst10)*(gconst26));
IkReal x151=((gconst16)*(gconst31));
IkReal x152=((gconst14)*(gconst22));
IkReal x153=((gconst13)*(gconst14));
IkReal x154=((gconst11)*(gconst26));
IkReal x155=((gconst12)*(gconst15));
IkReal x156=((gconst20)*(gconst5));
IkReal x157=((gconst0)*(gconst15));
IkReal x158=((gconst13)*(gconst24));
IkReal x159=((gconst18)*(gconst8));
IkReal x160=((gconst21)*(gconst25));
IkReal x161=((gconst29)*(gconst7));
IkReal x162=((gconst10)*(gconst16));
IkReal x163=((gconst20)*(x151));
IkReal x164=((gconst0)*(x159));
IkReal x165=((gconst15)*(gconst21)*(gconst30));
IkReal x166=((gconst18)*(x133));
IkReal x167=((IkReal(1.00000000000000))*(gconst30)*(gconst6));
IkReal x168=((gconst30)*(x160));
IkReal x169=((IkReal(1.00000000000000))*(gconst16)*(gconst30));
op[0]=((((IkReal(-1.00000000000000))*(gconst20)*(x119)*(x96)))+(((x137)*(x160)))+(((IkReal(-1.00000000000000))*(x104)*(x116)))+(((x104)*(x119)))+(((IkReal(-1.00000000000000))*(x132)*(x137)))+(((x132)*(x94)))+(((IkReal(-1.00000000000000))*(gconst21)*(x94)*(x96)))+(((x101)*(x116))));
op[1]=((((IkReal(-1.00000000000000))*(gconst20)*(x96)*(x97)))+(((x119)*(x152)))+(((x101)*(x125)))+(((x119)*(x127)))+(((x158)*(x94)))+(((IkReal(-1.00000000000000))*(gconst22)*(x116)*(x133)))+(((gconst16)*(x168)))+(((IkReal(-1.00000000000000))*(gconst12)*(x119)*(x96)))+(((IkReal(-1.00000000000000))*(x116)*(x127)))+(((x114)*(x116)))+(((IkReal(-1.00000000000000))*(x132)*(x169)))+(((x104)*(x97)))+(((IkReal(-1.00000000000000))*(x137)*(x158)))+(((x132)*(x145)))+(((IkReal(-1.00000000000000))*(x104)*(x121)))+(((x101)*(x121)))+(((x104)*(x151)))+(((gconst15)*(gconst21)*(x137)))+(((IkReal(-1.00000000000000))*(x163)*(x96)))+(((IkReal(-1.00000000000000))*(x114)*(x119)))+(((IkReal(-1.00000000000000))*(x104)*(x125)))+(((IkReal(-1.00000000000000))*(gconst21)*(x145)*(x96)))+(((x116)*(x122)))+(((IkReal(-1.00000000000000))*(gconst15)*(x118)*(x94))));
op[2]=((((x116)*(x155)))+(((IkReal(-1.00000000000000))*(x132)*(x167)))+(((IkReal(-1.00000000000000))*(gconst20)*(x119)*(x123)))+(((x145)*(x158)))+(((x114)*(x125)))+(((IkReal(-1.00000000000000))*(gconst20)*(x138)*(x96)))+(((IkReal(-1.00000000000000))*(gconst12)*(x119)*(x130)))+(((x127)*(x97)))+(((IkReal(-1.00000000000000))*(x104)*(x126)))+(((IkReal(-1.00000000000000))*(gconst1)*(x94)*(x96)))+(((x101)*(x147)))+(((x152)*(x97)))+(((x137)*(x148)))+(((IkReal(-1.00000000000000))*(gconst21)*(x106)*(x96)))+(((x106)*(x132)))+(((IkReal(-1.00000000000000))*(gconst22)*(x116)*(x98)))+(((IkReal(-1.00000000000000))*(x114)*(x97)))+(((IkReal(-1.00000000000000))*(x114)*(x151)))+(((IkReal(-1.00000000000000))*(x121)*(x127)))+(((x119)*(x153)))+(((IkReal(-1.00000000000000))*(x104)*(x147)))+(((x101)*(x126)))+(((x94)*(x95)))+(((IkReal(-1.00000000000000))*(gconst20)*(x154)*(x96)))+(((x104)*(x138)))+(((x104)*(x105)))+(((x119)*(x120)))+(((x116)*(x156)))+(((IkReal(-1.00000000000000))*(gconst26)*(x132)*(x139)))+(((IkReal(-1.00000000000000))*(gconst22)*(x121)*(x133)))+(((x131)*(x137)))+(((x129)*(x94)))+(((IkReal(-1.00000000000000))*(gconst12)*(x96)*(x97)))+(((IkReal(-1.00000000000000))*(gconst22)*(x125)*(x133)))+(((IkReal(-1.00000000000000))*(x137)*(x95)))+(((gconst16)*(x165)))+(((IkReal(-1.00000000000000))*(gconst13)*(x116)*(x133)))+(((IkReal(-1.00000000000000))*(gconst15)*(x118)*(x145)))+(((x150)*(x160)))+(((IkReal(-1.00000000000000))*(x100)*(x104)))+(((IkReal(-1.00000000000000))*(gconst20)*(x105)*(x96)))+(((x132)*(x161)))+(((IkReal(-1.00000000000000))*(gconst5)*(x118)*(x94)))+(((IkReal(-1.00000000000000))*(gconst31)*(x144)*(x96)))+(((x114)*(x121)))+(((x151)*(x152)))+(((IkReal(-1.00000000000000))*(gconst0)*(x119)*(x96)))+(((IkReal(-1.00000000000000))*(x115)*(x116)))+(((IkReal(-1.00000000000000))*(x158)*(x169)))+(((x116)*(x134)))+(((IkReal(-1.00000000000000))*(x125)*(x127)))+(((IkReal(-1.00000000000000))*(gconst21)*(x161)*(x96)))+(((x122)*(x125)))+(((gconst6)*(x168)))+(((x100)*(x101)))+(((x127)*(x151)))+(((x121)*(x122)))+(((IkReal(-1.00000000000000))*(x129)*(x137)))+(((x115)*(x119)))+(((x104)*(x154))));
op[3]=((((gconst11)*(gconst13)*(gconst23)*(gconst26)))+(((gconst18)*(gconst22)*(gconst24)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst15)*(gconst19)*(gconst26)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst16)*(gconst19)*(gconst20)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst24)*(gconst30)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst21)*(gconst27)*(gconst9)))+(((gconst16)*(gconst21)*(gconst30)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst20)*(gconst31)*(gconst5)))+(((gconst0)*(gconst17)*(gconst25)*(gconst29)))+(((gconst18)*(gconst20)*(gconst28)*(gconst5)))+(((gconst15)*(gconst17)*(gconst18)*(gconst20)))+(((IkReal(-1.00000000000000))*(gconst19)*(gconst20)*(gconst25)*(gconst6)))+(((gconst10)*(gconst16)*(gconst21)*(gconst25)))+(((gconst18)*(gconst20)*(gconst25)*(gconst8)))+(((gconst17)*(gconst20)*(gconst29)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst23)*(gconst28)*(gconst9)))+(((gconst15)*(gconst20)*(gconst29)*(gconst8)))+(((gconst13)*(gconst23)*(gconst31)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst19)*(gconst20)*(gconst26)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst22)*(gconst30)*(gconst4)))+(((gconst15)*(gconst20)*(gconst28)*(gconst9)))+(((gconst17)*(gconst20)*(gconst25)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst16)*(gconst25)*(gconst31)))+(((gconst0)*(gconst18)*(gconst25)*(gconst28)))+(((gconst12)*(gconst25)*(gconst29)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst2)*(gconst28)*(gconst29)))+(((gconst15)*(gconst21)*(gconst30)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst22)*(gconst28)*(gconst9)))+(((gconst19)*(gconst22)*(gconst23)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst17)*(gconst2)*(gconst23)*(gconst29)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst14)*(gconst18)*(gconst28)))+(((gconst14)*(gconst2)*(gconst26)*(gconst31)))+(((gconst11)*(gconst14)*(gconst22)*(gconst26)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst15)*(gconst26)*(gconst31)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst16)*(gconst19)*(gconst25)))+(((gconst12)*(gconst15)*(gconst17)*(gconst29)))+(((gconst16)*(gconst22)*(gconst3)*(gconst31)))+(((gconst13)*(gconst14)*(gconst16)*(gconst31)))+(((gconst13)*(gconst27)*(gconst29)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst21)*(gconst29)*(gconst7)))+(((gconst19)*(gconst2)*(gconst23)*(gconst26)))+(((gconst13)*(gconst16)*(gconst19)*(gconst23)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst13)*(gconst24)*(gconst26)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst26)*(gconst31)*(gconst5)))+(((gconst13)*(gconst24)*(gconst29)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst28)*(gconst29)*(gconst3)))+(((gconst12)*(gconst15)*(gconst18)*(gconst28)))+(((IkReal(-1.00000000000000))*(gconst18)*(gconst21)*(gconst27)*(gconst5)))+(((gconst13)*(gconst24)*(gconst27)*(gconst9)))+(((gconst12)*(gconst28)*(gconst29)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst17)*(gconst22)*(gconst29)*(gconst3)))+(((gconst18)*(gconst2)*(gconst24)*(gconst27)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst16)*(gconst22)*(gconst24)))+(((gconst1)*(gconst16)*(gconst25)*(gconst30)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst19)*(gconst25)*(gconst26)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst15)*(gconst16)*(gconst31)))+(((IkReal(-1.00000000000000))*(gconst18)*(gconst22)*(gconst23)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst14)*(gconst17)*(gconst29)))+(((gconst12)*(gconst17)*(gconst18)*(gconst25)))+(((gconst18)*(gconst22)*(gconst27)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst17)*(gconst18)*(gconst23)))+(((gconst1)*(gconst15)*(gconst26)*(gconst30)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst17)*(gconst18)*(gconst22)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst15)*(gconst20)*(gconst26)))+(((gconst11)*(gconst16)*(gconst22)*(gconst23)))+(((gconst13)*(gconst14)*(gconst19)*(gconst26)))+(((gconst0)*(gconst15)*(gconst28)*(gconst29)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst18)*(gconst25)*(gconst27)))+(((IkReal(-1.00000000000000))*(gconst18)*(gconst22)*(gconst28)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst18)*(gconst2)*(gconst23)*(gconst28)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst25)*(gconst31)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst12)*(gconst25)*(gconst26)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst22)*(gconst29)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst18)*(gconst21)*(gconst25)*(gconst7)))+(((gconst13)*(gconst26)*(gconst3)*(gconst31)))+(((gconst12)*(gconst25)*(gconst28)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst15)*(gconst27)*(gconst29)))+(((IkReal(-1.00000000000000))*(gconst17)*(gconst22)*(gconst23)*(gconst9)))+(((gconst14)*(gconst16)*(gconst19)*(gconst22)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst26)*(gconst30)*(gconst4)))+(((gconst14)*(gconst22)*(gconst31)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst23)*(gconst29)*(gconst8)))+(((gconst16)*(gconst2)*(gconst23)*(gconst31)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst20)*(gconst31)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst16)*(gconst20)*(gconst25)))+(((gconst19)*(gconst22)*(gconst26)*(gconst3)))+(((gconst10)*(gconst15)*(gconst21)*(gconst26)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst2)*(gconst24)*(gconst30))));
op[4]=((((gconst2)*(gconst26)*(gconst3)*(gconst31)))+(((IkReal(-1.00000000000000))*(gconst22)*(gconst23)*(gconst8)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst20)*(gconst26)*(gconst5)))+(((gconst11)*(gconst2)*(gconst23)*(gconst26)))+(((gconst15)*(gconst17)*(gconst20)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst21)*(gconst27)*(gconst5)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst17)*(gconst18)*(gconst2)*(gconst23)))+(((gconst1)*(gconst15)*(gconst16)*(gconst30)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst26)*(gconst31)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst15)*(gconst16)*(gconst20)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst14)*(gconst28)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst12)*(gconst16)*(gconst25)))+(((IkReal(-1.00000000000000))*(gconst21)*(gconst29)*(gconst5)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst25)*(gconst27)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst15)*(gconst18)*(gconst27)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst16)*(gconst31)*(gconst5)))+(((gconst0)*(gconst15)*(gconst17)*(gconst29)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst20)*(gconst25)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst25)*(gconst31)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst2)*(gconst24)*(gconst26)))+(((gconst1)*(gconst10)*(gconst25)*(gconst26)))+(((gconst12)*(gconst17)*(gconst25)*(gconst9)))+(((gconst0)*(gconst25)*(gconst28)*(gconst9)))+(((gconst16)*(gconst19)*(gconst2)*(gconst23)))+(((gconst13)*(gconst18)*(gconst27)*(gconst4)))+(((gconst2)*(gconst24)*(gconst27)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst11)*(gconst25)*(gconst26)))+(((IkReal(-1.00000000000000))*(gconst2)*(gconst23)*(gconst29)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst14)*(gconst17)*(gconst18)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst15)*(gconst19)*(gconst26)))+(((gconst0)*(gconst17)*(gconst18)*(gconst25)))+(((gconst11)*(gconst13)*(gconst16)*(gconst23)))+(((gconst20)*(gconst25)*(gconst8)*(gconst9)))+(((gconst2)*(gconst23)*(gconst31)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst18)*(gconst2)*(gconst28)))+(((IkReal(-1.00000000000000))*(gconst22)*(gconst28)*(gconst3)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst18)*(gconst28)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst19)*(gconst25)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst12)*(gconst15)*(gconst26)))+(((gconst0)*(gconst28)*(gconst29)*(gconst5)))+(((gconst1)*(gconst26)*(gconst30)*(gconst5)))+(((gconst22)*(gconst3)*(gconst31)*(gconst6)))+(((gconst14)*(gconst19)*(gconst2)*(gconst26)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst17)*(gconst22)*(gconst9)))+(((gconst10)*(gconst15)*(gconst16)*(gconst21)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst15)*(gconst16)*(gconst31)))+(((gconst16)*(gconst19)*(gconst22)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst18)*(gconst22)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst22)*(gconst29)*(gconst3)*(gconst8)))+(((gconst11)*(gconst22)*(gconst26)*(gconst3)))+(((gconst22)*(gconst27)*(gconst4)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst18)*(gconst21)*(gconst7)))+(((gconst14)*(gconst16)*(gconst2)*(gconst31)))+(((IkReal(-1.00000000000000))*(gconst17)*(gconst18)*(gconst22)*(gconst3)))+(((gconst13)*(gconst19)*(gconst23)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst20)*(gconst31)*(gconst5)*(gconst6)))+(((gconst22)*(gconst24)*(gconst7)*(gconst9)))+(((gconst12)*(gconst18)*(gconst28)*(gconst5)))+(((gconst12)*(gconst15)*(gconst29)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst15)*(gconst31)*(gconst6)))+(((gconst12)*(gconst15)*(gconst28)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst19)*(gconst20)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst13)*(gconst16)*(gconst24)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst19)*(gconst26)*(gconst5)))+(((gconst15)*(gconst18)*(gconst20)*(gconst8)))+(((gconst12)*(gconst15)*(gconst17)*(gconst18)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst16)*(gconst19)*(gconst25)))+(((gconst0)*(gconst25)*(gconst29)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst16)*(gconst30)*(gconst4)))+(((gconst13)*(gconst18)*(gconst24)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst25)*(gconst29)*(gconst7)))+(((gconst11)*(gconst13)*(gconst14)*(gconst26)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst27)*(gconst29)*(gconst5)))+(((gconst2)*(gconst27)*(gconst29)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst21)*(gconst25)*(gconst7)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst2)*(gconst24)*(gconst30)*(gconst6)))+(((gconst20)*(gconst29)*(gconst5)*(gconst8)))+(((gconst13)*(gconst14)*(gconst16)*(gconst19)))+(((gconst13)*(gconst14)*(gconst31)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst22)*(gconst26)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst17)*(gconst23)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst22)*(gconst24)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst2)*(gconst26)*(gconst30)*(gconst4)))+(((gconst0)*(gconst15)*(gconst18)*(gconst28)))+(((gconst14)*(gconst19)*(gconst22)*(gconst6)))+(((gconst22)*(gconst29)*(gconst4)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst17)*(gconst29)*(gconst3)))+(((gconst11)*(gconst22)*(gconst23)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst2)*(gconst23)*(gconst28)*(gconst9)))+(((gconst10)*(gconst21)*(gconst26)*(gconst5)))+(((gconst11)*(gconst14)*(gconst16)*(gconst22)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst17)*(gconst2)*(gconst29)))+(((gconst12)*(gconst18)*(gconst25)*(gconst8)))+(((gconst13)*(gconst19)*(gconst26)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst19)*(gconst20)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst18)*(gconst23)*(gconst8)))+(((gconst21)*(gconst30)*(gconst5)*(gconst6)))+(((gconst20)*(gconst28)*(gconst5)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst15)*(gconst16)*(gconst19)))+(((gconst12)*(gconst17)*(gconst29)*(gconst5)))+(((gconst13)*(gconst16)*(gconst3)*(gconst31)))+(((gconst2)*(gconst24)*(gconst29)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst2)*(gconst28)*(gconst29)*(gconst3)))+(((gconst17)*(gconst18)*(gconst20)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst22)*(gconst30)*(gconst4)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst14)*(gconst29)*(gconst8)))+(((gconst10)*(gconst21)*(gconst25)*(gconst6)))+(((gconst1)*(gconst25)*(gconst30)*(gconst6))));
op[5]=((((IkReal(-1.00000000000000))*(gconst10)*(gconst13)*(gconst24)*(gconst6)))+(((gconst13)*(gconst16)*(gconst19)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst31)*(gconst5)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst15)*(gconst20)*(gconst6)))+(((gconst11)*(gconst13)*(gconst26)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst12)*(gconst26)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst16)*(gconst31)*(gconst5)))+(((gconst19)*(gconst2)*(gconst26)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst18)*(gconst25)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst22)*(gconst8)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst17)*(gconst18)*(gconst2)))+(((gconst11)*(gconst13)*(gconst23)*(gconst6)))+(((gconst18)*(gconst2)*(gconst24)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst28)*(gconst3)*(gconst9)))+(((gconst19)*(gconst22)*(gconst3)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst12)*(gconst25)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst19)*(gconst26)*(gconst5)))+(((gconst18)*(gconst22)*(gconst4)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst2)*(gconst29)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst17)*(gconst2)*(gconst29)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst21)*(gconst7)*(gconst9)))+(((gconst0)*(gconst15)*(gconst17)*(gconst18)))+(((IkReal(-1.00000000000000))*(gconst18)*(gconst2)*(gconst28)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst2)*(gconst30)*(gconst4)))+(((gconst0)*(gconst18)*(gconst28)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst18)*(gconst21)*(gconst5)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst19)*(gconst20)*(gconst5)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst19)*(gconst25)*(gconst6)))+(((gconst11)*(gconst16)*(gconst2)*(gconst23)))+(((gconst12)*(gconst29)*(gconst5)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst15)*(gconst16)*(gconst19)))+(((gconst10)*(gconst15)*(gconst21)*(gconst6)))+(((gconst1)*(gconst15)*(gconst30)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst11)*(gconst15)*(gconst26)))+(((gconst0)*(gconst17)*(gconst25)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst16)*(gconst19)*(gconst5)))+(((gconst12)*(gconst15)*(gconst18)*(gconst8)))+(((gconst13)*(gconst29)*(gconst4)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst23)*(gconst8)*(gconst9)))+(((gconst12)*(gconst25)*(gconst8)*(gconst9)))+(((gconst12)*(gconst15)*(gconst17)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst14)*(gconst17)*(gconst9)))+(((gconst11)*(gconst16)*(gconst22)*(gconst3)))+(((gconst13)*(gconst14)*(gconst19)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst17)*(gconst22)*(gconst3)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst15)*(gconst31)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst30)*(gconst4)*(gconst6)))+(((gconst13)*(gconst27)*(gconst4)*(gconst9)))+(((gconst13)*(gconst24)*(gconst7)*(gconst9)))+(((gconst1)*(gconst16)*(gconst30)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst18)*(gconst22)*(gconst3)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst2)*(gconst28)*(gconst9)))+(((gconst0)*(gconst17)*(gconst29)*(gconst5)))+(((gconst11)*(gconst14)*(gconst2)*(gconst26)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst14)*(gconst18)*(gconst8)))+(((gconst12)*(gconst28)*(gconst5)*(gconst9)))+(((gconst0)*(gconst15)*(gconst29)*(gconst8)))+(((gconst0)*(gconst15)*(gconst28)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst29)*(gconst3)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst16)*(gconst20)*(gconst5)))+(((gconst15)*(gconst20)*(gconst8)*(gconst9)))+(((gconst1)*(gconst10)*(gconst16)*(gconst25)))+(((gconst19)*(gconst2)*(gconst23)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst13)*(gconst26)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst15)*(gconst27)*(gconst9)))+(((gconst16)*(gconst2)*(gconst3)*(gconst31)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst12)*(gconst15)*(gconst16)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst17)*(gconst18)*(gconst3)))+(((gconst11)*(gconst13)*(gconst14)*(gconst16)))+(((IkReal(-1.00000000000000))*(gconst18)*(gconst2)*(gconst23)*(gconst8)))+(((gconst12)*(gconst17)*(gconst18)*(gconst5)))+(((gconst11)*(gconst14)*(gconst22)*(gconst6)))+(((gconst0)*(gconst18)*(gconst25)*(gconst8)))+(((gconst14)*(gconst16)*(gconst19)*(gconst2)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst18)*(gconst27)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst15)*(gconst19)*(gconst6)))+(((gconst13)*(gconst3)*(gconst31)*(gconst6)))+(((gconst10)*(gconst16)*(gconst21)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst16)*(gconst2)*(gconst24)))+(((IkReal(-1.00000000000000))*(gconst17)*(gconst2)*(gconst23)*(gconst9)))+(((gconst18)*(gconst20)*(gconst5)*(gconst8)))+(((gconst1)*(gconst10)*(gconst15)*(gconst26)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst11)*(gconst16)*(gconst25)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst15)*(gconst29)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst16)*(gconst22)*(gconst4)))+(((gconst18)*(gconst2)*(gconst27)*(gconst4)))+(((gconst17)*(gconst20)*(gconst5)*(gconst9)))+(((gconst14)*(gconst2)*(gconst31)*(gconst6))));
op[6]=((((IkReal(-1.00000000000000))*(gconst26)*(x102)*(x103)))+(((x117)*(x157)))+(((IkReal(-1.00000000000000))*(gconst0)*(x124)*(x130)))+(((x112)*(x95)))+(((x134)*(x99)))+(((x107)*(x153)))+(((IkReal(-1.00000000000000))*(gconst0)*(x107)*(x96)))+(((IkReal(-1.00000000000000))*(gconst1)*(x112)*(x96)))+(((x110)*(x111)))+(((IkReal(-1.00000000000000))*(gconst29)*(x123)*(x135)))+(((x107)*(x120)))+(((IkReal(-1.00000000000000))*(gconst16)*(x113)*(x139)))+(((x107)*(x115)))+(((x108)*(x111)))+(((x156)*(x99)))+(((IkReal(-1.00000000000000))*(x141)*(x167)))+(((IkReal(-1.00000000000000))*(x102)*(x105)))+(((IkReal(-1.00000000000000))*(gconst1)*(x106)*(x123)))+(((IkReal(-1.00000000000000))*(gconst5)*(x103)*(x144)))+(((x117)*(x146)))+(((IkReal(-1.00000000000000))*(gconst22)*(x98)*(x99)))+(((x157)*(x159)))+(((IkReal(-1.00000000000000))*(gconst5)*(x112)*(x118)))+(((x102)*(x126)))+(((x146)*(x159)))+(((x102)*(x147)))+(((IkReal(-1.00000000000000))*(x109)*(x166)))+(((x100)*(x102)))+(((IkReal(-1.00000000000000))*(gconst12)*(x103)*(x140)))+(((x108)*(x124)))+(((IkReal(-1.00000000000000))*(gconst6)*(x103)*(x156)))+(((x142)*(x162)))+(((gconst30)*(gconst6)*(x149)))+(((IkReal(-1.00000000000000))*(x128)*(x95)))+(((x155)*(x99)))+(((IkReal(-1.00000000000000))*(gconst16)*(x103)*(x157)))+(((x112)*(x129)))+(((IkReal(-1.00000000000000))*(x110)*(x117)))+(((x110)*(x124)))+(((x149)*(x150)))+(((IkReal(-1.00000000000000))*(gconst13)*(x133)*(x99)))+(((IkReal(-1.00000000000000))*(gconst12)*(x123)*(x124)))+(((IkReal(-1.00000000000000))*(gconst29)*(x109)*(x98)))+(((x136)*(x154)))+(((IkReal(-1.00000000000000))*(gconst2)*(x147)*(x98)))+(((x128)*(x131)))+(((x141)*(x161)))+(((x105)*(x136)))+(((IkReal(-1.00000000000000))*(gconst18)*(x130)*(x135)))+(((x113)*(x143)))+(((x106)*(x141)))+(((x128)*(x148)))+(((IkReal(-1.00000000000000))*(x115)*(x99)))+(((IkReal(-1.00000000000000))*(gconst13)*(x159)*(x98)))+(((IkReal(-1.00000000000000))*(gconst26)*(x139)*(x141)))+(((IkReal(-1.00000000000000))*(x102)*(x138)))+(((IkReal(-1.00000000000000))*(gconst13)*(x117)*(x98)))+(((IkReal(-1.00000000000000))*(gconst2)*(x100)*(x98)))+(((x136)*(x138)))+(((IkReal(-1.00000000000000))*(x128)*(x129))));
op[7]=((((x102)*(x159)))+(((IkReal(-1.00000000000000))*(gconst0)*(x103)*(x140)))+(((x112)*(x113)))+(((IkReal(-1.00000000000000))*(gconst1)*(x112)*(x130)))+(((IkReal(-1.00000000000000))*(x110)*(x99)))+(((x124)*(x136)))+(((IkReal(-1.00000000000000))*(gconst6)*(x103)*(x146)))+(((x141)*(x143)))+(((IkReal(-1.00000000000000))*(x113)*(x128)))+(((IkReal(-1.00000000000000))*(gconst2)*(x117)*(x98)))+(((x157)*(x99)))+(((x107)*(x110)))+(((IkReal(-1.00000000000000))*(gconst13)*(x98)*(x99)))+(((x107)*(x108)))+(((x146)*(x99)))+(((x128)*(x142)))+(((IkReal(-1.00000000000000))*(gconst18)*(x109)*(x98)))+(((IkReal(-1.00000000000000))*(gconst16)*(x139)*(x141)))+(((IkReal(-1.00000000000000))*(x102)*(x124)))+(((x111)*(x136)))+(((x149)*(x162)))+(((IkReal(-1.00000000000000))*(gconst16)*(x102)*(x103)))+(((x102)*(x117)))+(((IkReal(-1.00000000000000))*(gconst18)*(x123)*(x135))));
op[8]=((((IkReal(-1.00000000000000))*(gconst1)*(x112)*(x123)))+(((x112)*(x141)))+(((x102)*(x99)))+(((x107)*(x136)))+(((IkReal(-1.00000000000000))*(gconst6)*(x102)*(x103)))+(((IkReal(-1.00000000000000))*(x128)*(x141)))+(((IkReal(-1.00000000000000))*(gconst2)*(x98)*(x99)))+(((x128)*(x149))));
polyroots8(op,zeror,numroots);
IkReal j19array[8], cj19array[8], sj19array[8], tempj19array[1];
int numsolutions = 0;
for(int ij19 = 0; ij19 < numroots; ++ij19)
{
IkReal htj19 = zeror[ij19];
tempj19array[0]=((IkReal(2.00000000000000))*(atan(htj19)));
for(int kj19 = 0; kj19 < 1; ++kj19)
{
j19array[numsolutions] = tempj19array[kj19];
if( j19array[numsolutions] > IKPI )
{
    j19array[numsolutions]-=IK2PI;
}
else if( j19array[numsolutions] < -IKPI )
{
    j19array[numsolutions]+=IK2PI;
}
sj19array[numsolutions] = IKsin(j19array[numsolutions]);
cj19array[numsolutions] = IKcos(j19array[numsolutions]);
numsolutions++;
}
}
bool j19valid[8]={true,true,true,true,true,true,true,true};
_nj19 = 8;
for(int ij19 = 0; ij19 < numsolutions; ++ij19)
    {
if( !j19valid[ij19] )
{
    continue;
}
    j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
htj19 = IKtan(j19/2);

_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < numsolutions; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
{
IkReal dummyeval[1];
IkReal gconst48;
gconst48=IKsign(((((IkReal(2765831503.00000))*((npy)*(npy))))+(((IkReal(2765831503.00000))*((npx)*(npx))))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(1.00013505758364))*(cj19)))+(((IkReal(8.27646332845550))*(sj19))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14160897184617))+(j19)), IkReal(6.28318530717959))));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst57;
gconst57=IKsign(((((IkReal(8.64322344687500e+23))*((npx)*(npx))))+(((IkReal(8.64322344687500e+23))*((npy)*(npy))))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal j21array[2], cj21array[2], sj21array[2];
bool j21valid[2]={false};
_nj21 = 2;
sj21array[0]=((IkReal(3180467350.59437))*(npz));
if( sj21array[0] >= -1-IKFAST_SINCOS_THRESH && sj21array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j21valid[0] = j21valid[1] = true;
    j21array[0] = IKasin(sj21array[0]);
    cj21array[0] = IKcos(j21array[0]);
    sj21array[1] = sj21array[0];
    j21array[1] = j21array[0] > 0 ? (IKPI-j21array[0]) : (-IKPI-j21array[0]);
    cj21array[1] = -cj21array[0];
}
else if( isnan(sj21array[0]) )
{
    // probably any value will work
    j21valid[0] = true;
    cj21array[0] = 1; sj21array[0] = 0; j21array[0] = 0;
}
for(int ij21 = 0; ij21 < 2; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 2; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];

{
IkReal dummyeval[1];
IkReal gconst58;
gconst58=IKsign(((((IkReal(312500000000000.))*((npx)*(npx))))+(((IkReal(312500000000000.))*((npy)*(npy))))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst59;
gconst59=IKsign(((((IkReal(8.64322344687500e+23))*((npx)*(npx))))+(((IkReal(8.64322344687500e+23))*((npy)*(npy))))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j23array[1], cj23array[1], sj23array[1];
bool j23valid[1]={false};
_nj23 = 1;
IkReal x170=((IkReal(2.50104706054688e+29))*(pp));
if( IKabs(((gconst59)*(((((IkReal(2.99351280032429e+28))*(npy)))+(((IkReal(-1.00000000000000))*(npy)*(x170)))+(((IkReal(2.99023533128507e+23))*(npx))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst59)*(((((IkReal(2.99023533128507e+23))*(npy)))+(((IkReal(-2.99351280032429e+28))*(npx)))+(((npx)*(x170))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j23array[0]=IKatan2(((gconst59)*(((((IkReal(2.99351280032429e+28))*(npy)))+(((IkReal(-1.00000000000000))*(npy)*(x170)))+(((IkReal(2.99023533128507e+23))*(npx)))))), ((gconst59)*(((((IkReal(2.99023533128507e+23))*(npy)))+(((IkReal(-2.99351280032429e+28))*(npx)))+(((npx)*(x170)))))));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
for(int ij23 = 0; ij23 < 1; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 1; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[6];
IkReal x171=IKcos(j23);
IkReal x172=IKsin(j23);
IkReal x173=((IkReal(1.00000000000000))*(pp));
IkReal x174=((npz)*(sj21));
IkReal x175=((IkReal(0.0439812400000000))*(cj21));
IkReal x176=((npx)*(x171));
IkReal x177=((npy)*(x172));
IkReal x178=((npy)*(x171));
IkReal x179=((npx)*(x172));
IkReal x180=((IkReal(3.45584198842907e-6))*(x176));
IkReal x181=((IkReal(3.45584198842907e-6))*(x177));
IkReal x182=((x173)+(x181));
evalcond[0]=((IkReal(-0.345962978935389))+(x179)+(x178));
evalcond[1]=((IkReal(0.119690382781911))+(x180)+(((IkReal(-1.00000000000000))*(x182))));
evalcond[2]=((((cj21)*(npz)))+(((IkReal(-1.00000000000000))*(sj21)*(x177)))+(((IkReal(-1.72792099421454e-6))*(sj21)))+(((sj21)*(x176))));
evalcond[3]=((IkReal(-1.72792099421454e-6))+(((IkReal(3.14419200000000e-10))*(cj21)))+(x176)+(((IkReal(-1.00000000000000))*(x177))));
evalcond[4]=((IkReal(3.14419200000000e-10))+(((IkReal(-1.00000000000000))*(x174)))+(((IkReal(-1.72792099421454e-6))*(cj21)))+(((cj21)*(x176)))+(((IkReal(-1.00000000000000))*(cj21)*(x177))));
evalcond[5]=((IkReal(0.00624354505194799))+(((x175)*(x177)))+(x180)+(((IkReal(0.327916120000000))*(x178)))+(((IkReal(-1.00000000000000))*(x175)*(x176)))+(((IkReal(0.0439812400000000))*(x174)))+(((IkReal(7.59961079475881e-8))*(cj21)))+(((IkReal(0.327916120000000))*(x179)))+(((IkReal(-1.00000000000000))*(x182))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j23array[1], cj23array[1], sj23array[1];
bool j23valid[1]={false};
_nj23 = 1;
IkReal x371=((IkReal(98256.0000000000))*(cj21));
if( IKabs(((gconst58)*(((((IkReal(-539975310.692043))*(npy)))+(((npy)*(x371)))+(((IkReal(108113430917309.))*(npx))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst58)*(((((IkReal(108113430917309.))*(npy)))+(((IkReal(-1.00000000000000))*(npx)*(x371)))+(((IkReal(539975310.692043))*(npx))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j23array[0]=IKatan2(((gconst58)*(((((IkReal(-539975310.692043))*(npy)))+(((npy)*(x371)))+(((IkReal(108113430917309.))*(npx)))))), ((gconst58)*(((((IkReal(108113430917309.))*(npy)))+(((IkReal(-1.00000000000000))*(npx)*(x371)))+(((IkReal(539975310.692043))*(npx)))))));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
for(int ij23 = 0; ij23 < 1; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 1; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[6];
IkReal x372=IKcos(j23);
IkReal x373=IKsin(j23);
IkReal x374=((IkReal(1.00000000000000))*(pp));
IkReal x375=((npz)*(sj21));
IkReal x376=((IkReal(0.0439812400000000))*(cj21));
IkReal x377=((npx)*(x372));
IkReal x378=((npy)*(x373));
IkReal x379=((npy)*(x372));
IkReal x380=((npx)*(x373));
IkReal x381=((IkReal(3.45584198842907e-6))*(x377));
IkReal x382=((IkReal(3.45584198842907e-6))*(x378));
IkReal x383=((x382)+(x374));
evalcond[0]=((IkReal(-0.345962978935389))+(x380)+(x379));
evalcond[1]=((IkReal(0.119690382781911))+(((IkReal(-1.00000000000000))*(x383)))+(x381));
evalcond[2]=((((cj21)*(npz)))+(((sj21)*(x377)))+(((IkReal(-1.00000000000000))*(sj21)*(x378)))+(((IkReal(-1.72792099421454e-6))*(sj21))));
evalcond[3]=((IkReal(-1.72792099421454e-6))+(((IkReal(3.14419200000000e-10))*(cj21)))+(x377)+(((IkReal(-1.00000000000000))*(x378))));
evalcond[4]=((IkReal(3.14419200000000e-10))+(((IkReal(-1.72792099421454e-6))*(cj21)))+(((IkReal(-1.00000000000000))*(cj21)*(x378)))+(((IkReal(-1.00000000000000))*(x375)))+(((cj21)*(x377))));
evalcond[5]=((IkReal(0.00624354505194799))+(((IkReal(0.0439812400000000))*(x375)))+(((IkReal(-1.00000000000000))*(x383)))+(x381)+(((IkReal(-1.00000000000000))*(x376)*(x377)))+(((IkReal(0.327916120000000))*(x380)))+(((x376)*(x378)))+(((IkReal(7.59961079475881e-8))*(cj21)))+(((IkReal(0.327916120000000))*(x379))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

} else
{
{
IkReal j23array[1], cj23array[1], sj23array[1];
bool j23valid[1]={false};
_nj23 = 1;
IkReal x384=((IkReal(2.50104706054688e+29))*(pp));
if( IKabs(((gconst57)*(((((IkReal(2.99351280032429e+28))*(npy)))+(((IkReal(2.99023533128507e+23))*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(x384))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst57)*(((((IkReal(2.99023533128507e+23))*(npy)))+(((IkReal(-2.99351280032429e+28))*(npx)))+(((npx)*(x384))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j23array[0]=IKatan2(((gconst57)*(((((IkReal(2.99351280032429e+28))*(npy)))+(((IkReal(2.99023533128507e+23))*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(x384)))))), ((gconst57)*(((((IkReal(2.99023533128507e+23))*(npy)))+(((IkReal(-2.99351280032429e+28))*(npx)))+(((npx)*(x384)))))));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
for(int ij23 = 0; ij23 < 1; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 1; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[2];
IkReal x385=IKcos(j23);
IkReal x386=IKsin(j23);
evalcond[0]=((IkReal(-0.345962978935389))+(((npy)*(x385)))+(((npx)*(x386))));
evalcond[1]=((IkReal(0.119690382781911))+(((IkReal(-3.45584198842907e-6))*(npy)*(x386)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(3.45584198842907e-6))*(npx)*(x385))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((IkReal(3180467350.59437))*(npz))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(5495.59630650589))+(((IkReal(-3180467350.59437))*(cj23)*(npx)))+(((IkReal(3180467350.59437))*(npy)*(sj23))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(3180467350.59437))*(npz)))+IKsqr(((IkReal(5495.59630650589))+(((IkReal(-3180467350.59437))*(cj23)*(npx)))+(((IkReal(3180467350.59437))*(npy)*(sj23)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((IkReal(3180467350.59437))*(npz)), ((IkReal(5495.59630650589))+(((IkReal(-3180467350.59437))*(cj23)*(npx)))+(((IkReal(3180467350.59437))*(npy)*(sj23)))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[5];
IkReal x387=IKsin(j21);
IkReal x388=IKcos(j21);
IkReal x389=((npy)*(sj23));
IkReal x390=((cj23)*(npx));
IkReal x391=((IkReal(1.00000000000000))*(x387));
IkReal x392=((IkReal(0.0439812400000000))*(x388));
evalcond[0]=((((IkReal(-3.14419200000000e-10))*(x387)))+(npz));
evalcond[1]=((((IkReal(-1.72792099421454e-6))*(x387)))+(((x387)*(x390)))+(((IkReal(-1.00000000000000))*(x389)*(x391)))+(((npz)*(x388))));
evalcond[2]=((IkReal(-1.72792099421454e-6))+(((IkReal(-1.00000000000000))*(x389)))+(((IkReal(3.14419200000000e-10))*(x388)))+(x390));
evalcond[3]=((IkReal(3.14419200000000e-10))+(((x388)*(x390)))+(((IkReal(-1.00000000000000))*(x388)*(x389)))+(((IkReal(-1.00000000000000))*(npz)*(x391)))+(((IkReal(-1.72792099421454e-6))*(x388))));
evalcond[4]=((IkReal(0.00624354505194799))+(((IkReal(-3.45584198842907e-6))*(x389)))+(((IkReal(0.327916120000000))*(cj23)*(npy)))+(((IkReal(0.0439812400000000))*(npz)*(x387)))+(((IkReal(3.45584198842907e-6))*(x390)))+(((IkReal(0.327916120000000))*(npx)*(sj23)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(7.59961079475881e-8))*(x388)))+(((x389)*(x392)))+(((IkReal(-1.00000000000000))*(x390)*(x392))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}
}
}

}

}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(0.240499242000979))+(j19)), IkReal(6.28318530717959))));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst60;
gconst60=IKsign(((((IkReal(2765831503.00000))*((npy)*(npy))))+(((IkReal(2765831503.00000))*((npx)*(npx))))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal j21array[2], cj21array[2], sj21array[2];
bool j21valid[2]={false};
_nj21 = 2;
sj21array[0]=((IkReal(-9671726696.86802))*(npz));
if( sj21array[0] >= -1-IKFAST_SINCOS_THRESH && sj21array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j21valid[0] = j21valid[1] = true;
    j21array[0] = IKasin(sj21array[0]);
    cj21array[0] = IKcos(j21array[0]);
    sj21array[1] = sj21array[0];
    j21array[1] = j21array[0] > 0 ? (IKPI-j21array[0]) : (-IKPI-j21array[0]);
    cj21array[1] = -cj21array[0];
}
else if( isnan(sj21array[0]) )
{
    // probably any value will work
    j21valid[0] = true;
    cj21array[0] = 1; sj21array[0] = 0; j21array[0] = 0;
}
for(int ij21 = 0; ij21 < 2; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 2; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];

{
IkReal dummyeval[1];
IkReal gconst61;
gconst61=IKsign((((npy)*(npy))+((npx)*(npx))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst62;
gconst62=IKsign(((((IkReal(2765831503.00000))*((npy)*(npy))))+(((IkReal(2765831503.00000))*((npx)*(npx))))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j23array[1], cj23array[1], sj23array[1];
bool j23valid[1]={false};
_nj23 = 1;
IkReal x393=((IkReal(800335059375000.))*(pp));
if( IKabs(((gconst62)*(((((IkReal(-49914570.5542603))*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(x393)))+(((IkReal(260660434677.559))*(npy))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst62)*(((((npx)*(x393)))+(((IkReal(-260660434677.559))*(npx)))+(((IkReal(-49914570.5542603))*(npy))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j23array[0]=IKatan2(((gconst62)*(((((IkReal(-49914570.5542603))*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(x393)))+(((IkReal(260660434677.559))*(npy)))))), ((gconst62)*(((((npx)*(x393)))+(((IkReal(-260660434677.559))*(npx)))+(((IkReal(-49914570.5542603))*(npy)))))));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
for(int ij23 = 0; ij23 < 1; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 1; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[6];
IkReal x394=IKcos(j23);
IkReal x395=IKsin(j23);
IkReal x396=((IkReal(1.00000000000000))*(pp));
IkReal x397=((npz)*(sj21));
IkReal x398=((IkReal(0.0439812400000000))*(cj21));
IkReal x399=((npx)*(x394));
IkReal x400=((npy)*(x395));
IkReal x401=((npy)*(x394));
IkReal x402=((npx)*(x395));
IkReal x403=((IkReal(3.45584198842907e-6))*(x399));
IkReal x404=((IkReal(3.45584198842907e-6))*(x400));
IkReal x405=((x404)+(x396));
evalcond[0]=((IkReal(0.0180468587837400))+(x401)+(x402));
evalcond[1]=((IkReal(0.000325689136848653))+(((IkReal(-1.00000000000000))*(x405)))+(x403));
evalcond[2]=((((cj21)*(npz)))+(((sj21)*(x399)))+(((IkReal(-1.00000000000000))*(sj21)*(x400)))+(((IkReal(-1.72792099421454e-6))*(sj21))));
evalcond[3]=((IkReal(-1.72792099421454e-6))+(((IkReal(-1.03394154047367e-10))*(cj21)))+(((IkReal(-1.00000000000000))*(x400)))+(x399));
evalcond[4]=((IkReal(-1.03394154047367e-10))+(((IkReal(-1.72792099421454e-6))*(cj21)))+(((IkReal(-1.00000000000000))*(cj21)*(x400)))+(((cj21)*(x399)))+(((IkReal(-1.00000000000000))*(x397))));
evalcond[5]=((IkReal(0.00624354505194799))+(((IkReal(0.0439812400000000))*(x397)))+(((x398)*(x400)))+(((IkReal(-1.00000000000000))*(x405)))+(((IkReal(0.327916120000000))*(x401)))+(((IkReal(-1.00000000000000))*(x398)*(x399)))+(((IkReal(0.327916120000000))*(x402)))+(x403)+(((IkReal(7.59961079475881e-8))*(cj21))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j23array[1], cj23array[1], sj23array[1];
bool j23valid[1]={false};
_nj23 = 1;
IkReal x406=((IkReal(1.03394154047367e-10))*(cj21));
if( IKabs(((gconst61)*(((((IkReal(-1.72792099421454e-6))*(npy)))+(((IkReal(-0.0180468587837400))*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(x406))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst61)*(((((IkReal(-0.0180468587837400))*(npy)))+(((npx)*(x406)))+(((IkReal(1.72792099421454e-6))*(npx))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j23array[0]=IKatan2(((gconst61)*(((((IkReal(-1.72792099421454e-6))*(npy)))+(((IkReal(-0.0180468587837400))*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(x406)))))), ((gconst61)*(((((IkReal(-0.0180468587837400))*(npy)))+(((npx)*(x406)))+(((IkReal(1.72792099421454e-6))*(npx)))))));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
for(int ij23 = 0; ij23 < 1; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 1; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[6];
IkReal x407=IKcos(j23);
IkReal x408=IKsin(j23);
IkReal x409=((IkReal(1.00000000000000))*(pp));
IkReal x410=((npz)*(sj21));
IkReal x411=((IkReal(0.0439812400000000))*(cj21));
IkReal x412=((npx)*(x407));
IkReal x413=((npy)*(x408));
IkReal x414=((npy)*(x407));
IkReal x415=((npx)*(x408));
IkReal x416=((IkReal(3.45584198842907e-6))*(x412));
IkReal x417=((IkReal(3.45584198842907e-6))*(x413));
IkReal x418=((x409)+(x417));
evalcond[0]=((IkReal(0.0180468587837400))+(x414)+(x415));
evalcond[1]=((IkReal(0.000325689136848653))+(((IkReal(-1.00000000000000))*(x418)))+(x416));
evalcond[2]=((((cj21)*(npz)))+(((IkReal(-1.00000000000000))*(sj21)*(x413)))+(((sj21)*(x412)))+(((IkReal(-1.72792099421454e-6))*(sj21))));
evalcond[3]=((IkReal(-1.72792099421454e-6))+(((IkReal(-1.03394154047367e-10))*(cj21)))+(((IkReal(-1.00000000000000))*(x413)))+(x412));
evalcond[4]=((IkReal(-1.03394154047367e-10))+(((IkReal(-1.72792099421454e-6))*(cj21)))+(((cj21)*(x412)))+(((IkReal(-1.00000000000000))*(x410)))+(((IkReal(-1.00000000000000))*(cj21)*(x413))));
evalcond[5]=((IkReal(0.00624354505194799))+(((IkReal(-1.00000000000000))*(x418)))+(((IkReal(-1.00000000000000))*(x411)*(x412)))+(((IkReal(0.327916120000000))*(x414)))+(((IkReal(7.59961079475881e-8))*(cj21)))+(((x411)*(x413)))+(x416)+(((IkReal(0.0439812400000000))*(x410)))+(((IkReal(0.327916120000000))*(x415))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

} else
{
{
IkReal j23array[1], cj23array[1], sj23array[1];
bool j23valid[1]={false};
_nj23 = 1;
IkReal x419=((IkReal(800335059375000.))*(pp));
if( IKabs(((gconst60)*(((((IkReal(-49914570.5542603))*(npx)))+(((IkReal(260660434677.559))*(npy)))+(((IkReal(-1.00000000000000))*(npy)*(x419))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst60)*(((((npx)*(x419)))+(((IkReal(-260660434677.559))*(npx)))+(((IkReal(-49914570.5542603))*(npy))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j23array[0]=IKatan2(((gconst60)*(((((IkReal(-49914570.5542603))*(npx)))+(((IkReal(260660434677.559))*(npy)))+(((IkReal(-1.00000000000000))*(npy)*(x419)))))), ((gconst60)*(((((npx)*(x419)))+(((IkReal(-260660434677.559))*(npx)))+(((IkReal(-49914570.5542603))*(npy)))))));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
for(int ij23 = 0; ij23 < 1; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 1; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[2];
IkReal x420=IKcos(j23);
IkReal x421=IKsin(j23);
evalcond[0]=((IkReal(0.0180468587837400))+(((npx)*(x421)))+(((npy)*(x420))));
evalcond[1]=((IkReal(0.000325689136848653))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(3.45584198842907e-6))*(npx)*(x420)))+(((IkReal(-3.45584198842907e-6))*(npy)*(x421))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((IkReal(-9671726696.86802))*(npz))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-16711.9796098235))+(((IkReal(-9671726696.86802))*(npy)*(sj23)))+(((IkReal(9671726696.86802))*(cj23)*(npx))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-9671726696.86802))*(npz)))+IKsqr(((IkReal(-16711.9796098235))+(((IkReal(-9671726696.86802))*(npy)*(sj23)))+(((IkReal(9671726696.86802))*(cj23)*(npx)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((IkReal(-9671726696.86802))*(npz)), ((IkReal(-16711.9796098235))+(((IkReal(-9671726696.86802))*(npy)*(sj23)))+(((IkReal(9671726696.86802))*(cj23)*(npx)))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[5];
IkReal x422=IKsin(j21);
IkReal x423=IKcos(j21);
IkReal x424=((npy)*(sj23));
IkReal x425=((cj23)*(npx));
IkReal x426=((IkReal(1.00000000000000))*(x422));
IkReal x427=((IkReal(0.0439812400000000))*(x423));
evalcond[0]=((npz)+(((IkReal(1.03394154047367e-10))*(x422))));
evalcond[1]=((((npz)*(x423)))+(((IkReal(-1.00000000000000))*(x424)*(x426)))+(((x422)*(x425)))+(((IkReal(-1.72792099421454e-6))*(x422))));
evalcond[2]=((IkReal(-1.72792099421454e-6))+(((IkReal(-1.03394154047367e-10))*(x423)))+(x425)+(((IkReal(-1.00000000000000))*(x424))));
evalcond[3]=((IkReal(-1.03394154047367e-10))+(((IkReal(-1.00000000000000))*(x423)*(x424)))+(((x423)*(x425)))+(((IkReal(-1.00000000000000))*(npz)*(x426)))+(((IkReal(-1.72792099421454e-6))*(x423))));
evalcond[4]=((IkReal(0.00624354505194799))+(((IkReal(-3.45584198842907e-6))*(x424)))+(((IkReal(-1.00000000000000))*(x425)*(x427)))+(((IkReal(0.327916120000000))*(cj23)*(npy)))+(((IkReal(0.327916120000000))*(npx)*(sj23)))+(((IkReal(0.0439812400000000))*(npz)*(x422)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(7.59961079475881e-8))*(x423)))+(((IkReal(3.45584198842907e-6))*(x425)))+(((x424)*(x427))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j21array[2], cj21array[2], sj21array[2];
bool j21valid[2]={false};
_nj21 = 2;
sj21array[0]=((IkReal(-1.00000000000000))*(npz)*(((IKabs(((IkReal(-0.0219906200000000))+(((IkReal(0.182004560000000))*(sj19)))+(((IkReal(0.0219935900000000))*(cj19))))) != 0)?((IkReal)1/(((IkReal(-0.0219906200000000))+(((IkReal(0.182004560000000))*(sj19)))+(((IkReal(0.0219935900000000))*(cj19)))))):(IkReal)1.0e30)));
if( sj21array[0] >= -1-IKFAST_SINCOS_THRESH && sj21array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j21valid[0] = j21valid[1] = true;
    j21array[0] = IKasin(sj21array[0]);
    cj21array[0] = IKcos(j21array[0]);
    sj21array[1] = sj21array[0];
    j21array[1] = j21array[0] > 0 ? (IKPI-j21array[0]) : (-IKPI-j21array[0]);
    cj21array[1] = -cj21array[0];
}
else if( isnan(sj21array[0]) )
{
    // probably any value will work
    j21valid[0] = true;
    cj21array[0] = 1; sj21array[0] = 0; j21array[0] = 0;
}
for(int ij21 = 0; ij21 < 2; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 2; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];

{
IkReal dummyeval[1];
IkReal gconst49;
gconst49=IKsign(((((sj21)*((npx)*(npx))))+(((sj21)*((npy)*(npy))))));
dummyeval[0]=((((sj21)*((npx)*(npx))))+(((sj21)*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst50;
gconst50=IKsign(((((IkReal(2765831503.00000))*((npy)*(npy))))+(((IkReal(2765831503.00000))*((npx)*(npx))))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j21)), IkReal(6.28318530717959))));
evalcond[1]=npz;
evalcond[2]=npz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst51;
gconst51=IKsign((((npy)*(npy))+((npx)*(npx))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst52;
gconst52=IKsign(((((IkReal(2765831503.00000))*((npy)*(npy))))+(((IkReal(2765831503.00000))*((npx)*(npx))))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j23array[1], cj23array[1], sj23array[1];
bool j23valid[1]={false};
_nj23 = 1;
IkReal x428=((IkReal(800335059375000.))*(pp));
IkReal x429=((IkReal(46991612007468.5))*(cj19));
IkReal x430=((IkReal(60830564.0860658))*(sj19));
IkReal x431=((IkReal(503393945.737654))*(cj19));
IkReal x432=((IkReal(12178569690242.2))*(sj19));
if( IKabs(((gconst52)*(((((IkReal(-1.00000000000000))*(npy)*(x428)))+(((npx)*(x431)))+(((npy)*(x429)))+(((IkReal(453480367.518764))*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(x432)))+(((IkReal(48800598848651.4))*(npy)))+(((IkReal(-1.00000000000000))*(npx)*(x430))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst52)*(((((IkReal(-48800598848651.4))*(npx)))+(((npx)*(x432)))+(((IkReal(-1.00000000000000))*(npy)*(x430)))+(((npy)*(x431)))+(((IkReal(-1.00000000000000))*(npx)*(x429)))+(((IkReal(453480367.518764))*(npy)))+(((npx)*(x428))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j23array[0]=IKatan2(((gconst52)*(((((IkReal(-1.00000000000000))*(npy)*(x428)))+(((npx)*(x431)))+(((npy)*(x429)))+(((IkReal(453480367.518764))*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(x432)))+(((IkReal(48800598848651.4))*(npy)))+(((IkReal(-1.00000000000000))*(npx)*(x430)))))), ((gconst52)*(((((IkReal(-48800598848651.4))*(npx)))+(((npx)*(x432)))+(((IkReal(-1.00000000000000))*(npy)*(x430)))+(((npy)*(x431)))+(((IkReal(-1.00000000000000))*(npx)*(x429)))+(((IkReal(453480367.518764))*(npy)))+(((npx)*(x428)))))));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
for(int ij23 = 0; ij23 < 1; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 1; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[4];
IkReal x433=IKcos(j23);
IkReal x434=IKsin(j23);
IkReal x435=((IkReal(1.00000000000000))*(pp));
IkReal x436=((npx)*(x433));
IkReal x437=((npy)*(x433));
IkReal x438=((npx)*(x434));
IkReal x439=((npy)*(x434));
evalcond[0]=((IkReal(-0.163958060000000))+(x438)+(x437)+(((IkReal(0.0219935900000000))*(sj19)))+(((IkReal(-0.182004560000000))*(cj19))));
evalcond[1]=((IkReal(0.0609752106658440))+(((IkReal(-3.45584198842907e-6))*(x439)))+(((IkReal(3.45584198842907e-6))*(x436)))+(((IkReal(-0.0152168389321252))*(sj19)))+(((IkReal(0.0587149237772556))*(cj19)))+(((IkReal(-1.00000000000000))*(x435))));
evalcond[2]=((IkReal(0.0219888920790058))+(((IkReal(-0.182004560000000))*(sj19)))+(((IkReal(-0.0219935900000000))*(cj19)))+(x436)+(((IkReal(-1.00000000000000))*(x439))));
evalcond[3]=((IkReal(0.00624362104805594))+(((IkReal(0.327916120000000))*(x437)))+(((IkReal(-0.0439777841580116))*(x436)))+(((IkReal(0.327916120000000))*(x438)))+(((IkReal(-1.00000000000000))*(x435)))+(((IkReal(0.0439777841580116))*(x439))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j23array[1], cj23array[1], sj23array[1];
bool j23valid[1]={false};
_nj23 = 1;
IkReal x440=((cj19)*(npy));
IkReal x441=((cj19)*(npx));
IkReal x442=((IkReal(0.182004560000000))*(sj19));
IkReal x443=((IkReal(0.0219935900000000))*(sj19));
if( IKabs(((gconst51)*(((((IkReal(-1.00000000000000))*(npx)*(x443)))+(((IkReal(0.0219888920790058))*(npy)))+(((IkReal(-0.0219935900000000))*(x440)))+(((IkReal(0.163958060000000))*(npx)))+(((IkReal(0.182004560000000))*(x441)))+(((IkReal(-1.00000000000000))*(npy)*(x442))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst51)*(((((IkReal(-1.00000000000000))*(npy)*(x443)))+(((npx)*(x442)))+(((IkReal(0.0219935900000000))*(x441)))+(((IkReal(-0.0219888920790058))*(npx)))+(((IkReal(0.182004560000000))*(x440)))+(((IkReal(0.163958060000000))*(npy))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j23array[0]=IKatan2(((gconst51)*(((((IkReal(-1.00000000000000))*(npx)*(x443)))+(((IkReal(0.0219888920790058))*(npy)))+(((IkReal(-0.0219935900000000))*(x440)))+(((IkReal(0.163958060000000))*(npx)))+(((IkReal(0.182004560000000))*(x441)))+(((IkReal(-1.00000000000000))*(npy)*(x442)))))), ((gconst51)*(((((IkReal(-1.00000000000000))*(npy)*(x443)))+(((npx)*(x442)))+(((IkReal(0.0219935900000000))*(x441)))+(((IkReal(-0.0219888920790058))*(npx)))+(((IkReal(0.182004560000000))*(x440)))+(((IkReal(0.163958060000000))*(npy)))))));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
for(int ij23 = 0; ij23 < 1; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 1; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[4];
IkReal x444=IKcos(j23);
IkReal x445=IKsin(j23);
IkReal x446=((IkReal(1.00000000000000))*(pp));
IkReal x447=((npx)*(x444));
IkReal x448=((npy)*(x444));
IkReal x449=((npx)*(x445));
IkReal x450=((npy)*(x445));
evalcond[0]=((IkReal(-0.163958060000000))+(x449)+(x448)+(((IkReal(0.0219935900000000))*(sj19)))+(((IkReal(-0.182004560000000))*(cj19))));
evalcond[1]=((IkReal(0.0609752106658440))+(((IkReal(-3.45584198842907e-6))*(x450)))+(((IkReal(-0.0152168389321252))*(sj19)))+(((IkReal(0.0587149237772556))*(cj19)))+(((IkReal(3.45584198842907e-6))*(x447)))+(((IkReal(-1.00000000000000))*(x446))));
evalcond[2]=((IkReal(0.0219888920790058))+(((IkReal(-0.182004560000000))*(sj19)))+(((IkReal(-0.0219935900000000))*(cj19)))+(((IkReal(-1.00000000000000))*(x450)))+(x447));
evalcond[3]=((IkReal(0.00624362104805594))+(((IkReal(-0.0439777841580116))*(x447)))+(((IkReal(0.0439777841580116))*(x450)))+(((IkReal(0.327916120000000))*(x449)))+(((IkReal(-1.00000000000000))*(x446)))+(((IkReal(0.327916120000000))*(x448))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j21, IkReal(6.28318530717959))));
evalcond[1]=npz;
evalcond[2]=((IkReal(-1.00000000000000))*(npz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst53;
gconst53=IKsign((((npy)*(npy))+((npx)*(npx))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst54;
gconst54=IKsign(((((IkReal(2765831503.00000))*((npy)*(npy))))+(((IkReal(2765831503.00000))*((npx)*(npx))))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j23array[1], cj23array[1], sj23array[1];
bool j23valid[1]={false};
_nj23 = 1;
IkReal x451=((IkReal(800335059375000.))*(pp));
IkReal x452=((IkReal(46991612007468.5))*(cj19));
IkReal x453=((IkReal(60830564.0860658))*(sj19));
IkReal x454=((IkReal(503393945.737654))*(cj19));
IkReal x455=((IkReal(12178569690242.2))*(sj19));
if( IKabs(((gconst54)*(((((IkReal(-1.00000000000000))*(npy)*(x455)))+(((IkReal(-1.00000000000000))*(npy)*(x451)))+(((IkReal(453480367.518764))*(npx)))+(((npx)*(x454)))+(((IkReal(-1.00000000000000))*(npx)*(x453)))+(((npy)*(x452)))+(((IkReal(48800598848651.4))*(npy))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst54)*(((((IkReal(-48800598848651.4))*(npx)))+(((npx)*(x451)))+(((npx)*(x455)))+(((IkReal(-1.00000000000000))*(npx)*(x452)))+(((IkReal(-1.00000000000000))*(npy)*(x453)))+(((npy)*(x454)))+(((IkReal(453480367.518764))*(npy))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j23array[0]=IKatan2(((gconst54)*(((((IkReal(-1.00000000000000))*(npy)*(x455)))+(((IkReal(-1.00000000000000))*(npy)*(x451)))+(((IkReal(453480367.518764))*(npx)))+(((npx)*(x454)))+(((IkReal(-1.00000000000000))*(npx)*(x453)))+(((npy)*(x452)))+(((IkReal(48800598848651.4))*(npy)))))), ((gconst54)*(((((IkReal(-48800598848651.4))*(npx)))+(((npx)*(x451)))+(((npx)*(x455)))+(((IkReal(-1.00000000000000))*(npx)*(x452)))+(((IkReal(-1.00000000000000))*(npy)*(x453)))+(((npy)*(x454)))+(((IkReal(453480367.518764))*(npy)))))));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
for(int ij23 = 0; ij23 < 1; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 1; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[4];
IkReal x456=IKcos(j23);
IkReal x457=IKsin(j23);
IkReal x458=((IkReal(1.00000000000000))*(pp));
IkReal x459=((npx)*(x456));
IkReal x460=((npy)*(x456));
IkReal x461=((npx)*(x457));
IkReal x462=((npy)*(x457));
evalcond[0]=((IkReal(-0.163958060000000))+(x461)+(x460)+(((IkReal(0.0219935900000000))*(sj19)))+(((IkReal(-0.182004560000000))*(cj19))));
evalcond[1]=((IkReal(0.0609752106658440))+(((IkReal(-0.0152168389321252))*(sj19)))+(((IkReal(-3.45584198842907e-6))*(x462)))+(((IkReal(0.0587149237772556))*(cj19)))+(((IkReal(-1.00000000000000))*(x458)))+(((IkReal(3.45584198842907e-6))*(x459))));
evalcond[2]=((IkReal(-0.0219923479209942))+(((IkReal(0.182004560000000))*(sj19)))+(((IkReal(-1.00000000000000))*(x462)))+(x459)+(((IkReal(0.0219935900000000))*(cj19))));
evalcond[3]=((IkReal(0.00624346905584004))+(((IkReal(0.327916120000000))*(x460)))+(((IkReal(-0.0439846958419884))*(x462)))+(((IkReal(0.0439846958419884))*(x459)))+(((IkReal(-1.00000000000000))*(x458)))+(((IkReal(0.327916120000000))*(x461))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j23array[1], cj23array[1], sj23array[1];
bool j23valid[1]={false};
_nj23 = 1;
IkReal x463=((cj19)*(npy));
IkReal x464=((cj19)*(npx));
IkReal x465=((npy)*(sj19));
IkReal x466=((npx)*(sj19));
if( IKabs(((gconst53)*(((((IkReal(0.182004560000000))*(x465)))+(((IkReal(0.0219935900000000))*(x463)))+(((IkReal(0.163958060000000))*(npx)))+(((IkReal(0.182004560000000))*(x464)))+(((IkReal(-0.0219935900000000))*(x466)))+(((IkReal(-0.0219923479209942))*(npy))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst53)*(((((IkReal(0.182004560000000))*(x463)))+(((IkReal(0.0219923479209942))*(npx)))+(((IkReal(-0.182004560000000))*(x466)))+(((IkReal(-0.0219935900000000))*(x465)))+(((IkReal(0.163958060000000))*(npy)))+(((IkReal(-0.0219935900000000))*(x464))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j23array[0]=IKatan2(((gconst53)*(((((IkReal(0.182004560000000))*(x465)))+(((IkReal(0.0219935900000000))*(x463)))+(((IkReal(0.163958060000000))*(npx)))+(((IkReal(0.182004560000000))*(x464)))+(((IkReal(-0.0219935900000000))*(x466)))+(((IkReal(-0.0219923479209942))*(npy)))))), ((gconst53)*(((((IkReal(0.182004560000000))*(x463)))+(((IkReal(0.0219923479209942))*(npx)))+(((IkReal(-0.182004560000000))*(x466)))+(((IkReal(-0.0219935900000000))*(x465)))+(((IkReal(0.163958060000000))*(npy)))+(((IkReal(-0.0219935900000000))*(x464)))))));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
for(int ij23 = 0; ij23 < 1; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 1; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[4];
IkReal x467=IKcos(j23);
IkReal x468=IKsin(j23);
IkReal x469=((IkReal(1.00000000000000))*(pp));
IkReal x470=((npx)*(x467));
IkReal x471=((npy)*(x467));
IkReal x472=((npx)*(x468));
IkReal x473=((npy)*(x468));
evalcond[0]=((IkReal(-0.163958060000000))+(x471)+(x472)+(((IkReal(0.0219935900000000))*(sj19)))+(((IkReal(-0.182004560000000))*(cj19))));
evalcond[1]=((IkReal(0.0609752106658440))+(((IkReal(-0.0152168389321252))*(sj19)))+(((IkReal(0.0587149237772556))*(cj19)))+(((IkReal(-3.45584198842907e-6))*(x473)))+(((IkReal(3.45584198842907e-6))*(x470)))+(((IkReal(-1.00000000000000))*(x469))));
evalcond[2]=((IkReal(-0.0219923479209942))+(((IkReal(-1.00000000000000))*(x473)))+(x470)+(((IkReal(0.182004560000000))*(sj19)))+(((IkReal(0.0219935900000000))*(cj19))));
evalcond[3]=((IkReal(0.00624346905584004))+(((IkReal(-0.0439846958419884))*(x473)))+(((IkReal(0.327916120000000))*(x472)))+(((IkReal(0.0439846958419884))*(x470)))+(((IkReal(-1.00000000000000))*(x469)))+(((IkReal(0.327916120000000))*(x471))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j23array[1], cj23array[1], sj23array[1];
bool j23valid[1]={false};
_nj23 = 1;
IkReal x474=((IkReal(800335059375000.))*(pp));
IkReal x475=((IkReal(46991612007468.5))*(cj19));
IkReal x476=((IkReal(60830564.0860658))*(sj19));
IkReal x477=((IkReal(503393945.737654))*(cj19));
IkReal x478=((IkReal(12178569690242.2))*(sj19));
if( IKabs(((gconst50)*(((((IkReal(-1.00000000000000))*(npy)*(x474)))+(((IkReal(-1.00000000000000))*(npx)*(x476)))+(((IkReal(-1.00000000000000))*(npy)*(x478)))+(((IkReal(453480367.518764))*(npx)))+(((npx)*(x477)))+(((npy)*(x475)))+(((IkReal(48800598848651.4))*(npy))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst50)*(((((IkReal(-48800598848651.4))*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(x476)))+(((npx)*(x478)))+(((npy)*(x477)))+(((npx)*(x474)))+(((IkReal(453480367.518764))*(npy)))+(((IkReal(-1.00000000000000))*(npx)*(x475))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j23array[0]=IKatan2(((gconst50)*(((((IkReal(-1.00000000000000))*(npy)*(x474)))+(((IkReal(-1.00000000000000))*(npx)*(x476)))+(((IkReal(-1.00000000000000))*(npy)*(x478)))+(((IkReal(453480367.518764))*(npx)))+(((npx)*(x477)))+(((npy)*(x475)))+(((IkReal(48800598848651.4))*(npy)))))), ((gconst50)*(((((IkReal(-48800598848651.4))*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(x476)))+(((npx)*(x478)))+(((npy)*(x477)))+(((npx)*(x474)))+(((IkReal(453480367.518764))*(npy)))+(((IkReal(-1.00000000000000))*(npx)*(x475)))))));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
for(int ij23 = 0; ij23 < 1; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 1; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[6];
IkReal x479=IKcos(j23);
IkReal x480=IKsin(j23);
IkReal x481=((IkReal(1.00000000000000))*(pp));
IkReal x482=((npz)*(sj21));
IkReal x483=((IkReal(0.0219935900000000))*(cj19));
IkReal x484=((IkReal(0.182004560000000))*(sj19));
IkReal x485=((IkReal(0.0439812400000000))*(cj21));
IkReal x486=((npx)*(x479));
IkReal x487=((npy)*(x480));
IkReal x488=((npy)*(x479));
IkReal x489=((npx)*(x480));
IkReal x490=((IkReal(3.45584198842907e-6))*(x486));
IkReal x491=((IkReal(3.45584198842907e-6))*(x487));
IkReal x492=((x491)+(x481));
evalcond[0]=((IkReal(-0.163958060000000))+(((IkReal(0.0219935900000000))*(sj19)))+(x489)+(x488)+(((IkReal(-0.182004560000000))*(cj19))));
evalcond[1]=((IkReal(0.0609752106658440))+(((IkReal(-1.00000000000000))*(x492)))+(((IkReal(-0.0152168389321252))*(sj19)))+(x490)+(((IkReal(0.0587149237772556))*(cj19))));
evalcond[2]=((((cj21)*(npz)))+(((IkReal(-1.00000000000000))*(sj21)*(x487)))+(((sj21)*(x486)))+(((IkReal(-1.72792099421454e-6))*(sj21))));
evalcond[3]=((IkReal(-1.72792099421454e-6))+(((IkReal(-1.00000000000000))*(cj21)*(x483)))+(((IkReal(-1.00000000000000))*(x487)))+(x486)+(((IkReal(0.0219906200000000))*(cj21)))+(((IkReal(-1.00000000000000))*(cj21)*(x484))));
evalcond[4]=((IkReal(0.0219906200000000))+(((IkReal(-1.72792099421454e-6))*(cj21)))+(((IkReal(-1.00000000000000))*(x483)))+(((IkReal(-1.00000000000000))*(cj21)*(x487)))+(((cj21)*(x486)))+(((IkReal(-1.00000000000000))*(x484)))+(((IkReal(-1.00000000000000))*(x482))));
evalcond[5]=((IkReal(0.00624354505194799))+(((IkReal(0.327916120000000))*(x489)))+(((IkReal(-1.00000000000000))*(x492)))+(((IkReal(0.327916120000000))*(x488)))+(((IkReal(0.0439812400000000))*(x482)))+(((IkReal(-1.00000000000000))*(x485)*(x486)))+(x490)+(((IkReal(7.59961079475881e-8))*(cj21)))+(((x485)*(x487))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j23array[1], cj23array[1], sj23array[1];
bool j23valid[1]={false};
_nj23 = 1;
IkReal x493=((IkReal(0.163958060000000))*(sj21));
IkReal x494=((npx)*(sj21));
IkReal x495=((IkReal(0.0219935900000000))*(sj19));
IkReal x496=((cj21)*(npz));
IkReal x497=((npy)*(sj21));
IkReal x498=((IkReal(0.182004560000000))*(cj19)*(sj21));
if( IKabs(((gconst49)*(((((npx)*(x493)))+(((npy)*(x496)))+(((IkReal(-1.72792099421454e-6))*(x497)))+(((IkReal(0.182004560000000))*(cj19)*(x494)))+(((IkReal(-1.00000000000000))*(x494)*(x495))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst49)*(((((IkReal(-1.00000000000000))*(x495)*(x497)))+(((IkReal(1.72792099421454e-6))*(x494)))+(((npy)*(x493)))+(((IkReal(-1.00000000000000))*(npx)*(x496)))+(((IkReal(0.182004560000000))*(cj19)*(x497))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j23array[0]=IKatan2(((gconst49)*(((((npx)*(x493)))+(((npy)*(x496)))+(((IkReal(-1.72792099421454e-6))*(x497)))+(((IkReal(0.182004560000000))*(cj19)*(x494)))+(((IkReal(-1.00000000000000))*(x494)*(x495)))))), ((gconst49)*(((((IkReal(-1.00000000000000))*(x495)*(x497)))+(((IkReal(1.72792099421454e-6))*(x494)))+(((npy)*(x493)))+(((IkReal(-1.00000000000000))*(npx)*(x496)))+(((IkReal(0.182004560000000))*(cj19)*(x497)))))));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
for(int ij23 = 0; ij23 < 1; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 1; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[6];
IkReal x499=IKcos(j23);
IkReal x500=IKsin(j23);
IkReal x501=((IkReal(1.00000000000000))*(pp));
IkReal x502=((npz)*(sj21));
IkReal x503=((IkReal(0.0219935900000000))*(cj19));
IkReal x504=((IkReal(0.182004560000000))*(sj19));
IkReal x505=((IkReal(0.0439812400000000))*(cj21));
IkReal x506=((npx)*(x499));
IkReal x507=((npy)*(x500));
IkReal x508=((npy)*(x499));
IkReal x509=((npx)*(x500));
IkReal x510=((IkReal(3.45584198842907e-6))*(x506));
IkReal x511=((IkReal(3.45584198842907e-6))*(x507));
IkReal x512=((x511)+(x501));
evalcond[0]=((IkReal(-0.163958060000000))+(((IkReal(0.0219935900000000))*(sj19)))+(((IkReal(-0.182004560000000))*(cj19)))+(x508)+(x509));
evalcond[1]=((IkReal(0.0609752106658440))+(x510)+(((IkReal(-0.0152168389321252))*(sj19)))+(((IkReal(0.0587149237772556))*(cj19)))+(((IkReal(-1.00000000000000))*(x512))));
evalcond[2]=((((sj21)*(x506)))+(((cj21)*(npz)))+(((IkReal(-1.00000000000000))*(sj21)*(x507)))+(((IkReal(-1.72792099421454e-6))*(sj21))));
evalcond[3]=((IkReal(-1.72792099421454e-6))+(((IkReal(-1.00000000000000))*(cj21)*(x503)))+(((IkReal(-1.00000000000000))*(cj21)*(x504)))+(((IkReal(-1.00000000000000))*(x507)))+(((IkReal(0.0219906200000000))*(cj21)))+(x506));
evalcond[4]=((IkReal(0.0219906200000000))+(((IkReal(-1.72792099421454e-6))*(cj21)))+(((IkReal(-1.00000000000000))*(cj21)*(x507)))+(((cj21)*(x506)))+(((IkReal(-1.00000000000000))*(x503)))+(((IkReal(-1.00000000000000))*(x504)))+(((IkReal(-1.00000000000000))*(x502))));
evalcond[5]=((IkReal(0.00624354505194799))+(x510)+(((x505)*(x507)))+(((IkReal(0.327916120000000))*(x509)))+(((IkReal(0.0439812400000000))*(x502)))+(((IkReal(0.327916120000000))*(x508)))+(((IkReal(-1.00000000000000))*(x505)*(x506)))+(((IkReal(7.59961079475881e-8))*(cj21)))+(((IkReal(-1.00000000000000))*(x512))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j23array[1], cj23array[1], sj23array[1];
bool j23valid[1]={false};
_nj23 = 1;
IkReal x513=((IkReal(800335059375000.))*(pp));
IkReal x514=((cj19)*(npy));
IkReal x515=((IkReal(60830564.0860658))*(sj19));
IkReal x516=((cj19)*(npx));
IkReal x517=((IkReal(12178569690242.2))*(sj19));
if( IKabs(((gconst48)*(((((IkReal(46991612007468.5))*(x514)))+(((IkReal(-1.00000000000000))*(npx)*(x515)))+(((IkReal(453480367.518764))*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(x517)))+(((IkReal(-1.00000000000000))*(npy)*(x513)))+(((IkReal(503393945.737654))*(x516)))+(((IkReal(48800598848651.4))*(npy))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst48)*(((((IkReal(-48800598848651.4))*(npx)))+(((IkReal(-46991612007468.5))*(x516)))+(((IkReal(-1.00000000000000))*(npy)*(x515)))+(((IkReal(503393945.737654))*(x514)))+(((npx)*(x513)))+(((npx)*(x517)))+(((IkReal(453480367.518764))*(npy))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j23array[0]=IKatan2(((gconst48)*(((((IkReal(46991612007468.5))*(x514)))+(((IkReal(-1.00000000000000))*(npx)*(x515)))+(((IkReal(453480367.518764))*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(x517)))+(((IkReal(-1.00000000000000))*(npy)*(x513)))+(((IkReal(503393945.737654))*(x516)))+(((IkReal(48800598848651.4))*(npy)))))), ((gconst48)*(((((IkReal(-48800598848651.4))*(npx)))+(((IkReal(-46991612007468.5))*(x516)))+(((IkReal(-1.00000000000000))*(npy)*(x515)))+(((IkReal(503393945.737654))*(x514)))+(((npx)*(x513)))+(((npx)*(x517)))+(((IkReal(453480367.518764))*(npy)))))));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
for(int ij23 = 0; ij23 < 1; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 1; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[2];
IkReal x518=IKcos(j23);
IkReal x519=IKsin(j23);
evalcond[0]=((IkReal(-0.163958060000000))+(((IkReal(0.0219935900000000))*(sj19)))+(((IkReal(-0.182004560000000))*(cj19)))+(((npy)*(x518)))+(((npx)*(x519))));
evalcond[1]=((IkReal(0.0609752106658440))+(((IkReal(-0.0152168389321252))*(sj19)))+(((IkReal(3.45584198842907e-6))*(npx)*(x518)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0587149237772556))*(cj19)))+(((IkReal(-3.45584198842907e-6))*(npy)*(x519))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst55;
gconst55=IKsign(((IkReal(-0.0219906200000000))+(((IkReal(0.182004560000000))*(sj19)))+(((IkReal(0.0219935900000000))*(cj19)))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(1.00013505758364))*(cj19)))+(((IkReal(8.27646332845550))*(sj19))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst56;
gconst56=IKsign(((IkReal(-0.0219906200000000))+(((IkReal(0.182004560000000))*(sj19)))+(((IkReal(0.0219935900000000))*(cj19)))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(1.00013505758364))*(cj19)))+(((IkReal(8.27646332845550))*(sj19))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14160897184617))+(j19)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.345962978935389))+(((cj23)*(npy)))+(((npx)*(sj23))));
evalcond[2]=((IkReal(0.119690382781911))+(((IkReal(3.45584198842907e-6))*(cj23)*(npx)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-3.45584198842907e-6))*(npy)*(sj23))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((IkReal(3180467350.59437))*(npz))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(5495.59630650589))+(((IkReal(-3180467350.59437))*(cj23)*(npx)))+(((IkReal(3180467350.59437))*(npy)*(sj23))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(3180467350.59437))*(npz)))+IKsqr(((IkReal(5495.59630650589))+(((IkReal(-3180467350.59437))*(cj23)*(npx)))+(((IkReal(3180467350.59437))*(npy)*(sj23)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((IkReal(3180467350.59437))*(npz)), ((IkReal(5495.59630650589))+(((IkReal(-3180467350.59437))*(cj23)*(npx)))+(((IkReal(3180467350.59437))*(npy)*(sj23)))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[5];
IkReal x520=IKsin(j21);
IkReal x521=IKcos(j21);
IkReal x522=((npy)*(sj23));
IkReal x523=((cj23)*(npx));
IkReal x524=((IkReal(1.00000000000000))*(x520));
IkReal x525=((IkReal(0.0439812400000000))*(x521));
evalcond[0]=((npz)+(((IkReal(-3.14419200000000e-10))*(x520))));
evalcond[1]=((((x520)*(x523)))+(((IkReal(-1.72792099421454e-6))*(x520)))+(((IkReal(-1.00000000000000))*(x522)*(x524)))+(((npz)*(x521))));
evalcond[2]=((IkReal(-1.72792099421454e-6))+(((IkReal(-1.00000000000000))*(x522)))+(((IkReal(3.14419200000000e-10))*(x521)))+(x523));
evalcond[3]=((IkReal(3.14419200000000e-10))+(((IkReal(-1.72792099421454e-6))*(x521)))+(((IkReal(-1.00000000000000))*(x521)*(x522)))+(((IkReal(-1.00000000000000))*(npz)*(x524)))+(((x521)*(x523))));
evalcond[4]=((IkReal(0.00624354505194799))+(((IkReal(0.327916120000000))*(cj23)*(npy)))+(((IkReal(-1.00000000000000))*(x523)*(x525)))+(((x522)*(x525)))+(((IkReal(0.327916120000000))*(npx)*(sj23)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(3.45584198842907e-6))*(x523)))+(((IkReal(7.59961079475881e-8))*(x521)))+(((IkReal(-3.45584198842907e-6))*(x522)))+(((IkReal(0.0439812400000000))*(npz)*(x520))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(0.240499242000979))+(j19)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.0180468587837400))+(((cj23)*(npy)))+(((npx)*(sj23))));
evalcond[2]=((IkReal(0.000325689136848653))+(((IkReal(3.45584198842907e-6))*(cj23)*(npx)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-3.45584198842907e-6))*(npy)*(sj23))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((IkReal(-9671726696.86802))*(npz))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-16711.9796098235))+(((IkReal(-9671726696.86802))*(npy)*(sj23)))+(((IkReal(9671726696.86802))*(cj23)*(npx))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-9671726696.86802))*(npz)))+IKsqr(((IkReal(-16711.9796098235))+(((IkReal(-9671726696.86802))*(npy)*(sj23)))+(((IkReal(9671726696.86802))*(cj23)*(npx)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((IkReal(-9671726696.86802))*(npz)), ((IkReal(-16711.9796098235))+(((IkReal(-9671726696.86802))*(npy)*(sj23)))+(((IkReal(9671726696.86802))*(cj23)*(npx)))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[5];
IkReal x526=IKsin(j21);
IkReal x527=IKcos(j21);
IkReal x528=((npy)*(sj23));
IkReal x529=((cj23)*(npx));
IkReal x530=((IkReal(1.00000000000000))*(x526));
IkReal x531=((IkReal(0.0439812400000000))*(x527));
evalcond[0]=((((IkReal(1.03394154047367e-10))*(x526)))+(npz));
evalcond[1]=((((x526)*(x529)))+(((npz)*(x527)))+(((IkReal(-1.72792099421454e-6))*(x526)))+(((IkReal(-1.00000000000000))*(x528)*(x530))));
evalcond[2]=((IkReal(-1.72792099421454e-6))+(((IkReal(-1.03394154047367e-10))*(x527)))+(((IkReal(-1.00000000000000))*(x528)))+(x529));
evalcond[3]=((IkReal(-1.03394154047367e-10))+(((IkReal(-1.72792099421454e-6))*(x527)))+(((IkReal(-1.00000000000000))*(x527)*(x528)))+(((IkReal(-1.00000000000000))*(npz)*(x530)))+(((x527)*(x529))));
evalcond[4]=((IkReal(0.00624354505194799))+(((IkReal(3.45584198842907e-6))*(x529)))+(((IkReal(0.327916120000000))*(cj23)*(npy)))+(((x528)*(x531)))+(((IkReal(-1.00000000000000))*(x529)*(x531)))+(((IkReal(0.327916120000000))*(npx)*(sj23)))+(((IkReal(7.59961079475881e-8))*(x527)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0439812400000000))*(npz)*(x526)))+(((IkReal(-3.45584198842907e-6))*(x528))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(gconst56)*(npz))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst56)*(((IkReal(-1.72792099421454e-6))+(((IkReal(-1.00000000000000))*(npy)*(sj23)))+(((cj23)*(npx))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j21array[0]=IKatan2(((IkReal(-1.00000000000000))*(gconst56)*(npz)), ((gconst56)*(((IkReal(-1.72792099421454e-6))+(((IkReal(-1.00000000000000))*(npy)*(sj23)))+(((cj23)*(npx)))))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[5];
IkReal x532=IKsin(j21);
IkReal x533=IKcos(j21);
IkReal x534=((cj23)*(npx));
IkReal x535=((IkReal(0.182004560000000))*(sj19));
IkReal x536=((npy)*(sj23));
IkReal x537=((IkReal(0.0219935900000000))*(cj19));
IkReal x538=((IkReal(0.0439812400000000))*(x533));
IkReal x539=((IkReal(1.00000000000000))*(x532));
evalcond[0]=((((x532)*(x535)))+(((IkReal(-0.0219906200000000))*(x532)))+(npz)+(((x532)*(x537))));
evalcond[1]=((((npz)*(x533)))+(((IkReal(-1.00000000000000))*(x536)*(x539)))+(((IkReal(-1.72792099421454e-6))*(x532)))+(((x532)*(x534))));
evalcond[2]=((IkReal(-1.72792099421454e-6))+(((IkReal(-1.00000000000000))*(x533)*(x537)))+(((IkReal(0.0219906200000000))*(x533)))+(((IkReal(-1.00000000000000))*(x533)*(x535)))+(((IkReal(-1.00000000000000))*(x536)))+(x534));
evalcond[3]=((IkReal(0.0219906200000000))+(((IkReal(-1.00000000000000))*(npz)*(x539)))+(((IkReal(-1.00000000000000))*(x537)))+(((x533)*(x534)))+(((IkReal(-1.00000000000000))*(x533)*(x536)))+(((IkReal(-1.00000000000000))*(x535)))+(((IkReal(-1.72792099421454e-6))*(x533))));
evalcond[4]=((IkReal(0.00624354505194799))+(((IkReal(0.327916120000000))*(cj23)*(npy)))+(((IkReal(-3.45584198842907e-6))*(x536)))+(((IkReal(3.45584198842907e-6))*(x534)))+(((IkReal(0.327916120000000))*(npx)*(sj23)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0439812400000000))*(npz)*(x532)))+(((x536)*(x538)))+(((IkReal(7.59961079475881e-8))*(x533)))+(((IkReal(-1.00000000000000))*(x534)*(x538))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(gconst55)*(npz))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst55)*(((IkReal(-1.72792099421454e-6))+(((IkReal(-1.00000000000000))*(npy)*(sj23)))+(((cj23)*(npx))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j21array[0]=IKatan2(((IkReal(-1.00000000000000))*(gconst55)*(npz)), ((gconst55)*(((IkReal(-1.72792099421454e-6))+(((IkReal(-1.00000000000000))*(npy)*(sj23)))+(((cj23)*(npx)))))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[5];
IkReal x540=IKsin(j21);
IkReal x541=IKcos(j21);
IkReal x542=((cj23)*(npx));
IkReal x543=((IkReal(0.182004560000000))*(sj19));
IkReal x544=((npy)*(sj23));
IkReal x545=((IkReal(0.0219935900000000))*(cj19));
IkReal x546=((IkReal(0.0439812400000000))*(x541));
IkReal x547=((IkReal(1.00000000000000))*(x540));
evalcond[0]=((npz)+(((x540)*(x543)))+(((x540)*(x545)))+(((IkReal(-0.0219906200000000))*(x540))));
evalcond[1]=((((IkReal(-1.72792099421454e-6))*(x540)))+(((IkReal(-1.00000000000000))*(x544)*(x547)))+(((npz)*(x541)))+(((x540)*(x542))));
evalcond[2]=((IkReal(-1.72792099421454e-6))+(x542)+(((IkReal(-1.00000000000000))*(x544)))+(((IkReal(-1.00000000000000))*(x541)*(x545)))+(((IkReal(0.0219906200000000))*(x541)))+(((IkReal(-1.00000000000000))*(x541)*(x543))));
evalcond[3]=((IkReal(0.0219906200000000))+(((IkReal(-1.72792099421454e-6))*(x541)))+(((IkReal(-1.00000000000000))*(npz)*(x547)))+(((IkReal(-1.00000000000000))*(x541)*(x544)))+(((x541)*(x542)))+(((IkReal(-1.00000000000000))*(x543)))+(((IkReal(-1.00000000000000))*(x545))));
evalcond[4]=((IkReal(0.00624354505194799))+(((IkReal(0.327916120000000))*(cj23)*(npy)))+(((IkReal(7.59961079475881e-8))*(x541)))+(((x544)*(x546)))+(((IkReal(-1.00000000000000))*(x542)*(x546)))+(((IkReal(-3.45584198842907e-6))*(x544)))+(((IkReal(3.45584198842907e-6))*(x542)))+(((IkReal(0.327916120000000))*(npx)*(sj23)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0439812400000000))*(npz)*(x540))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
    }

}

}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x183=((IkReal(1.00000000000000))*(cj23));
IkReal x184=((cj21)*(sj19));
IkReal x185=((sj19)*(sj21));
IkReal x186=((cj23)*(sj21));
IkReal x187=((IkReal(1.00000000000000))*(sj21)*(sj23));
IkReal x188=((IkReal(1.00000000000000))*(cj19)*(sj21));
IkReal x189=((IkReal(1.00000000000000))*(cj19)*(sj23));
IkReal x190=((((IkReal(-1.00000000000000))*(sj19)*(sj23)))+(((cj19)*(cj21)*(cj23))));
IkReal x191=((((IkReal(-1.00000000000000))*(cj19)*(x183)))+(((sj23)*(x184))));
IkReal x192=((((IkReal(-1.00000000000000))*(sj19)*(x183)))+(((IkReal(-1.00000000000000))*(cj21)*(x189))));
IkReal x193=((((IkReal(-1.00000000000000))*(x189)))+(((IkReal(-1.00000000000000))*(x183)*(x184))));
new_r00=((((r00)*(x190)))+(((IkReal(-1.00000000000000))*(r02)*(x188)))+(((r01)*(x192))));
new_r01=((((IkReal(-1.00000000000000))*(r12)*(x188)))+(((r10)*(x190)))+(((r11)*(x192))));
new_r02=((((r20)*(x190)))+(((r21)*(x192)))+(((IkReal(-1.00000000000000))*(r22)*(x188))));
new_r10=((((r00)*(x186)))+(((cj21)*(r02)))+(((IkReal(-1.00000000000000))*(r01)*(x187))));
new_r11=((((r10)*(x186)))+(((IkReal(-1.00000000000000))*(r11)*(x187)))+(((cj21)*(r12))));
new_r12=((((r20)*(x186)))+(((cj21)*(r22)))+(((IkReal(-1.00000000000000))*(r21)*(x187))));
new_r20=((((r01)*(x191)))+(((r00)*(x193)))+(((r02)*(x185))));
new_r21=((((r12)*(x185)))+(((r10)*(x193)))+(((r11)*(x191))));
new_r22=((((r22)*(x185)))+(((r20)*(x193)))+(((r21)*(x191))));
{
IkReal j15array[2], cj15array[2], sj15array[2];
bool j15valid[2]={false};
_nj15 = 2;
sj15array[0]=((IkReal(-1.00000000000000))*(new_r22));
if( sj15array[0] >= -1-IKFAST_SINCOS_THRESH && sj15array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j15valid[0] = j15valid[1] = true;
    j15array[0] = IKasin(sj15array[0]);
    cj15array[0] = IKcos(j15array[0]);
    sj15array[1] = sj15array[0];
    j15array[1] = j15array[0] > 0 ? (IKPI-j15array[0]) : (-IKPI-j15array[0]);
    cj15array[1] = -cj15array[0];
}
else if( isnan(sj15array[0]) )
{
    // probably any value will work
    j15valid[0] = true;
    cj15array[0] = 1; sj15array[0] = 0; j15array[0] = 0;
}
for(int ij15 = 0; ij15 < 2; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 2; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];

{
IkReal dummyeval[1];
IkReal gconst63;
gconst63=IKsign(cj15);
dummyeval[0]=cj15;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst64;
gconst64=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst65;
gconst65=IKsign(((((cj15)*(new_r10)*(new_r12)))+(((cj15)*(new_r00)*(new_r02)))));
dummyeval[0]=((((cj15)*(new_r10)*(new_r12)))+(((cj15)*(new_r00)*(new_r02))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j15)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(1.00000000000000))+(new_r22));
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[5]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[6]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j17array[2], cj17array[2], sj17array[2];
bool j17valid[2]={false};
_nj17 = 2;
if( IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x194=IKatan2(new_r12, new_r02);
j17array[0]=((IkReal(-1.00000000000000))*(x194));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
j17array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x194))));
sj17array[1]=IKsin(j17array[1]);
cj17array[1]=IKcos(j17array[1]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
if( j17array[1] > IKPI )
{
    j17array[1]-=IK2PI;
}
else if( j17array[1] < -IKPI )
{    j17array[1]+=IK2PI;
}
j17valid[1] = true;
for(int ij17 = 0; ij17 < 2; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 2; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[1];
evalcond[0]=((((new_r02)*(IKcos(j17))))+(((IkReal(-1.00000000000000))*(new_r12)*(IKsin(j17)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(((((cj17)*(new_r10)))+(((new_r00)*(sj17))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj17)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj17))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj17)*(new_r10)))+(((new_r00)*(sj17)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj17)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj17)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((cj17)*(new_r10)))+(((new_r00)*(sj17)))), ((((IkReal(-1.00000000000000))*(cj17)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj17)))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[4];
IkReal x195=IKcos(j13);
IkReal x196=((IkReal(1.00000000000000))*(sj17));
IkReal x197=((IkReal(1.00000000000000))*(IKsin(j13)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r10)*(x196)))+(((cj17)*(new_r00)))+(((IkReal(-1.00000000000000))*(x195))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r11)*(x196)))+(((cj17)*(new_r01)))+(((IkReal(-1.00000000000000))*(x197))));
evalcond[2]=((((new_r01)*(sj17)))+(x195)+(((cj17)*(new_r11))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x197)))+(((cj17)*(new_r10)))+(((new_r00)*(sj17))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j15;
vinfos[1].indices[0] = _ij15[0];
vinfos[1].indices[1] = _ij15[1];
vinfos[1].maxsolutions = _nj15;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j21;
vinfos[4].indices[0] = _ij21[0];
vinfos[4].indices[1] = _ij21[1];
vinfos[4].maxsolutions = _nj21;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
IkReal x198=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j15)), IkReal(6.28318530717959))));
evalcond[1]=x198;
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x198;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j17array[2], cj17array[2], sj17array[2];
bool j17valid[2]={false};
_nj17 = 2;
if( IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x199=IKatan2(new_r12, new_r02);
j17array[0]=((IkReal(-1.00000000000000))*(x199));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
j17array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x199))));
sj17array[1]=IKsin(j17array[1]);
cj17array[1]=IKcos(j17array[1]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
if( j17array[1] > IKPI )
{
    j17array[1]-=IK2PI;
}
else if( j17array[1] < -IKPI )
{    j17array[1]+=IK2PI;
}
j17valid[1] = true;
for(int ij17 = 0; ij17 < 2; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 2; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[1];
evalcond[0]=((((new_r02)*(IKcos(j17))))+(((IkReal(-1.00000000000000))*(new_r12)*(IKsin(j17)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(new_r00)*(sj17)))+(((IkReal(-1.00000000000000))*(cj17)*(new_r10))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r01)*(sj17)))+(((cj17)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r00)*(sj17)))+(((IkReal(-1.00000000000000))*(cj17)*(new_r10)))))+IKsqr(((((new_r01)*(sj17)))+(((cj17)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r00)*(sj17)))+(((IkReal(-1.00000000000000))*(cj17)*(new_r10)))), ((((new_r01)*(sj17)))+(((cj17)*(new_r11)))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[4];
IkReal x200=IKsin(j13);
IkReal x201=((IkReal(1.00000000000000))*(sj17));
IkReal x202=((IkReal(1.00000000000000))*(IKcos(j13)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x202)))+(((IkReal(-1.00000000000000))*(new_r10)*(x201)))+(((cj17)*(new_r00))));
evalcond[1]=((((cj17)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(x201)))+(((IkReal(-1.00000000000000))*(x200))));
evalcond[2]=((((new_r01)*(sj17)))+(((IkReal(-1.00000000000000))*(x202)))+(((cj17)*(new_r11))));
evalcond[3]=((((cj17)*(new_r10)))+(x200)+(((new_r00)*(sj17))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j15;
vinfos[1].indices[0] = _ij15[0];
vinfos[1].indices[1] = _ij15[1];
vinfos[1].maxsolutions = _nj15;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j21;
vinfos[4].indices[0] = _ij21[0];
vinfos[4].indices[1] = _ij21[1];
vinfos[4].maxsolutions = _nj21;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
IkReal x203=((gconst65)*(new_r20)*(sj15));
if( IKabs(((new_r02)*(x203))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r12)*(x203))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j17array[0]=IKatan2(((new_r02)*(x203)), ((new_r12)*(x203)));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[6];
IkReal x204=IKcos(j17);
IkReal x205=IKsin(j17);
IkReal x206=((IkReal(1.00000000000000))*(new_r12));
IkReal x207=((IkReal(1.00000000000000))*(sj15));
IkReal x208=((IkReal(1.00000000000000))*(cj15));
IkReal x209=((cj15)*(x205));
IkReal x210=((new_r02)*(x205));
IkReal x211=((cj15)*(x204));
evalcond[0]=((((new_r02)*(x204)))+(((IkReal(-1.00000000000000))*(x205)*(x206))));
evalcond[1]=((x210)+(((new_r12)*(x204)))+(((IkReal(-1.00000000000000))*(x208))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r20)*(x207)))+(((new_r10)*(x211)))+(((new_r00)*(x209))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r21)*(x207)))+(((new_r11)*(x211)))+(((new_r01)*(x209))));
evalcond[4]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22)*(x207)))+(((new_r12)*(x211)))+(((new_r02)*(x209))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x207)*(x210)))+(((IkReal(-1.00000000000000))*(sj15)*(x204)*(x206)))+(((IkReal(-1.00000000000000))*(new_r22)*(x208))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst66;
gconst66=IKsign(cj15);
dummyeval[0]=cj15;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj15;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=sj15;
dummyeval[1]=cj15;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x212=((((IkReal(-1.00000000000000))*(new_r12)*(sj17)))+(((cj17)*(new_r02))));
IkReal x213=((((cj17)*(new_r10)))+(((new_r00)*(sj17))));
IkReal x214=((((new_r01)*(sj17)))+(((cj17)*(new_r11))));
IkReal x215=((IkReal(-1.00000000000000))+(((cj17)*(new_r12)))+(((new_r02)*(sj17))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j15)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=x212;
evalcond[3]=x212;
evalcond[4]=x215;
evalcond[5]=x214;
evalcond[6]=x213;
evalcond[7]=x213;
evalcond[8]=x214;
evalcond[9]=x215;
evalcond[10]=((IkReal(-1.00000000000000))*(new_r22));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(((IkReal(-1.00000000000000))*(new_r21)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(new_r20, ((IkReal(-1.00000000000000))*(new_r21)));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[4];
IkReal x216=IKcos(j13);
IkReal x217=((IkReal(1.00000000000000))*(sj17));
IkReal x218=((IkReal(1.00000000000000))*(IKsin(j13)));
evalcond[0]=((new_r21)+(x216));
evalcond[1]=((new_r20)+(((IkReal(-1.00000000000000))*(x218))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x216)))+(((IkReal(-1.00000000000000))*(new_r10)*(x217)))+(((cj17)*(new_r00))));
evalcond[3]=((((cj17)*(new_r01)))+(((IkReal(-1.00000000000000))*(x218)))+(((IkReal(-1.00000000000000))*(new_r11)*(x217))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j15;
vinfos[1].indices[0] = _ij15[0];
vinfos[1].indices[1] = _ij15[1];
vinfos[1].maxsolutions = _nj15;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j21;
vinfos[4].indices[0] = _ij21[0];
vinfos[4].indices[1] = _ij21[1];
vinfos[4].maxsolutions = _nj21;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x219=((IkReal(1.00000000000000))*(new_r12));
IkReal x220=((new_r02)*(sj17));
IkReal x221=((new_r01)*(sj17));
IkReal x222=((cj17)*(new_r11));
IkReal x223=((new_r00)*(sj17));
IkReal x224=((cj17)*(new_r10));
IkReal x225=((((IkReal(-1.00000000000000))*(sj17)*(x219)))+(((cj17)*(new_r02))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j15, IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=x225;
evalcond[3]=x225;
evalcond[4]=((IkReal(1.00000000000000))+(((cj17)*(new_r12)))+(x220));
evalcond[5]=((x221)+(x222));
evalcond[6]=((x223)+(x224));
evalcond[7]=((((IkReal(-1.00000000000000))*(x223)))+(((IkReal(-1.00000000000000))*(x224))));
evalcond[8]=((((IkReal(-1.00000000000000))*(x221)))+(((IkReal(-1.00000000000000))*(x222))));
evalcond[9]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(cj17)*(x219)))+(((IkReal(-1.00000000000000))*(x220))));
evalcond[10]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r20)))+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r20)), new_r21);
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[4];
IkReal x226=IKsin(j13);
IkReal x227=((IkReal(1.00000000000000))*(sj17));
IkReal x228=((IkReal(1.00000000000000))*(IKcos(j13)));
evalcond[0]=((new_r21)+(((IkReal(-1.00000000000000))*(x228))));
evalcond[1]=((new_r20)+(x226));
evalcond[2]=((((cj17)*(new_r00)))+(((IkReal(-1.00000000000000))*(x228)))+(((IkReal(-1.00000000000000))*(new_r10)*(x227))));
evalcond[3]=((((cj17)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(x227)))+(((IkReal(-1.00000000000000))*(x226))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j15;
vinfos[1].indices[0] = _ij15[0];
vinfos[1].indices[1] = _ij15[1];
vinfos[1].maxsolutions = _nj15;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j21;
vinfos[4].indices[0] = _ij21[0];
vinfos[4].indices[1] = _ij21[1];
vinfos[4].maxsolutions = _nj21;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x229=((IkReal(1.00000000000000))*(new_r12));
IkReal x230=((new_r02)*(sj17));
IkReal x231=((((IkReal(-1.00000000000000))*(sj17)*(x229)))+(((cj17)*(new_r02))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j15)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(1.00000000000000))+(new_r22));
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=x231;
evalcond[5]=x231;
evalcond[6]=((((cj17)*(new_r12)))+(x230));
evalcond[7]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[8]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[9]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
evalcond[10]=((((IkReal(-1.00000000000000))*(cj17)*(x229)))+(((IkReal(-1.00000000000000))*(x230))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(((((cj17)*(new_r10)))+(((new_r00)*(sj17))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj17)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj17))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj17)*(new_r10)))+(((new_r00)*(sj17)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj17)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj17)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((cj17)*(new_r10)))+(((new_r00)*(sj17)))), ((((IkReal(-1.00000000000000))*(cj17)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj17)))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[4];
IkReal x232=IKcos(j13);
IkReal x233=((IkReal(1.00000000000000))*(sj17));
IkReal x234=((IkReal(1.00000000000000))*(IKsin(j13)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r10)*(x233)))+(((IkReal(-1.00000000000000))*(x232)))+(((cj17)*(new_r00))));
evalcond[1]=((((cj17)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(x233)))+(((IkReal(-1.00000000000000))*(x234))));
evalcond[2]=((((new_r01)*(sj17)))+(x232)+(((cj17)*(new_r11))));
evalcond[3]=((((cj17)*(new_r10)))+(((new_r00)*(sj17)))+(((IkReal(-1.00000000000000))*(x234))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j15;
vinfos[1].indices[0] = _ij15[0];
vinfos[1].indices[1] = _ij15[1];
vinfos[1].maxsolutions = _nj15;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j21;
vinfos[4].indices[0] = _ij21[0];
vinfos[4].indices[1] = _ij21[1];
vinfos[4].maxsolutions = _nj21;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x235=((IkReal(-1.00000000000000))+(new_r22));
IkReal x236=((((IkReal(-1.00000000000000))*(new_r12)*(sj17)))+(((cj17)*(new_r02))));
IkReal x237=((((cj17)*(new_r12)))+(((new_r02)*(sj17))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j15)), IkReal(6.28318530717959))));
evalcond[1]=x235;
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=x236;
evalcond[5]=x236;
evalcond[6]=x237;
evalcond[7]=new_r20;
evalcond[8]=new_r21;
evalcond[9]=x235;
evalcond[10]=x237;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(new_r00)*(sj17)))+(((IkReal(-1.00000000000000))*(cj17)*(new_r10))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r01)*(sj17)))+(((cj17)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r00)*(sj17)))+(((IkReal(-1.00000000000000))*(cj17)*(new_r10)))))+IKsqr(((((new_r01)*(sj17)))+(((cj17)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r00)*(sj17)))+(((IkReal(-1.00000000000000))*(cj17)*(new_r10)))), ((((new_r01)*(sj17)))+(((cj17)*(new_r11)))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[4];
IkReal x238=IKsin(j13);
IkReal x239=((IkReal(1.00000000000000))*(sj17));
IkReal x240=((IkReal(1.00000000000000))*(IKcos(j13)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x240)))+(((IkReal(-1.00000000000000))*(new_r10)*(x239)))+(((cj17)*(new_r00))));
evalcond[1]=((((cj17)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(x239)))+(((IkReal(-1.00000000000000))*(x238))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x240)))+(((new_r01)*(sj17)))+(((cj17)*(new_r11))));
evalcond[3]=((x238)+(((cj17)*(new_r10)))+(((new_r00)*(sj17))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j15;
vinfos[1].indices[0] = _ij15[0];
vinfos[1].indices[1] = _ij15[1];
vinfos[1].maxsolutions = _nj15;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j21;
vinfos[4].indices[0] = _ij21[0];
vinfos[4].indices[1] = _ij21[1];
vinfos[4].maxsolutions = _nj21;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(((((IKabs(sj15) != 0)?((IkReal)1/(sj15)):(IkReal)1.0e30))*(((((cj17)*(new_r10)))+(((new_r00)*(sj17))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj15) != 0)?((IkReal)1/(cj15)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(sj15) != 0)?((IkReal)1/(sj15)):(IkReal)1.0e30))*(((((cj17)*(new_r10)))+(((new_r00)*(sj17)))))))+IKsqr(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj15) != 0)?((IkReal)1/(cj15)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((IKabs(sj15) != 0)?((IkReal)1/(sj15)):(IkReal)1.0e30))*(((((cj17)*(new_r10)))+(((new_r00)*(sj17)))))), ((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj15) != 0)?((IkReal)1/(cj15)):(IkReal)1.0e30))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x241=IKcos(j13);
IkReal x242=IKsin(j13);
IkReal x243=((IkReal(1.00000000000000))*(sj15));
IkReal x244=((cj17)*(new_r10));
IkReal x245=((new_r00)*(sj17));
IkReal x246=((new_r01)*(sj17));
IkReal x247=((cj17)*(new_r11));
IkReal x248=((IkReal(1.00000000000000))*(sj17));
IkReal x249=((IkReal(1.00000000000000))*(cj15));
IkReal x250=((IkReal(1.00000000000000))*(x241));
IkReal x251=((IkReal(1.00000000000000))*(x242));
evalcond[0]=((new_r21)+(((cj15)*(x241))));
evalcond[1]=((new_r20)+(((IkReal(-1.00000000000000))*(x242)*(x249))));
evalcond[2]=((((cj17)*(new_r00)))+(((IkReal(-1.00000000000000))*(x250)))+(((IkReal(-1.00000000000000))*(new_r10)*(x248))));
evalcond[3]=((((cj17)*(new_r01)))+(((IkReal(-1.00000000000000))*(x251)))+(((IkReal(-1.00000000000000))*(new_r11)*(x248))));
evalcond[4]=((((sj15)*(x241)))+(x247)+(x246));
evalcond[5]=((((IkReal(-1.00000000000000))*(x242)*(x243)))+(x245)+(x244));
evalcond[6]=((((IkReal(-1.00000000000000))*(x243)*(x244)))+(x242)+(((IkReal(-1.00000000000000))*(new_r20)*(x249)))+(((IkReal(-1.00000000000000))*(x243)*(x245))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x243)*(x247)))+(((IkReal(-1.00000000000000))*(new_r21)*(x249)))+(((IkReal(-1.00000000000000))*(x243)*(x246)))+(((IkReal(-1.00000000000000))*(x250))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j15;
vinfos[1].indices[0] = _ij15[0];
vinfos[1].indices[1] = _ij15[1];
vinfos[1].maxsolutions = _nj15;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j21;
vinfos[4].indices[0] = _ij21[0];
vinfos[4].indices[1] = _ij21[1];
vinfos[4].maxsolutions = _nj21;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(((((cj17)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj17))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj15) != 0)?((IkReal)1/(cj15)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj17)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj17)))))+IKsqr(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj15) != 0)?((IkReal)1/(cj15)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((cj17)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj17)))), ((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj15) != 0)?((IkReal)1/(cj15)):(IkReal)1.0e30))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x252=IKcos(j13);
IkReal x253=IKsin(j13);
IkReal x254=((IkReal(1.00000000000000))*(sj15));
IkReal x255=((cj17)*(new_r10));
IkReal x256=((new_r00)*(sj17));
IkReal x257=((new_r01)*(sj17));
IkReal x258=((cj17)*(new_r11));
IkReal x259=((IkReal(1.00000000000000))*(sj17));
IkReal x260=((IkReal(1.00000000000000))*(cj15));
IkReal x261=((IkReal(1.00000000000000))*(x252));
IkReal x262=((IkReal(1.00000000000000))*(x253));
evalcond[0]=((new_r21)+(((cj15)*(x252))));
evalcond[1]=((new_r20)+(((IkReal(-1.00000000000000))*(x253)*(x260))));
evalcond[2]=((((cj17)*(new_r00)))+(((IkReal(-1.00000000000000))*(x261)))+(((IkReal(-1.00000000000000))*(new_r10)*(x259))));
evalcond[3]=((((cj17)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(x259)))+(((IkReal(-1.00000000000000))*(x262))));
evalcond[4]=((x258)+(x257)+(((sj15)*(x252))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x253)*(x254)))+(x255)+(x256));
evalcond[6]=((((IkReal(-1.00000000000000))*(x254)*(x256)))+(x253)+(((IkReal(-1.00000000000000))*(x254)*(x255)))+(((IkReal(-1.00000000000000))*(new_r20)*(x260))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x254)*(x258)))+(((IkReal(-1.00000000000000))*(x254)*(x257)))+(((IkReal(-1.00000000000000))*(x261)))+(((IkReal(-1.00000000000000))*(new_r21)*(x260))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j15;
vinfos[1].indices[0] = _ij15[0];
vinfos[1].indices[1] = _ij15[1];
vinfos[1].maxsolutions = _nj15;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j21;
vinfos[4].indices[0] = _ij21[0];
vinfos[4].indices[1] = _ij21[1];
vinfos[4].maxsolutions = _nj21;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(((gconst66)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst66)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j13array[0]=IKatan2(((gconst66)*(new_r20)), ((IkReal(-1.00000000000000))*(gconst66)*(new_r21)));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x263=IKcos(j13);
IkReal x264=IKsin(j13);
IkReal x265=((IkReal(1.00000000000000))*(sj15));
IkReal x266=((cj17)*(new_r10));
IkReal x267=((new_r00)*(sj17));
IkReal x268=((new_r01)*(sj17));
IkReal x269=((cj17)*(new_r11));
IkReal x270=((IkReal(1.00000000000000))*(sj17));
IkReal x271=((IkReal(1.00000000000000))*(cj15));
IkReal x272=((IkReal(1.00000000000000))*(x263));
IkReal x273=((IkReal(1.00000000000000))*(x264));
evalcond[0]=((new_r21)+(((cj15)*(x263))));
evalcond[1]=((new_r20)+(((IkReal(-1.00000000000000))*(x264)*(x271))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r10)*(x270)))+(((cj17)*(new_r00)))+(((IkReal(-1.00000000000000))*(x272))));
evalcond[3]=((((cj17)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(x270)))+(((IkReal(-1.00000000000000))*(x273))));
evalcond[4]=((((sj15)*(x263)))+(x269)+(x268));
evalcond[5]=((((IkReal(-1.00000000000000))*(x264)*(x265)))+(x267)+(x266));
evalcond[6]=((((IkReal(-1.00000000000000))*(x265)*(x267)))+(((IkReal(-1.00000000000000))*(x265)*(x266)))+(((IkReal(-1.00000000000000))*(new_r20)*(x271)))+(x264));
evalcond[7]=((((IkReal(-1.00000000000000))*(x265)*(x269)))+(((IkReal(-1.00000000000000))*(x265)*(x268)))+(((IkReal(-1.00000000000000))*(new_r21)*(x271)))+(((IkReal(-1.00000000000000))*(x272))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j15;
vinfos[1].indices[0] = _ij15[0];
vinfos[1].indices[1] = _ij15[1];
vinfos[1].maxsolutions = _nj15;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j21;
vinfos[4].indices[0] = _ij21[0];
vinfos[4].indices[1] = _ij21[1];
vinfos[4].maxsolutions = _nj21;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
IkReal x274=((cj15)*(gconst64));
if( IKabs(((new_r02)*(x274))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r12)*(x274))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j17array[0]=IKatan2(((new_r02)*(x274)), ((new_r12)*(x274)));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[6];
IkReal x275=IKcos(j17);
IkReal x276=IKsin(j17);
IkReal x277=((IkReal(1.00000000000000))*(new_r12));
IkReal x278=((IkReal(1.00000000000000))*(sj15));
IkReal x279=((IkReal(1.00000000000000))*(cj15));
IkReal x280=((cj15)*(x276));
IkReal x281=((new_r02)*(x276));
IkReal x282=((cj15)*(x275));
evalcond[0]=((((new_r02)*(x275)))+(((IkReal(-1.00000000000000))*(x276)*(x277))));
evalcond[1]=((x281)+(((IkReal(-1.00000000000000))*(x279)))+(((new_r12)*(x275))));
evalcond[2]=((((new_r10)*(x282)))+(((IkReal(-1.00000000000000))*(new_r20)*(x278)))+(((new_r00)*(x280))));
evalcond[3]=((((new_r11)*(x282)))+(((new_r01)*(x280)))+(((IkReal(-1.00000000000000))*(new_r21)*(x278))));
evalcond[4]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22)*(x278)))+(((new_r02)*(x280)))+(((new_r12)*(x282))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x278)*(x281)))+(((IkReal(-1.00000000000000))*(new_r22)*(x279)))+(((IkReal(-1.00000000000000))*(sj15)*(x275)*(x277))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst66;
gconst66=IKsign(cj15);
dummyeval[0]=cj15;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj15;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=sj15;
dummyeval[1]=cj15;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x283=((((IkReal(-1.00000000000000))*(new_r12)*(sj17)))+(((cj17)*(new_r02))));
IkReal x284=((((cj17)*(new_r10)))+(((new_r00)*(sj17))));
IkReal x285=((((new_r01)*(sj17)))+(((cj17)*(new_r11))));
IkReal x286=((IkReal(-1.00000000000000))+(((cj17)*(new_r12)))+(((new_r02)*(sj17))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j15)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=x283;
evalcond[3]=x283;
evalcond[4]=x286;
evalcond[5]=x285;
evalcond[6]=x284;
evalcond[7]=x284;
evalcond[8]=x285;
evalcond[9]=x286;
evalcond[10]=((IkReal(-1.00000000000000))*(new_r22));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(((IkReal(-1.00000000000000))*(new_r21)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(new_r20, ((IkReal(-1.00000000000000))*(new_r21)));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[4];
IkReal x287=IKcos(j13);
IkReal x288=((IkReal(1.00000000000000))*(sj17));
IkReal x289=((IkReal(1.00000000000000))*(IKsin(j13)));
evalcond[0]=((x287)+(new_r21));
evalcond[1]=((((IkReal(-1.00000000000000))*(x289)))+(new_r20));
evalcond[2]=((((IkReal(-1.00000000000000))*(x287)))+(((IkReal(-1.00000000000000))*(new_r10)*(x288)))+(((cj17)*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r11)*(x288)))+(((cj17)*(new_r01)))+(((IkReal(-1.00000000000000))*(x289))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j15;
vinfos[1].indices[0] = _ij15[0];
vinfos[1].indices[1] = _ij15[1];
vinfos[1].maxsolutions = _nj15;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j21;
vinfos[4].indices[0] = _ij21[0];
vinfos[4].indices[1] = _ij21[1];
vinfos[4].maxsolutions = _nj21;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x290=((IkReal(1.00000000000000))*(new_r12));
IkReal x291=((new_r02)*(sj17));
IkReal x292=((new_r01)*(sj17));
IkReal x293=((cj17)*(new_r11));
IkReal x294=((new_r00)*(sj17));
IkReal x295=((cj17)*(new_r10));
IkReal x296=((((IkReal(-1.00000000000000))*(sj17)*(x290)))+(((cj17)*(new_r02))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j15, IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=x296;
evalcond[3]=x296;
evalcond[4]=((IkReal(1.00000000000000))+(((cj17)*(new_r12)))+(x291));
evalcond[5]=((x292)+(x293));
evalcond[6]=((x294)+(x295));
evalcond[7]=((((IkReal(-1.00000000000000))*(x294)))+(((IkReal(-1.00000000000000))*(x295))));
evalcond[8]=((((IkReal(-1.00000000000000))*(x292)))+(((IkReal(-1.00000000000000))*(x293))));
evalcond[9]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(cj17)*(x290)))+(((IkReal(-1.00000000000000))*(x291))));
evalcond[10]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r20)))+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r20)), new_r21);
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[4];
IkReal x297=IKsin(j13);
IkReal x298=((IkReal(1.00000000000000))*(sj17));
IkReal x299=((IkReal(1.00000000000000))*(IKcos(j13)));
evalcond[0]=((new_r21)+(((IkReal(-1.00000000000000))*(x299))));
evalcond[1]=((new_r20)+(x297));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r10)*(x298)))+(((cj17)*(new_r00)))+(((IkReal(-1.00000000000000))*(x299))));
evalcond[3]=((((cj17)*(new_r01)))+(((IkReal(-1.00000000000000))*(x297)))+(((IkReal(-1.00000000000000))*(new_r11)*(x298))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j15;
vinfos[1].indices[0] = _ij15[0];
vinfos[1].indices[1] = _ij15[1];
vinfos[1].maxsolutions = _nj15;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j21;
vinfos[4].indices[0] = _ij21[0];
vinfos[4].indices[1] = _ij21[1];
vinfos[4].maxsolutions = _nj21;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x300=((IkReal(1.00000000000000))*(new_r12));
IkReal x301=((new_r02)*(sj17));
IkReal x302=((((IkReal(-1.00000000000000))*(sj17)*(x300)))+(((cj17)*(new_r02))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j15)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(1.00000000000000))+(new_r22));
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=x302;
evalcond[5]=x302;
evalcond[6]=((((cj17)*(new_r12)))+(x301));
evalcond[7]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[8]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[9]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
evalcond[10]=((((IkReal(-1.00000000000000))*(cj17)*(x300)))+(((IkReal(-1.00000000000000))*(x301))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(((((cj17)*(new_r10)))+(((new_r00)*(sj17))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj17)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj17))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj17)*(new_r10)))+(((new_r00)*(sj17)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj17)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj17)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((cj17)*(new_r10)))+(((new_r00)*(sj17)))), ((((IkReal(-1.00000000000000))*(cj17)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj17)))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[4];
IkReal x303=IKcos(j13);
IkReal x304=((IkReal(1.00000000000000))*(sj17));
IkReal x305=((IkReal(1.00000000000000))*(IKsin(j13)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r10)*(x304)))+(((IkReal(-1.00000000000000))*(x303)))+(((cj17)*(new_r00))));
evalcond[1]=((((cj17)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(x304)))+(((IkReal(-1.00000000000000))*(x305))));
evalcond[2]=((((new_r01)*(sj17)))+(x303)+(((cj17)*(new_r11))));
evalcond[3]=((((cj17)*(new_r10)))+(((new_r00)*(sj17)))+(((IkReal(-1.00000000000000))*(x305))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j15;
vinfos[1].indices[0] = _ij15[0];
vinfos[1].indices[1] = _ij15[1];
vinfos[1].maxsolutions = _nj15;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j21;
vinfos[4].indices[0] = _ij21[0];
vinfos[4].indices[1] = _ij21[1];
vinfos[4].maxsolutions = _nj21;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x306=((IkReal(-1.00000000000000))+(new_r22));
IkReal x307=((((IkReal(-1.00000000000000))*(new_r12)*(sj17)))+(((cj17)*(new_r02))));
IkReal x308=((((cj17)*(new_r12)))+(((new_r02)*(sj17))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j15)), IkReal(6.28318530717959))));
evalcond[1]=x306;
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=x307;
evalcond[5]=x307;
evalcond[6]=x308;
evalcond[7]=new_r20;
evalcond[8]=new_r21;
evalcond[9]=x306;
evalcond[10]=x308;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(new_r00)*(sj17)))+(((IkReal(-1.00000000000000))*(cj17)*(new_r10))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r01)*(sj17)))+(((cj17)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r00)*(sj17)))+(((IkReal(-1.00000000000000))*(cj17)*(new_r10)))))+IKsqr(((((new_r01)*(sj17)))+(((cj17)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r00)*(sj17)))+(((IkReal(-1.00000000000000))*(cj17)*(new_r10)))), ((((new_r01)*(sj17)))+(((cj17)*(new_r11)))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[4];
IkReal x309=IKsin(j13);
IkReal x310=((IkReal(1.00000000000000))*(sj17));
IkReal x311=((IkReal(1.00000000000000))*(IKcos(j13)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r10)*(x310)))+(((cj17)*(new_r00)))+(((IkReal(-1.00000000000000))*(x311))));
evalcond[1]=((((cj17)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(x310)))+(((IkReal(-1.00000000000000))*(x309))));
evalcond[2]=((((new_r01)*(sj17)))+(((IkReal(-1.00000000000000))*(x311)))+(((cj17)*(new_r11))));
evalcond[3]=((x309)+(((cj17)*(new_r10)))+(((new_r00)*(sj17))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j15;
vinfos[1].indices[0] = _ij15[0];
vinfos[1].indices[1] = _ij15[1];
vinfos[1].maxsolutions = _nj15;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j21;
vinfos[4].indices[0] = _ij21[0];
vinfos[4].indices[1] = _ij21[1];
vinfos[4].maxsolutions = _nj21;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(((((IKabs(sj15) != 0)?((IkReal)1/(sj15)):(IkReal)1.0e30))*(((((cj17)*(new_r10)))+(((new_r00)*(sj17))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj15) != 0)?((IkReal)1/(cj15)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(sj15) != 0)?((IkReal)1/(sj15)):(IkReal)1.0e30))*(((((cj17)*(new_r10)))+(((new_r00)*(sj17)))))))+IKsqr(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj15) != 0)?((IkReal)1/(cj15)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((IKabs(sj15) != 0)?((IkReal)1/(sj15)):(IkReal)1.0e30))*(((((cj17)*(new_r10)))+(((new_r00)*(sj17)))))), ((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj15) != 0)?((IkReal)1/(cj15)):(IkReal)1.0e30))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x312=IKcos(j13);
IkReal x313=IKsin(j13);
IkReal x314=((IkReal(1.00000000000000))*(sj15));
IkReal x315=((cj17)*(new_r10));
IkReal x316=((new_r00)*(sj17));
IkReal x317=((new_r01)*(sj17));
IkReal x318=((cj17)*(new_r11));
IkReal x319=((IkReal(1.00000000000000))*(sj17));
IkReal x320=((IkReal(1.00000000000000))*(cj15));
IkReal x321=((IkReal(1.00000000000000))*(x312));
IkReal x322=((IkReal(1.00000000000000))*(x313));
evalcond[0]=((new_r21)+(((cj15)*(x312))));
evalcond[1]=((new_r20)+(((IkReal(-1.00000000000000))*(x313)*(x320))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x321)))+(((cj17)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(x319))));
evalcond[3]=((((cj17)*(new_r01)))+(((IkReal(-1.00000000000000))*(x322)))+(((IkReal(-1.00000000000000))*(new_r11)*(x319))));
evalcond[4]=((((sj15)*(x312)))+(x318)+(x317));
evalcond[5]=((x315)+(x316)+(((IkReal(-1.00000000000000))*(x313)*(x314))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r20)*(x320)))+(((IkReal(-1.00000000000000))*(x314)*(x316)))+(((IkReal(-1.00000000000000))*(x314)*(x315)))+(x313));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r21)*(x320)))+(((IkReal(-1.00000000000000))*(x321)))+(((IkReal(-1.00000000000000))*(x314)*(x318)))+(((IkReal(-1.00000000000000))*(x314)*(x317))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j15;
vinfos[1].indices[0] = _ij15[0];
vinfos[1].indices[1] = _ij15[1];
vinfos[1].maxsolutions = _nj15;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j21;
vinfos[4].indices[0] = _ij21[0];
vinfos[4].indices[1] = _ij21[1];
vinfos[4].maxsolutions = _nj21;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(((((cj17)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj17))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj15) != 0)?((IkReal)1/(cj15)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj17)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj17)))))+IKsqr(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj15) != 0)?((IkReal)1/(cj15)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((cj17)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj17)))), ((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj15) != 0)?((IkReal)1/(cj15)):(IkReal)1.0e30))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x323=IKcos(j13);
IkReal x324=IKsin(j13);
IkReal x325=((IkReal(1.00000000000000))*(sj15));
IkReal x326=((cj17)*(new_r10));
IkReal x327=((new_r00)*(sj17));
IkReal x328=((new_r01)*(sj17));
IkReal x329=((cj17)*(new_r11));
IkReal x330=((IkReal(1.00000000000000))*(sj17));
IkReal x331=((IkReal(1.00000000000000))*(cj15));
IkReal x332=((IkReal(1.00000000000000))*(x323));
IkReal x333=((IkReal(1.00000000000000))*(x324));
evalcond[0]=((new_r21)+(((cj15)*(x323))));
evalcond[1]=((new_r20)+(((IkReal(-1.00000000000000))*(x324)*(x331))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r10)*(x330)))+(((cj17)*(new_r00)))+(((IkReal(-1.00000000000000))*(x332))));
evalcond[3]=((((cj17)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(x330)))+(((IkReal(-1.00000000000000))*(x333))));
evalcond[4]=((((sj15)*(x323)))+(x328)+(x329));
evalcond[5]=((x326)+(x327)+(((IkReal(-1.00000000000000))*(x324)*(x325))));
evalcond[6]=((x324)+(((IkReal(-1.00000000000000))*(x325)*(x326)))+(((IkReal(-1.00000000000000))*(x325)*(x327)))+(((IkReal(-1.00000000000000))*(new_r20)*(x331))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x325)*(x328)))+(((IkReal(-1.00000000000000))*(new_r21)*(x331)))+(((IkReal(-1.00000000000000))*(x325)*(x329)))+(((IkReal(-1.00000000000000))*(x332))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j15;
vinfos[1].indices[0] = _ij15[0];
vinfos[1].indices[1] = _ij15[1];
vinfos[1].maxsolutions = _nj15;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j21;
vinfos[4].indices[0] = _ij21[0];
vinfos[4].indices[1] = _ij21[1];
vinfos[4].maxsolutions = _nj21;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(((gconst66)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst66)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j13array[0]=IKatan2(((gconst66)*(new_r20)), ((IkReal(-1.00000000000000))*(gconst66)*(new_r21)));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x334=IKcos(j13);
IkReal x335=IKsin(j13);
IkReal x336=((IkReal(1.00000000000000))*(sj15));
IkReal x337=((cj17)*(new_r10));
IkReal x338=((new_r00)*(sj17));
IkReal x339=((new_r01)*(sj17));
IkReal x340=((cj17)*(new_r11));
IkReal x341=((IkReal(1.00000000000000))*(sj17));
IkReal x342=((IkReal(1.00000000000000))*(cj15));
IkReal x343=((IkReal(1.00000000000000))*(x334));
IkReal x344=((IkReal(1.00000000000000))*(x335));
evalcond[0]=((new_r21)+(((cj15)*(x334))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x335)*(x342)))+(new_r20));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r10)*(x341)))+(((cj17)*(new_r00)))+(((IkReal(-1.00000000000000))*(x343))));
evalcond[3]=((((cj17)*(new_r01)))+(((IkReal(-1.00000000000000))*(x344)))+(((IkReal(-1.00000000000000))*(new_r11)*(x341))));
evalcond[4]=((((sj15)*(x334)))+(x339)+(x340));
evalcond[5]=((x338)+(x337)+(((IkReal(-1.00000000000000))*(x335)*(x336))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x336)*(x337)))+(((IkReal(-1.00000000000000))*(new_r20)*(x342)))+(x335)+(((IkReal(-1.00000000000000))*(x336)*(x338))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x336)*(x339)))+(((IkReal(-1.00000000000000))*(x336)*(x340)))+(((IkReal(-1.00000000000000))*(x343)))+(((IkReal(-1.00000000000000))*(new_r21)*(x342))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j15;
vinfos[1].indices[0] = _ij15[0];
vinfos[1].indices[1] = _ij15[1];
vinfos[1].maxsolutions = _nj15;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j21;
vinfos[4].indices[0] = _ij21[0];
vinfos[4].indices[1] = _ij21[1];
vinfos[4].maxsolutions = _nj21;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(((gconst63)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst63)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j13array[0]=IKatan2(((gconst63)*(new_r20)), ((IkReal(-1.00000000000000))*(gconst63)*(new_r21)));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[2];
evalcond[0]=((new_r21)+(((cj15)*(IKcos(j13)))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj15)*(IKsin(j13))))+(new_r20));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst67;
gconst67=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst68;
gconst68=IKsign(((((IkReal(-1.00000000000000))*(new_r01)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r11)*(new_r12)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r01)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r11)*(new_r12))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
IkReal x345=((cj13)*(gconst68)*(sj15));
if( IKabs(((new_r02)*(x345))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r12)*(x345))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j17array[0]=IKatan2(((new_r02)*(x345)), ((new_r12)*(x345)));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[12];
IkReal x346=IKcos(j17);
IkReal x347=IKsin(j17);
IkReal x348=((IkReal(1.00000000000000))*(cj13));
IkReal x349=((IkReal(1.00000000000000))*(sj15));
IkReal x350=((IkReal(1.00000000000000))*(cj15));
IkReal x351=((new_r00)*(x347));
IkReal x352=((new_r10)*(x346));
IkReal x353=((new_r11)*(x346));
IkReal x354=((new_r01)*(x347));
IkReal x355=((new_r02)*(x347));
IkReal x356=((new_r12)*(x346));
IkReal x357=((IkReal(1.00000000000000))*(x347));
evalcond[0]=((((new_r02)*(x346)))+(((IkReal(-1.00000000000000))*(new_r12)*(x357))));
evalcond[1]=((x355)+(x356)+(((IkReal(-1.00000000000000))*(x350))));
evalcond[2]=((((new_r00)*(x346)))+(((IkReal(-1.00000000000000))*(x348)))+(((IkReal(-1.00000000000000))*(new_r10)*(x357))));
evalcond[3]=((((IkReal(-1.00000000000000))*(sj13)))+(((IkReal(-1.00000000000000))*(new_r11)*(x357)))+(((new_r01)*(x346))));
evalcond[4]=((((cj13)*(sj15)))+(x353)+(x354));
evalcond[5]=((x351)+(x352)+(((IkReal(-1.00000000000000))*(sj13)*(x349))));
evalcond[6]=((((cj15)*(x352)))+(((cj15)*(x351)))+(((IkReal(-1.00000000000000))*(new_r20)*(x349))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r21)*(x349)))+(((cj15)*(x354)))+(((cj15)*(x353))));
evalcond[8]=((IkReal(-1.00000000000000))+(((cj15)*(x356)))+(((IkReal(-1.00000000000000))*(new_r22)*(x349)))+(((cj15)*(x355))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r22)*(x350)))+(((IkReal(-1.00000000000000))*(x349)*(x356)))+(((IkReal(-1.00000000000000))*(x349)*(x355))));
evalcond[10]=((((IkReal(-1.00000000000000))*(x349)*(x351)))+(((IkReal(-1.00000000000000))*(new_r20)*(x350)))+(((IkReal(-1.00000000000000))*(x349)*(x352)))+(sj13));
evalcond[11]=((((IkReal(-1.00000000000000))*(x348)))+(((IkReal(-1.00000000000000))*(x349)*(x354)))+(((IkReal(-1.00000000000000))*(new_r21)*(x350)))+(((IkReal(-1.00000000000000))*(x349)*(x353))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j15;
vinfos[1].indices[0] = _ij15[0];
vinfos[1].indices[1] = _ij15[1];
vinfos[1].maxsolutions = _nj15;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j21;
vinfos[4].indices[0] = _ij21[0];
vinfos[4].indices[1] = _ij21[1];
vinfos[4].maxsolutions = _nj21;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
IkReal x358=((cj15)*(gconst67));
if( IKabs(((new_r02)*(x358))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r12)*(x358))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j17array[0]=IKatan2(((new_r02)*(x358)), ((new_r12)*(x358)));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[12];
IkReal x359=IKcos(j17);
IkReal x360=IKsin(j17);
IkReal x361=((IkReal(1.00000000000000))*(cj13));
IkReal x362=((IkReal(1.00000000000000))*(sj15));
IkReal x363=((IkReal(1.00000000000000))*(cj15));
IkReal x364=((new_r00)*(x360));
IkReal x365=((new_r10)*(x359));
IkReal x366=((new_r11)*(x359));
IkReal x367=((new_r01)*(x360));
IkReal x368=((new_r02)*(x360));
IkReal x369=((new_r12)*(x359));
IkReal x370=((IkReal(1.00000000000000))*(x360));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r12)*(x370)))+(((new_r02)*(x359))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x363)))+(x368)+(x369));
evalcond[2]=((((new_r00)*(x359)))+(((IkReal(-1.00000000000000))*(new_r10)*(x370)))+(((IkReal(-1.00000000000000))*(x361))));
evalcond[3]=((((new_r01)*(x359)))+(((IkReal(-1.00000000000000))*(sj13)))+(((IkReal(-1.00000000000000))*(new_r11)*(x370))));
evalcond[4]=((x366)+(x367)+(((cj13)*(sj15))));
evalcond[5]=((((IkReal(-1.00000000000000))*(sj13)*(x362)))+(x364)+(x365));
evalcond[6]=((((cj15)*(x364)))+(((IkReal(-1.00000000000000))*(new_r20)*(x362)))+(((cj15)*(x365))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r21)*(x362)))+(((cj15)*(x366)))+(((cj15)*(x367))));
evalcond[8]=((IkReal(-1.00000000000000))+(((cj15)*(x369)))+(((cj15)*(x368)))+(((IkReal(-1.00000000000000))*(new_r22)*(x362))));
evalcond[9]=((((IkReal(-1.00000000000000))*(x362)*(x369)))+(((IkReal(-1.00000000000000))*(new_r22)*(x363)))+(((IkReal(-1.00000000000000))*(x362)*(x368))));
evalcond[10]=((((IkReal(-1.00000000000000))*(x362)*(x364)))+(((IkReal(-1.00000000000000))*(new_r20)*(x363)))+(sj13)+(((IkReal(-1.00000000000000))*(x362)*(x365))));
evalcond[11]=((((IkReal(-1.00000000000000))*(x361)))+(((IkReal(-1.00000000000000))*(x362)*(x367)))+(((IkReal(-1.00000000000000))*(x362)*(x366)))+(((IkReal(-1.00000000000000))*(new_r21)*(x363))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j15;
vinfos[1].indices[0] = _ij15[0];
vinfos[1].indices[1] = _ij15[1];
vinfos[1].maxsolutions = _nj15;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j21;
vinfos[4].indices[0] = _ij21[0];
vinfos[4].indices[1] = _ij21[1];
vinfos[4].maxsolutions = _nj21;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots8(IkReal rawcoeffs[8+1], IkReal rawroots[8], int& numroots)
{
    using std::complex;
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[8];
    const int maxsteps = 110;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[8];
    IkReal err[8];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[8] = {false};
    for(int i = 0; i < 8; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 8; ++j) {
                if( abs(roots[i]-roots[j]) < 8*tolsqrt ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "0e82d5fa10fc3484c2cd3214ea6da53f"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
