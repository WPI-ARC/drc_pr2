/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 61 generated on 2013-04-08 14:15:16.597838
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==61);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[0]);
x4=IKsin(j[2]);
x5=IKcos(j[4]);
x6=IKcos(j[3]);
x7=IKsin(j[1]);
x8=IKsin(j[3]);
x9=IKsin(j[4]);
x10=IKsin(j[6]);
x11=IKcos(j[5]);
x12=IKsin(j[5]);
x13=IKcos(j[6]);
x14=((IkReal(1.00000000000000))*(x6));
x15=((IkReal(1.00000000000000))*(x8));
x16=((IkReal(1.00000000000000))*(x3));
x17=((IkReal(0.220000000000000))*(x8));
x18=((IkReal(0.0450000000000000))*(x8));
x19=((IkReal(0.220000000000000))*(x6));
x20=((IkReal(0.300000000000000))*(x6));
x21=((IkReal(0.220000000000000))*(x5));
x22=((IkReal(1.00000000000000))*(x12));
x23=((IkReal(1.00000000000000))*(x11));
x24=((IkReal(1.00000000000000))*(x1));
x25=((IkReal(0.220000000000000))*(x9));
x26=((x2)*(x7));
x27=((x3)*(x7));
x28=((x0)*(x4));
x29=((x0)*(x7));
x30=((x0)*(x2));
x31=((x3)*(x4));
x32=((x16)*(x4));
x33=((IkReal(0.0450000000000000))*(x31));
x34=((IkReal(0.0450000000000000))*(x28));
x35=((x1)*(x14));
x36=((x1)*(x2)*(x3));
x37=((x4)*(x7)*(x9));
x38=((x15)*(x29));
x39=((x14)*(x29));
x40=((IkReal(0.0450000000000000))*(x1)*(x30));
x41=((x15)*(x27));
x42=((x14)*(x27));
x43=((IkReal(0.0450000000000000))*(x36));
x44=((((x1)*(x30)))+(((IkReal(-1.00000000000000))*(x32))));
x45=((((IkReal(-1.00000000000000))*(x1)*(x32)))+(x30));
x46=((x28)+(x36));
x47=((((x26)*(x8)))+(((IkReal(-1.00000000000000))*(x35))));
x48=((x32)+(((IkReal(-1.00000000000000))*(x24)*(x30))));
x49=((((IkReal(-1.00000000000000))*(x24)*(x28)))+(((IkReal(-1.00000000000000))*(x16)*(x2))));
x50=((x44)*(x6));
x51=((((IkReal(-1.00000000000000))*(x28)))+(((IkReal(-1.00000000000000))*(x1)*(x16)*(x2))));
x52=((((x14)*(x26)))+(((x1)*(x15))));
x53=((IkReal(-1.00000000000000))*(x52));
x54=((x43)+(x34));
x55=((x12)*(x47));
x56=((x45)*(x9));
x57=((x49)*(x9));
x58=((x49)*(x5));
x59=((x50)+(((IkReal(-1.00000000000000))*(x38))));
x60=((((x46)*(x6)))+(((IkReal(-1.00000000000000))*(x41))));
x61=((((IkReal(-1.00000000000000))*(x39)))+(((x48)*(x8))));
x62=((((x51)*(x8)))+(((IkReal(-1.00000000000000))*(x42))));
x63=((x37)+(((x5)*(x53))));
x64=((((x4)*(x5)*(x7)))+(((x52)*(x9))));
x65=((x12)*(x61));
x66=((x12)*(x62));
x67=((x56)+(((x5)*(x60))));
x68=((((x45)*(x5)))+(((x9)*(((x41)+(((IkReal(-1.00000000000000))*(x14)*(x46))))))));
x69=((x57)+(((x5)*(x59))));
x70=((x11)*(x67));
eerot[0]=((((x13)*(((x65)+(((x11)*(((x57)+(((x5)*(((x50)+(((IkReal(-1.00000000000000))*(x29)*(x8)))))))))))))))+(((x10)*(((x58)+(((x9)*(((((IkReal(-1.00000000000000))*(x14)*(x44)))+(x38))))))))));
eerot[1]=((((x13)*(((x58)+(((x9)*(((((IkReal(-1.00000000000000))*(x50)))+(x38)))))))))+(((x10)*(((((IkReal(-1.00000000000000))*(x22)*(x61)))+(((IkReal(-1.00000000000000))*(x23)*(x69))))))));
eerot[2]=((((x11)*(((((IkReal(-1.00000000000000))*(x15)*(x48)))+(x39)))))+(((x12)*(x69))));
eetrans[0]=((IkReal(0.220000000000000))+(((IkReal(0.550000000000000))*(x29)))+(((x12)*(((((x25)*(x49)))+(((x21)*(x59)))))))+(((x18)*(x29)))+(((x8)*(((((IkReal(-0.300000000000000))*(x31)))+(((IkReal(0.300000000000000))*(x1)*(x30)))))))+(x40)+(((x20)*(x29)))+(((IkReal(-1.00000000000000))*(x33)))+(((x6)*(((x33)+(((IkReal(-1.00000000000000))*(x40)))))))+(((x11)*(((((x19)*(x29)))+(((IkReal(-1.00000000000000))*(x17)*(x48))))))));
eerot[3]=((((x13)*(((x66)+(x70)))))+(((x10)*(x68))));
eerot[4]=((((x10)*(((((IkReal(-1.00000000000000))*(x23)*(x67)))+(((IkReal(-1.00000000000000))*(x22)*(x62)))))))+(((x13)*(x68))));
eerot[5]=((((x12)*(x67)))+(((x11)*(((((IkReal(-1.00000000000000))*(x15)*(x51)))+(x42))))));
eetrans[1]=((IkReal(0.140000000000000))+(x54)+(((x8)*(((((IkReal(0.300000000000000))*(x28)))+(((IkReal(0.300000000000000))*(x36)))))))+(((IkReal(0.550000000000000))*(x27)))+(((x18)*(x27)))+(((IkReal(-1.00000000000000))*(x54)*(x6)))+(((x12)*(((((x25)*(x45)))+(((x21)*(x60)))))))+(((x20)*(x27)))+(((x11)*(((((x19)*(x27)))+(((IkReal(-1.00000000000000))*(x17)*(x51))))))));
eerot[6]=((((x13)*(((x55)+(((x11)*(x63)))))))+(((x10)*(x64))));
eerot[7]=((((x10)*(((((IkReal(-1.00000000000000))*(x22)*(x47)))+(((IkReal(-1.00000000000000))*(x23)*(x63)))))))+(((x13)*(x64))));
eerot[8]=((((x11)*(((x35)+(((IkReal(-1.00000000000000))*(x15)*(x26)))))))+(((x12)*(x63))));
IkReal x71=((IkReal(0.0450000000000000))*(x26));
eetrans[2]=((IkReal(0.346000000000000))+(((x1)*(x20)))+(((x12)*(((((x25)*(x4)*(x7)))+(((x21)*(x53)))))))+(((IkReal(-0.300000000000000))*(x26)*(x8)))+(((x6)*(x71)))+(((x1)*(x18)))+(((x11)*(((((IkReal(-1.00000000000000))*(x17)*(x26)))+(((x1)*(x19)))))))+(((IkReal(-1.00000000000000))*(x71)))+(((IkReal(0.550000000000000))*(x1))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j5,cj5,sj5,htj5,j6,cj6,sj6,htj6,j2,cj2,sj2,htj2,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6,_ij2[2], _nj2;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1;  _ij2[0] = -1; _ij2[1] = -1; _nj2 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j2=pfree[0]; cj2=cos(pfree[0]); sj2=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((IkReal(-0.220000000000000))+(((IkReal(-0.220000000000000))*(r02)))+(px));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((IkReal(-0.140000000000000))+(((IkReal(-0.220000000000000))*(r12)))+(py));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((IkReal(-0.346000000000000))+(((IkReal(-0.220000000000000))*(r22)))+(pz));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((pz)*(pz))+((py)*(py)));
npx=((((py)*(r10)))+(((pz)*(r20)))+(((px)*(r00))));
npy=((((px)*(r01)))+(((pz)*(r21)))+(((py)*(r11))));
npz=((((py)*(r12)))+(((pz)*(r22)))+(((px)*(r02))));
rxp0_0=((((IkReal(-1.00000000000000))*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((IkReal(-1.00000000000000))*(pz)*(r00))));
rxp0_2=((((py)*(r00)))+(((IkReal(-1.00000000000000))*(px)*(r10))));
rxp1_0=((((pz)*(r11)))+(((IkReal(-1.00000000000000))*(py)*(r21))));
rxp1_1=((((IkReal(-1.00000000000000))*(pz)*(r01)))+(((px)*(r21))));
rxp1_2=((((py)*(r01)))+(((IkReal(-1.00000000000000))*(px)*(r11))));
rxp2_0=((((IkReal(-1.00000000000000))*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((IkReal(-1.00000000000000))*(pz)*(r02))));
rxp2_2=((((py)*(r02)))+(((IkReal(-1.00000000000000))*(px)*(r12))));
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
if( (((IkReal(-1.18441410190393))+(((IkReal(2.98679637348110))*(pp))))) < -1-IKFAST_SINCOS_THRESH || (((IkReal(-1.18441410190393))+(((IkReal(2.98679637348110))*(pp))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x72=IKasin(((IkReal(-1.18441410190393))+(((IkReal(2.98679637348110))*(pp)))));
j3array[0]=((IkReal(-1.34027003705633))+(((IkReal(1.00000000000000))*(x72))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((IkReal(1.80132261653346))+(((IkReal(-1.00000000000000))*(x72))));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IkReal dummyeval[1];
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal x73=(cj2)*(cj2);
IkReal x74=(cj3)*(cj3);
IkReal x75=(sj3)*(sj3);
IkReal x76=((IkReal(13.3333333333333))*(sj3));
IkReal x77=((cj3)*(x73));
dummyeval[0]=((IkReal(149.382716049383))+(((IkReal(24.4444444444444))*(sj3)))+(((IkReal(44.4444444444444))*(x74)))+(((cj3)*(x76)))+(((IkReal(-1.00000000000000))*(x76)*(x77)))+(((x73)*(x76)))+(x75)+(x73)+(((IkReal(162.962962962963))*(cj3)))+(((IkReal(44.4444444444444))*(x73)*(x75)))+(((IkReal(-2.00000000000000))*(x77)))+(((x73)*(x74))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x78=((IkReal(0.0450000000000000))*(cj2));
IkReal x79=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
IkReal x80=((((IkReal(0.300000000000000))*(cj2)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(x78)))+(x78));
if( IKabs(x79) < IKFAST_ATAN2_MAGTHRESH && IKabs(x80) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x81=((IkReal(1.00000000000000))*(IKatan2(x79, x80)));
if( ((((x80)*(x80))+((x79)*(x79)))) < (IkReal)-0.00001 )
    continue;
if( (((pz)*(((IKabs(IKabs(IKsqrt((((x80)*(x80))+((x79)*(x79)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x80)*(x80))+((x79)*(x79))))))):(IkReal)1.0e30)))) < -1-IKFAST_SINCOS_THRESH || (((pz)*(((IKabs(IKabs(IKsqrt((((x80)*(x80))+((x79)*(x79)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x80)*(x80))+((x79)*(x79))))))):(IkReal)1.0e30)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x82=IKasin(((pz)*(((IKabs(IKabs(IKsqrt((((x80)*(x80))+((x79)*(x79)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x80)*(x80))+((x79)*(x79))))))):(IkReal)1.0e30))));
j1array[0]=((((IkReal(-1.00000000000000))*(x82)))+(((IkReal(-1.00000000000000))*(x81))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x81)))+(x82));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=IKsign(((((sj1)*((py)*(py))))+(((sj1)*((px)*(px))))));
dummyeval[0]=((((sj1)*((py)*(py))))+(((sj1)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst1;
IkReal x83=((IkReal(1.00000000000000))*(cj2)*(sj1));
gconst1=IKsign(((((IkReal(-1.00000000000000))*(x83)*((px)*(px))))+(((IkReal(-1.00000000000000))*(x83)*((py)*(py))))));
IkReal x84=((IkReal(1.00000000000000))*(cj2)*(sj1));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x84)*((py)*(py))))+(((IkReal(-1.00000000000000))*(x84)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((((IkReal(-0.550000000000000))*(cj1)))+(((IkReal(-0.300000000000000))*(cj1)*(cj3)))+(pz)+(((IkReal(-0.0450000000000000))*(cj1)*(sj3))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
gconst2=IKsign(((((cj1)*((py)*(py))))+(((cj1)*((px)*(px))))));
dummyeval[0]=((((cj1)*((py)*(py))))+(((cj1)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(((((sj1)*((py)*(py))))+(((sj1)*((px)*(px))))));
dummyeval[0]=((((sj1)*((py)*(py))))+(((sj1)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x85=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x85;
evalcond[3]=x85;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign(((((IkReal(-1.00000000000000))*((py)*(py))))+(((IkReal(-1.00000000000000))*((px)*(px))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((py)*(py))))+(((IkReal(-1.00000000000000))*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign(((((IkReal(9.00000000000000))*((px)*(px))))+(((IkReal(9.00000000000000))*((py)*(py))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x86=((IkReal(110.000000000000))*(pz));
IkReal x87=((IkReal(100.000000000000))*(pp));
if( IKabs(((gconst5)*(((((px)*(x86)))+(((IkReal(-1.00000000000000))*(px)*(x87)))+(((IkReal(-21.2500000000000))*(px))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst5)*(((((IkReal(21.2500000000000))*(py)))+(((py)*(x87)))+(((IkReal(-1.00000000000000))*(py)*(x86))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst5)*(((((px)*(x86)))+(((IkReal(-1.00000000000000))*(px)*(x87)))+(((IkReal(-21.2500000000000))*(px)))))), ((gconst5)*(((((IkReal(21.2500000000000))*(py)))+(((py)*(x87)))+(((IkReal(-1.00000000000000))*(py)*(x86)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x88=IKsin(j0);
IkReal x89=IKcos(j0);
IkReal x90=((px)*(x88));
IkReal x91=((py)*(x89));
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x91)))+(x90));
evalcond[1]=((((px)*(x89)))+(((py)*(x88))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x90)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(x91))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x254=((IkReal(0.0450000000000000))*(py));
IkReal x255=((IkReal(0.300000000000000))*(sj3));
IkReal x256=((IkReal(0.0450000000000000))*(px));
if( IKabs(((gconst4)*(((x256)+(((IkReal(-1.00000000000000))*(cj3)*(x256)))+(((px)*(x255))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst4)*(((((cj3)*(x254)))+(((IkReal(-1.00000000000000))*(py)*(x255)))+(((IkReal(-1.00000000000000))*(x254))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst4)*(((x256)+(((IkReal(-1.00000000000000))*(cj3)*(x256)))+(((px)*(x255)))))), ((gconst4)*(((((cj3)*(x254)))+(((IkReal(-1.00000000000000))*(py)*(x255)))+(((IkReal(-1.00000000000000))*(x254)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x257=IKsin(j0);
IkReal x258=IKcos(j0);
IkReal x259=((px)*(x257));
IkReal x260=((py)*(x258));
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-0.0450000000000000))*(cj3)))+(x259)+(((IkReal(-1.00000000000000))*(x260))));
evalcond[1]=((((py)*(x257)))+(((px)*(x258))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x260)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(x259))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x261=((IkReal(0.0450000000000000))*(sj3));
IkReal x262=((IkReal(0.300000000000000))*(cj3));
IkReal x263=((x261)+(x262));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j1, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x263))));
evalcond[3]=((IkReal(0.550000000000000))+(pz)+(x263));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst6;
gconst6=IKsign(((((IkReal(-1.00000000000000))*((py)*(py))))+(((IkReal(-1.00000000000000))*((px)*(px))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((py)*(py))))+(((IkReal(-1.00000000000000))*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst7;
gconst7=IKsign(((((IkReal(9.00000000000000))*((px)*(px))))+(((IkReal(9.00000000000000))*((py)*(py))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x264=((IkReal(110.000000000000))*(pz));
IkReal x265=((IkReal(100.000000000000))*(pp));
if( IKabs(((gconst7)*(((((IkReal(-1.00000000000000))*(px)*(x264)))+(((IkReal(-21.2500000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x265))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst7)*(((((IkReal(21.2500000000000))*(py)))+(((py)*(x264)))+(((py)*(x265))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst7)*(((((IkReal(-1.00000000000000))*(px)*(x264)))+(((IkReal(-21.2500000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x265)))))), ((gconst7)*(((((IkReal(21.2500000000000))*(py)))+(((py)*(x264)))+(((py)*(x265)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x266=IKcos(j0);
IkReal x267=IKsin(j0);
IkReal x268=((px)*(x267));
IkReal x269=((IkReal(1.00000000000000))*(x266));
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(py)*(x269)))+(x268));
evalcond[1]=((((IkReal(-1.00000000000000))*(px)*(x269)))+(((IkReal(-1.00000000000000))*(py)*(x267))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(py)*(x266)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(x268))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x270=((IkReal(0.0450000000000000))*(py));
IkReal x271=((IkReal(0.300000000000000))*(sj3));
IkReal x272=((IkReal(0.0450000000000000))*(px));
if( IKabs(((gconst6)*(((((px)*(x271)))+(((IkReal(-1.00000000000000))*(cj3)*(x272)))+(x272))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst6)*(((((cj3)*(x270)))+(((IkReal(-1.00000000000000))*(x270)))+(((IkReal(-1.00000000000000))*(py)*(x271))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst6)*(((((px)*(x271)))+(((IkReal(-1.00000000000000))*(cj3)*(x272)))+(x272)))), ((gconst6)*(((((cj3)*(x270)))+(((IkReal(-1.00000000000000))*(x270)))+(((IkReal(-1.00000000000000))*(py)*(x271)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x273=IKcos(j0);
IkReal x274=IKsin(j0);
IkReal x275=((px)*(x274));
IkReal x276=((IkReal(1.00000000000000))*(x273));
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(x276)))+(((IkReal(-0.0450000000000000))*(cj3)))+(x275));
evalcond[1]=((((IkReal(-1.00000000000000))*(px)*(x276)))+(((IkReal(-1.00000000000000))*(py)*(x274))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(py)*(x273)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(x275)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-1.00000000000000))*(pz));
evalcond[3]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst8;
gconst8=IKsign(((((IkReal(-1.00000000000000))*((py)*(py))))+(((IkReal(-1.00000000000000))*((px)*(px))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((py)*(py))))+(((IkReal(-1.00000000000000))*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst9;
gconst9=IKsign(((((IkReal(0.0900000000000000))*((px)*(px))))+(((IkReal(0.0900000000000000))*((py)*(py))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x277=((IkReal(0.0270000000000000))*(cj3));
IkReal x278=((px)*(sj3));
IkReal x279=((py)*(sj3));
IkReal x280=((IkReal(0.330000000000000))*(cj3));
if( IKabs(((gconst9)*(((((IkReal(0.0495000000000000))*(py)))+(((IkReal(0.392500000000000))*(px)))+(((IkReal(-1.00000000000000))*(pp)*(px)))+(((IkReal(0.00405000000000000))*(x279)))+(((py)*(x277)))+(((px)*(x280)))+(((IkReal(0.0495000000000000))*(x278))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst9)*(((((IkReal(-0.392500000000000))*(py)))+(((IkReal(0.00405000000000000))*(x278)))+(((pp)*(py)))+(((px)*(x277)))+(((IkReal(-1.00000000000000))*(py)*(x280)))+(((IkReal(-0.0495000000000000))*(x279)))+(((IkReal(0.0495000000000000))*(px))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst9)*(((((IkReal(0.0495000000000000))*(py)))+(((IkReal(0.392500000000000))*(px)))+(((IkReal(-1.00000000000000))*(pp)*(px)))+(((IkReal(0.00405000000000000))*(x279)))+(((py)*(x277)))+(((px)*(x280)))+(((IkReal(0.0495000000000000))*(x278)))))), ((gconst9)*(((((IkReal(-0.392500000000000))*(py)))+(((IkReal(0.00405000000000000))*(x278)))+(((pp)*(py)))+(((px)*(x277)))+(((IkReal(-1.00000000000000))*(py)*(x280)))+(((IkReal(-0.0495000000000000))*(x279)))+(((IkReal(0.0495000000000000))*(px)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x281=IKsin(j0);
IkReal x282=IKcos(j0);
IkReal x283=((px)*(x281));
IkReal x284=((py)*(x282));
IkReal x285=((px)*(x282));
IkReal x286=((py)*(x281));
evalcond[0]=((IkReal(-0.550000000000000))+(x286)+(x285)+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(0.300000000000000))*(sj3)))+(x283)+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x284))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x285)))+(((IkReal(-0.0900000000000000))*(x283)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(x284)))+(((IkReal(1.10000000000000))*(x286))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x287=((px)*(sj3));
IkReal x288=((cj3)*(py));
IkReal x289=((py)*(sj3));
IkReal x290=((cj3)*(px));
if( IKabs(((gconst8)*(((((IkReal(0.0450000000000000))*(px)))+(((IkReal(0.300000000000000))*(x287)))+(((IkReal(-0.550000000000000))*(py)))+(((IkReal(-0.300000000000000))*(x288)))+(((IkReal(-0.0450000000000000))*(x290)))+(((IkReal(-0.0450000000000000))*(x289))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst8)*(((((IkReal(-0.0450000000000000))*(x287)))+(((IkReal(-0.300000000000000))*(x289)))+(((IkReal(-0.0450000000000000))*(py)))+(((IkReal(-0.300000000000000))*(x290)))+(((IkReal(-0.550000000000000))*(px)))+(((IkReal(0.0450000000000000))*(x288))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst8)*(((((IkReal(0.0450000000000000))*(px)))+(((IkReal(0.300000000000000))*(x287)))+(((IkReal(-0.550000000000000))*(py)))+(((IkReal(-0.300000000000000))*(x288)))+(((IkReal(-0.0450000000000000))*(x290)))+(((IkReal(-0.0450000000000000))*(x289)))))), ((gconst8)*(((((IkReal(-0.0450000000000000))*(x287)))+(((IkReal(-0.300000000000000))*(x289)))+(((IkReal(-0.0450000000000000))*(py)))+(((IkReal(-0.300000000000000))*(x290)))+(((IkReal(-0.550000000000000))*(px)))+(((IkReal(0.0450000000000000))*(x288)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x291=IKsin(j0);
IkReal x292=IKcos(j0);
IkReal x293=((px)*(x291));
IkReal x294=((py)*(x292));
IkReal x295=((px)*(x292));
IkReal x296=((py)*(x291));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(x295)+(x296));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-0.0450000000000000))*(cj3)))+(x293)+(((IkReal(-1.00000000000000))*(x294))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x296)))+(((IkReal(0.0900000000000000))*(x294)))+(((IkReal(1.10000000000000))*(x295)))+(((IkReal(-0.0900000000000000))*(x293))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=pz;
evalcond[3]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst10;
gconst10=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst11;
gconst11=IKsign(((((IkReal(1.10000000000000))*((py)*(py))))+(((IkReal(1.10000000000000))*((px)*(px))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x297=((IkReal(0.0495000000000000))*(px));
IkReal x298=((px)*(sj3));
IkReal x299=((IkReal(1.00000000000000))*(pp));
IkReal x300=((IkReal(0.0495000000000000))*(py));
IkReal x301=((IkReal(0.00405000000000000))*(cj3));
IkReal x302=((py)*(sj3));
if( IKabs(((gconst11)*(((((IkReal(-0.330000000000000))*(x298)))+(((IkReal(-0.208450000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x299)))+(((IkReal(-1.00000000000000))*(x297)))+(((cj3)*(x297)))+(((IkReal(0.0270000000000000))*(x302)))+(((IkReal(-1.00000000000000))*(py)*(x301))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst11)*(((((IkReal(-1.00000000000000))*(px)*(x299)))+(x300)+(((IkReal(-0.208450000000000))*(px)))+(((IkReal(-1.00000000000000))*(cj3)*(x300)))+(((IkReal(0.330000000000000))*(x302)))+(((IkReal(-1.00000000000000))*(px)*(x301)))+(((IkReal(0.0270000000000000))*(x298))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst11)*(((((IkReal(-0.330000000000000))*(x298)))+(((IkReal(-0.208450000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x299)))+(((IkReal(-1.00000000000000))*(x297)))+(((cj3)*(x297)))+(((IkReal(0.0270000000000000))*(x302)))+(((IkReal(-1.00000000000000))*(py)*(x301)))))), ((gconst11)*(((((IkReal(-1.00000000000000))*(px)*(x299)))+(x300)+(((IkReal(-0.208450000000000))*(px)))+(((IkReal(-1.00000000000000))*(cj3)*(x300)))+(((IkReal(0.330000000000000))*(x302)))+(((IkReal(-1.00000000000000))*(px)*(x301)))+(((IkReal(0.0270000000000000))*(x298)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x303=IKsin(j0);
IkReal x304=IKcos(j0);
IkReal x305=((px)*(x303));
IkReal x306=((IkReal(1.00000000000000))*(x304));
IkReal x307=((py)*(x303));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(px)*(x306)))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x307)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-0.0450000000000000))*(cj3)))+(x305)+(((IkReal(-1.00000000000000))*(py)*(x306))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-1.10000000000000))*(px)*(x304)))+(((IkReal(-1.10000000000000))*(x307)))+(((IkReal(-0.0900000000000000))*(x305)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(py)*(x304))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x308=((IkReal(0.0450000000000000))*(px));
IkReal x309=((cj3)*(py));
IkReal x310=((IkReal(0.300000000000000))*(sj3));
IkReal x311=((IkReal(0.0450000000000000))*(py));
if( IKabs(((gconst10)*(((((cj3)*(x308)))+(((IkReal(-1.00000000000000))*(x308)))+(((IkReal(-0.300000000000000))*(x309)))+(((IkReal(-0.550000000000000))*(py)))+(((IkReal(-1.00000000000000))*(px)*(x310)))+(((IkReal(-1.00000000000000))*(sj3)*(x311))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst10)*(((((IkReal(-0.0450000000000000))*(x309)))+(((IkReal(-0.550000000000000))*(px)))+(x311)+(((IkReal(-0.300000000000000))*(cj3)*(px)))+(((IkReal(-1.00000000000000))*(sj3)*(x308)))+(((py)*(x310))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst10)*(((((cj3)*(x308)))+(((IkReal(-1.00000000000000))*(x308)))+(((IkReal(-0.300000000000000))*(x309)))+(((IkReal(-0.550000000000000))*(py)))+(((IkReal(-1.00000000000000))*(px)*(x310)))+(((IkReal(-1.00000000000000))*(sj3)*(x311)))))), ((gconst10)*(((((IkReal(-0.0450000000000000))*(x309)))+(((IkReal(-0.550000000000000))*(px)))+(x311)+(((IkReal(-0.300000000000000))*(cj3)*(px)))+(((IkReal(-1.00000000000000))*(sj3)*(x308)))+(((py)*(x310)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x312=IKsin(j0);
IkReal x313=IKcos(j0);
IkReal x314=((px)*(x312));
IkReal x315=((IkReal(1.00000000000000))*(x313));
IkReal x316=((py)*(x312));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x316)))+(((IkReal(-0.300000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(px)*(x315))));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(py)*(x315)))+(x314));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-1.10000000000000))*(x316)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(py)*(x313)))+(((IkReal(-0.0900000000000000))*(x314)))+(((IkReal(-1.10000000000000))*(px)*(x313))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x317=((px)*(sj3));
IkReal x318=((cj3)*(py));
IkReal x319=((IkReal(0.0450000000000000))*(sj1));
IkReal x320=((IkReal(0.300000000000000))*(sj1));
IkReal x321=((py)*(sj3));
IkReal x322=((cj3)*(px));
IkReal x323=((IkReal(1.00000000000000))*(cj1)*(pz));
if( IKabs(((gconst3)*(((((IkReal(0.300000000000000))*(x318)))+(((IkReal(-1.00000000000000))*(py)*(x323)))+(((IkReal(-1.00000000000000))*(x317)*(x320)))+(((IkReal(0.550000000000000))*(py)))+(((IkReal(-1.00000000000000))*(px)*(x319)))+(((IkReal(0.0450000000000000))*(x321)))+(((x319)*(x322))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((((x320)*(x321)))+(((IkReal(0.0450000000000000))*(x317)))+(((IkReal(0.300000000000000))*(x322)))+(((IkReal(0.550000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x323)))+(((IkReal(-1.00000000000000))*(x318)*(x319)))+(((py)*(x319))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst3)*(((((IkReal(0.300000000000000))*(x318)))+(((IkReal(-1.00000000000000))*(py)*(x323)))+(((IkReal(-1.00000000000000))*(x317)*(x320)))+(((IkReal(0.550000000000000))*(py)))+(((IkReal(-1.00000000000000))*(px)*(x319)))+(((IkReal(0.0450000000000000))*(x321)))+(((x319)*(x322)))))), ((gconst3)*(((((x320)*(x321)))+(((IkReal(0.0450000000000000))*(x317)))+(((IkReal(0.300000000000000))*(x322)))+(((IkReal(0.550000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x323)))+(((IkReal(-1.00000000000000))*(x318)*(x319)))+(((py)*(x319)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x324=IKsin(j0);
IkReal x325=IKcos(j0);
IkReal x326=((IkReal(0.300000000000000))*(cj3));
IkReal x327=((IkReal(1.10000000000000))*(sj1));
IkReal x328=((IkReal(0.0450000000000000))*(sj3));
IkReal x329=((cj1)*(pz));
IkReal x330=((px)*(x324));
IkReal x331=((px)*(x325));
IkReal x332=((py)*(x325));
IkReal x333=((py)*(x324));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x326)))+(x329)+(((sj1)*(x333)))+(((sj1)*(x331)))+(((IkReal(-1.00000000000000))*(x328))));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x332)))+(((IkReal(-0.0450000000000000))*(cj3)))+(x330));
evalcond[2]=((((cj1)*(x333)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)))+(((cj1)*(x331))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x331)))+(((sj1)*(x326)))+(((IkReal(0.550000000000000))*(sj1)))+(((sj1)*(x328)))+(((IkReal(-1.00000000000000))*(x333))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x330)))+(((IkReal(1.10000000000000))*(x329)))+(((IkReal(-1.00000000000000))*(pp)))+(((x327)*(x331)))+(((x327)*(x333)))+(((IkReal(0.0900000000000000))*(x332))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x334=((cj1)*(py));
IkReal x335=((IkReal(0.300000000000000))*(sj3));
IkReal x336=((pz)*(sj1));
IkReal x337=((IkReal(0.0450000000000000))*(cj1)*(px));
if( IKabs(((gconst2)*(((((py)*(x336)))+(((IkReal(-1.00000000000000))*(x337)))+(((IkReal(-1.00000000000000))*(cj1)*(px)*(x335)))+(((cj3)*(x337))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((((px)*(x336)))+(((IkReal(-0.0450000000000000))*(cj3)*(x334)))+(((IkReal(0.0450000000000000))*(x334)))+(((x334)*(x335))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst2)*(((((py)*(x336)))+(((IkReal(-1.00000000000000))*(x337)))+(((IkReal(-1.00000000000000))*(cj1)*(px)*(x335)))+(((cj3)*(x337)))))), ((gconst2)*(((((px)*(x336)))+(((IkReal(-0.0450000000000000))*(cj3)*(x334)))+(((IkReal(0.0450000000000000))*(x334)))+(((x334)*(x335)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x338=IKsin(j0);
IkReal x339=IKcos(j0);
IkReal x340=((IkReal(0.300000000000000))*(cj3));
IkReal x341=((IkReal(1.10000000000000))*(sj1));
IkReal x342=((IkReal(0.0450000000000000))*(sj3));
IkReal x343=((cj1)*(pz));
IkReal x344=((px)*(x338));
IkReal x345=((px)*(x339));
IkReal x346=((py)*(x339));
IkReal x347=((py)*(x338));
evalcond[0]=((IkReal(-0.550000000000000))+(((sj1)*(x347)))+(((IkReal(-1.00000000000000))*(x340)))+(((IkReal(-1.00000000000000))*(x342)))+(((sj1)*(x345)))+(x343));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x346)))+(x344));
evalcond[2]=((((cj1)*(x347)))+(((cj1)*(x345)))+(((IkReal(-1.00000000000000))*(pz)*(sj1))));
evalcond[3]=((((sj1)*(x340)))+(((IkReal(0.550000000000000))*(sj1)))+(((IkReal(-1.00000000000000))*(x347)))+(((IkReal(-1.00000000000000))*(x345)))+(((sj1)*(x342))));
evalcond[4]=((IkReal(-0.212500000000000))+(((x341)*(x345)))+(((IkReal(-0.0900000000000000))*(x344)))+(((x341)*(x347)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(x346)))+(((IkReal(1.10000000000000))*(x343))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((((IkReal(-0.550000000000000))*(cj1)))+(((IkReal(-0.300000000000000))*(cj1)*(cj3)))+(pz)+(((IkReal(-0.0450000000000000))*(cj1)*(sj3))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst12;
gconst12=IKsign(((((cj1)*((py)*(py))))+(((cj1)*((px)*(px))))));
dummyeval[0]=((((cj1)*((py)*(py))))+(((cj1)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst13;
gconst13=IKsign(((((sj1)*((py)*(py))))+(((sj1)*((px)*(px))))));
dummyeval[0]=((((sj1)*((py)*(py))))+(((sj1)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x348=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x348;
evalcond[3]=x348;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst14;
gconst14=IKsign(((((IkReal(-1.00000000000000))*((py)*(py))))+(((IkReal(-1.00000000000000))*((px)*(px))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((py)*(py))))+(((IkReal(-1.00000000000000))*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst15;
gconst15=IKsign(((((IkReal(-9.00000000000000))*((px)*(px))))+(((IkReal(-9.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((py)*(py))))+(((IkReal(-1.00000000000000))*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x349=((IkReal(110.000000000000))*(pz));
IkReal x350=((IkReal(100.000000000000))*(pp));
if( IKabs(((gconst15)*(((((IkReal(-1.00000000000000))*(px)*(x350)))+(((px)*(x349)))+(((IkReal(-21.2500000000000))*(px))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst15)*(((((py)*(x350)))+(((IkReal(21.2500000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x349))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst15)*(((((IkReal(-1.00000000000000))*(px)*(x350)))+(((px)*(x349)))+(((IkReal(-21.2500000000000))*(px)))))), ((gconst15)*(((((py)*(x350)))+(((IkReal(21.2500000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x349)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x351=IKcos(j0);
IkReal x352=IKsin(j0);
IkReal x353=((px)*(x352));
IkReal x354=((IkReal(1.00000000000000))*(x351));
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(0.0450000000000000))*(cj3)))+(x353)+(((IkReal(-1.00000000000000))*(py)*(x354))));
evalcond[1]=((((IkReal(-1.00000000000000))*(px)*(x354)))+(((IkReal(-1.00000000000000))*(py)*(x352))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(py)*(x351)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(x353))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x355=((IkReal(0.0450000000000000))*(py));
IkReal x356=((IkReal(0.300000000000000))*(sj3));
IkReal x357=((IkReal(0.0450000000000000))*(px));
if( IKabs(((gconst14)*(((((IkReal(-1.00000000000000))*(px)*(x356)))+(((IkReal(-1.00000000000000))*(x357)))+(((cj3)*(x357))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst14)*(((((IkReal(-1.00000000000000))*(cj3)*(x355)))+(x355)+(((py)*(x356))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst14)*(((((IkReal(-1.00000000000000))*(px)*(x356)))+(((IkReal(-1.00000000000000))*(x357)))+(((cj3)*(x357)))))), ((gconst14)*(((((IkReal(-1.00000000000000))*(cj3)*(x355)))+(x355)+(((py)*(x356)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x358=IKcos(j0);
IkReal x359=IKsin(j0);
IkReal x360=((px)*(x359));
IkReal x361=((IkReal(1.00000000000000))*(x358));
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(-0.300000000000000))*(sj3)))+(x360)+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(py)*(x361))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x359)))+(((IkReal(-1.00000000000000))*(px)*(x361))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(x360)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(py)*(x358))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x362=((IkReal(0.0450000000000000))*(sj3));
IkReal x363=((IkReal(0.300000000000000))*(cj3));
IkReal x364=((x362)+(x363));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j1, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x364))));
evalcond[3]=((IkReal(0.550000000000000))+(x364)+(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst16;
gconst16=IKsign(((((IkReal(-1.00000000000000))*((py)*(py))))+(((IkReal(-1.00000000000000))*((px)*(px))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((py)*(py))))+(((IkReal(-1.00000000000000))*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst17;
gconst17=IKsign(((((IkReal(-9.00000000000000))*((px)*(px))))+(((IkReal(-9.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((py)*(py))))+(((IkReal(-1.00000000000000))*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x365=((IkReal(110.000000000000))*(pz));
IkReal x366=((IkReal(100.000000000000))*(pp));
if( IKabs(((gconst17)*(((((IkReal(-1.00000000000000))*(px)*(x365)))+(((IkReal(-1.00000000000000))*(px)*(x366)))+(((IkReal(-21.2500000000000))*(px))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst17)*(((((IkReal(21.2500000000000))*(py)))+(((py)*(x365)))+(((py)*(x366))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst17)*(((((IkReal(-1.00000000000000))*(px)*(x365)))+(((IkReal(-1.00000000000000))*(px)*(x366)))+(((IkReal(-21.2500000000000))*(px)))))), ((gconst17)*(((((IkReal(21.2500000000000))*(py)))+(((py)*(x365)))+(((py)*(x366)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x367=IKsin(j0);
IkReal x368=IKcos(j0);
IkReal x369=((px)*(x367));
IkReal x370=((py)*(x368));
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(-0.300000000000000))*(sj3)))+(x369)+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x370))));
evalcond[1]=((((px)*(x368)))+(((py)*(x367))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(x370)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(x369))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x371=((IkReal(0.0450000000000000))*(py));
IkReal x372=((IkReal(0.300000000000000))*(sj3));
IkReal x373=((IkReal(0.0450000000000000))*(px));
if( IKabs(((gconst16)*(((((cj3)*(x373)))+(((IkReal(-1.00000000000000))*(px)*(x372)))+(((IkReal(-1.00000000000000))*(x373))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst16)*(((x371)+(((py)*(x372)))+(((IkReal(-1.00000000000000))*(cj3)*(x371))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst16)*(((((cj3)*(x373)))+(((IkReal(-1.00000000000000))*(px)*(x372)))+(((IkReal(-1.00000000000000))*(x373)))))), ((gconst16)*(((x371)+(((py)*(x372)))+(((IkReal(-1.00000000000000))*(cj3)*(x371)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x374=IKsin(j0);
IkReal x375=IKcos(j0);
IkReal x376=((px)*(x374));
IkReal x377=((py)*(x375));
evalcond[0]=((IkReal(-0.0450000000000000))+(x376)+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x377))));
evalcond[1]=((((py)*(x374)))+(((px)*(x375))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x377)))+(((IkReal(0.0900000000000000))*(x376)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=pz;
evalcond[3]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst18;
gconst18=IKsign(((((IkReal(-1.00000000000000))*((py)*(py))))+(((IkReal(-1.00000000000000))*((px)*(px))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((py)*(py))))+(((IkReal(-1.00000000000000))*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst19;
gconst19=IKsign(((((IkReal(-0.0900000000000000))*((py)*(py))))+(((IkReal(-0.0900000000000000))*((px)*(px))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((py)*(py))))+(((IkReal(-1.00000000000000))*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x378=((cj3)*(px));
IkReal x379=((IkReal(0.0495000000000000))*(px));
IkReal x380=((IkReal(0.00405000000000000))*(sj3));
IkReal x381=((IkReal(0.0495000000000000))*(py));
IkReal x382=((cj3)*(py));
if( IKabs(((gconst19)*(((((IkReal(-1.00000000000000))*(py)*(x380)))+(((IkReal(-1.00000000000000))*(x381)))+(((IkReal(0.392500000000000))*(px)))+(((IkReal(-0.0270000000000000))*(x382)))+(((IkReal(-1.00000000000000))*(pp)*(px)))+(((sj3)*(x379)))+(((IkReal(0.330000000000000))*(x378))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst19)*(((((IkReal(-0.392500000000000))*(py)))+(((IkReal(-1.00000000000000))*(sj3)*(x381)))+(((pp)*(py)))+(((IkReal(-0.330000000000000))*(x382)))+(((IkReal(-0.0270000000000000))*(x378)))+(((IkReal(-1.00000000000000))*(px)*(x380)))+(((IkReal(-1.00000000000000))*(x379))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst19)*(((((IkReal(-1.00000000000000))*(py)*(x380)))+(((IkReal(-1.00000000000000))*(x381)))+(((IkReal(0.392500000000000))*(px)))+(((IkReal(-0.0270000000000000))*(x382)))+(((IkReal(-1.00000000000000))*(pp)*(px)))+(((sj3)*(x379)))+(((IkReal(0.330000000000000))*(x378)))))), ((gconst19)*(((((IkReal(-0.392500000000000))*(py)))+(((IkReal(-1.00000000000000))*(sj3)*(x381)))+(((pp)*(py)))+(((IkReal(-0.330000000000000))*(x382)))+(((IkReal(-0.0270000000000000))*(x378)))+(((IkReal(-1.00000000000000))*(px)*(x380)))+(((IkReal(-1.00000000000000))*(x379)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x383=IKsin(j0);
IkReal x384=IKcos(j0);
IkReal x385=((px)*(x383));
IkReal x386=((py)*(x384));
IkReal x387=((px)*(x384));
IkReal x388=((py)*(x383));
evalcond[0]=((IkReal(-0.550000000000000))+(x387)+(x388)+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[1]=((IkReal(-0.0450000000000000))+(x385)+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x386))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x388)))+(((IkReal(-0.0900000000000000))*(x386)))+(((IkReal(0.0900000000000000))*(x385)))+(((IkReal(1.10000000000000))*(x387))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x389=((IkReal(0.0450000000000000))*(px));
IkReal x390=((cj3)*(py));
IkReal x391=((IkReal(0.300000000000000))*(sj3));
IkReal x392=((IkReal(0.0450000000000000))*(py));
if( IKabs(((gconst18)*(((((IkReal(-1.00000000000000))*(px)*(x391)))+(((IkReal(-1.00000000000000))*(sj3)*(x392)))+(((IkReal(-0.550000000000000))*(py)))+(((IkReal(-1.00000000000000))*(x389)))+(((IkReal(-0.300000000000000))*(x390)))+(((cj3)*(x389))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst18)*(((((IkReal(-0.550000000000000))*(px)))+(((IkReal(-1.00000000000000))*(sj3)*(x389)))+(((IkReal(-0.300000000000000))*(cj3)*(px)))+(((IkReal(-0.0450000000000000))*(x390)))+(((py)*(x391)))+(x392))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst18)*(((((IkReal(-1.00000000000000))*(px)*(x391)))+(((IkReal(-1.00000000000000))*(sj3)*(x392)))+(((IkReal(-0.550000000000000))*(py)))+(((IkReal(-1.00000000000000))*(x389)))+(((IkReal(-0.300000000000000))*(x390)))+(((cj3)*(x389)))))), ((gconst18)*(((((IkReal(-0.550000000000000))*(px)))+(((IkReal(-1.00000000000000))*(sj3)*(x389)))+(((IkReal(-0.300000000000000))*(cj3)*(px)))+(((IkReal(-0.0450000000000000))*(x390)))+(((py)*(x391)))+(x392)))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x393=IKsin(j0);
IkReal x394=IKcos(j0);
IkReal x395=((px)*(x393));
IkReal x396=((py)*(x394));
IkReal x397=((px)*(x394));
IkReal x398=((py)*(x393));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(x397)+(x398));
evalcond[1]=((IkReal(-0.0450000000000000))+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x396)))+(x395));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x398)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(x395)))+(((IkReal(1.10000000000000))*(x397)))+(((IkReal(-0.0900000000000000))*(x396))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-1.00000000000000))*(pz));
evalcond[3]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst20;
gconst20=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst21;
gconst21=IKsign(((((IkReal(1.10000000000000))*((py)*(py))))+(((IkReal(1.10000000000000))*((px)*(px))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x399=((IkReal(0.0495000000000000))*(px));
IkReal x400=((IkReal(0.330000000000000))*(sj3));
IkReal x401=((IkReal(1.00000000000000))*(pp));
IkReal x402=((IkReal(0.0495000000000000))*(py));
IkReal x403=((IkReal(0.00405000000000000))*(cj3));
IkReal x404=((IkReal(0.0270000000000000))*(sj3));
if( IKabs(((gconst21)*(((((IkReal(-1.00000000000000))*(py)*(x401)))+(((IkReal(-0.208450000000000))*(py)))+(((IkReal(-1.00000000000000))*(cj3)*(x399)))+(((py)*(x404)))+(x399)+(((IkReal(-1.00000000000000))*(py)*(x403)))+(((px)*(x400))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst21)*(((((IkReal(-1.00000000000000))*(x402)))+(((IkReal(-1.00000000000000))*(py)*(x400)))+(((IkReal(-0.208450000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x403)))+(((IkReal(-1.00000000000000))*(px)*(x401)))+(((cj3)*(x402)))+(((px)*(x404))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst21)*(((((IkReal(-1.00000000000000))*(py)*(x401)))+(((IkReal(-0.208450000000000))*(py)))+(((IkReal(-1.00000000000000))*(cj3)*(x399)))+(((py)*(x404)))+(x399)+(((IkReal(-1.00000000000000))*(py)*(x403)))+(((px)*(x400)))))), ((gconst21)*(((((IkReal(-1.00000000000000))*(x402)))+(((IkReal(-1.00000000000000))*(py)*(x400)))+(((IkReal(-0.208450000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x403)))+(((IkReal(-1.00000000000000))*(px)*(x401)))+(((cj3)*(x402)))+(((px)*(x404)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x405=IKsin(j0);
IkReal x406=IKcos(j0);
IkReal x407=((px)*(x405));
IkReal x408=((IkReal(1.00000000000000))*(x406));
IkReal x409=((py)*(x405));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x409)))+(((IkReal(-0.300000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(px)*(x408))));
evalcond[1]=((IkReal(-0.0450000000000000))+(((IkReal(-1.00000000000000))*(py)*(x408)))+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(0.0450000000000000))*(cj3)))+(x407));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x407)))+(((IkReal(-1.10000000000000))*(x409)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(py)*(x406)))+(((IkReal(-1.10000000000000))*(px)*(x406))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x410=((px)*(sj3));
IkReal x411=((IkReal(0.300000000000000))*(cj3));
IkReal x412=((IkReal(0.0450000000000000))*(py));
IkReal x413=((IkReal(0.0450000000000000))*(px));
if( IKabs(((gconst20)*(((((IkReal(-1.00000000000000))*(sj3)*(x412)))+(((IkReal(-0.550000000000000))*(py)))+(((IkReal(0.300000000000000))*(x410)))+(((IkReal(-1.00000000000000))*(py)*(x411)))+(((IkReal(-1.00000000000000))*(cj3)*(x413)))+(x413))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst20)*(((((IkReal(-0.300000000000000))*(py)*(sj3)))+(((cj3)*(x412)))+(((IkReal(-1.00000000000000))*(x412)))+(((IkReal(-0.550000000000000))*(px)))+(((IkReal(-0.0450000000000000))*(x410)))+(((IkReal(-1.00000000000000))*(px)*(x411))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst20)*(((((IkReal(-1.00000000000000))*(sj3)*(x412)))+(((IkReal(-0.550000000000000))*(py)))+(((IkReal(0.300000000000000))*(x410)))+(((IkReal(-1.00000000000000))*(py)*(x411)))+(((IkReal(-1.00000000000000))*(cj3)*(x413)))+(x413)))), ((gconst20)*(((((IkReal(-0.300000000000000))*(py)*(sj3)))+(((cj3)*(x412)))+(((IkReal(-1.00000000000000))*(x412)))+(((IkReal(-0.550000000000000))*(px)))+(((IkReal(-0.0450000000000000))*(x410)))+(((IkReal(-1.00000000000000))*(px)*(x411)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x414=IKsin(j0);
IkReal x415=IKcos(j0);
IkReal x416=((px)*(x414));
IkReal x417=((IkReal(1.00000000000000))*(x415));
IkReal x418=((py)*(x414));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x418)))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(px)*(x417)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[1]=((IkReal(-0.0450000000000000))+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(py)*(x417)))+(x416));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-1.10000000000000))*(px)*(x415)))+(((IkReal(0.0900000000000000))*(x416)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(py)*(x415)))+(((IkReal(-1.10000000000000))*(x418))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x419=((px)*(sj3));
IkReal x420=((cj3)*(py));
IkReal x421=((IkReal(0.0450000000000000))*(sj1));
IkReal x422=((IkReal(0.300000000000000))*(sj1));
IkReal x423=((py)*(sj3));
IkReal x424=((cj3)*(px));
IkReal x425=((IkReal(1.00000000000000))*(cj1)*(pz));
if( IKabs(((gconst13)*(((((IkReal(0.0450000000000000))*(x423)))+(((IkReal(0.550000000000000))*(py)))+(((px)*(x421)))+(((IkReal(-1.00000000000000))*(py)*(x425)))+(((IkReal(-1.00000000000000))*(x421)*(x424)))+(((x419)*(x422)))+(((IkReal(0.300000000000000))*(x420))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst13)*(((((IkReal(-1.00000000000000))*(x422)*(x423)))+(((IkReal(0.550000000000000))*(px)))+(((x420)*(x421)))+(((IkReal(-1.00000000000000))*(px)*(x425)))+(((IkReal(0.0450000000000000))*(x419)))+(((IkReal(-1.00000000000000))*(py)*(x421)))+(((IkReal(0.300000000000000))*(x424))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst13)*(((((IkReal(0.0450000000000000))*(x423)))+(((IkReal(0.550000000000000))*(py)))+(((px)*(x421)))+(((IkReal(-1.00000000000000))*(py)*(x425)))+(((IkReal(-1.00000000000000))*(x421)*(x424)))+(((x419)*(x422)))+(((IkReal(0.300000000000000))*(x420)))))), ((gconst13)*(((((IkReal(-1.00000000000000))*(x422)*(x423)))+(((IkReal(0.550000000000000))*(px)))+(((x420)*(x421)))+(((IkReal(-1.00000000000000))*(px)*(x425)))+(((IkReal(0.0450000000000000))*(x419)))+(((IkReal(-1.00000000000000))*(py)*(x421)))+(((IkReal(0.300000000000000))*(x424)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x426=IKsin(j0);
IkReal x427=IKcos(j0);
IkReal x428=((IkReal(0.300000000000000))*(cj3));
IkReal x429=((IkReal(1.10000000000000))*(sj1));
IkReal x430=((IkReal(1.00000000000000))*(cj1));
IkReal x431=((IkReal(0.0450000000000000))*(sj3));
IkReal x432=((cj1)*(pz));
IkReal x433=((px)*(x426));
IkReal x434=((px)*(x427));
IkReal x435=((py)*(x427));
IkReal x436=((py)*(x426));
evalcond[0]=((IkReal(-0.550000000000000))+(x432)+(((sj1)*(x436)))+(((IkReal(-1.00000000000000))*(x431)))+(((IkReal(-1.00000000000000))*(x428)))+(((sj1)*(x434))));
evalcond[1]=((IkReal(-0.0450000000000000))+(((IkReal(-1.00000000000000))*(x435)))+(x433)+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(0.0450000000000000))*(cj3))));
evalcond[2]=((((pz)*(sj1)))+(((IkReal(-1.00000000000000))*(x430)*(x436)))+(((IkReal(-1.00000000000000))*(x430)*(x434))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x436)))+(((IkReal(-1.00000000000000))*(x434)))+(((IkReal(0.550000000000000))*(sj1)))+(((sj1)*(x431)))+(((sj1)*(x428))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x432)))+(((IkReal(-0.0900000000000000))*(x435)))+(((IkReal(0.0900000000000000))*(x433)))+(((x429)*(x434)))+(((IkReal(-1.00000000000000))*(pp)))+(((x429)*(x436))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x437=((cj1)*(py));
IkReal x438=((IkReal(0.300000000000000))*(sj3));
IkReal x439=((pz)*(sj1));
IkReal x440=((IkReal(0.0450000000000000))*(cj1)*(px));
if( IKabs(((gconst12)*(((x440)+(((IkReal(-1.00000000000000))*(cj3)*(x440)))+(((cj1)*(px)*(x438)))+(((py)*(x439))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst12)*(((((IkReal(0.0450000000000000))*(cj3)*(x437)))+(((IkReal(-1.00000000000000))*(x437)*(x438)))+(((px)*(x439)))+(((IkReal(-0.0450000000000000))*(x437))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst12)*(((x440)+(((IkReal(-1.00000000000000))*(cj3)*(x440)))+(((cj1)*(px)*(x438)))+(((py)*(x439)))))), ((gconst12)*(((((IkReal(0.0450000000000000))*(cj3)*(x437)))+(((IkReal(-1.00000000000000))*(x437)*(x438)))+(((px)*(x439)))+(((IkReal(-0.0450000000000000))*(x437)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x441=IKsin(j0);
IkReal x442=IKcos(j0);
IkReal x443=((IkReal(0.300000000000000))*(cj3));
IkReal x444=((IkReal(1.10000000000000))*(sj1));
IkReal x445=((IkReal(1.00000000000000))*(cj1));
IkReal x446=((IkReal(0.0450000000000000))*(sj3));
IkReal x447=((cj1)*(pz));
IkReal x448=((px)*(x441));
IkReal x449=((px)*(x442));
IkReal x450=((py)*(x442));
IkReal x451=((py)*(x441));
evalcond[0]=((IkReal(-0.550000000000000))+(x447)+(((sj1)*(x449)))+(((IkReal(-1.00000000000000))*(x443)))+(((IkReal(-1.00000000000000))*(x446)))+(((sj1)*(x451))));
evalcond[1]=((IkReal(-0.0450000000000000))+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x450)))+(x448)+(((IkReal(0.0450000000000000))*(cj3))));
evalcond[2]=((((pz)*(sj1)))+(((IkReal(-1.00000000000000))*(x445)*(x451)))+(((IkReal(-1.00000000000000))*(x445)*(x449))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x451)))+(((IkReal(-1.00000000000000))*(x449)))+(((sj1)*(x443)))+(((IkReal(0.550000000000000))*(sj1)))+(((sj1)*(x446))));
evalcond[4]=((IkReal(-0.212500000000000))+(((x444)*(x449)))+(((IkReal(1.10000000000000))*(x447)))+(((IkReal(0.0900000000000000))*(x448)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(x450)))+(((x444)*(x451))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x452=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x452;
evalcond[3]=x452;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst23;
gconst23=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst22;
IkReal x453=((IkReal(1.00000000000000))*(sj2));
gconst22=IKsign(((((IkReal(-1.00000000000000))*(x453)*((py)*(py))))+(((IkReal(-1.00000000000000))*(x453)*((px)*(px))))));
IkReal x454=((IkReal(1.00000000000000))*(sj2));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x454)*((py)*(py))))+(((IkReal(-1.00000000000000))*(x454)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x455=x452;
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x455;
evalcond[3]=x455;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst24;
gconst24=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst25;
gconst25=IKsign(((((IkReal(-9.00000000000000))*((px)*(px))))+(((IkReal(-9.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((py)*(py))))+(((IkReal(-1.00000000000000))*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x456=((IkReal(110.000000000000))*(pz));
IkReal x457=((IkReal(100.000000000000))*(pp));
if( IKabs(((gconst25)*(((((py)*(x456)))+(((IkReal(-21.2500000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x457))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst25)*(((((px)*(x456)))+(((IkReal(-1.00000000000000))*(px)*(x457)))+(((IkReal(-21.2500000000000))*(px))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst25)*(((((py)*(x456)))+(((IkReal(-21.2500000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x457)))))), ((gconst25)*(((((px)*(x456)))+(((IkReal(-1.00000000000000))*(px)*(x457)))+(((IkReal(-21.2500000000000))*(px)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x458=IKcos(j0);
IkReal x459=IKsin(j0);
IkReal x460=((IkReal(1.00000000000000))*(x458));
IkReal x461=((py)*(x459));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x460)))+(((px)*(x459))));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x461)))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(px)*(x460))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(px)*(x458)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(x461))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x462=((IkReal(0.0450000000000000))*(py));
IkReal x463=((IkReal(0.300000000000000))*(sj3));
IkReal x464=((IkReal(0.0450000000000000))*(px));
if( IKabs(((gconst24)*(((((IkReal(-1.00000000000000))*(cj3)*(x462)))+(x462)+(((py)*(x463))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst24)*(((((px)*(x463)))+(x464)+(((IkReal(-1.00000000000000))*(cj3)*(x464))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst24)*(((((IkReal(-1.00000000000000))*(cj3)*(x462)))+(x462)+(((py)*(x463)))))), ((gconst24)*(((((px)*(x463)))+(x464)+(((IkReal(-1.00000000000000))*(cj3)*(x464)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x465=IKcos(j0);
IkReal x466=IKsin(j0);
IkReal x467=((IkReal(1.00000000000000))*(x465));
IkReal x468=((py)*(x466));
evalcond[0]=((((px)*(x466)))+(((IkReal(-1.00000000000000))*(py)*(x467))));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(px)*(x467)))+(((IkReal(-1.00000000000000))*(x468))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(px)*(x465)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(x468))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x469=x452;
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j2, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x469;
evalcond[3]=x469;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst26;
gconst26=IKsign(((((IkReal(-1.00000000000000))*((py)*(py))))+(((IkReal(-1.00000000000000))*((px)*(px))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((py)*(py))))+(((IkReal(-1.00000000000000))*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst27;
gconst27=IKsign(((((IkReal(9.00000000000000))*((px)*(px))))+(((IkReal(9.00000000000000))*((py)*(py))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x470=((IkReal(110.000000000000))*(pz));
IkReal x471=((IkReal(100.000000000000))*(pp));
if( IKabs(((gconst27)*(((((IkReal(-21.2500000000000))*(py)))+(((py)*(x470)))+(((IkReal(-1.00000000000000))*(py)*(x471))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst27)*(((((px)*(x470)))+(((IkReal(-1.00000000000000))*(px)*(x471)))+(((IkReal(-21.2500000000000))*(px))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst27)*(((((IkReal(-21.2500000000000))*(py)))+(((py)*(x470)))+(((IkReal(-1.00000000000000))*(py)*(x471)))))), ((gconst27)*(((((px)*(x470)))+(((IkReal(-1.00000000000000))*(px)*(x471)))+(((IkReal(-21.2500000000000))*(px)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x472=IKsin(j0);
IkReal x473=IKcos(j0);
IkReal x474=((px)*(x473));
IkReal x475=((py)*(x472));
evalcond[0]=((((px)*(x472)))+(((IkReal(-1.00000000000000))*(py)*(x473))));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(0.300000000000000))*(sj3)))+(x474)+(x475)+(((IkReal(-0.0450000000000000))*(cj3))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(x474)))+(((IkReal(-0.0900000000000000))*(x475))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x476=((IkReal(0.0450000000000000))*(cj3));
IkReal x477=((IkReal(0.300000000000000))*(sj3));
if( IKabs(((gconst26)*(((((IkReal(-1.00000000000000))*(py)*(x476)))+(((IkReal(0.0450000000000000))*(py)))+(((py)*(x477))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst26)*(((((px)*(x477)))+(((IkReal(0.0450000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x476))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst26)*(((((IkReal(-1.00000000000000))*(py)*(x476)))+(((IkReal(0.0450000000000000))*(py)))+(((py)*(x477)))))), ((gconst26)*(((((px)*(x477)))+(((IkReal(0.0450000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x476)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x478=IKsin(j0);
IkReal x479=IKcos(j0);
IkReal x480=((px)*(x479));
IkReal x481=((py)*(x478));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x479)))+(((px)*(x478))));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-0.0450000000000000))*(cj3)))+(x481)+(x480));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x481)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(x480))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x482=(sj2)*(sj2);
IkReal x483=((cj2)*(sj2));
IkReal x484=((IkReal(0.0450000000000000))*(cj3));
IkReal x485=((IkReal(0.300000000000000))*(sj3));
IkReal x486=((px)*(x485));
IkReal x487=((py)*(x482));
IkReal x488=((px)*(x482));
if( IKabs(((gconst22)*(((((IkReal(0.0450000000000000))*(x488)))+(((x482)*(x486)))+(((IkReal(-1.00000000000000))*(x484)*(x488)))+(((IkReal(-1.00000000000000))*(py)*(x483)*(x485)))+(((IkReal(-0.0450000000000000))*(py)*(x483)))+(((py)*(x483)*(x484))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst22)*(((((IkReal(-1.00000000000000))*(x485)*(x487)))+(((IkReal(-1.00000000000000))*(x483)*(x486)))+(((IkReal(-0.0450000000000000))*(px)*(x483)))+(((IkReal(-0.0450000000000000))*(x487)))+(((x484)*(x487)))+(((px)*(x483)*(x484))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst22)*(((((IkReal(0.0450000000000000))*(x488)))+(((x482)*(x486)))+(((IkReal(-1.00000000000000))*(x484)*(x488)))+(((IkReal(-1.00000000000000))*(py)*(x483)*(x485)))+(((IkReal(-0.0450000000000000))*(py)*(x483)))+(((py)*(x483)*(x484)))))), ((gconst22)*(((((IkReal(-1.00000000000000))*(x485)*(x487)))+(((IkReal(-1.00000000000000))*(x483)*(x486)))+(((IkReal(-0.0450000000000000))*(px)*(x483)))+(((IkReal(-0.0450000000000000))*(x487)))+(((x484)*(x487)))+(((px)*(x483)*(x484)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x489=IKcos(j0);
IkReal x490=IKsin(j0);
IkReal x491=((IkReal(0.0450000000000000))*(sj2));
IkReal x492=((IkReal(0.300000000000000))*(sj3));
IkReal x493=((IkReal(0.0900000000000000))*(sj2));
IkReal x494=((IkReal(1.00000000000000))*(cj2));
IkReal x495=((IkReal(0.0900000000000000))*(cj2));
IkReal x496=((IkReal(0.0450000000000000))*(cj3));
IkReal x497=((px)*(x490));
IkReal x498=((px)*(x489));
IkReal x499=((py)*(x489));
IkReal x500=((py)*(x490));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj3)*(x491)))+(((sj2)*(x492)))+(((IkReal(-1.00000000000000))*(x499)))+(x491)+(x497));
evalcond[1]=((((cj2)*(x497)))+(((sj2)*(x498)))+(((IkReal(-1.00000000000000))*(x494)*(x499)))+(((sj2)*(x500))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x494)*(x500)))+(((sj2)*(x497)))+(((IkReal(-1.00000000000000))*(x496)))+(x492)+(((IkReal(-1.00000000000000))*(sj2)*(x499)))+(((IkReal(-1.00000000000000))*(x494)*(x498))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x500)))+(((IkReal(-1.00000000000000))*(x498)))+(((IkReal(-1.00000000000000))*(cj2)*(x496)))+(((cj2)*(x492)))+(((IkReal(0.0450000000000000))*(cj2))));
evalcond[4]=((IkReal(-0.212500000000000))+(((x495)*(x498)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x493)*(x497)))+(((x495)*(x500)))+(((x493)*(x499))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x501=((IkReal(0.0450000000000000))*(py));
IkReal x502=((cj3)*(sj2));
IkReal x503=((IkReal(0.300000000000000))*(sj3));
IkReal x504=((IkReal(0.0450000000000000))*(px));
IkReal x505=((cj2)*(cj3));
if( IKabs(((gconst23)*(((((x502)*(x504)))+(((cj2)*(x501)))+(((IkReal(-1.00000000000000))*(x501)*(x505)))+(((IkReal(-1.00000000000000))*(sj2)*(x504)))+(((IkReal(-1.00000000000000))*(px)*(sj2)*(x503)))+(((cj2)*(py)*(x503))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst23)*(((((IkReal(-1.00000000000000))*(x504)*(x505)))+(((sj2)*(x501)))+(((cj2)*(x504)))+(((cj2)*(px)*(x503)))+(((py)*(sj2)*(x503)))+(((IkReal(-1.00000000000000))*(x501)*(x502))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst23)*(((((x502)*(x504)))+(((cj2)*(x501)))+(((IkReal(-1.00000000000000))*(x501)*(x505)))+(((IkReal(-1.00000000000000))*(sj2)*(x504)))+(((IkReal(-1.00000000000000))*(px)*(sj2)*(x503)))+(((cj2)*(py)*(x503)))))), ((gconst23)*(((((IkReal(-1.00000000000000))*(x504)*(x505)))+(((sj2)*(x501)))+(((cj2)*(x504)))+(((cj2)*(px)*(x503)))+(((py)*(sj2)*(x503)))+(((IkReal(-1.00000000000000))*(x501)*(x502)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x506=IKcos(j0);
IkReal x507=IKsin(j0);
IkReal x508=((IkReal(0.0450000000000000))*(sj2));
IkReal x509=((IkReal(0.300000000000000))*(sj3));
IkReal x510=((IkReal(0.0900000000000000))*(sj2));
IkReal x511=((IkReal(1.00000000000000))*(cj2));
IkReal x512=((IkReal(0.0900000000000000))*(cj2));
IkReal x513=((IkReal(0.0450000000000000))*(cj3));
IkReal x514=((px)*(x507));
IkReal x515=((px)*(x506));
IkReal x516=((py)*(x506));
IkReal x517=((py)*(x507));
evalcond[0]=((((IkReal(-1.00000000000000))*(x516)))+(((IkReal(-1.00000000000000))*(cj3)*(x508)))+(x514)+(((sj2)*(x509)))+(x508));
evalcond[1]=((((sj2)*(x517)))+(((cj2)*(x514)))+(((IkReal(-1.00000000000000))*(x511)*(x516)))+(((sj2)*(x515))));
evalcond[2]=((IkReal(0.0450000000000000))+(((sj2)*(x514)))+(((IkReal(-1.00000000000000))*(x511)*(x517)))+(((IkReal(-1.00000000000000))*(sj2)*(x516)))+(((IkReal(-1.00000000000000))*(x511)*(x515)))+(((IkReal(-1.00000000000000))*(x513)))+(x509));
evalcond[3]=((((IkReal(-1.00000000000000))*(x515)))+(((IkReal(-1.00000000000000))*(cj2)*(x513)))+(((cj2)*(x509)))+(((IkReal(-1.00000000000000))*(x517)))+(((IkReal(0.0450000000000000))*(cj2))));
evalcond[4]=((IkReal(-0.212500000000000))+(((x512)*(x515)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x510)*(x514)))+(((x510)*(x516)))+(((x512)*(x517))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x518=((IkReal(0.0450000000000000))*(sj3));
IkReal x519=((IkReal(0.300000000000000))*(cj3));
IkReal x520=((x519)+(x518));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j1, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x520))));
evalcond[3]=((IkReal(0.550000000000000))+(pz)+(x520));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst28;
gconst28=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst29;
gconst29=IKsign(((((sj2)*((px)*(px))))+(((sj2)*((py)*(py))))));
dummyeval[0]=((((sj2)*((px)*(px))))+(((sj2)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x521=((IkReal(0.0450000000000000))*(sj3));
IkReal x522=((IkReal(0.300000000000000))*(cj3));
IkReal x523=((x522)+(x521));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x523))));
evalcond[3]=((IkReal(0.550000000000000))+(pz)+(x523));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst30;
gconst30=IKsign(((((IkReal(-1.00000000000000))*((py)*(py))))+(((IkReal(-1.00000000000000))*((px)*(px))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((py)*(py))))+(((IkReal(-1.00000000000000))*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst31;
gconst31=IKsign(((((IkReal(9.00000000000000))*((px)*(px))))+(((IkReal(9.00000000000000))*((py)*(py))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x524=((IkReal(110.000000000000))*(pz));
IkReal x525=((IkReal(100.000000000000))*(pp));
if( IKabs(((gconst31)*(((((IkReal(-21.2500000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x525)))+(((IkReal(-1.00000000000000))*(py)*(x524))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst31)*(((((IkReal(-1.00000000000000))*(px)*(x524)))+(((IkReal(-21.2500000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x525))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst31)*(((((IkReal(-21.2500000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x525)))+(((IkReal(-1.00000000000000))*(py)*(x524)))))), ((gconst31)*(((((IkReal(-1.00000000000000))*(px)*(x524)))+(((IkReal(-21.2500000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x525)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x526=IKsin(j0);
IkReal x527=IKcos(j0);
IkReal x528=((px)*(x527));
IkReal x529=((py)*(x526));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x527)))+(((px)*(x526))));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-0.0450000000000000))*(cj3)))+(x528)+(x529));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(x529)))+(((IkReal(-0.0900000000000000))*(x528))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x530=((IkReal(0.0450000000000000))*(py));
IkReal x531=((IkReal(0.300000000000000))*(sj3));
IkReal x532=((IkReal(0.0450000000000000))*(px));
if( IKabs(((gconst30)*(((((py)*(x531)))+(((IkReal(-1.00000000000000))*(cj3)*(x530)))+(x530))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst30)*(((((IkReal(-1.00000000000000))*(cj3)*(x532)))+(((px)*(x531)))+(x532))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst30)*(((((py)*(x531)))+(((IkReal(-1.00000000000000))*(cj3)*(x530)))+(x530)))), ((gconst30)*(((((IkReal(-1.00000000000000))*(cj3)*(x532)))+(((px)*(x531)))+(x532)))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x533=IKsin(j0);
IkReal x534=IKcos(j0);
IkReal x535=((px)*(x534));
IkReal x536=((py)*(x533));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x534)))+(((px)*(x533))));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-0.0450000000000000))*(cj3)))+(x535)+(x536));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x536)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(x535))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x537=((IkReal(0.0450000000000000))*(sj3));
IkReal x538=((IkReal(0.300000000000000))*(cj3));
IkReal x539=((x537)+(x538));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j2, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x539))));
evalcond[3]=((IkReal(0.550000000000000))+(pz)+(x539));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst32;
gconst32=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst33;
gconst33=IKsign(((((IkReal(-9.00000000000000))*((px)*(px))))+(((IkReal(-9.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((py)*(py))))+(((IkReal(-1.00000000000000))*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x540=((IkReal(110.000000000000))*(pz));
IkReal x541=((IkReal(100.000000000000))*(pp));
if( IKabs(((gconst33)*(((((IkReal(-21.2500000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x541)))+(((IkReal(-1.00000000000000))*(py)*(x540))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst33)*(((((IkReal(-1.00000000000000))*(px)*(x541)))+(((IkReal(-1.00000000000000))*(px)*(x540)))+(((IkReal(-21.2500000000000))*(px))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst33)*(((((IkReal(-21.2500000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x541)))+(((IkReal(-1.00000000000000))*(py)*(x540)))))), ((gconst33)*(((((IkReal(-1.00000000000000))*(px)*(x541)))+(((IkReal(-1.00000000000000))*(px)*(x540)))+(((IkReal(-21.2500000000000))*(px)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x542=IKcos(j0);
IkReal x543=IKsin(j0);
IkReal x544=((IkReal(1.00000000000000))*(x542));
IkReal x545=((py)*(x543));
evalcond[0]=((((px)*(x543)))+(((IkReal(-1.00000000000000))*(py)*(x544))));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(px)*(x544)))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x545))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(x545)))+(((IkReal(0.0900000000000000))*(px)*(x542)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x546=((IkReal(0.0450000000000000))*(py));
IkReal x547=((IkReal(0.300000000000000))*(sj3));
IkReal x548=((IkReal(0.0450000000000000))*(px));
if( IKabs(((gconst32)*(((((py)*(x547)))+(x546)+(((IkReal(-1.00000000000000))*(cj3)*(x546))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst32)*(((((px)*(x547)))+(x548)+(((IkReal(-1.00000000000000))*(cj3)*(x548))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst32)*(((((py)*(x547)))+(x546)+(((IkReal(-1.00000000000000))*(cj3)*(x546)))))), ((gconst32)*(((((px)*(x547)))+(x548)+(((IkReal(-1.00000000000000))*(cj3)*(x548)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x549=IKcos(j0);
IkReal x550=IKsin(j0);
IkReal x551=((IkReal(1.00000000000000))*(x549));
IkReal x552=((py)*(x550));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x551)))+(((px)*(x550))));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x552)))+(((IkReal(-1.00000000000000))*(px)*(x551))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(x552)))+(((IkReal(0.0900000000000000))*(px)*(x549)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x553=(sj2)*(sj2);
IkReal x554=((IkReal(0.300000000000000))*(sj3));
IkReal x555=((IkReal(0.0450000000000000))*(cj3));
IkReal x556=((cj2)*(px)*(sj2));
IkReal x557=((py)*(x553));
IkReal x558=((px)*(x553));
IkReal x559=((cj2)*(py)*(sj2));
if( IKabs(((gconst29)*(((((x555)*(x559)))+(((IkReal(-1.00000000000000))*(x554)*(x559)))+(((IkReal(-1.00000000000000))*(x554)*(x558)))+(((x555)*(x558)))+(((IkReal(-0.0450000000000000))*(x559)))+(((IkReal(-0.0450000000000000))*(x558))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst29)*(((((x555)*(x556)))+(((IkReal(-1.00000000000000))*(x555)*(x557)))+(((IkReal(-0.0450000000000000))*(x556)))+(((IkReal(-1.00000000000000))*(x554)*(x556)))+(((IkReal(0.0450000000000000))*(x557)))+(((x554)*(x557))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst29)*(((((x555)*(x559)))+(((IkReal(-1.00000000000000))*(x554)*(x559)))+(((IkReal(-1.00000000000000))*(x554)*(x558)))+(((x555)*(x558)))+(((IkReal(-0.0450000000000000))*(x559)))+(((IkReal(-0.0450000000000000))*(x558)))))), ((gconst29)*(((((x555)*(x556)))+(((IkReal(-1.00000000000000))*(x555)*(x557)))+(((IkReal(-0.0450000000000000))*(x556)))+(((IkReal(-1.00000000000000))*(x554)*(x556)))+(((IkReal(0.0450000000000000))*(x557)))+(((x554)*(x557)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x560=IKsin(j0);
IkReal x561=IKcos(j0);
IkReal x562=((IkReal(0.0450000000000000))*(sj2));
IkReal x563=((IkReal(0.300000000000000))*(sj3));
IkReal x564=((IkReal(0.0900000000000000))*(sj2));
IkReal x565=((py)*(sj2));
IkReal x566=((cj2)*(py));
IkReal x567=((IkReal(0.0450000000000000))*(cj3));
IkReal x568=((px)*(x560));
IkReal x569=((IkReal(1.00000000000000))*(x561));
IkReal x570=((IkReal(1.00000000000000))*(x560));
IkReal x571=((cj2)*(px)*(x561));
evalcond[0]=((x568)+(x562)+(((sj2)*(x563)))+(((IkReal(-1.00000000000000))*(py)*(x569)))+(((IkReal(-1.00000000000000))*(cj3)*(x562))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x566)*(x569)))+(((cj2)*(x568)))+(((IkReal(-1.00000000000000))*(px)*(sj2)*(x569)))+(((IkReal(-1.00000000000000))*(x565)*(x570))));
evalcond[2]=((IkReal(0.0450000000000000))+(x571)+(((sj2)*(x568)))+(((IkReal(-1.00000000000000))*(x567)))+(x563)+(((IkReal(-1.00000000000000))*(x565)*(x569)))+(((x560)*(x566))));
evalcond[3]=((((IkReal(-1.00000000000000))*(px)*(x569)))+(((cj2)*(x567)))+(((IkReal(-1.00000000000000))*(cj2)*(x563)))+(((IkReal(-0.0450000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(py)*(x570))));
evalcond[4]=((IkReal(-0.212500000000000))+(((py)*(x561)*(x564)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(x571)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x564)*(x568)))+(((IkReal(-0.0900000000000000))*(x560)*(x566))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x572=((IkReal(0.0450000000000000))*(py));
IkReal x573=((cj3)*(sj2));
IkReal x574=((IkReal(0.300000000000000))*(sj3));
IkReal x575=((IkReal(0.0450000000000000))*(px));
IkReal x576=((cj2)*(cj3));
if( IKabs(((gconst28)*(((((x572)*(x576)))+(((IkReal(-1.00000000000000))*(cj2)*(py)*(x574)))+(((IkReal(-1.00000000000000))*(cj2)*(x572)))+(((IkReal(-1.00000000000000))*(sj2)*(x575)))+(((x573)*(x575)))+(((IkReal(-1.00000000000000))*(px)*(sj2)*(x574))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst28)*(((((py)*(sj2)*(x574)))+(((IkReal(-1.00000000000000))*(cj2)*(px)*(x574)))+(((x575)*(x576)))+(((sj2)*(x572)))+(((IkReal(-1.00000000000000))*(cj2)*(x575)))+(((IkReal(-1.00000000000000))*(x572)*(x573))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst28)*(((((x572)*(x576)))+(((IkReal(-1.00000000000000))*(cj2)*(py)*(x574)))+(((IkReal(-1.00000000000000))*(cj2)*(x572)))+(((IkReal(-1.00000000000000))*(sj2)*(x575)))+(((x573)*(x575)))+(((IkReal(-1.00000000000000))*(px)*(sj2)*(x574)))))), ((gconst28)*(((((py)*(sj2)*(x574)))+(((IkReal(-1.00000000000000))*(cj2)*(px)*(x574)))+(((x575)*(x576)))+(((sj2)*(x572)))+(((IkReal(-1.00000000000000))*(cj2)*(x575)))+(((IkReal(-1.00000000000000))*(x572)*(x573)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x577=IKsin(j0);
IkReal x578=IKcos(j0);
IkReal x579=((IkReal(0.0450000000000000))*(sj2));
IkReal x580=((IkReal(0.300000000000000))*(sj3));
IkReal x581=((IkReal(0.0900000000000000))*(sj2));
IkReal x582=((py)*(sj2));
IkReal x583=((cj2)*(py));
IkReal x584=((IkReal(0.0450000000000000))*(cj3));
IkReal x585=((px)*(x577));
IkReal x586=((IkReal(1.00000000000000))*(x578));
IkReal x587=((IkReal(1.00000000000000))*(x577));
IkReal x588=((cj2)*(px)*(x578));
evalcond[0]=((x579)+(((IkReal(-1.00000000000000))*(cj3)*(x579)))+(((IkReal(-1.00000000000000))*(py)*(x586)))+(((sj2)*(x580)))+(x585));
evalcond[1]=((((IkReal(-1.00000000000000))*(x583)*(x586)))+(((cj2)*(x585)))+(((IkReal(-1.00000000000000))*(x582)*(x587)))+(((IkReal(-1.00000000000000))*(px)*(sj2)*(x586))));
evalcond[2]=((IkReal(0.0450000000000000))+(((x577)*(x583)))+(((IkReal(-1.00000000000000))*(x584)))+(((sj2)*(x585)))+(x580)+(x588)+(((IkReal(-1.00000000000000))*(x582)*(x586))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj2)*(x580)))+(((IkReal(-0.0450000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(px)*(x586)))+(((IkReal(-1.00000000000000))*(py)*(x587)))+(((cj2)*(x584))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x581)*(x585)))+(((IkReal(-0.0900000000000000))*(x577)*(x583)))+(((IkReal(-1.10000000000000))*(pz)))+(((py)*(x578)*(x581)))+(((IkReal(-0.0900000000000000))*(x588)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x589=(cj1)*(cj1);
IkReal x590=(sj1)*(sj1);
IkReal x591=((py)*(sj2));
IkReal x592=((IkReal(0.550000000000000))*(cj1));
IkReal x593=((cj2)*(px));
IkReal x594=((IkReal(0.0450000000000000))*(sj3));
IkReal x595=((px)*(sj2));
IkReal x596=((cj1)*(pz));
IkReal x597=((cj2)*(py));
IkReal x598=((IkReal(0.300000000000000))*(cj2)*(cj3));
IkReal x599=((IkReal(0.300000000000000))*(cj1)*(cj3));
IkReal x600=((IkReal(1.00000000000000))*(pz)*(x595));
if( IKabs(((gconst1)*(((((x595)*(x599)))+(((IkReal(-1.00000000000000))*(x589)*(x600)))+(((cj1)*(x594)*(x595)))+(((IkReal(-0.300000000000000))*(cj3)*(x597)))+(((IkReal(-1.00000000000000))*(x590)*(x600)))+(((IkReal(-1.00000000000000))*(x594)*(x597)))+(((IkReal(-0.550000000000000))*(x597)))+(((x596)*(x597)))+(((x592)*(x595))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((IkReal(-0.550000000000000))*(x593)))+(((IkReal(-0.300000000000000))*(cj3)*(x593)))+(((IkReal(-1.00000000000000))*(x591)*(x599)))+(((IkReal(-1.00000000000000))*(cj1)*(x591)*(x594)))+(((x593)*(x596)))+(((IkReal(-1.00000000000000))*(x591)*(x592)))+(((IkReal(-1.00000000000000))*(x593)*(x594)))+(((pz)*(x590)*(x591)))+(((pz)*(x589)*(x591))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst1)*(((((x595)*(x599)))+(((IkReal(-1.00000000000000))*(x589)*(x600)))+(((cj1)*(x594)*(x595)))+(((IkReal(-0.300000000000000))*(cj3)*(x597)))+(((IkReal(-1.00000000000000))*(x590)*(x600)))+(((IkReal(-1.00000000000000))*(x594)*(x597)))+(((IkReal(-0.550000000000000))*(x597)))+(((x596)*(x597)))+(((x592)*(x595)))))), ((gconst1)*(((((IkReal(-0.550000000000000))*(x593)))+(((IkReal(-0.300000000000000))*(cj3)*(x593)))+(((IkReal(-1.00000000000000))*(x591)*(x599)))+(((IkReal(-1.00000000000000))*(cj1)*(x591)*(x594)))+(((x593)*(x596)))+(((IkReal(-1.00000000000000))*(x591)*(x592)))+(((IkReal(-1.00000000000000))*(x593)*(x594)))+(((pz)*(x590)*(x591)))+(((pz)*(x589)*(x591)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x601=IKsin(j0);
IkReal x602=IKcos(j0);
IkReal x603=((IkReal(0.0450000000000000))*(sj2));
IkReal x604=((cj1)*(sj2));
IkReal x605=((IkReal(0.300000000000000))*(cj3));
IkReal x606=((IkReal(0.0900000000000000))*(sj2));
IkReal x607=((cj1)*(cj2));
IkReal x608=((IkReal(0.300000000000000))*(sj3));
IkReal x609=((IkReal(0.0450000000000000))*(cj3));
IkReal x610=((IkReal(1.10000000000000))*(sj1));
IkReal x611=((IkReal(0.0450000000000000))*(sj3));
IkReal x612=((cj1)*(pz));
IkReal x613=((px)*(x601));
IkReal x614=((px)*(x602));
IkReal x615=((py)*(x601));
IkReal x616=((cj2)*(pz)*(sj1));
IkReal x617=((IkReal(1.00000000000000))*(py)*(x602));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x605)))+(((IkReal(-1.00000000000000))*(x611)))+(((sj1)*(x615)))+(((sj1)*(x614)))+(x612));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj3)*(x603)))+(((IkReal(-1.00000000000000))*(x617)))+(((sj2)*(x608)))+(x613)+(x603));
evalcond[2]=((((IkReal(-1.00000000000000))*(pz)*(sj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(x617)))+(((x604)*(x614)))+(((cj2)*(x613)))+(((x604)*(x615))));
evalcond[3]=((IkReal(0.0450000000000000))+(((sj2)*(x613)))+(((IkReal(-1.00000000000000))*(x609)))+(((IkReal(-1.00000000000000))*(x607)*(x615)))+(((IkReal(-1.00000000000000))*(sj2)*(x617)))+(x616)+(((IkReal(-1.00000000000000))*(x607)*(x614)))+(x608));
evalcond[4]=((((sj1)*(x605)))+(((IkReal(0.550000000000000))*(sj1)))+(((IkReal(-1.00000000000000))*(x607)*(x609)))+(((IkReal(0.0450000000000000))*(x607)))+(((IkReal(-1.00000000000000))*(x615)))+(((IkReal(-1.00000000000000))*(x614)))+(((x607)*(x608)))+(((sj1)*(x611))));
evalcond[5]=((IkReal(-0.212500000000000))+(((x610)*(x614)))+(((IkReal(0.0900000000000000))*(x607)*(x615)))+(((x610)*(x615)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x612)))+(((IkReal(0.0900000000000000))*(x607)*(x614)))+(((IkReal(-0.0900000000000000))*(x616)))+(((IkReal(-1.00000000000000))*(x606)*(x613)))+(((py)*(x602)*(x606))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x618=((IkReal(0.0450000000000000))*(px));
IkReal x619=((IkReal(0.300000000000000))*(cj3));
IkReal x620=((sj1)*(sj2));
IkReal x621=((IkReal(0.300000000000000))*(sj3));
IkReal x622=((IkReal(1.00000000000000))*(cj1)*(pz));
IkReal x623=((IkReal(0.0450000000000000))*(py)*(x620));
if( IKabs(((gconst0)*(((((py)*(x619)))+(((IkReal(0.550000000000000))*(py)))+(((IkReal(-1.00000000000000))*(px)*(x620)*(x621)))+(((IkReal(0.0450000000000000))*(py)*(sj3)))+(((cj3)*(x618)*(x620)))+(((IkReal(-1.00000000000000))*(x618)*(x620)))+(((IkReal(-1.00000000000000))*(py)*(x622))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((IkReal(-1.00000000000000))*(cj3)*(x623)))+(((IkReal(-1.00000000000000))*(px)*(x622)))+(((sj3)*(x618)))+(((py)*(x620)*(x621)))+(((px)*(x619)))+(((IkReal(0.550000000000000))*(px)))+(x623))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst0)*(((((py)*(x619)))+(((IkReal(0.550000000000000))*(py)))+(((IkReal(-1.00000000000000))*(px)*(x620)*(x621)))+(((IkReal(0.0450000000000000))*(py)*(sj3)))+(((cj3)*(x618)*(x620)))+(((IkReal(-1.00000000000000))*(x618)*(x620)))+(((IkReal(-1.00000000000000))*(py)*(x622)))))), ((gconst0)*(((((IkReal(-1.00000000000000))*(cj3)*(x623)))+(((IkReal(-1.00000000000000))*(px)*(x622)))+(((sj3)*(x618)))+(((py)*(x620)*(x621)))+(((px)*(x619)))+(((IkReal(0.550000000000000))*(px)))+(x623)))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x624=IKsin(j0);
IkReal x625=IKcos(j0);
IkReal x626=((IkReal(0.0450000000000000))*(sj2));
IkReal x627=((cj1)*(sj2));
IkReal x628=((IkReal(0.300000000000000))*(cj3));
IkReal x629=((IkReal(0.0900000000000000))*(sj2));
IkReal x630=((cj1)*(cj2));
IkReal x631=((IkReal(0.300000000000000))*(sj3));
IkReal x632=((IkReal(0.0450000000000000))*(cj3));
IkReal x633=((IkReal(1.10000000000000))*(sj1));
IkReal x634=((IkReal(0.0450000000000000))*(sj3));
IkReal x635=((cj1)*(pz));
IkReal x636=((px)*(x624));
IkReal x637=((px)*(x625));
IkReal x638=((py)*(x624));
IkReal x639=((cj2)*(pz)*(sj1));
IkReal x640=((IkReal(1.00000000000000))*(py)*(x625));
evalcond[0]=((IkReal(-0.550000000000000))+(((sj1)*(x637)))+(((sj1)*(x638)))+(x635)+(((IkReal(-1.00000000000000))*(x634)))+(((IkReal(-1.00000000000000))*(x628))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj3)*(x626)))+(((sj2)*(x631)))+(x636)+(x626)+(((IkReal(-1.00000000000000))*(x640))));
evalcond[2]=((((x627)*(x637)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)*(sj2)))+(((x627)*(x638)))+(((cj2)*(x636)))+(((IkReal(-1.00000000000000))*(cj2)*(x640))));
evalcond[3]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(sj2)*(x640)))+(((sj2)*(x636)))+(x631)+(x639)+(((IkReal(-1.00000000000000))*(x630)*(x637)))+(((IkReal(-1.00000000000000))*(x630)*(x638)))+(((IkReal(-1.00000000000000))*(x632))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x637)))+(((x630)*(x631)))+(((IkReal(0.550000000000000))*(sj1)))+(((sj1)*(x634)))+(((IkReal(0.0450000000000000))*(x630)))+(((IkReal(-1.00000000000000))*(x638)))+(((sj1)*(x628)))+(((IkReal(-1.00000000000000))*(x630)*(x632))));
evalcond[5]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x639)))+(((x633)*(x637)))+(((IkReal(-1.00000000000000))*(pp)))+(((py)*(x625)*(x629)))+(((IkReal(0.0900000000000000))*(x630)*(x638)))+(((IkReal(1.10000000000000))*(x635)))+(((IkReal(0.0900000000000000))*(x630)*(x637)))+(((IkReal(-1.00000000000000))*(x629)*(x636)))+(((x633)*(x638))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x641=((IkReal(0.0450000000000000))*(sj2));
if( IKabs(((IkReal(-1.00000000000000))*(py))) < IKFAST_ATAN2_MAGTHRESH && IKabs(px) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x642=((IkReal(1.00000000000000))*(IKatan2(((IkReal(-1.00000000000000))*(py)), px)));
if( ((((px)*(px))+((py)*(py)))) < (IkReal)-0.00001 )
    continue;
if( (((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(0.300000000000000))*(sj2)*(sj3)))+(x641)+(((IkReal(-1.00000000000000))*(cj3)*(x641))))))) < -1-IKFAST_SINCOS_THRESH || (((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(0.300000000000000))*(sj2)*(sj3)))+(x641)+(((IkReal(-1.00000000000000))*(cj3)*(x641))))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x643=IKasin(((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(0.300000000000000))*(sj2)*(sj3)))+(x641)+(((IkReal(-1.00000000000000))*(cj3)*(x641)))))));
j0array[0]=((((IkReal(-1.00000000000000))*(x642)))+(((IkReal(-1.00000000000000))*(x643))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((IkReal(3.14159265358979))+(x643)+(((IkReal(-1.00000000000000))*(x642))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x644=(cj2)*(cj2);
IkReal x645=(py)*(py);
IkReal x646=(sj2)*(sj2);
IkReal x647=IKcos(j0);
IkReal x648=IKsin(j0);
IkReal x649=(px)*(px);
IkReal x650=((IkReal(0.0450000000000000))*(sj2));
IkReal x651=((IkReal(1.00000000000000))*(x649));
IkReal x652=((IkReal(0.300000000000000))*(sj2)*(sj3));
IkReal x653=((px)*(py)*(x646));
IkReal x654=((px)*(py)*(x644));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x652)))+(((cj3)*(py)*(x650)))+(((x647)*(((((x645)*(x646)))+(((x644)*(x645)))))))+(((IkReal(-1.00000000000000))*(py)*(x650)))+(((x648)*(((((IkReal(-1.00000000000000))*(x654)))+(((IkReal(-1.00000000000000))*(x653))))))));
evalcond[1]=((((IkReal(-1.00000000000000))*(px)*(x650)))+(((x648)*(((((IkReal(-1.00000000000000))*(x644)*(x651)))+(((IkReal(-1.00000000000000))*(x646)*(x651)))))))+(((cj3)*(px)*(x650)))+(((x647)*(((x653)+(x654)))))+(((IkReal(-1.00000000000000))*(px)*(x652))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst34;
IkReal x655=((cj2)*(pz));
IkReal x656=((py)*(sj0));
IkReal x657=((IkReal(0.300000000000000))*(cj3));
IkReal x658=((IkReal(0.0450000000000000))*(sj3));
IkReal x659=((cj0)*(px));
gconst34=IKsign(((((IkReal(-0.550000000000000))*(x656)))+(((IkReal(-1.00000000000000))*(x657)*(x659)))+(((IkReal(-0.300000000000000))*(sj3)*(x655)))+(((IkReal(-0.550000000000000))*(x659)))+(((IkReal(-0.0450000000000000))*(x655)))+(((IkReal(0.0450000000000000))*(cj3)*(x655)))+(((IkReal(-1.00000000000000))*(x658)*(x659)))+(((IkReal(-1.00000000000000))*(x656)*(x657)))+(((IkReal(-1.00000000000000))*(x656)*(x658)))));
IkReal x660=((cj0)*(px));
IkReal x661=((IkReal(6.66666666666667))*(cj3));
IkReal x662=((py)*(sj0));
IkReal x663=((cj2)*(pz));
IkReal x664=((IkReal(1.00000000000000))*(sj3));
dummyeval[0]=((((cj3)*(x663)))+(((IkReal(-1.00000000000000))*(x662)*(x664)))+(((IkReal(-1.00000000000000))*(x661)*(x662)))+(((IkReal(-1.00000000000000))*(x663)))+(((IkReal(-1.00000000000000))*(x660)*(x664)))+(((IkReal(-1.00000000000000))*(x660)*(x661)))+(((IkReal(-12.2222222222222))*(x660)))+(((IkReal(-6.66666666666667))*(sj3)*(x663)))+(((IkReal(-12.2222222222222))*(x662))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst35;
gconst35=IKsign(((((sj2)*((py)*(py))*((sj0)*(sj0))))+(((sj2)*((pz)*(pz))))+(((sj2)*((cj0)*(cj0))*((px)*(px))))+(((IkReal(2.00000000000000))*(cj0)*(px)*(py)*(sj0)*(sj2)))));
dummyeval[0]=((((sj2)*((py)*(py))*((sj0)*(sj0))))+(((sj2)*((pz)*(pz))))+(((sj2)*((cj0)*(cj0))*((px)*(px))))+(((IkReal(2.00000000000000))*(cj0)*(px)*(py)*(sj0)*(sj2))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x665=((((IkReal(-1.00000000000000))*(cj0)*(py)))+(((px)*(sj0))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x665;
evalcond[3]=x665;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst36;
IkReal x666=((IkReal(0.0450000000000000))*(pz));
IkReal x667=((IkReal(0.300000000000000))*(cj3));
IkReal x668=((cj0)*(px));
IkReal x669=((py)*(sj0));
IkReal x670=((IkReal(0.0450000000000000))*(sj3));
gconst36=IKsign(((((IkReal(-0.550000000000000))*(x668)))+(((cj3)*(x666)))+(((IkReal(-1.00000000000000))*(x667)*(x668)))+(((IkReal(-0.550000000000000))*(x669)))+(((IkReal(-1.00000000000000))*(x669)*(x670)))+(((IkReal(-1.00000000000000))*(x667)*(x669)))+(((IkReal(-1.00000000000000))*(x666)))+(((IkReal(-0.300000000000000))*(pz)*(sj3)))+(((IkReal(-1.00000000000000))*(x668)*(x670)))));
IkReal x671=((cj0)*(px));
IkReal x672=((IkReal(6.66666666666667))*(cj3));
IkReal x673=((py)*(sj0));
IkReal x674=((IkReal(1.00000000000000))*(sj3));
dummyeval[0]=((((IkReal(-12.2222222222222))*(x673)))+(((IkReal(-1.00000000000000))*(x671)*(x674)))+(((IkReal(-1.00000000000000))*(pz)))+(((cj3)*(pz)))+(((IkReal(-1.00000000000000))*(x671)*(x672)))+(((IkReal(-6.66666666666667))*(pz)*(sj3)))+(((IkReal(-1.00000000000000))*(x673)*(x674)))+(((IkReal(-12.2222222222222))*(x671)))+(((IkReal(-1.00000000000000))*(x672)*(x673))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst37;
gconst37=IKsign(((((IkReal(-2.00000000000000))*(cj0)*(px)*(py)*(sj0)))+(((IkReal(-1.00000000000000))*((py)*(py))*((sj0)*(sj0))))+(((IkReal(-1.00000000000000))*((pz)*(pz))))+(((IkReal(-1.00000000000000))*((cj0)*(cj0))*((px)*(px))))));
dummyeval[0]=((((IkReal(-2.00000000000000))*(cj0)*(px)*(py)*(sj0)))+(((IkReal(-1.00000000000000))*((py)*(py))*((sj0)*(sj0))))+(((IkReal(-1.00000000000000))*((pz)*(pz))))+(((IkReal(-1.00000000000000))*((cj0)*(cj0))*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x675=((cj0)*(px));
IkReal x676=((IkReal(0.300000000000000))*(sj3));
IkReal x677=((IkReal(0.0450000000000000))*(pz));
IkReal x678=((IkReal(0.0450000000000000))*(cj3));
IkReal x679=((py)*(sj0));
IkReal x680=((IkReal(0.300000000000000))*(cj3));
IkReal x681=((IkReal(0.0450000000000000))*(sj3));
if( IKabs(((gconst37)*(((((pz)*(x676)))+(((IkReal(-1.00000000000000))*(cj3)*(x677)))+(((IkReal(-1.00000000000000))*(x675)*(x681)))+(((IkReal(-1.00000000000000))*(x679)*(x681)))+(((IkReal(-1.00000000000000))*(x679)*(x680)))+(((IkReal(-1.00000000000000))*(x675)*(x680)))+(((IkReal(-0.550000000000000))*(x679)))+(x677)+(((IkReal(-0.550000000000000))*(x675))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst37)*(((((x675)*(x678)))+(((IkReal(-1.00000000000000))*(sj3)*(x677)))+(((IkReal(-1.00000000000000))*(pz)*(x680)))+(((IkReal(-0.0450000000000000))*(x675)))+(((IkReal(-1.00000000000000))*(x675)*(x676)))+(((IkReal(-0.550000000000000))*(pz)))+(((x678)*(x679)))+(((IkReal(-0.0450000000000000))*(x679)))+(((IkReal(-1.00000000000000))*(x676)*(x679))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst37)*(((((pz)*(x676)))+(((IkReal(-1.00000000000000))*(cj3)*(x677)))+(((IkReal(-1.00000000000000))*(x675)*(x681)))+(((IkReal(-1.00000000000000))*(x679)*(x681)))+(((IkReal(-1.00000000000000))*(x679)*(x680)))+(((IkReal(-1.00000000000000))*(x675)*(x680)))+(((IkReal(-0.550000000000000))*(x679)))+(x677)+(((IkReal(-0.550000000000000))*(x675)))))), ((gconst37)*(((((x675)*(x678)))+(((IkReal(-1.00000000000000))*(sj3)*(x677)))+(((IkReal(-1.00000000000000))*(pz)*(x680)))+(((IkReal(-0.0450000000000000))*(x675)))+(((IkReal(-1.00000000000000))*(x675)*(x676)))+(((IkReal(-0.550000000000000))*(pz)))+(((x678)*(x679)))+(((IkReal(-0.0450000000000000))*(x679)))+(((IkReal(-1.00000000000000))*(x676)*(x679)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x682=IKsin(j1);
IkReal x683=IKcos(j1);
IkReal x684=((IkReal(0.300000000000000))*(cj3));
IkReal x685=((cj0)*(px));
IkReal x686=((py)*(sj0));
IkReal x687=((IkReal(0.0450000000000000))*(cj3));
IkReal x688=((IkReal(0.300000000000000))*(sj3));
IkReal x689=((sj3)*(x683));
IkReal x690=((pz)*(x682));
IkReal x691=((IkReal(1.00000000000000))*(x683));
IkReal x692=((IkReal(0.0450000000000000))*(x682));
IkReal x693=((pz)*(x683));
IkReal x694=((IkReal(0.0900000000000000))*(x683));
IkReal x695=((IkReal(1.10000000000000))*(x682));
evalcond[0]=((IkReal(-0.550000000000000))+(((x682)*(x685)))+(x693)+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x684)))+(((x682)*(x686))));
evalcond[1]=((((x682)*(x688)))+(x692)+(((IkReal(-0.0450000000000000))*(x689)))+(((IkReal(-1.00000000000000))*(x682)*(x687)))+(pz)+(((IkReal(-0.550000000000000))*(x683)))+(((IkReal(-1.00000000000000))*(x683)*(x684))));
evalcond[2]=((IkReal(0.0450000000000000))+(x690)+(((IkReal(-1.00000000000000))*(x686)*(x691)))+(((IkReal(-1.00000000000000))*(x685)*(x691)))+(x688)+(((IkReal(-1.00000000000000))*(x687))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x683)*(x687)))+(((x682)*(x684)))+(((IkReal(0.0450000000000000))*(x683)))+(((IkReal(0.550000000000000))*(x682)))+(((IkReal(-1.00000000000000))*(x686)))+(((x683)*(x688)))+(((IkReal(-1.00000000000000))*(x685)))+(((sj3)*(x692))));
evalcond[4]=((IkReal(-0.212500000000000))+(((x686)*(x694)))+(((IkReal(1.10000000000000))*(x693)))+(((x686)*(x695)))+(((x685)*(x695)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(x690)))+(((x685)*(x694))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x696=(cj3)*(cj3);
IkReal x697=(sj3)*(sj3);
IkReal x698=((cj3)*(sj3));
IkReal x699=((IkReal(1.00000000000000))*(pz));
if( IKabs(((gconst36)*(((IkReal(-0.302500000000000))+(((IkReal(-0.00202500000000000))*(x697)))+(((IkReal(-0.330000000000000))*(cj3)))+(((IkReal(-0.0270000000000000))*(x698)))+((pz)*(pz))+(((IkReal(-0.0900000000000000))*(x696)))+(((IkReal(-0.0495000000000000))*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst36)*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x699)))+(((IkReal(-0.0135000000000000))*(x697)))+(((IkReal(0.0135000000000000))*(x696)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x699)))+(((IkReal(-0.0879750000000000))*(x698))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst36)*(((IkReal(-0.302500000000000))+(((IkReal(-0.00202500000000000))*(x697)))+(((IkReal(-0.330000000000000))*(cj3)))+(((IkReal(-0.0270000000000000))*(x698)))+((pz)*(pz))+(((IkReal(-0.0900000000000000))*(x696)))+(((IkReal(-0.0495000000000000))*(sj3)))))), ((gconst36)*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x699)))+(((IkReal(-0.0135000000000000))*(x697)))+(((IkReal(0.0135000000000000))*(x696)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x699)))+(((IkReal(-0.0879750000000000))*(x698)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x700=IKsin(j1);
IkReal x701=IKcos(j1);
IkReal x702=((IkReal(0.300000000000000))*(cj3));
IkReal x703=((cj0)*(px));
IkReal x704=((py)*(sj0));
IkReal x705=((IkReal(0.0450000000000000))*(cj3));
IkReal x706=((IkReal(0.300000000000000))*(sj3));
IkReal x707=((sj3)*(x701));
IkReal x708=((pz)*(x700));
IkReal x709=((IkReal(1.00000000000000))*(x701));
IkReal x710=((IkReal(0.0450000000000000))*(x700));
IkReal x711=((pz)*(x701));
IkReal x712=((IkReal(0.0900000000000000))*(x701));
IkReal x713=((IkReal(1.10000000000000))*(x700));
evalcond[0]=((IkReal(-0.550000000000000))+(((x700)*(x703)))+(((IkReal(-0.0450000000000000))*(sj3)))+(((x700)*(x704)))+(((IkReal(-1.00000000000000))*(x702)))+(x711));
evalcond[1]=((((IkReal(-1.00000000000000))*(x700)*(x705)))+(((x700)*(x706)))+(((IkReal(-0.0450000000000000))*(x707)))+(((IkReal(-1.00000000000000))*(x701)*(x702)))+(((IkReal(-0.550000000000000))*(x701)))+(pz)+(x710));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x705)))+(((IkReal(-1.00000000000000))*(x704)*(x709)))+(((IkReal(-1.00000000000000))*(x703)*(x709)))+(x708)+(x706));
evalcond[3]=((((IkReal(-1.00000000000000))*(x703)))+(((IkReal(0.0450000000000000))*(x701)))+(((IkReal(-1.00000000000000))*(x704)))+(((sj3)*(x710)))+(((x700)*(x702)))+(((IkReal(-1.00000000000000))*(x701)*(x705)))+(((x701)*(x706)))+(((IkReal(0.550000000000000))*(x700))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x711)))+(((x703)*(x712)))+(((IkReal(-1.00000000000000))*(pp)))+(((x704)*(x713)))+(((x704)*(x712)))+(((IkReal(-0.0900000000000000))*(x708)))+(((x703)*(x713))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x714=((px)*(sj0));
IkReal x715=((cj0)*(py));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j2, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x715)))+(x714));
evalcond[3]=((x715)+(((IkReal(-1.00000000000000))*(x714))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst38;
IkReal x716=((IkReal(0.0450000000000000))*(pz));
IkReal x717=((IkReal(0.300000000000000))*(cj3));
IkReal x718=((cj0)*(px));
IkReal x719=((py)*(sj0));
IkReal x720=((IkReal(0.0450000000000000))*(sj3));
gconst38=IKsign(((((IkReal(-1.00000000000000))*(cj3)*(x716)))+(((IkReal(-1.00000000000000))*(x718)*(x720)))+(((IkReal(-1.00000000000000))*(x717)*(x719)))+(((IkReal(-0.550000000000000))*(x718)))+(((IkReal(0.300000000000000))*(pz)*(sj3)))+(((IkReal(-1.00000000000000))*(x717)*(x718)))+(((IkReal(-0.550000000000000))*(x719)))+(x716)+(((IkReal(-1.00000000000000))*(x719)*(x720)))));
IkReal x721=((cj0)*(px));
IkReal x722=((IkReal(6.66666666666667))*(cj3));
IkReal x723=((py)*(sj0));
IkReal x724=((IkReal(1.00000000000000))*(sj3));
dummyeval[0]=((((IkReal(-12.2222222222222))*(x723)))+(((IkReal(-1.00000000000000))*(x723)*(x724)))+(((IkReal(6.66666666666667))*(pz)*(sj3)))+(((IkReal(-1.00000000000000))*(x722)*(x723)))+(((IkReal(-12.2222222222222))*(x721)))+(((IkReal(-1.00000000000000))*(x721)*(x722)))+(((IkReal(-1.00000000000000))*(x721)*(x724)))+(pz)+(((IkReal(-1.00000000000000))*(cj3)*(pz))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst39;
gconst39=IKsign((((((py)*(py))*((sj0)*(sj0))))+((((cj0)*(cj0))*((px)*(px))))+((pz)*(pz))+(((IkReal(2.00000000000000))*(cj0)*(px)*(py)*(sj0)))));
dummyeval[0]=(((((py)*(py))*((sj0)*(sj0))))+((((cj0)*(cj0))*((px)*(px))))+((pz)*(pz))+(((IkReal(2.00000000000000))*(cj0)*(px)*(py)*(sj0))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x725=((IkReal(0.0450000000000000))*(pz));
IkReal x726=((py)*(sj0));
IkReal x727=((IkReal(0.300000000000000))*(sj3));
IkReal x728=((cj0)*(px));
IkReal x729=((IkReal(0.0450000000000000))*(sj3));
IkReal x730=((IkReal(0.300000000000000))*(x728));
IkReal x731=((cj3)*(x726));
if( IKabs(((gconst39)*(((((IkReal(0.300000000000000))*(x731)))+(((cj3)*(x730)))+(x725)+(((x728)*(x729)))+(((x726)*(x729)))+(((IkReal(0.550000000000000))*(x726)))+(((pz)*(x727)))+(((IkReal(-1.00000000000000))*(cj3)*(x725)))+(((IkReal(0.550000000000000))*(x728))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst39)*(((((IkReal(0.300000000000000))*(cj3)*(pz)))+(((IkReal(-0.0450000000000000))*(x728)))+(((IkReal(-0.0450000000000000))*(x726)))+(((sj3)*(x725)))+(((IkReal(0.550000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x726)*(x727)))+(((IkReal(0.0450000000000000))*(cj3)*(x728)))+(((IkReal(-1.00000000000000))*(x727)*(x728)))+(((IkReal(0.0450000000000000))*(x731))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst39)*(((((IkReal(0.300000000000000))*(x731)))+(((cj3)*(x730)))+(x725)+(((x728)*(x729)))+(((x726)*(x729)))+(((IkReal(0.550000000000000))*(x726)))+(((pz)*(x727)))+(((IkReal(-1.00000000000000))*(cj3)*(x725)))+(((IkReal(0.550000000000000))*(x728)))))), ((gconst39)*(((((IkReal(0.300000000000000))*(cj3)*(pz)))+(((IkReal(-0.0450000000000000))*(x728)))+(((IkReal(-0.0450000000000000))*(x726)))+(((sj3)*(x725)))+(((IkReal(0.550000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x726)*(x727)))+(((IkReal(0.0450000000000000))*(cj3)*(x728)))+(((IkReal(-1.00000000000000))*(x727)*(x728)))+(((IkReal(0.0450000000000000))*(x731)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x732=IKsin(j1);
IkReal x733=IKcos(j1);
IkReal x734=((IkReal(0.300000000000000))*(cj3));
IkReal x735=((cj0)*(px));
IkReal x736=((py)*(sj0));
IkReal x737=((IkReal(0.0450000000000000))*(cj3));
IkReal x738=((IkReal(0.300000000000000))*(sj3));
IkReal x739=((sj3)*(x733));
IkReal x740=((pz)*(x732));
IkReal x741=((IkReal(0.0450000000000000))*(x732));
IkReal x742=((IkReal(1.10000000000000))*(x732));
IkReal x743=((pz)*(x733));
IkReal x744=((IkReal(0.0900000000000000))*(x733));
evalcond[0]=((IkReal(-0.550000000000000))+(((x732)*(x736)))+(((IkReal(-0.0450000000000000))*(sj3)))+(((x732)*(x735)))+(x743)+(((IkReal(-1.00000000000000))*(x734))));
evalcond[1]=((((x732)*(x737)))+(((IkReal(-1.00000000000000))*(x732)*(x738)))+(((IkReal(-1.00000000000000))*(x733)*(x734)))+(((IkReal(-0.0450000000000000))*(x739)))+(((IkReal(-0.550000000000000))*(x733)))+(pz)+(((IkReal(-1.00000000000000))*(x741))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x740)))+(((x733)*(x736)))+(((IkReal(-1.00000000000000))*(x737)))+(x738)+(((x733)*(x735))));
evalcond[3]=((((IkReal(0.550000000000000))*(x732)))+(((IkReal(-1.00000000000000))*(x733)*(x738)))+(((sj3)*(x741)))+(((IkReal(-0.0450000000000000))*(x733)))+(((x732)*(x734)))+(((x733)*(x737)))+(((IkReal(-1.00000000000000))*(x735)))+(((IkReal(-1.00000000000000))*(x736))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x736)*(x744)))+(((IkReal(-1.00000000000000))*(x735)*(x744)))+(((IkReal(1.10000000000000))*(x743)))+(((IkReal(-1.00000000000000))*(pp)))+(((x736)*(x742)))+(((IkReal(0.0900000000000000))*(x740)))+(((x735)*(x742))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x745=(sj3)*(sj3);
IkReal x746=(cj3)*(cj3);
IkReal x747=((cj3)*(sj3));
IkReal x748=((IkReal(1.00000000000000))*(pz));
if( IKabs(((gconst38)*(((IkReal(-0.302500000000000))+(((IkReal(-0.0270000000000000))*(x747)))+(((IkReal(-0.0900000000000000))*(x746)))+(((IkReal(-0.330000000000000))*(cj3)))+((pz)*(pz))+(((IkReal(-0.00202500000000000))*(x745)))+(((IkReal(-0.0495000000000000))*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst38)*(((IkReal(0.0247500000000000))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x748)))+(((IkReal(-0.0112500000000000))*(cj3)))+(((IkReal(0.0135000000000000))*(x745)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x748)))+(((IkReal(-0.0135000000000000))*(x746)))+(((IkReal(0.0879750000000000))*(x747)))+(((IkReal(0.167025000000000))*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst38)*(((IkReal(-0.302500000000000))+(((IkReal(-0.0270000000000000))*(x747)))+(((IkReal(-0.0900000000000000))*(x746)))+(((IkReal(-0.330000000000000))*(cj3)))+((pz)*(pz))+(((IkReal(-0.00202500000000000))*(x745)))+(((IkReal(-0.0495000000000000))*(sj3)))))), ((gconst38)*(((IkReal(0.0247500000000000))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x748)))+(((IkReal(-0.0112500000000000))*(cj3)))+(((IkReal(0.0135000000000000))*(x745)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x748)))+(((IkReal(-0.0135000000000000))*(x746)))+(((IkReal(0.0879750000000000))*(x747)))+(((IkReal(0.167025000000000))*(sj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x749=IKsin(j1);
IkReal x750=IKcos(j1);
IkReal x751=((IkReal(0.300000000000000))*(cj3));
IkReal x752=((cj0)*(px));
IkReal x753=((py)*(sj0));
IkReal x754=((IkReal(0.0450000000000000))*(cj3));
IkReal x755=((IkReal(0.300000000000000))*(sj3));
IkReal x756=((sj3)*(x750));
IkReal x757=((pz)*(x749));
IkReal x758=((IkReal(0.0450000000000000))*(x749));
IkReal x759=((IkReal(1.10000000000000))*(x749));
IkReal x760=((pz)*(x750));
IkReal x761=((IkReal(0.0900000000000000))*(x750));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x751)))+(((IkReal(-0.0450000000000000))*(sj3)))+(((x749)*(x753)))+(x760)+(((x749)*(x752))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x750)*(x751)))+(((IkReal(-1.00000000000000))*(x758)))+(pz)+(((IkReal(-0.0450000000000000))*(x756)))+(((IkReal(-1.00000000000000))*(x749)*(x755)))+(((x749)*(x754)))+(((IkReal(-0.550000000000000))*(x750))));
evalcond[2]=((IkReal(0.0450000000000000))+(((x750)*(x753)))+(((IkReal(-1.00000000000000))*(x757)))+(((x750)*(x752)))+(x755)+(((IkReal(-1.00000000000000))*(x754))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x750)*(x755)))+(((sj3)*(x758)))+(((IkReal(-0.0450000000000000))*(x750)))+(((x750)*(x754)))+(((IkReal(-1.00000000000000))*(x752)))+(((IkReal(-1.00000000000000))*(x753)))+(((IkReal(0.550000000000000))*(x749)))+(((x749)*(x751))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x753)*(x761)))+(((IkReal(0.0900000000000000))*(x757)))+(((IkReal(-1.00000000000000))*(x752)*(x761)))+(((IkReal(1.10000000000000))*(x760)))+(((IkReal(-1.00000000000000))*(pp)))+(((x752)*(x759)))+(((x753)*(x759))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x762=((cj2)*(pz));
IkReal x763=((IkReal(1.00000000000000))*(cj0));
IkReal x764=((pz)*(sj2));
IkReal x765=((IkReal(0.0450000000000000))*(sj3));
IkReal x766=((IkReal(0.550000000000000))*(sj2));
IkReal x767=((py)*(sj0));
IkReal x768=((IkReal(0.300000000000000))*(cj3));
IkReal x769=((cj2)*(sj0));
IkReal x770=((cj2)*(px)*(py));
IkReal x771=((cj0)*(px)*(sj2));
if( IKabs(((gconst35)*(((((x766)*(x767)))+(((x768)*(x771)))+(((px)*(sj0)*(x762)))+(((cj0)*(px)*(x766)))+(((x765)*(x771)))+(((sj2)*(x767)*(x768)))+(((IkReal(-1.00000000000000))*(py)*(x762)*(x763)))+(((sj2)*(x765)*(x767))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst35)*(((((x764)*(x768)))+(((IkReal(-1.00000000000000))*(x763)*(x769)*((px)*(px))))+(((x764)*(x765)))+(((IkReal(-1.00000000000000))*(px)*(x767)*(x769)))+(((x770)*((cj0)*(cj0))))+(((cj0)*(cj2)*(py)*(x767)))+(((IkReal(0.550000000000000))*(x764))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst35)*(((((x766)*(x767)))+(((x768)*(x771)))+(((px)*(sj0)*(x762)))+(((cj0)*(px)*(x766)))+(((x765)*(x771)))+(((sj2)*(x767)*(x768)))+(((IkReal(-1.00000000000000))*(py)*(x762)*(x763)))+(((sj2)*(x765)*(x767)))))), ((gconst35)*(((((x764)*(x768)))+(((IkReal(-1.00000000000000))*(x763)*(x769)*((px)*(px))))+(((x764)*(x765)))+(((IkReal(-1.00000000000000))*(px)*(x767)*(x769)))+(((x770)*((cj0)*(cj0))))+(((cj0)*(cj2)*(py)*(x767)))+(((IkReal(0.550000000000000))*(x764)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x772=IKsin(j1);
IkReal x773=IKcos(j1);
IkReal x774=((px)*(sj2));
IkReal x775=((IkReal(0.300000000000000))*(cj3));
IkReal x776=((IkReal(0.0900000000000000))*(cj2));
IkReal x777=((IkReal(0.0450000000000000))*(cj2));
IkReal x778=((IkReal(0.0450000000000000))*(sj3));
IkReal x779=((py)*(sj0));
IkReal x780=((cj0)*(px));
IkReal x781=((IkReal(1.00000000000000))*(cj2));
IkReal x782=((cj0)*(x773));
IkReal x783=((IkReal(1.00000000000000))*(cj0)*(py));
IkReal x784=((IkReal(1.10000000000000))*(x772));
IkReal x785=((pz)*(x773));
IkReal x786=((pz)*(x772));
IkReal x787=((IkReal(0.300000000000000))*(cj2)*(sj3));
IkReal x788=((x773)*(x779));
evalcond[0]=((IkReal(-0.550000000000000))+(((x772)*(x779)))+(x785)+(((IkReal(-1.00000000000000))*(x775)))+(((x772)*(x780)))+(((IkReal(-1.00000000000000))*(x778))));
evalcond[1]=((((x774)*(x782)))+(((cj2)*(px)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(py)*(x781)))+(((IkReal(-1.00000000000000))*(sj2)*(x786)))+(((sj2)*(x788))));
evalcond[2]=((((x772)*(x787)))+(((x772)*(x777)))+(((IkReal(-1.00000000000000))*(x773)*(x778)))+(((IkReal(-1.00000000000000))*(cj3)*(x772)*(x777)))+(((IkReal(-0.550000000000000))*(x773)))+(pz)+(((IkReal(-1.00000000000000))*(x773)*(x775))));
evalcond[3]=((IkReal(0.0450000000000000))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x781)*(x788)))+(((IkReal(-1.00000000000000))*(sj2)*(x783)))+(((sj0)*(x774)))+(((cj2)*(x786)))+(((IkReal(-1.00000000000000))*(x773)*(x780)*(x781))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x779)))+(((x772)*(x778)))+(((x773)*(x777)))+(((x773)*(x787)))+(((x772)*(x775)))+(((IkReal(0.550000000000000))*(x772)))+(((IkReal(-1.00000000000000))*(cj3)*(x773)*(x777)))+(((IkReal(-1.00000000000000))*(x780))));
evalcond[5]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(cj0)*(py)*(sj2)))+(((IkReal(-1.00000000000000))*(x776)*(x786)))+(((IkReal(-1.00000000000000))*(pp)))+(((x780)*(x784)))+(((IkReal(1.10000000000000))*(x785)))+(((IkReal(-0.0900000000000000))*(sj0)*(x774)))+(((x776)*(x788)))+(((x773)*(x776)*(x780)))+(((x779)*(x784))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x789=(cj3)*(cj3);
IkReal x790=(sj3)*(sj3);
IkReal x791=((cj2)*(cj3));
IkReal x792=((IkReal(0.0135000000000000))*(cj2));
IkReal x793=((IkReal(1.00000000000000))*(pz));
if( IKabs(((gconst34)*(((IkReal(-0.302500000000000))+(((IkReal(-0.330000000000000))*(cj3)))+((pz)*(pz))+(((IkReal(-0.00202500000000000))*(x790)))+(((IkReal(-0.0270000000000000))*(cj3)*(sj3)))+(((IkReal(-0.0900000000000000))*(x789)))+(((IkReal(-0.0495000000000000))*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst34)*(((((IkReal(0.0112500000000000))*(x791)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x793)))+(((IkReal(-0.0879750000000000))*(sj3)*(x791)))+(((IkReal(-0.0247500000000000))*(cj2)))+(((x789)*(x792)))+(((IkReal(-0.167025000000000))*(cj2)*(sj3)))+(((IkReal(-1.00000000000000))*(x790)*(x792)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x793))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst34)*(((IkReal(-0.302500000000000))+(((IkReal(-0.330000000000000))*(cj3)))+((pz)*(pz))+(((IkReal(-0.00202500000000000))*(x790)))+(((IkReal(-0.0270000000000000))*(cj3)*(sj3)))+(((IkReal(-0.0900000000000000))*(x789)))+(((IkReal(-0.0495000000000000))*(sj3)))))), ((gconst34)*(((((IkReal(0.0112500000000000))*(x791)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x793)))+(((IkReal(-0.0879750000000000))*(sj3)*(x791)))+(((IkReal(-0.0247500000000000))*(cj2)))+(((x789)*(x792)))+(((IkReal(-0.167025000000000))*(cj2)*(sj3)))+(((IkReal(-1.00000000000000))*(x790)*(x792)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x793)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x794=IKsin(j1);
IkReal x795=IKcos(j1);
IkReal x796=((px)*(sj2));
IkReal x797=((IkReal(0.300000000000000))*(cj3));
IkReal x798=((IkReal(0.0900000000000000))*(cj2));
IkReal x799=((IkReal(0.0450000000000000))*(cj2));
IkReal x800=((IkReal(0.0450000000000000))*(sj3));
IkReal x801=((py)*(sj0));
IkReal x802=((cj0)*(px));
IkReal x803=((IkReal(1.00000000000000))*(cj2));
IkReal x804=((cj0)*(x795));
IkReal x805=((IkReal(1.00000000000000))*(cj0)*(py));
IkReal x806=((IkReal(1.10000000000000))*(x794));
IkReal x807=((pz)*(x795));
IkReal x808=((pz)*(x794));
IkReal x809=((IkReal(0.300000000000000))*(cj2)*(sj3));
IkReal x810=((x795)*(x801));
evalcond[0]=((IkReal(-0.550000000000000))+(x807)+(((x794)*(x802)))+(((IkReal(-1.00000000000000))*(x797)))+(((x794)*(x801)))+(((IkReal(-1.00000000000000))*(x800))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj0)*(py)*(x803)))+(((x796)*(x804)))+(((cj2)*(px)*(sj0)))+(((IkReal(-1.00000000000000))*(sj2)*(x808)))+(((sj2)*(x810))));
evalcond[2]=((((x794)*(x799)))+(((IkReal(-0.550000000000000))*(x795)))+(((x794)*(x809)))+(((IkReal(-1.00000000000000))*(cj3)*(x794)*(x799)))+(pz)+(((IkReal(-1.00000000000000))*(x795)*(x800)))+(((IkReal(-1.00000000000000))*(x795)*(x797))));
evalcond[3]=((IkReal(0.0450000000000000))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x803)*(x810)))+(((IkReal(-1.00000000000000))*(sj2)*(x805)))+(((IkReal(-1.00000000000000))*(x795)*(x802)*(x803)))+(((cj2)*(x808)))+(((sj0)*(x796))));
evalcond[4]=((((IkReal(0.550000000000000))*(x794)))+(((x794)*(x797)))+(((IkReal(-1.00000000000000))*(x801)))+(((IkReal(-1.00000000000000))*(x802)))+(((x795)*(x809)))+(((x794)*(x800)))+(((IkReal(-1.00000000000000))*(cj3)*(x795)*(x799)))+(((x795)*(x799))));
evalcond[5]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(cj0)*(py)*(sj2)))+(((x798)*(x810)))+(((IkReal(-0.0900000000000000))*(sj0)*(x796)))+(((x795)*(x798)*(x802)))+(((IkReal(-1.00000000000000))*(pp)))+(((x802)*(x806)))+(((IkReal(1.10000000000000))*(x807)))+(((x801)*(x806)))+(((IkReal(-1.00000000000000))*(x798)*(x808))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x811=((IkReal(0.0450000000000000))*(sj2));
if( IKabs(((IkReal(-1.00000000000000))*(py))) < IKFAST_ATAN2_MAGTHRESH && IKabs(px) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x812=((IkReal(1.00000000000000))*(IKatan2(((IkReal(-1.00000000000000))*(py)), px)));
if( ((((px)*(px))+((py)*(py)))) < (IkReal)-0.00001 )
    continue;
if( (((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(0.300000000000000))*(sj2)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(x811)))+(x811))))) < -1-IKFAST_SINCOS_THRESH || (((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(0.300000000000000))*(sj2)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(x811)))+(x811))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x813=IKasin(((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(0.300000000000000))*(sj2)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(x811)))+(x811)))));
j0array[0]=((((IkReal(-1.00000000000000))*(x813)))+(((IkReal(-1.00000000000000))*(x812))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x812)))+(x813));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal dummyeval[1];
IkReal gconst34;
IkReal x814=((cj2)*(pz));
IkReal x815=((py)*(sj0));
IkReal x816=((IkReal(0.300000000000000))*(cj3));
IkReal x817=((IkReal(0.0450000000000000))*(sj3));
IkReal x818=((cj0)*(px));
gconst34=IKsign(((((IkReal(-0.550000000000000))*(x818)))+(((IkReal(-0.0450000000000000))*(x814)))+(((IkReal(-0.300000000000000))*(sj3)*(x814)))+(((IkReal(0.0450000000000000))*(cj3)*(x814)))+(((IkReal(-1.00000000000000))*(x817)*(x818)))+(((IkReal(-1.00000000000000))*(x816)*(x818)))+(((IkReal(-1.00000000000000))*(x815)*(x817)))+(((IkReal(-1.00000000000000))*(x815)*(x816)))+(((IkReal(-0.550000000000000))*(x815)))));
IkReal x819=((cj0)*(px));
IkReal x820=((IkReal(6.66666666666667))*(cj3));
IkReal x821=((py)*(sj0));
IkReal x822=((cj2)*(pz));
IkReal x823=((IkReal(1.00000000000000))*(sj3));
dummyeval[0]=((((IkReal(-12.2222222222222))*(x819)))+(((IkReal(-1.00000000000000))*(x822)))+(((IkReal(-1.00000000000000))*(x821)*(x823)))+(((IkReal(-1.00000000000000))*(x819)*(x823)))+(((cj3)*(x822)))+(((IkReal(-12.2222222222222))*(x821)))+(((IkReal(-1.00000000000000))*(x820)*(x821)))+(((IkReal(-1.00000000000000))*(x819)*(x820)))+(((IkReal(-6.66666666666667))*(sj3)*(x822))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst35;
gconst35=IKsign(((((sj2)*((py)*(py))*((sj0)*(sj0))))+(((sj2)*((pz)*(pz))))+(((sj2)*((cj0)*(cj0))*((px)*(px))))+(((IkReal(2.00000000000000))*(cj0)*(px)*(py)*(sj0)*(sj2)))));
dummyeval[0]=((((sj2)*((py)*(py))*((sj0)*(sj0))))+(((sj2)*((pz)*(pz))))+(((sj2)*((cj0)*(cj0))*((px)*(px))))+(((IkReal(2.00000000000000))*(cj0)*(px)*(py)*(sj0)*(sj2))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x824=((((IkReal(-1.00000000000000))*(cj0)*(py)))+(((px)*(sj0))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x824;
evalcond[3]=x824;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst36;
IkReal x825=((IkReal(0.0450000000000000))*(pz));
IkReal x826=((IkReal(0.300000000000000))*(cj3));
IkReal x827=((cj0)*(px));
IkReal x828=((py)*(sj0));
IkReal x829=((IkReal(0.0450000000000000))*(sj3));
gconst36=IKsign(((((IkReal(-1.00000000000000))*(x828)*(x829)))+(((IkReal(-0.550000000000000))*(x828)))+(((IkReal(-1.00000000000000))*(x826)*(x827)))+(((IkReal(-1.00000000000000))*(x827)*(x829)))+(((IkReal(-1.00000000000000))*(x826)*(x828)))+(((IkReal(-0.300000000000000))*(pz)*(sj3)))+(((cj3)*(x825)))+(((IkReal(-1.00000000000000))*(x825)))+(((IkReal(-0.550000000000000))*(x827)))));
IkReal x830=((cj0)*(px));
IkReal x831=((IkReal(6.66666666666667))*(cj3));
IkReal x832=((py)*(sj0));
IkReal x833=((IkReal(1.00000000000000))*(sj3));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x830)*(x833)))+(((IkReal(-1.00000000000000))*(x831)*(x832)))+(((IkReal(-1.00000000000000))*(pz)))+(((cj3)*(pz)))+(((IkReal(-12.2222222222222))*(x832)))+(((IkReal(-6.66666666666667))*(pz)*(sj3)))+(((IkReal(-1.00000000000000))*(x830)*(x831)))+(((IkReal(-12.2222222222222))*(x830)))+(((IkReal(-1.00000000000000))*(x832)*(x833))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst37;
gconst37=IKsign(((((IkReal(-2.00000000000000))*(cj0)*(px)*(py)*(sj0)))+(((IkReal(-1.00000000000000))*((py)*(py))*((sj0)*(sj0))))+(((IkReal(-1.00000000000000))*((pz)*(pz))))+(((IkReal(-1.00000000000000))*((cj0)*(cj0))*((px)*(px))))));
dummyeval[0]=((((IkReal(-2.00000000000000))*(cj0)*(px)*(py)*(sj0)))+(((IkReal(-1.00000000000000))*((py)*(py))*((sj0)*(sj0))))+(((IkReal(-1.00000000000000))*((pz)*(pz))))+(((IkReal(-1.00000000000000))*((cj0)*(cj0))*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x834=((cj0)*(px));
IkReal x835=((IkReal(0.300000000000000))*(sj3));
IkReal x836=((IkReal(0.0450000000000000))*(pz));
IkReal x837=((IkReal(0.0450000000000000))*(cj3));
IkReal x838=((py)*(sj0));
IkReal x839=((IkReal(0.300000000000000))*(cj3));
IkReal x840=((IkReal(0.0450000000000000))*(sj3));
if( IKabs(((gconst37)*(((((IkReal(-0.550000000000000))*(x838)))+(((IkReal(-1.00000000000000))*(x834)*(x839)))+(((IkReal(-1.00000000000000))*(x838)*(x839)))+(((IkReal(-1.00000000000000))*(cj3)*(x836)))+(((IkReal(-1.00000000000000))*(x834)*(x840)))+(((pz)*(x835)))+(((IkReal(-0.550000000000000))*(x834)))+(x836)+(((IkReal(-1.00000000000000))*(x838)*(x840))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst37)*(((((IkReal(-1.00000000000000))*(sj3)*(x836)))+(((IkReal(-1.00000000000000))*(pz)*(x839)))+(((x834)*(x837)))+(((IkReal(-0.0450000000000000))*(x838)))+(((IkReal(-0.550000000000000))*(pz)))+(((IkReal(-0.0450000000000000))*(x834)))+(((IkReal(-1.00000000000000))*(x835)*(x838)))+(((x837)*(x838)))+(((IkReal(-1.00000000000000))*(x834)*(x835))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst37)*(((((IkReal(-0.550000000000000))*(x838)))+(((IkReal(-1.00000000000000))*(x834)*(x839)))+(((IkReal(-1.00000000000000))*(x838)*(x839)))+(((IkReal(-1.00000000000000))*(cj3)*(x836)))+(((IkReal(-1.00000000000000))*(x834)*(x840)))+(((pz)*(x835)))+(((IkReal(-0.550000000000000))*(x834)))+(x836)+(((IkReal(-1.00000000000000))*(x838)*(x840)))))), ((gconst37)*(((((IkReal(-1.00000000000000))*(sj3)*(x836)))+(((IkReal(-1.00000000000000))*(pz)*(x839)))+(((x834)*(x837)))+(((IkReal(-0.0450000000000000))*(x838)))+(((IkReal(-0.550000000000000))*(pz)))+(((IkReal(-0.0450000000000000))*(x834)))+(((IkReal(-1.00000000000000))*(x835)*(x838)))+(((x837)*(x838)))+(((IkReal(-1.00000000000000))*(x834)*(x835)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x841=IKsin(j1);
IkReal x842=IKcos(j1);
IkReal x843=((IkReal(0.300000000000000))*(cj3));
IkReal x844=((cj0)*(px));
IkReal x845=((py)*(sj0));
IkReal x846=((IkReal(0.0450000000000000))*(cj3));
IkReal x847=((IkReal(0.300000000000000))*(sj3));
IkReal x848=((sj3)*(x842));
IkReal x849=((pz)*(x841));
IkReal x850=((IkReal(1.00000000000000))*(x842));
IkReal x851=((IkReal(0.0450000000000000))*(x841));
IkReal x852=((pz)*(x842));
IkReal x853=((IkReal(0.0900000000000000))*(x842));
IkReal x854=((IkReal(1.10000000000000))*(x841));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((x841)*(x844)))+(((x841)*(x845)))+(((IkReal(-1.00000000000000))*(x843)))+(x852));
evalcond[1]=((((IkReal(-1.00000000000000))*(x842)*(x843)))+(((IkReal(-0.550000000000000))*(x842)))+(((IkReal(-1.00000000000000))*(x841)*(x846)))+(((IkReal(-0.0450000000000000))*(x848)))+(pz)+(x851)+(((x841)*(x847))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x846)))+(x847)+(x849)+(((IkReal(-1.00000000000000))*(x845)*(x850)))+(((IkReal(-1.00000000000000))*(x844)*(x850))));
evalcond[3]=((((x842)*(x847)))+(((IkReal(-1.00000000000000))*(x842)*(x846)))+(((IkReal(0.550000000000000))*(x841)))+(((sj3)*(x851)))+(((IkReal(-1.00000000000000))*(x845)))+(((IkReal(-1.00000000000000))*(x844)))+(((IkReal(0.0450000000000000))*(x842)))+(((x841)*(x843))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x852)))+(((x844)*(x853)))+(((IkReal(-1.00000000000000))*(pp)))+(((x845)*(x853)))+(((x844)*(x854)))+(((IkReal(-0.0900000000000000))*(x849)))+(((x845)*(x854))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x855=(cj3)*(cj3);
IkReal x856=(sj3)*(sj3);
IkReal x857=((cj3)*(sj3));
IkReal x858=((IkReal(1.00000000000000))*(pz));
if( IKabs(((gconst36)*(((IkReal(-0.302500000000000))+(((IkReal(-0.0900000000000000))*(x855)))+(((IkReal(-0.330000000000000))*(cj3)))+((pz)*(pz))+(((IkReal(-0.00202500000000000))*(x856)))+(((IkReal(-0.0270000000000000))*(x857)))+(((IkReal(-0.0495000000000000))*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst36)*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x858)))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*(x855)))+(((IkReal(-0.0879750000000000))*(x857)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x858)))+(((IkReal(-0.0135000000000000))*(x856))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst36)*(((IkReal(-0.302500000000000))+(((IkReal(-0.0900000000000000))*(x855)))+(((IkReal(-0.330000000000000))*(cj3)))+((pz)*(pz))+(((IkReal(-0.00202500000000000))*(x856)))+(((IkReal(-0.0270000000000000))*(x857)))+(((IkReal(-0.0495000000000000))*(sj3)))))), ((gconst36)*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x858)))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*(x855)))+(((IkReal(-0.0879750000000000))*(x857)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x858)))+(((IkReal(-0.0135000000000000))*(x856)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x859=IKsin(j1);
IkReal x860=IKcos(j1);
IkReal x861=((IkReal(0.300000000000000))*(cj3));
IkReal x862=((cj0)*(px));
IkReal x863=((py)*(sj0));
IkReal x864=((IkReal(0.0450000000000000))*(cj3));
IkReal x865=((IkReal(0.300000000000000))*(sj3));
IkReal x866=((sj3)*(x860));
IkReal x867=((pz)*(x859));
IkReal x868=((IkReal(1.00000000000000))*(x860));
IkReal x869=((IkReal(0.0450000000000000))*(x859));
IkReal x870=((pz)*(x860));
IkReal x871=((IkReal(0.0900000000000000))*(x860));
IkReal x872=((IkReal(1.10000000000000))*(x859));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((x859)*(x862)))+(((IkReal(-1.00000000000000))*(x861)))+(x870)+(((x859)*(x863))));
evalcond[1]=((((x859)*(x865)))+(x869)+(((IkReal(-0.0450000000000000))*(x866)))+(((IkReal(-1.00000000000000))*(x859)*(x864)))+(((IkReal(-0.550000000000000))*(x860)))+(pz)+(((IkReal(-1.00000000000000))*(x860)*(x861))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x864)))+(((IkReal(-1.00000000000000))*(x862)*(x868)))+(x867)+(x865)+(((IkReal(-1.00000000000000))*(x863)*(x868))));
evalcond[3]=((((x859)*(x861)))+(((IkReal(-1.00000000000000))*(x860)*(x864)))+(((sj3)*(x869)))+(((IkReal(0.0450000000000000))*(x860)))+(((x860)*(x865)))+(((IkReal(-1.00000000000000))*(x863)))+(((IkReal(0.550000000000000))*(x859)))+(((IkReal(-1.00000000000000))*(x862))));
evalcond[4]=((IkReal(-0.212500000000000))+(((x862)*(x872)))+(((x863)*(x871)))+(((IkReal(-0.0900000000000000))*(x867)))+(((IkReal(-1.00000000000000))*(pp)))+(((x862)*(x871)))+(((x863)*(x872)))+(((IkReal(1.10000000000000))*(x870))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x873=((px)*(sj0));
IkReal x874=((cj0)*(py));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j2, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((x873)+(((IkReal(-1.00000000000000))*(x874))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x873)))+(x874));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst38;
IkReal x875=((IkReal(0.0450000000000000))*(pz));
IkReal x876=((IkReal(0.300000000000000))*(cj3));
IkReal x877=((cj0)*(px));
IkReal x878=((py)*(sj0));
IkReal x879=((IkReal(0.0450000000000000))*(sj3));
gconst38=IKsign(((((IkReal(-1.00000000000000))*(x878)*(x879)))+(((IkReal(-1.00000000000000))*(x876)*(x878)))+(((IkReal(-1.00000000000000))*(cj3)*(x875)))+(((IkReal(-0.550000000000000))*(x878)))+(((IkReal(0.300000000000000))*(pz)*(sj3)))+(x875)+(((IkReal(-1.00000000000000))*(x876)*(x877)))+(((IkReal(-0.550000000000000))*(x877)))+(((IkReal(-1.00000000000000))*(x877)*(x879)))));
IkReal x880=((cj0)*(px));
IkReal x881=((IkReal(6.66666666666667))*(cj3));
IkReal x882=((py)*(sj0));
IkReal x883=((IkReal(1.00000000000000))*(sj3));
dummyeval[0]=((((IkReal(-12.2222222222222))*(x882)))+(((IkReal(-12.2222222222222))*(x880)))+(((IkReal(-1.00000000000000))*(x880)*(x883)))+(((IkReal(6.66666666666667))*(pz)*(sj3)))+(((IkReal(-1.00000000000000))*(x881)*(x882)))+(pz)+(((IkReal(-1.00000000000000))*(x882)*(x883)))+(((IkReal(-1.00000000000000))*(x880)*(x881)))+(((IkReal(-1.00000000000000))*(cj3)*(pz))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst39;
gconst39=IKsign((((((py)*(py))*((sj0)*(sj0))))+((((cj0)*(cj0))*((px)*(px))))+((pz)*(pz))+(((IkReal(2.00000000000000))*(cj0)*(px)*(py)*(sj0)))));
dummyeval[0]=(((((py)*(py))*((sj0)*(sj0))))+((((cj0)*(cj0))*((px)*(px))))+((pz)*(pz))+(((IkReal(2.00000000000000))*(cj0)*(px)*(py)*(sj0))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x884=((IkReal(0.0450000000000000))*(pz));
IkReal x885=((py)*(sj0));
IkReal x886=((IkReal(0.300000000000000))*(sj3));
IkReal x887=((cj0)*(px));
IkReal x888=((IkReal(0.0450000000000000))*(sj3));
IkReal x889=((IkReal(0.300000000000000))*(x887));
IkReal x890=((cj3)*(x885));
if( IKabs(((gconst39)*(((((x887)*(x888)))+(x884)+(((IkReal(-1.00000000000000))*(cj3)*(x884)))+(((IkReal(0.300000000000000))*(x890)))+(((pz)*(x886)))+(((cj3)*(x889)))+(((x885)*(x888)))+(((IkReal(0.550000000000000))*(x885)))+(((IkReal(0.550000000000000))*(x887))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst39)*(((((IkReal(0.300000000000000))*(cj3)*(pz)))+(((IkReal(-0.0450000000000000))*(x885)))+(((IkReal(0.0450000000000000))*(x890)))+(((IkReal(-0.0450000000000000))*(x887)))+(((IkReal(0.550000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x885)*(x886)))+(((IkReal(-1.00000000000000))*(x886)*(x887)))+(((IkReal(0.0450000000000000))*(cj3)*(x887)))+(((sj3)*(x884))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst39)*(((((x887)*(x888)))+(x884)+(((IkReal(-1.00000000000000))*(cj3)*(x884)))+(((IkReal(0.300000000000000))*(x890)))+(((pz)*(x886)))+(((cj3)*(x889)))+(((x885)*(x888)))+(((IkReal(0.550000000000000))*(x885)))+(((IkReal(0.550000000000000))*(x887)))))), ((gconst39)*(((((IkReal(0.300000000000000))*(cj3)*(pz)))+(((IkReal(-0.0450000000000000))*(x885)))+(((IkReal(0.0450000000000000))*(x890)))+(((IkReal(-0.0450000000000000))*(x887)))+(((IkReal(0.550000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x885)*(x886)))+(((IkReal(-1.00000000000000))*(x886)*(x887)))+(((IkReal(0.0450000000000000))*(cj3)*(x887)))+(((sj3)*(x884)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x891=IKsin(j1);
IkReal x892=IKcos(j1);
IkReal x893=((IkReal(0.300000000000000))*(cj3));
IkReal x894=((cj0)*(px));
IkReal x895=((py)*(sj0));
IkReal x896=((IkReal(0.0450000000000000))*(cj3));
IkReal x897=((IkReal(0.300000000000000))*(sj3));
IkReal x898=((sj3)*(x892));
IkReal x899=((pz)*(x891));
IkReal x900=((IkReal(0.0450000000000000))*(x891));
IkReal x901=((IkReal(1.10000000000000))*(x891));
IkReal x902=((pz)*(x892));
IkReal x903=((IkReal(0.0900000000000000))*(x892));
evalcond[0]=((IkReal(-0.550000000000000))+(((x891)*(x895)))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x893)))+(x902)+(((x891)*(x894))));
evalcond[1]=((((x891)*(x896)))+(((IkReal(-1.00000000000000))*(x891)*(x897)))+(((IkReal(-1.00000000000000))*(x900)))+(pz)+(((IkReal(-1.00000000000000))*(x892)*(x893)))+(((IkReal(-0.550000000000000))*(x892)))+(((IkReal(-0.0450000000000000))*(x898))));
evalcond[2]=((IkReal(0.0450000000000000))+(((x892)*(x894)))+(((x892)*(x895)))+(((IkReal(-1.00000000000000))*(x899)))+(x897)+(((IkReal(-1.00000000000000))*(x896))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x892)*(x897)))+(((IkReal(-1.00000000000000))*(x895)))+(((x892)*(x896)))+(((IkReal(0.550000000000000))*(x891)))+(((x891)*(x893)))+(((IkReal(-1.00000000000000))*(x894)))+(((sj3)*(x900)))+(((IkReal(-0.0450000000000000))*(x892))));
evalcond[4]=((IkReal(-0.212500000000000))+(((x894)*(x901)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x902)))+(((IkReal(-1.00000000000000))*(x894)*(x903)))+(((IkReal(0.0900000000000000))*(x899)))+(((IkReal(-1.00000000000000))*(x895)*(x903)))+(((x895)*(x901))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x904=(sj3)*(sj3);
IkReal x905=(cj3)*(cj3);
IkReal x906=((cj3)*(sj3));
IkReal x907=((IkReal(1.00000000000000))*(pz));
if( IKabs(((gconst38)*(((IkReal(-0.302500000000000))+(((IkReal(-0.330000000000000))*(cj3)))+(((IkReal(-0.0270000000000000))*(x906)))+(((IkReal(-0.0900000000000000))*(x905)))+((pz)*(pz))+(((IkReal(-0.0495000000000000))*(sj3)))+(((IkReal(-0.00202500000000000))*(x904))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst38)*(((IkReal(0.0247500000000000))+(((IkReal(-0.0112500000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x907)))+(((IkReal(-0.0135000000000000))*(x905)))+(((IkReal(0.0879750000000000))*(x906)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x907)))+(((IkReal(0.0135000000000000))*(x904)))+(((IkReal(0.167025000000000))*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst38)*(((IkReal(-0.302500000000000))+(((IkReal(-0.330000000000000))*(cj3)))+(((IkReal(-0.0270000000000000))*(x906)))+(((IkReal(-0.0900000000000000))*(x905)))+((pz)*(pz))+(((IkReal(-0.0495000000000000))*(sj3)))+(((IkReal(-0.00202500000000000))*(x904)))))), ((gconst38)*(((IkReal(0.0247500000000000))+(((IkReal(-0.0112500000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x907)))+(((IkReal(-0.0135000000000000))*(x905)))+(((IkReal(0.0879750000000000))*(x906)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x907)))+(((IkReal(0.0135000000000000))*(x904)))+(((IkReal(0.167025000000000))*(sj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x908=IKsin(j1);
IkReal x909=IKcos(j1);
IkReal x910=((IkReal(0.300000000000000))*(cj3));
IkReal x911=((cj0)*(px));
IkReal x912=((py)*(sj0));
IkReal x913=((IkReal(0.0450000000000000))*(cj3));
IkReal x914=((IkReal(0.300000000000000))*(sj3));
IkReal x915=((sj3)*(x909));
IkReal x916=((pz)*(x908));
IkReal x917=((IkReal(0.0450000000000000))*(x908));
IkReal x918=((IkReal(1.10000000000000))*(x908));
IkReal x919=((pz)*(x909));
IkReal x920=((IkReal(0.0900000000000000))*(x909));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x910)))+(((x908)*(x911)))+(((x908)*(x912)))+(x919));
evalcond[1]=((((IkReal(-0.550000000000000))*(x909)))+(((IkReal(-1.00000000000000))*(x917)))+(pz)+(((IkReal(-0.0450000000000000))*(x915)))+(((IkReal(-1.00000000000000))*(x908)*(x914)))+(((IkReal(-1.00000000000000))*(x909)*(x910)))+(((x908)*(x913))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x913)))+(((IkReal(-1.00000000000000))*(x916)))+(((x909)*(x911)))+(((x909)*(x912)))+(x914));
evalcond[3]=((((IkReal(-1.00000000000000))*(x912)))+(((x908)*(x910)))+(((sj3)*(x917)))+(((IkReal(-1.00000000000000))*(x911)))+(((IkReal(0.550000000000000))*(x908)))+(((x909)*(x913)))+(((IkReal(-1.00000000000000))*(x909)*(x914)))+(((IkReal(-0.0450000000000000))*(x909))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x912)*(x920)))+(((IkReal(1.10000000000000))*(x919)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(x916)))+(((IkReal(-1.00000000000000))*(x911)*(x920)))+(((x911)*(x918)))+(((x912)*(x918))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x921=((cj2)*(pz));
IkReal x922=((IkReal(1.00000000000000))*(cj0));
IkReal x923=((pz)*(sj2));
IkReal x924=((IkReal(0.0450000000000000))*(sj3));
IkReal x925=((IkReal(0.550000000000000))*(sj2));
IkReal x926=((py)*(sj0));
IkReal x927=((IkReal(0.300000000000000))*(cj3));
IkReal x928=((cj2)*(sj0));
IkReal x929=((cj2)*(px)*(py));
IkReal x930=((cj0)*(px)*(sj2));
if( IKabs(((gconst35)*(((((sj2)*(x924)*(x926)))+(((x925)*(x926)))+(((cj0)*(px)*(x925)))+(((x924)*(x930)))+(((IkReal(-1.00000000000000))*(py)*(x921)*(x922)))+(((px)*(sj0)*(x921)))+(((x927)*(x930)))+(((sj2)*(x926)*(x927))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst35)*(((((cj0)*(cj2)*(py)*(x926)))+(((IkReal(0.550000000000000))*(x923)))+(((x923)*(x924)))+(((IkReal(-1.00000000000000))*(px)*(x926)*(x928)))+(((x923)*(x927)))+(((IkReal(-1.00000000000000))*(x922)*(x928)*((px)*(px))))+(((x929)*((cj0)*(cj0)))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst35)*(((((sj2)*(x924)*(x926)))+(((x925)*(x926)))+(((cj0)*(px)*(x925)))+(((x924)*(x930)))+(((IkReal(-1.00000000000000))*(py)*(x921)*(x922)))+(((px)*(sj0)*(x921)))+(((x927)*(x930)))+(((sj2)*(x926)*(x927)))))), ((gconst35)*(((((cj0)*(cj2)*(py)*(x926)))+(((IkReal(0.550000000000000))*(x923)))+(((x923)*(x924)))+(((IkReal(-1.00000000000000))*(px)*(x926)*(x928)))+(((x923)*(x927)))+(((IkReal(-1.00000000000000))*(x922)*(x928)*((px)*(px))))+(((x929)*((cj0)*(cj0))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x931=IKsin(j1);
IkReal x932=IKcos(j1);
IkReal x933=((px)*(sj2));
IkReal x934=((IkReal(0.300000000000000))*(cj3));
IkReal x935=((IkReal(0.0900000000000000))*(cj2));
IkReal x936=((IkReal(0.0450000000000000))*(cj2));
IkReal x937=((IkReal(0.0450000000000000))*(sj3));
IkReal x938=((py)*(sj0));
IkReal x939=((cj0)*(px));
IkReal x940=((IkReal(1.00000000000000))*(cj2));
IkReal x941=((cj0)*(x932));
IkReal x942=((IkReal(1.00000000000000))*(cj0)*(py));
IkReal x943=((IkReal(1.10000000000000))*(x931));
IkReal x944=((pz)*(x932));
IkReal x945=((pz)*(x931));
IkReal x946=((IkReal(0.300000000000000))*(cj2)*(sj3));
IkReal x947=((x932)*(x938));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x937)))+(((x931)*(x939)))+(x944)+(((x931)*(x938)))+(((IkReal(-1.00000000000000))*(x934))));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj2)*(x945)))+(((cj2)*(px)*(sj0)))+(((x933)*(x941)))+(((sj2)*(x947)))+(((IkReal(-1.00000000000000))*(cj0)*(py)*(x940))));
evalcond[2]=((((x931)*(x946)))+(((x931)*(x936)))+(((IkReal(-1.00000000000000))*(x932)*(x937)))+(((IkReal(-1.00000000000000))*(x932)*(x934)))+(pz)+(((IkReal(-0.550000000000000))*(x932)))+(((IkReal(-1.00000000000000))*(cj3)*(x931)*(x936))));
evalcond[3]=((IkReal(0.0450000000000000))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x940)*(x947)))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x932)*(x939)*(x940)))+(((sj0)*(x933)))+(((cj2)*(x945)))+(((IkReal(-1.00000000000000))*(sj2)*(x942))));
evalcond[4]=((((IkReal(0.550000000000000))*(x931)))+(((IkReal(-1.00000000000000))*(x938)))+(((x931)*(x937)))+(((IkReal(-1.00000000000000))*(cj3)*(x932)*(x936)))+(((x931)*(x934)))+(((IkReal(-1.00000000000000))*(x939)))+(((x932)*(x946)))+(((x932)*(x936))));
evalcond[5]=((IkReal(-0.212500000000000))+(((x932)*(x935)*(x939)))+(((IkReal(1.10000000000000))*(x944)))+(((IkReal(0.0900000000000000))*(cj0)*(py)*(sj2)))+(((IkReal(-1.00000000000000))*(x935)*(x945)))+(((x938)*(x943)))+(((IkReal(-0.0900000000000000))*(sj0)*(x933)))+(((x939)*(x943)))+(((IkReal(-1.00000000000000))*(pp)))+(((x935)*(x947))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x948=(cj3)*(cj3);
IkReal x949=(sj3)*(sj3);
IkReal x950=((cj2)*(cj3));
IkReal x951=((IkReal(0.0135000000000000))*(cj2));
IkReal x952=((IkReal(1.00000000000000))*(pz));
if( IKabs(((gconst34)*(((IkReal(-0.302500000000000))+(((IkReal(-0.330000000000000))*(cj3)))+((pz)*(pz))+(((IkReal(-0.0900000000000000))*(x948)))+(((IkReal(-0.0270000000000000))*(cj3)*(sj3)))+(((IkReal(-0.0495000000000000))*(sj3)))+(((IkReal(-0.00202500000000000))*(x949))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst34)*(((((x948)*(x951)))+(((IkReal(-0.0247500000000000))*(cj2)))+(((IkReal(-0.167025000000000))*(cj2)*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x952)))+(((IkReal(0.0112500000000000))*(x950)))+(((IkReal(-0.0879750000000000))*(sj3)*(x950)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x952)))+(((IkReal(-1.00000000000000))*(x949)*(x951))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst34)*(((IkReal(-0.302500000000000))+(((IkReal(-0.330000000000000))*(cj3)))+((pz)*(pz))+(((IkReal(-0.0900000000000000))*(x948)))+(((IkReal(-0.0270000000000000))*(cj3)*(sj3)))+(((IkReal(-0.0495000000000000))*(sj3)))+(((IkReal(-0.00202500000000000))*(x949)))))), ((gconst34)*(((((x948)*(x951)))+(((IkReal(-0.0247500000000000))*(cj2)))+(((IkReal(-0.167025000000000))*(cj2)*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x952)))+(((IkReal(0.0112500000000000))*(x950)))+(((IkReal(-0.0879750000000000))*(sj3)*(x950)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x952)))+(((IkReal(-1.00000000000000))*(x949)*(x951)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x953=IKsin(j1);
IkReal x954=IKcos(j1);
IkReal x955=((px)*(sj2));
IkReal x956=((IkReal(0.300000000000000))*(cj3));
IkReal x957=((IkReal(0.0900000000000000))*(cj2));
IkReal x958=((IkReal(0.0450000000000000))*(cj2));
IkReal x959=((IkReal(0.0450000000000000))*(sj3));
IkReal x960=((py)*(sj0));
IkReal x961=((cj0)*(px));
IkReal x962=((IkReal(1.00000000000000))*(cj2));
IkReal x963=((cj0)*(x954));
IkReal x964=((IkReal(1.00000000000000))*(cj0)*(py));
IkReal x965=((IkReal(1.10000000000000))*(x953));
IkReal x966=((pz)*(x954));
IkReal x967=((pz)*(x953));
IkReal x968=((IkReal(0.300000000000000))*(cj2)*(sj3));
IkReal x969=((x954)*(x960));
evalcond[0]=((IkReal(-0.550000000000000))+(((x953)*(x960)))+(((x953)*(x961)))+(((IkReal(-1.00000000000000))*(x959)))+(x966)+(((IkReal(-1.00000000000000))*(x956))));
evalcond[1]=((((sj2)*(x969)))+(((IkReal(-1.00000000000000))*(sj2)*(x967)))+(((cj2)*(px)*(sj0)))+(((x955)*(x963)))+(((IkReal(-1.00000000000000))*(cj0)*(py)*(x962))));
evalcond[2]=((((x953)*(x968)))+(((IkReal(-0.550000000000000))*(x954)))+(((IkReal(-1.00000000000000))*(x954)*(x959)))+(((x953)*(x958)))+(((IkReal(-1.00000000000000))*(x954)*(x956)))+(pz)+(((IkReal(-1.00000000000000))*(cj3)*(x953)*(x958))));
evalcond[3]=((IkReal(0.0450000000000000))+(((sj0)*(x955)))+(((IkReal(0.300000000000000))*(sj3)))+(((cj2)*(x967)))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x954)*(x961)*(x962)))+(((IkReal(-1.00000000000000))*(sj2)*(x964)))+(((IkReal(-1.00000000000000))*(x962)*(x969))));
evalcond[4]=((((x954)*(x958)))+(((IkReal(-1.00000000000000))*(cj3)*(x954)*(x958)))+(((x953)*(x956)))+(((IkReal(0.550000000000000))*(x953)))+(((IkReal(-1.00000000000000))*(x961)))+(((x954)*(x968)))+(((x953)*(x959)))+(((IkReal(-1.00000000000000))*(x960))));
evalcond[5]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(cj0)*(py)*(sj2)))+(((IkReal(-0.0900000000000000))*(sj0)*(x955)))+(((IkReal(-1.00000000000000))*(pp)))+(((x954)*(x957)*(x961)))+(((x961)*(x965)))+(((x957)*(x969)))+(((IkReal(-1.00000000000000))*(x957)*(x967)))+(((IkReal(1.10000000000000))*(x966)))+(((x960)*(x965))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x92=((IkReal(1.00000000000000))*(cj3));
IkReal x93=((sj0)*(sj2));
IkReal x94=((cj2)*(sj1));
IkReal x95=((IkReal(1.00000000000000))*(sj3));
IkReal x96=((cj1)*(cj2));
IkReal x97=((sj1)*(sj2));
IkReal x98=((cj0)*(sj2));
IkReal x99=((IkReal(1.00000000000000))*(cj1));
IkReal x100=((((cj3)*(x96)))+(((IkReal(-1.00000000000000))*(sj1)*(x95))));
IkReal x101=((((IkReal(-1.00000000000000))*(x93)*(x99)))+(((cj0)*(cj2))));
IkReal x102=((((cj3)*(sj1)))+(((sj3)*(x96))));
IkReal x103=((((IkReal(-1.00000000000000))*(x94)*(x95)))+(((cj1)*(cj3))));
IkReal x104=((cj0)*(x100));
IkReal x105=((((IkReal(-1.00000000000000))*(x92)*(x94)))+(((IkReal(-1.00000000000000))*(cj1)*(x95))));
IkReal x106=((((IkReal(-1.00000000000000))*(cj2)*(sj0)))+(((IkReal(-1.00000000000000))*(x98)*(x99))));
IkReal x107=((((cj3)*(x98)))+(((sj0)*(x100))));
IkReal x108=((((IkReal(-1.00000000000000))*(x92)*(x93)))+(x104));
IkReal x109=((((sj0)*(x102)))+(((sj3)*(x98))));
IkReal x110=((((IkReal(-1.00000000000000))*(x93)*(x95)))+(((cj0)*(x102))));
new_r00=((((r20)*(x105)))+(((r10)*(x107)))+(((r00)*(x108))));
new_r01=((((r21)*(x105)))+(((r11)*(x107)))+(((r01)*(x108))));
new_r02=((((r22)*(x105)))+(((r12)*(x107)))+(((r02)*(((((IkReal(-1.00000000000000))*(cj3)*(x93)))+(x104))))));
new_r10=((((r10)*(x101)))+(((r00)*(x106)))+(((r20)*(x97))));
new_r11=((((r21)*(x97)))+(((r11)*(x101)))+(((r01)*(x106))));
new_r12=((((r02)*(x106)))+(((r12)*(x101)))+(((r22)*(x97))));
new_r20=((((r10)*(x109)))+(((r20)*(x103)))+(((r00)*(x110))));
new_r21=((((r01)*(x110)))+(((r21)*(x103)))+(((r11)*(x109))));
new_r22=((((r12)*(x109)))+(((r22)*(x103)))+(((r02)*(x110))));
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
cj5array[0]=new_r22;
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal dummyeval[1];
IkReal gconst42;
gconst42=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst40;
gconst40=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst41;
gconst41=IKsign(((((cj5)*((new_r12)*(new_r12))))+(((cj5)*((new_r02)*(new_r02))))));
dummyeval[0]=((((cj5)*((new_r12)*(new_r12))))+(((cj5)*((new_r02)*(new_r02)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=((IkReal(-1.00000000000000))*(new_r22));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r21, ((IkReal(-1.00000000000000))*(new_r20)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
evalcond[0]=((new_r20)+(IKcos(j6)));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(IKsin(j6)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst48;
gconst48=IKsign(((((IkReal(-1.00000000000000))*(new_r02)*(new_r11)))+(((new_r01)*(new_r12)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r02)*(new_r11)))+(((new_r01)*(new_r12))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst49;
gconst49=IKsign(((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10)))));
dummyeval[0]=((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst49)*(new_r00))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst49)*(new_r10))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst49)*(new_r00)), ((IkReal(-1.00000000000000))*(gconst49)*(new_r10)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x111=IKsin(j4);
IkReal x112=IKcos(j4);
IkReal x113=((IkReal(1.00000000000000))*(x111));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x113)))+(((new_r12)*(x112))));
evalcond[1]=((IkReal(-1.00000000000000))+(((new_r12)*(x111)))+(((new_r02)*(x112))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj6)))+(((new_r10)*(x112)))+(((IkReal(-1.00000000000000))*(new_r00)*(x113))));
evalcond[3]=((((new_r11)*(x112)))+(((IkReal(-1.00000000000000))*(cj6)))+(((IkReal(-1.00000000000000))*(new_r01)*(x113))));
evalcond[4]=((((new_r11)*(x111)))+(((new_r01)*(x112))));
evalcond[5]=((((new_r00)*(x112)))+(((new_r10)*(x111))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst48)*(new_r01))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst48)*(new_r11))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst48)*(new_r01)), ((IkReal(-1.00000000000000))*(gconst48)*(new_r11)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x114=IKsin(j4);
IkReal x115=IKcos(j4);
IkReal x116=((IkReal(1.00000000000000))*(x114));
evalcond[0]=((((new_r12)*(x115)))+(((IkReal(-1.00000000000000))*(new_r02)*(x116))));
evalcond[1]=((IkReal(-1.00000000000000))+(((new_r02)*(x115)))+(((new_r12)*(x114))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj6)))+(((new_r10)*(x115)))+(((IkReal(-1.00000000000000))*(new_r00)*(x116))));
evalcond[3]=((((new_r11)*(x115)))+(((IkReal(-1.00000000000000))*(new_r01)*(x116)))+(((IkReal(-1.00000000000000))*(cj6))));
evalcond[4]=((((new_r01)*(x115)))+(((new_r11)*(x114))));
evalcond[5]=((((new_r10)*(x114)))+(((new_r00)*(x115))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
evalcond[0]=((new_r20)+(((IkReal(-1.00000000000000))*(IKcos(j6)))));
evalcond[1]=((new_r21)+(IKsin(j6)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst52;
gconst52=IKsign(((((IkReal(-1.00000000000000))*(new_r01)*(new_r12)))+(((new_r02)*(new_r11)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r01)*(new_r12)))+(((new_r02)*(new_r11))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst53;
gconst53=IKsign(((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst53)*(new_r00))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst53)*(new_r10))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst53)*(new_r00)), ((IkReal(-1.00000000000000))*(gconst53)*(new_r10)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x117=IKsin(j4);
IkReal x118=IKcos(j4);
IkReal x119=((IkReal(1.00000000000000))*(x117));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x119)))+(((new_r12)*(x118))));
evalcond[1]=((IkReal(1.00000000000000))+(((new_r02)*(x118)))+(((new_r12)*(x117))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj6)))+(((new_r10)*(x118)))+(((IkReal(-1.00000000000000))*(new_r00)*(x119))));
evalcond[3]=((((new_r11)*(x118)))+(((IkReal(-1.00000000000000))*(new_r01)*(x119)))+(((IkReal(-1.00000000000000))*(cj6))));
evalcond[4]=((((new_r01)*(x118)))+(((new_r11)*(x117))));
evalcond[5]=((((new_r00)*(x118)))+(((new_r10)*(x117))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst52)*(new_r01))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst52)*(new_r11))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst52)*(new_r01)), ((IkReal(-1.00000000000000))*(gconst52)*(new_r11)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x120=IKsin(j4);
IkReal x121=IKcos(j4);
IkReal x122=((IkReal(1.00000000000000))*(x120));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x122)))+(((new_r12)*(x121))));
evalcond[1]=((IkReal(1.00000000000000))+(((new_r02)*(x121)))+(((new_r12)*(x120))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj6)))+(((IkReal(-1.00000000000000))*(new_r00)*(x122)))+(((new_r10)*(x121))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x122)))+(((new_r11)*(x121)))+(((IkReal(-1.00000000000000))*(cj6))));
evalcond[4]=((((new_r11)*(x120)))+(((new_r01)*(x121))));
evalcond[5]=((((new_r00)*(x121)))+(((new_r10)*(x120))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[5]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[6]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x123=IKatan2(new_r02, new_r12);
j4array[0]=((IkReal(-1.00000000000000))*(x123));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x123))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((((new_r12)*(IKcos(j4))))+(((IkReal(-1.00000000000000))*(new_r02)*(IKsin(j4)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj4)*(new_r00)))+(((new_r10)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4)))))+IKsqr(((((cj4)*(new_r00)))+(((new_r10)*(sj4)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4)))), ((((cj4)*(new_r00)))+(((new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x124=IKsin(j6);
IkReal x125=((IkReal(1.00000000000000))*(sj4));
IkReal x126=((IkReal(1.00000000000000))*(IKcos(j6)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r00)*(x125)))+(((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(x124))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x126)))+(((IkReal(-1.00000000000000))*(new_r01)*(x125)))+(((cj4)*(new_r11))));
evalcond[2]=((((new_r11)*(sj4)))+(x124)+(((cj4)*(new_r01))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x126)))+(((cj4)*(new_r00)))+(((new_r10)*(sj4))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
IkReal x127=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j5, IkReal(6.28318530717959))));
evalcond[1]=x127;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x127;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x128=IKatan2(new_r02, new_r12);
j4array[0]=((IkReal(-1.00000000000000))*(x128));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x128))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((((new_r12)*(IKcos(j4))))+(((IkReal(-1.00000000000000))*(new_r02)*(IKsin(j4)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((new_r11)*(sj4)))+(((cj4)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((new_r11)*(sj4)))+(((cj4)*(new_r01)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((new_r11)*(sj4)))+(((cj4)*(new_r01)))), ((((IkReal(-1.00000000000000))*(cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x129=IKcos(j6);
IkReal x130=((IkReal(1.00000000000000))*(sj4));
IkReal x131=((IkReal(1.00000000000000))*(IKsin(j6)));
evalcond[0]=((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(x131)))+(((IkReal(-1.00000000000000))*(new_r00)*(x130))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x129)))+(((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x130))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x131)))+(((new_r11)*(sj4)))+(((cj4)*(new_r01))));
evalcond[3]=((x129)+(((cj4)*(new_r00)))+(((new_r10)*(sj4))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x132=((gconst41)*(new_r22)*(sj5));
if( IKabs(((new_r12)*(x132))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x132))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((new_r12)*(x132)), ((new_r02)*(x132)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x133=IKsin(j4);
IkReal x134=IKcos(j4);
IkReal x135=((IkReal(1.00000000000000))*(sj5));
IkReal x136=((IkReal(1.00000000000000))*(cj5));
IkReal x137=((new_r12)*(x133));
IkReal x138=((new_r02)*(x134));
evalcond[0]=((((new_r12)*(x134)))+(((IkReal(-1.00000000000000))*(new_r02)*(x133))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x135)))+(x137)+(x138));
evalcond[2]=((((cj5)*(x137)))+(((cj5)*(x138)))+(((IkReal(-1.00000000000000))*(new_r22)*(x135))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r00)*(x134)*(x135)))+(((IkReal(-1.00000000000000))*(new_r10)*(x133)*(x135)))+(((IkReal(-1.00000000000000))*(new_r20)*(x136))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r01)*(x134)*(x135)))+(((IkReal(-1.00000000000000))*(new_r21)*(x136)))+(((IkReal(-1.00000000000000))*(new_r11)*(x133)*(x135))));
evalcond[5]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22)*(x136)))+(((IkReal(-1.00000000000000))*(x135)*(x138)))+(((IkReal(-1.00000000000000))*(x135)*(x137))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst43;
gconst43=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x139=((((IkReal(-1.00000000000000))*(new_r02)*(sj4)))+(((cj4)*(new_r12))));
IkReal x140=((((cj4)*(new_r02)))+(((new_r12)*(sj4))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x139;
evalcond[5]=x139;
evalcond[6]=x140;
evalcond[7]=x140;
evalcond[8]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[9]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj4)*(new_r00)))+(((new_r10)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4)))))+IKsqr(((((cj4)*(new_r00)))+(((new_r10)*(sj4)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4)))), ((((cj4)*(new_r00)))+(((new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x141=IKsin(j6);
IkReal x142=((IkReal(1.00000000000000))*(sj4));
IkReal x143=((IkReal(1.00000000000000))*(IKcos(j6)));
evalcond[0]=((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(x141)))+(((IkReal(-1.00000000000000))*(new_r00)*(x142))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)*(x142)))+(((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(x143))));
evalcond[2]=((((new_r11)*(sj4)))+(((cj4)*(new_r01)))+(x141));
evalcond[3]=((((cj4)*(new_r00)))+(((new_r10)*(sj4)))+(((IkReal(-1.00000000000000))*(x143))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x144=((IkReal(1.00000000000000))+(new_r22));
IkReal x145=((cj4)*(new_r02));
IkReal x146=((new_r12)*(sj4));
IkReal x147=((((IkReal(-1.00000000000000))*(new_r02)*(sj4)))+(((cj4)*(new_r12))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j5, IkReal(6.28318530717959))));
evalcond[1]=x144;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x147;
evalcond[5]=x147;
evalcond[6]=((x145)+(x146));
evalcond[7]=((((IkReal(-1.00000000000000))*(x145)))+(((IkReal(-1.00000000000000))*(x146))));
evalcond[8]=new_r20;
evalcond[9]=new_r21;
evalcond[10]=x144;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((new_r11)*(sj4)))+(((cj4)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((new_r11)*(sj4)))+(((cj4)*(new_r01)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((new_r11)*(sj4)))+(((cj4)*(new_r01)))), ((((IkReal(-1.00000000000000))*(cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x148=IKcos(j6);
IkReal x149=((IkReal(1.00000000000000))*(sj4));
IkReal x150=((IkReal(1.00000000000000))*(IKsin(j6)));
evalcond[0]=((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(x150)))+(((IkReal(-1.00000000000000))*(new_r00)*(x149))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x148)))+(((IkReal(-1.00000000000000))*(new_r01)*(x149)))+(((cj4)*(new_r11))));
evalcond[2]=((((new_r11)*(sj4)))+(((cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(x150))));
evalcond[3]=((((cj4)*(new_r00)))+(((new_r10)*(sj4)))+(x148));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj4)))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj4)))), ((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x151=IKsin(j6);
IkReal x152=IKcos(j6);
IkReal x153=((cj4)*(new_r01));
IkReal x154=((IkReal(1.00000000000000))*(sj5));
IkReal x155=((new_r10)*(sj4));
IkReal x156=((new_r11)*(sj4));
IkReal x157=((cj4)*(new_r00));
IkReal x158=((IkReal(1.00000000000000))*(sj4));
IkReal x159=((IkReal(1.00000000000000))*(x152));
evalcond[0]=((new_r20)+(((sj5)*(x152))));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x151)*(x154))));
evalcond[2]=((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(x151)))+(((IkReal(-1.00000000000000))*(new_r00)*(x158))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x159)))+(((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x158))));
evalcond[4]=((x156)+(x153)+(((cj5)*(x151))));
evalcond[5]=((x157)+(x155)+(((IkReal(-1.00000000000000))*(cj5)*(x159))));
evalcond[6]=((x151)+(((cj5)*(x153)))+(((cj5)*(x156)))+(((IkReal(-1.00000000000000))*(new_r21)*(x154))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x159)))+(((cj5)*(x157)))+(((IkReal(-1.00000000000000))*(new_r20)*(x154)))+(((cj5)*(x155))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((new_r21)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((new_r21)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))))+IKsqr(((((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj4)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((new_r21)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))), ((((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x160=IKsin(j6);
IkReal x161=IKcos(j6);
IkReal x162=((cj4)*(new_r01));
IkReal x163=((IkReal(1.00000000000000))*(sj5));
IkReal x164=((new_r10)*(sj4));
IkReal x165=((new_r11)*(sj4));
IkReal x166=((cj4)*(new_r00));
IkReal x167=((IkReal(1.00000000000000))*(sj4));
IkReal x168=((IkReal(1.00000000000000))*(x161));
evalcond[0]=((new_r20)+(((sj5)*(x161))));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x160)*(x163))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x160)))+(((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x167))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x168)))+(((IkReal(-1.00000000000000))*(new_r01)*(x167)))+(((cj4)*(new_r11))));
evalcond[4]=((((cj5)*(x160)))+(x162)+(x165));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj5)*(x168)))+(x166)+(x164));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x163)))+(x160)+(((cj5)*(x162)))+(((cj5)*(x165))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x168)))+(((cj5)*(x164)))+(((IkReal(-1.00000000000000))*(new_r20)*(x163)))+(((cj5)*(x166))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((gconst43)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst43)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst43)*(new_r21)), ((IkReal(-1.00000000000000))*(gconst43)*(new_r20)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x169=IKsin(j6);
IkReal x170=IKcos(j6);
IkReal x171=((cj4)*(new_r01));
IkReal x172=((IkReal(1.00000000000000))*(sj5));
IkReal x173=((new_r10)*(sj4));
IkReal x174=((new_r11)*(sj4));
IkReal x175=((cj4)*(new_r00));
IkReal x176=((IkReal(1.00000000000000))*(sj4));
IkReal x177=((IkReal(1.00000000000000))*(x170));
evalcond[0]=((new_r20)+(((sj5)*(x170))));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x169)*(x172))));
evalcond[2]=((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x176)))+(((IkReal(-1.00000000000000))*(x169))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x176)))+(((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(x177))));
evalcond[4]=((x171)+(x174)+(((cj5)*(x169))));
evalcond[5]=((x173)+(x175)+(((IkReal(-1.00000000000000))*(cj5)*(x177))));
evalcond[6]=((((cj5)*(x174)))+(((cj5)*(x171)))+(x169)+(((IkReal(-1.00000000000000))*(new_r21)*(x172))));
evalcond[7]=((((cj5)*(x173)))+(((IkReal(-1.00000000000000))*(new_r20)*(x172)))+(((cj5)*(x175)))+(((IkReal(-1.00000000000000))*(x177))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x178=((gconst40)*(sj5));
if( IKabs(((new_r12)*(x178))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x178))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((new_r12)*(x178)), ((new_r02)*(x178)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x179=IKsin(j4);
IkReal x180=IKcos(j4);
IkReal x181=((IkReal(1.00000000000000))*(sj5));
IkReal x182=((IkReal(1.00000000000000))*(cj5));
IkReal x183=((new_r12)*(x179));
IkReal x184=((new_r02)*(x180));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x179)))+(((new_r12)*(x180))));
evalcond[1]=((x184)+(x183)+(((IkReal(-1.00000000000000))*(x181))));
evalcond[2]=((((cj5)*(x183)))+(((IkReal(-1.00000000000000))*(new_r22)*(x181)))+(((cj5)*(x184))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r00)*(x180)*(x181)))+(((IkReal(-1.00000000000000))*(new_r10)*(x179)*(x181)))+(((IkReal(-1.00000000000000))*(new_r20)*(x182))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r01)*(x180)*(x181)))+(((IkReal(-1.00000000000000))*(new_r21)*(x182)))+(((IkReal(-1.00000000000000))*(new_r11)*(x179)*(x181))));
evalcond[5]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x181)*(x184)))+(((IkReal(-1.00000000000000))*(new_r22)*(x182)))+(((IkReal(-1.00000000000000))*(x181)*(x183))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst43;
gconst43=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x185=((((IkReal(-1.00000000000000))*(new_r02)*(sj4)))+(((cj4)*(new_r12))));
IkReal x186=((((cj4)*(new_r02)))+(((new_r12)*(sj4))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x185;
evalcond[5]=x185;
evalcond[6]=x186;
evalcond[7]=x186;
evalcond[8]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[9]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj4)*(new_r00)))+(((new_r10)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4)))))+IKsqr(((((cj4)*(new_r00)))+(((new_r10)*(sj4)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4)))), ((((cj4)*(new_r00)))+(((new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x187=IKsin(j6);
IkReal x188=((IkReal(1.00000000000000))*(sj4));
IkReal x189=((IkReal(1.00000000000000))*(IKcos(j6)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r00)*(x188)))+(((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(x187))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x189)))+(((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x188))));
evalcond[2]=((x187)+(((new_r11)*(sj4)))+(((cj4)*(new_r01))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x189)))+(((cj4)*(new_r00)))+(((new_r10)*(sj4))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x190=((IkReal(1.00000000000000))+(new_r22));
IkReal x191=((cj4)*(new_r02));
IkReal x192=((new_r12)*(sj4));
IkReal x193=((((IkReal(-1.00000000000000))*(new_r02)*(sj4)))+(((cj4)*(new_r12))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j5, IkReal(6.28318530717959))));
evalcond[1]=x190;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x193;
evalcond[5]=x193;
evalcond[6]=((x192)+(x191));
evalcond[7]=((((IkReal(-1.00000000000000))*(x191)))+(((IkReal(-1.00000000000000))*(x192))));
evalcond[8]=new_r20;
evalcond[9]=new_r21;
evalcond[10]=x190;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((new_r11)*(sj4)))+(((cj4)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((new_r11)*(sj4)))+(((cj4)*(new_r01)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((new_r11)*(sj4)))+(((cj4)*(new_r01)))), ((((IkReal(-1.00000000000000))*(cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x194=IKcos(j6);
IkReal x195=((IkReal(1.00000000000000))*(sj4));
IkReal x196=((IkReal(1.00000000000000))*(IKsin(j6)));
evalcond[0]=((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(x196)))+(((IkReal(-1.00000000000000))*(new_r00)*(x195))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x194)))+(((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x195))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x196)))+(((new_r11)*(sj4)))+(((cj4)*(new_r01))));
evalcond[3]=((x194)+(((cj4)*(new_r00)))+(((new_r10)*(sj4))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj4)))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj4)))), ((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x197=IKsin(j6);
IkReal x198=IKcos(j6);
IkReal x199=((cj4)*(new_r01));
IkReal x200=((IkReal(1.00000000000000))*(sj5));
IkReal x201=((new_r10)*(sj4));
IkReal x202=((new_r11)*(sj4));
IkReal x203=((cj4)*(new_r00));
IkReal x204=((IkReal(1.00000000000000))*(sj4));
IkReal x205=((IkReal(1.00000000000000))*(x198));
evalcond[0]=((((sj5)*(x198)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x197)*(x200)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x197)))+(((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x204))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x204)))+(((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(x205))));
evalcond[4]=((((cj5)*(x197)))+(x199)+(x202));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj5)*(x205)))+(x203)+(x201));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x200)))+(((cj5)*(x199)))+(x197)+(((cj5)*(x202))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x205)))+(((cj5)*(x201)))+(((IkReal(-1.00000000000000))*(new_r20)*(x200)))+(((cj5)*(x203))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((new_r21)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((new_r21)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))))+IKsqr(((((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj4)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((new_r21)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))), ((((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x206=IKsin(j6);
IkReal x207=IKcos(j6);
IkReal x208=((cj4)*(new_r01));
IkReal x209=((IkReal(1.00000000000000))*(sj5));
IkReal x210=((new_r10)*(sj4));
IkReal x211=((new_r11)*(sj4));
IkReal x212=((cj4)*(new_r00));
IkReal x213=((IkReal(1.00000000000000))*(sj4));
IkReal x214=((IkReal(1.00000000000000))*(x207));
evalcond[0]=((((sj5)*(x207)))+(new_r20));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x206)*(x209))));
evalcond[2]=((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(x206)))+(((IkReal(-1.00000000000000))*(new_r00)*(x213))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x214)))+(((IkReal(-1.00000000000000))*(new_r01)*(x213)))+(((cj4)*(new_r11))));
evalcond[4]=((x211)+(((cj5)*(x206)))+(x208));
evalcond[5]=((x210)+(x212)+(((IkReal(-1.00000000000000))*(cj5)*(x214))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x209)))+(x206)+(((cj5)*(x208)))+(((cj5)*(x211))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x214)))+(((IkReal(-1.00000000000000))*(new_r20)*(x209)))+(((cj5)*(x210)))+(((cj5)*(x212))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((gconst43)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst43)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst43)*(new_r21)), ((IkReal(-1.00000000000000))*(gconst43)*(new_r20)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x215=IKsin(j6);
IkReal x216=IKcos(j6);
IkReal x217=((cj4)*(new_r01));
IkReal x218=((IkReal(1.00000000000000))*(sj5));
IkReal x219=((new_r10)*(sj4));
IkReal x220=((new_r11)*(sj4));
IkReal x221=((cj4)*(new_r00));
IkReal x222=((IkReal(1.00000000000000))*(sj4));
IkReal x223=((IkReal(1.00000000000000))*(x216));
evalcond[0]=((new_r20)+(((sj5)*(x216))));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x215)*(x218))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x215)))+(((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x222))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x223)))+(((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x222))));
evalcond[4]=((x217)+(x220)+(((cj5)*(x215))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj5)*(x223)))+(x219)+(x221));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x218)))+(x215)+(((cj5)*(x217)))+(((cj5)*(x220))));
evalcond[7]=((((cj5)*(x221)))+(((IkReal(-1.00000000000000))*(new_r20)*(x218)))+(((IkReal(-1.00000000000000))*(x223)))+(((cj5)*(x219))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((gconst42)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst42)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst42)*(new_r21)), ((IkReal(-1.00000000000000))*(gconst42)*(new_r20)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
evalcond[0]=((new_r20)+(((sj5)*(IKcos(j6)))));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(sj5)*(IKsin(j6)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst44;
gconst44=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst45;
gconst45=IKsign(((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x224=((gconst45)*(sj6));
if( IKabs(((new_r12)*(x224))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x224))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((new_r12)*(x224)), ((new_r02)*(x224)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[12];
IkReal x225=IKsin(j4);
IkReal x226=IKcos(j4);
IkReal x227=((IkReal(1.00000000000000))*(cj6));
IkReal x228=((IkReal(1.00000000000000))*(sj5));
IkReal x229=((IkReal(1.00000000000000))*(cj5));
IkReal x230=((new_r00)*(x226));
IkReal x231=((cj5)*(x225));
IkReal x232=((new_r11)*(x225));
IkReal x233=((cj5)*(x226));
IkReal x234=((new_r02)*(x226));
IkReal x235=((new_r12)*(x225));
IkReal x236=((new_r10)*(x225));
IkReal x237=((IkReal(1.00000000000000))*(x225));
IkReal x238=((new_r01)*(x226));
evalcond[0]=((((new_r12)*(x226)))+(((IkReal(-1.00000000000000))*(new_r02)*(x237))));
evalcond[1]=((x234)+(x235)+(((IkReal(-1.00000000000000))*(x228))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj6)))+(((IkReal(-1.00000000000000))*(new_r00)*(x237)))+(((new_r10)*(x226))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x237)))+(((IkReal(-1.00000000000000))*(x227)))+(((new_r11)*(x226))));
evalcond[4]=((x238)+(x232)+(((cj5)*(sj6))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj5)*(x227)))+(x230)+(x236));
evalcond[6]=((((new_r12)*(x231)))+(((new_r02)*(x233)))+(((IkReal(-1.00000000000000))*(new_r22)*(x228))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x228)*(x236)))+(((IkReal(-1.00000000000000))*(new_r20)*(x229)))+(((IkReal(-1.00000000000000))*(x228)*(x230))));
evalcond[8]=((((IkReal(-1.00000000000000))*(x228)*(x238)))+(((IkReal(-1.00000000000000))*(new_r21)*(x229)))+(((IkReal(-1.00000000000000))*(x228)*(x232))));
evalcond[9]=((sj6)+(((new_r01)*(x233)))+(((IkReal(-1.00000000000000))*(new_r21)*(x228)))+(((new_r11)*(x231))));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22)*(x229)))+(((IkReal(-1.00000000000000))*(x228)*(x234)))+(((IkReal(-1.00000000000000))*(x228)*(x235))));
evalcond[11]=((((IkReal(-1.00000000000000))*(x227)))+(((cj5)*(x230)))+(((new_r10)*(x231)))+(((IkReal(-1.00000000000000))*(new_r20)*(x228))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x239=((gconst44)*(sj5));
if( IKabs(((new_r12)*(x239))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x239))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((new_r12)*(x239)), ((new_r02)*(x239)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[12];
IkReal x240=IKsin(j4);
IkReal x241=IKcos(j4);
IkReal x242=((IkReal(1.00000000000000))*(cj6));
IkReal x243=((IkReal(1.00000000000000))*(sj5));
IkReal x244=((IkReal(1.00000000000000))*(cj5));
IkReal x245=((new_r00)*(x241));
IkReal x246=((cj5)*(x240));
IkReal x247=((new_r11)*(x240));
IkReal x248=((cj5)*(x241));
IkReal x249=((new_r02)*(x241));
IkReal x250=((new_r12)*(x240));
IkReal x251=((new_r10)*(x240));
IkReal x252=((IkReal(1.00000000000000))*(x240));
IkReal x253=((new_r01)*(x241));
evalcond[0]=((((new_r12)*(x241)))+(((IkReal(-1.00000000000000))*(new_r02)*(x252))));
evalcond[1]=((x250)+(((IkReal(-1.00000000000000))*(x243)))+(x249));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj6)))+(((IkReal(-1.00000000000000))*(new_r00)*(x252)))+(((new_r10)*(x241))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x252)))+(((new_r11)*(x241)))+(((IkReal(-1.00000000000000))*(x242))));
evalcond[4]=((x253)+(((cj5)*(sj6)))+(x247));
evalcond[5]=((x251)+(((IkReal(-1.00000000000000))*(cj5)*(x242)))+(x245));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r22)*(x243)))+(((new_r02)*(x248)))+(((new_r12)*(x246))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r20)*(x244)))+(((IkReal(-1.00000000000000))*(x243)*(x251)))+(((IkReal(-1.00000000000000))*(x243)*(x245))));
evalcond[8]=((((IkReal(-1.00000000000000))*(x243)*(x247)))+(((IkReal(-1.00000000000000))*(x243)*(x253)))+(((IkReal(-1.00000000000000))*(new_r21)*(x244))));
evalcond[9]=((((new_r11)*(x246)))+(sj6)+(((new_r01)*(x248)))+(((IkReal(-1.00000000000000))*(new_r21)*(x243))));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22)*(x244)))+(((IkReal(-1.00000000000000))*(x243)*(x249)))+(((IkReal(-1.00000000000000))*(x243)*(x250))));
evalcond[11]=((((IkReal(-1.00000000000000))*(x242)))+(((IkReal(-1.00000000000000))*(new_r20)*(x243)))+(((new_r10)*(x246)))+(((cj5)*(x245))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "2ac375a0aaf420715f482953e36187a5"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
