/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 61 generated on 2013-03-25 15:46:47.081120
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==61);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66;
x0=IKsin(j[0]);
x1=IKcos(j[2]);
x2=IKsin(j[1]);
x3=IKcos(j[0]);
x4=IKsin(j[2]);
x5=IKcos(j[4]);
x6=IKcos(j[3]);
x7=IKsin(j[4]);
x8=IKsin(j[3]);
x9=IKcos(j[1]);
x10=IKsin(j[6]);
x11=IKsin(j[5]);
x12=IKcos(j[5]);
x13=IKcos(j[6]);
x14=((IkReal(0.101987500000000))*(x5));
x15=((IkReal(0.101987500000000))*(x8));
x16=((IkReal(1.00000000000000))*(x12));
x17=((IkReal(1.00000000000000))*(x4));
x18=((IkReal(0.101987500000000))*(x7));
x19=((IkReal(0.0300000000000000))*(x4));
x20=((IkReal(1.00000000000000))*(x8));
x21=((IkReal(1.00000000000000))*(x11));
x22=((IkReal(1.00000000000000))*(x6));
x23=((IkReal(0.300710000000000))*(x4));
x24=((x2)*(x6));
x25=((x1)*(x3));
x26=((x0)*(x9));
x27=((x6)*(x9));
x28=((x0)*(x1));
x29=((x1)*(x9));
x30=((x2)*(x3));
x31=((x4)*(x9));
x32=((x2)*(x8));
x33=((x0)*(x2));
x34=((IkReal(0.0300000000000000))*(x25));
x35=((IkReal(0.0300000000000000))*(x28));
x36=((x3)*(x8)*(x9));
x37=((x20)*(x26));
x38=((x22)*(x26));
x39=((x19)*(x33));
x40=((x17)*(x8)*(x9));
x41=((x17)*(x30));
x42=((x19)*(x30));
x43=((x25)+(((x33)*(x4))));
x44=((((x2)*(x28)))+(((IkReal(-1.00000000000000))*(x17)*(x3))));
x45=((x24)+(((IkReal(-1.00000000000000))*(x40))));
x46=((x32)+(((x27)*(x4))));
x47=((x28)+(((IkReal(-1.00000000000000))*(x41))));
x48=((((IkReal(-1.00000000000000))*(x28)))+(x41));
x49=((((IkReal(-1.00000000000000))*(x25)))+(((IkReal(-1.00000000000000))*(x17)*(x33))));
x50=((((IkReal(-1.00000000000000))*(x0)*(x17)))+(((IkReal(-1.00000000000000))*(x2)*(x25))));
x51=((x39)+(x34));
x52=((x47)*(x6));
x53=((x49)*(x8));
x54=((x50)*(x7));
x55=((((x43)*(x6)))+(((IkReal(-1.00000000000000))*(x37))));
x56=((((x46)*(x5)))+(((x29)*(x7))));
x57=((x52)+(x36));
x58=((((x27)*(x3)))+(((x48)*(x8))));
x59=((x53)+(((IkReal(-1.00000000000000))*(x38))));
x60=((((x7)*(((((IkReal(-1.00000000000000))*(x17)*(x27)))+(((IkReal(-1.00000000000000))*(x2)*(x20)))))))+(((x29)*(x5))));
x61=((x5)*(x57));
x62=((((x5)*(x55)))+(((x44)*(x7))));
x63=((((x7)*(((x37)+(((IkReal(-1.00000000000000))*(x22)*(x43)))))))+(((x44)*(x5))));
x64=((x54)+(x61));
x65=((x12)*(x62));
x66=((((IkReal(-1.00000000000000))*(x5)*(x50)))+(((x7)*(((((IkReal(1.00000000000000))*(x36)))+(((IkReal(1.00000000000000))*(x52))))))));
eerot[0]=((((x10)*(x63)))+(((x13)*(((((x11)*(x59)))+(x65))))));
eerot[1]=((((x10)*(((((IkReal(-1.00000000000000))*(x16)*(x62)))+(((IkReal(-1.00000000000000))*(x21)*(x59)))))))+(((x13)*(x63))));
eerot[2]=((((x11)*(x62)))+(((x12)*(((x38)+(((IkReal(-1.00000000000000))*(x20)*(x49))))))));
IkReal x67=((x26)*(x6));
eetrans[0]=((IkReal(0.00152455000000000))+(x51)+(((x12)*(((((x15)*(x49)))+(((IkReal(-0.101987500000000))*(x67)))))))+(((x11)*(((((IkReal(-1.00000000000000))*(x18)*(x44)))+(((IkReal(-1.00000000000000))*(x14)*(x55)))))))+(((IkReal(-0.300700000000000))*(x26)))+(((IkReal(-1.00000000000000))*(x51)*(x6)))+(((IkReal(0.0300000000000000))*(x26)*(x8)))+(((x8)*(((((IkReal(-0.300710000000000))*(x25)))+(((IkReal(-1.00000000000000))*(x23)*(x33)))))))+(((IkReal(-0.300710000000000))*(x67))));
eerot[3]=((((x10)*(x60)))+(((x13)*(((((x11)*(x45)))+(((x12)*(x56))))))));
eerot[4]=((((x13)*(x60)))+(((x10)*(((((IkReal(-1.00000000000000))*(x16)*(x56)))+(((IkReal(-1.00000000000000))*(x21)*(x45))))))));
eerot[5]=((((x12)*(((x40)+(((IkReal(-1.00000000000000))*(x2)*(x22)))))))+(((x11)*(x56))));
eetrans[1]=((IkReal(0.208513409563377))+(((x19)*(x9)))+(((IkReal(0.300700000000000))*(x2)))+(((IkReal(-0.0300000000000000))*(x32)))+(((IkReal(-1.00000000000000))*(x23)*(x8)*(x9)))+(((IkReal(-1.00000000000000))*(x19)*(x27)))+(((x12)*(((((IkReal(0.101987500000000))*(x24)))+(((IkReal(-1.00000000000000))*(x15)*(x31)))))))+(((IkReal(0.300710000000000))*(x24)))+(((x11)*(((((IkReal(-1.00000000000000))*(x18)*(x29)))+(((IkReal(-1.00000000000000))*(x14)*(x46))))))));
eerot[6]=((((x13)*(((((IkReal(-1.00000000000000))*(x21)*(x58)))+(((IkReal(-1.00000000000000))*(x16)*(x64)))))))+(((x10)*(x66))));
eerot[7]=((((x10)*(((((x12)*(x64)))+(((x11)*(x58)))))))+(((x13)*(x66))));
eerot[8]=((((x12)*(x58)))+(((x11)*(((((IkReal(-1.00000000000000))*(x54)))+(((IkReal(-1.00000000000000))*(x61))))))));
IkReal x68=((x27)*(x3));
eetrans[2]=((IkReal(0.197099990575467))+(((IkReal(-0.300710000000000))*(x68)))+(((IkReal(-0.300700000000000))*(x3)*(x9)))+(((x8)*(((((IkReal(0.300710000000000))*(x28)))+(((IkReal(-1.00000000000000))*(x23)*(x30)))))))+(((x6)*(((x35)+(((IkReal(-1.00000000000000))*(x42)))))))+(x42)+(((x11)*(((((x18)*(x50)))+(((x14)*(x57)))))))+(((IkReal(0.0300000000000000))*(x36)))+(((IkReal(-1.00000000000000))*(x35)))+(((x12)*(((((IkReal(-1.00000000000000))*(x15)*(x48)))+(((IkReal(-0.101987500000000))*(x68))))))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {4}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j7,cj7,sj7,htj7,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij6[2], _nj6,_ij7[2], _nj7,_ij5[2], _nj5;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1; j7=numeric_limits<IkReal>::quiet_NaN(); _ij7[0] = -1; _ij7[1] = -1; _nj7 = -1;  _ij5[0] = -1; _ij5[1] = -1; _nj5 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j5=pfree[0]; cj5=cos(pfree[0]); sj5=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((IkReal(-0.00152455000000000))+(((IkReal(0.101987500000000))*(r02)))+(px));
new_r10=((IkReal(-1.00000000000000))*(r20));
new_r11=((IkReal(-1.00000000000000))*(r21));
new_r12=((IkReal(-1.00000000000000))*(r22));
new_py=((IkReal(0.197099990575467))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-0.101987500000000))*(r22))));
new_r20=r10;
new_r21=r11;
new_r22=r12;
new_pz=((IkReal(-0.208513409563377))+(py)+(((IkReal(0.101987500000000))*(r12))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((pz)*(pz))+((py)*(py)));
npx=((((py)*(r10)))+(((pz)*(r20)))+(((px)*(r00))));
npy=((((px)*(r01)))+(((pz)*(r21)))+(((py)*(r11))));
npz=((((py)*(r12)))+(((pz)*(r22)))+(((px)*(r02))));
rxp0_0=((((IkReal(-1.00000000000000))*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((IkReal(-1.00000000000000))*(pz)*(r00))));
rxp0_2=((((py)*(r00)))+(((IkReal(-1.00000000000000))*(px)*(r10))));
rxp1_0=((((pz)*(r11)))+(((IkReal(-1.00000000000000))*(py)*(r21))));
rxp1_1=((((IkReal(-1.00000000000000))*(pz)*(r01)))+(((px)*(r21))));
rxp1_2=((((py)*(r01)))+(((IkReal(-1.00000000000000))*(px)*(r11))));
rxp2_0=((((IkReal(-1.00000000000000))*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((IkReal(-1.00000000000000))*(pz)*(r02))));
rxp2_2=((((py)*(r02)))+(((IkReal(-1.00000000000000))*(px)*(r12))));
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( (((IkReal(1.00000000054211))+(((IkReal(-5.47504220077449))*(pp))))) < -1-IKFAST_SINCOS_THRESH || (((IkReal(1.00000000054211))+(((IkReal(-5.47504220077449))*(pp))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x69=IKasin(((IkReal(1.00000000054211))+(((IkReal(-5.47504220077449))*(pp)))));
j4array[0]=((IkReal(-1.76966936552859))+(((IkReal(-1.00000000000000))*(x69))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(1.37192328806121))+(x69));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal dummyeval[1];
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal x70=(cj5)*(cj5);
IkReal x71=(cj4)*(cj4);
IkReal x72=(sj4)*(sj4);
IkReal x73=((IkReal(20.0466666666667))*(cj4)*(sj4));
dummyeval[0]=((IkReal(100.473893444444))+(((x70)*(x71)))+(((IkReal(-20.0473333333333))*(sj4)))+(((IkReal(100.467211111111))*(x71)))+(x72)+(x70)+(((IkReal(-2.00000000000000))*(cj4)*(x70)))+(((x70)*(x73)))+(((IkReal(200.941104444444))*(cj4)))+(((IkReal(-1.00000000000000))*(x73)))+(((IkReal(100.467211111111))*(x70)*(x72)))+(((IkReal(-20.0466666666667))*(sj4)*(x70))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
IkReal x74=((IkReal(0.0300000000000000))*(cj5));
IkReal x75=((IkReal(-0.300710000000000))+(((IkReal(0.0300000000000000))*(sj4)))+(((IkReal(-0.300700000000000))*(cj4))));
IkReal x76=((((IkReal(-1.00000000000000))*(x74)))+(((IkReal(0.300700000000000))*(cj5)*(sj4)))+(((cj4)*(x74))));
if( IKabs(x75) < IKFAST_ATAN2_MAGTHRESH && IKabs(x76) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x77=((IkReal(1.00000000000000))*(IKatan2(x75, x76)));
if( ((((x76)*(x76))+((x75)*(x75)))) < (IkReal)-0.00001 )
    continue;
if( (((npz)*(((IKabs(IKabs(IKsqrt((((x76)*(x76))+((x75)*(x75)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x76)*(x76))+((x75)*(x75))))))):(IkReal)1.0e30)))) < -1-IKFAST_SINCOS_THRESH || (((npz)*(((IKabs(IKabs(IKsqrt((((x76)*(x76))+((x75)*(x75)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x76)*(x76))+((x75)*(x75))))))):(IkReal)1.0e30)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x78=IKasin(((npz)*(((IKabs(IKabs(IKsqrt((((x76)*(x76))+((x75)*(x75)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x76)*(x76))+((x75)*(x75))))))):(IkReal)1.0e30))));
j6array[0]=((((IkReal(-1.00000000000000))*(x77)))+(x78));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x77)))+(((IkReal(-1.00000000000000))*(x78))));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=IKsign(((((sj6)*((npx)*(npx))))+(((sj6)*((npy)*(npy))))));
dummyeval[0]=((((sj6)*((npx)*(npx))))+(((sj6)*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst1;
IkReal x79=((cj6)*(sj5));
gconst1=IKsign(((((x79)*((npx)*(npx))))+(((x79)*((npy)*(npy))))));
IkReal x80=((cj6)*(sj5));
dummyeval[0]=((((x80)*((npy)*(npy))))+(((x80)*((npx)*(npx)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x81=((IkReal(0.0300000000000000))*(sj6));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.182646994100000))+(((IkReal(-0.0360846000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.179046994000000))*(cj4))));
evalcond[2]=((((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-0.300710000000000))*(cj6)))+(((IkReal(0.300700000000000))*(sj4)*(sj6)))+(((IkReal(0.0300000000000000))*(cj6)*(sj4)))+(((cj4)*(x81)))+(((IkReal(-1.00000000000000))*(x81)))+(((IkReal(-0.300700000000000))*(cj4)*(cj6))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
gconst2=IKsign(((((cj6)*((npy)*(npy))))+(((cj6)*((npx)*(npx))))));
dummyeval[0]=((((cj6)*((npy)*(npy))))+(((cj6)*((npx)*(npx)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(((((sj6)*((npx)*(npx))))+(((sj6)*((npy)*(npy))))));
dummyeval[0]=((((sj6)*((npx)*(npx))))+(((sj6)*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x82=((IkReal(-0.300710000000000))+(((IkReal(-1.00000000000000))*(npz)))+(((IkReal(0.0300000000000000))*(sj4)))+(((IkReal(-0.300700000000000))*(cj4))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j6)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.182646994100000))+(((IkReal(-0.0360846000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.179046994000000))*(cj4))));
evalcond[2]=x82;
evalcond[3]=x82;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign((((npy)*(npy))+((npx)*(npx))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign(((((IkReal(-3.00000000000000))*((npx)*(npx))))+(((IkReal(-3.00000000000000))*((npy)*(npy))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x83=((IkReal(50.0000000000000))*(pp));
IkReal x84=((IkReal(30.0710000000000))*(npz));
if( IKabs(((gconst5)*(((((IkReal(-1.00000000000000))*(npy)*(x84)))+(((IkReal(-0.000300705000000000))*(npy)))+(((IkReal(-1.00000000000000))*(npy)*(x83))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst5)*(((((npx)*(x83)))+(((npx)*(x84)))+(((IkReal(0.000300705000000000))*(npx))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst5)*(((((IkReal(-1.00000000000000))*(npy)*(x84)))+(((IkReal(-0.000300705000000000))*(npy)))+(((IkReal(-1.00000000000000))*(npy)*(x83)))))), ((gconst5)*(((((npx)*(x83)))+(((npx)*(x84)))+(((IkReal(0.000300705000000000))*(npx)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x85=IKcos(j7);
IkReal x86=IKsin(j7);
IkReal x87=((npx)*(x85));
IkReal x88=((npy)*(x86));
evalcond[0]=((((npy)*(x85)))+(((npx)*(x86))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-0.300700000000000))*(sj4)))+(((IkReal(-0.0300000000000000))*(cj4)))+(((IkReal(-1.00000000000000))*(x88)))+(x87));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(x88)))+(((IkReal(-0.0600000000000000))*(x87)))+(((IkReal(-0.601420000000000))*(npz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x278=((IkReal(0.0300000000000000))*(npx));
IkReal x279=((IkReal(0.300700000000000))*(sj4));
IkReal x280=((IkReal(0.0300000000000000))*(npy));
if( IKabs(((gconst4)*(((x280)+(((IkReal(-1.00000000000000))*(npy)*(x279)))+(((IkReal(-1.00000000000000))*(cj4)*(x280))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst4)*(((((npx)*(x279)))+(((cj4)*(x278)))+(((IkReal(-1.00000000000000))*(x278))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst4)*(((x280)+(((IkReal(-1.00000000000000))*(npy)*(x279)))+(((IkReal(-1.00000000000000))*(cj4)*(x280)))))), ((gconst4)*(((((npx)*(x279)))+(((cj4)*(x278)))+(((IkReal(-1.00000000000000))*(x278)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x281=IKcos(j7);
IkReal x282=IKsin(j7);
IkReal x283=((npx)*(x281));
IkReal x284=((npy)*(x282));
evalcond[0]=((((npy)*(x281)))+(((npx)*(x282))));
evalcond[1]=((IkReal(0.0300000000000000))+(x283)+(((IkReal(-0.300700000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(x284)))+(((IkReal(-0.0300000000000000))*(cj4))));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(0.0600000000000000))*(x284)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x283)))+(((IkReal(-0.601420000000000))*(npz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x285=((IkReal(0.300700000000000))*(cj4));
IkReal x286=((IkReal(0.0300000000000000))*(sj4));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j6, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.182646994100000))+(((IkReal(-0.0360846000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.179046994000000))*(cj4))));
evalcond[2]=((IkReal(-0.300710000000000))+(x286)+(npz)+(((IkReal(-1.00000000000000))*(x285))));
evalcond[3]=((IkReal(0.300710000000000))+(((IkReal(-1.00000000000000))*(npz)))+(x285)+(((IkReal(-1.00000000000000))*(x286))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst6;
gconst6=IKsign(((((IkReal(-1.00000000000000))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst7;
gconst7=IKsign(((((IkReal(3.00000000000000))*((npx)*(npx))))+(((IkReal(3.00000000000000))*((npy)*(npy))))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x287=((IkReal(50.0000000000000))*(pp));
IkReal x288=((IkReal(30.0710000000000))*(npz));
if( IKabs(((gconst7)*(((((IkReal(-1.00000000000000))*(npy)*(x287)))+(((IkReal(-0.000300705000000000))*(npy)))+(((npy)*(x288))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst7)*(((((npx)*(x287)))+(((IkReal(-1.00000000000000))*(npx)*(x288)))+(((IkReal(0.000300705000000000))*(npx))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst7)*(((((IkReal(-1.00000000000000))*(npy)*(x287)))+(((IkReal(-0.000300705000000000))*(npy)))+(((npy)*(x288)))))), ((gconst7)*(((((npx)*(x287)))+(((IkReal(-1.00000000000000))*(npx)*(x288)))+(((IkReal(0.000300705000000000))*(npx)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x289=IKsin(j7);
IkReal x290=IKcos(j7);
IkReal x291=((npx)*(x290));
IkReal x292=((npy)*(x289));
evalcond[0]=((((npy)*(x290)))+(((npx)*(x289))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-0.300700000000000))*(sj4)))+(x292)+(((IkReal(-1.00000000000000))*(x291)))+(((IkReal(-0.0300000000000000))*(cj4))));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x292)))+(((IkReal(0.601420000000000))*(npz)))+(((IkReal(0.0600000000000000))*(x291))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x293=((IkReal(0.0300000000000000))*(npx));
IkReal x294=((IkReal(0.300700000000000))*(sj4));
IkReal x295=((IkReal(0.0300000000000000))*(npy));
if( IKabs(((gconst6)*(((((IkReal(-1.00000000000000))*(npy)*(x294)))+(x295)+(((IkReal(-1.00000000000000))*(cj4)*(x295))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst6)*(((((npx)*(x294)))+(((cj4)*(x293)))+(((IkReal(-1.00000000000000))*(x293))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst6)*(((((IkReal(-1.00000000000000))*(npy)*(x294)))+(x295)+(((IkReal(-1.00000000000000))*(cj4)*(x295)))))), ((gconst6)*(((((npx)*(x294)))+(((cj4)*(x293)))+(((IkReal(-1.00000000000000))*(x293)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x296=IKsin(j7);
IkReal x297=IKcos(j7);
IkReal x298=((npx)*(x297));
IkReal x299=((npy)*(x296));
evalcond[0]=((((npx)*(x296)))+(((npy)*(x297))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x298)))+(((IkReal(-0.300700000000000))*(sj4)))+(x299)+(((IkReal(-0.0300000000000000))*(cj4))));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(-0.0600000000000000))*(x299)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(x298)))+(((IkReal(0.601420000000000))*(npz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x300=((IkReal(0.300700000000000))*(sj4));
IkReal x301=((IkReal(0.0300000000000000))*(cj4));
IkReal x302=((x300)+(x301));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j6)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.182646994100000))+(((IkReal(-0.0360846000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.179046994000000))*(cj4))));
evalcond[2]=((IkReal(-0.0300000000000000))+(((IkReal(-1.00000000000000))*(npz)))+(x302));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x302)))+(npz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst8;
gconst8=IKsign((((npy)*(npy))+((npx)*(npx))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst9;
gconst9=IKsign(((((IkReal(30071.0000000000))*((npx)*(npx))))+(((IkReal(30071.0000000000))*((npy)*(npy))))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x303=((IkReal(3000.00000000000))*(npz));
IkReal x304=((IkReal(50000.0000000000))*(pp));
if( IKabs(((gconst9)*(((((IkReal(-1.00000000000000))*(npy)*(x303)))+(((IkReal(-1.00000000000000))*(npy)*(x304)))+(((IkReal(-0.300705000000000))*(npy))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst9)*(((((IkReal(0.300705000000000))*(npx)))+(((npx)*(x303)))+(((npx)*(x304))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst9)*(((((IkReal(-1.00000000000000))*(npy)*(x303)))+(((IkReal(-1.00000000000000))*(npy)*(x304)))+(((IkReal(-0.300705000000000))*(npy)))))), ((gconst9)*(((((IkReal(0.300705000000000))*(npx)))+(((npx)*(x303)))+(((npx)*(x304)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x305=IKcos(j7);
IkReal x306=IKsin(j7);
IkReal x307=((npx)*(x305));
IkReal x308=((npy)*(x306));
evalcond[0]=((((npx)*(x306)))+(((npy)*(x305))));
evalcond[1]=((IkReal(-0.300710000000000))+(x307)+(((IkReal(0.0300000000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(x308)))+(((IkReal(-0.300700000000000))*(cj4))));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(0.601420000000000))*(x307)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.601420000000000))*(x308)))+(((IkReal(-0.0600000000000000))*(npz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x309=((IkReal(0.0300000000000000))*(sj4));
IkReal x310=((IkReal(0.300700000000000))*(cj4));
if( IKabs(((gconst8)*(((((npy)*(x309)))+(((IkReal(-0.300710000000000))*(npy)))+(((IkReal(-1.00000000000000))*(npy)*(x310))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst8)*(((((IkReal(-1.00000000000000))*(npx)*(x309)))+(((IkReal(0.300710000000000))*(npx)))+(((npx)*(x310))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst8)*(((((npy)*(x309)))+(((IkReal(-0.300710000000000))*(npy)))+(((IkReal(-1.00000000000000))*(npy)*(x310)))))), ((gconst8)*(((((IkReal(-1.00000000000000))*(npx)*(x309)))+(((IkReal(0.300710000000000))*(npx)))+(((npx)*(x310)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x311=IKcos(j7);
IkReal x312=IKsin(j7);
IkReal x313=((npx)*(x311));
IkReal x314=((npy)*(x312));
evalcond[0]=((((npy)*(x311)))+(((npx)*(x312))));
evalcond[1]=((IkReal(-0.300710000000000))+(((IkReal(0.0300000000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(x314)))+(x313)+(((IkReal(-0.300700000000000))*(cj4))));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(npz)))+(((IkReal(-0.601420000000000))*(x314)))+(((IkReal(0.601420000000000))*(x313))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x315=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-0.300700000000000))*(sj4)))+(((IkReal(-0.0300000000000000))*(cj4))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j6)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.182646994100000))+(((IkReal(-0.0360846000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.179046994000000))*(cj4))));
evalcond[2]=x315;
evalcond[3]=x315;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst10;
gconst10=IKsign(((((IkReal(-1.00000000000000))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst11;
gconst11=IKsign(((((IkReal(-30071.0000000000))*((npx)*(npx))))+(((IkReal(-30071.0000000000))*((npy)*(npy))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x316=((IkReal(50000.0000000000))*(pp));
IkReal x317=((IkReal(3000.00000000000))*(npz));
if( IKabs(((gconst11)*(((((IkReal(-1.00000000000000))*(npy)*(x316)))+(((npy)*(x317)))+(((IkReal(-0.300705000000000))*(npy))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst11)*(((((IkReal(0.300705000000000))*(npx)))+(((IkReal(-1.00000000000000))*(npx)*(x317)))+(((npx)*(x316))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst11)*(((((IkReal(-1.00000000000000))*(npy)*(x316)))+(((npy)*(x317)))+(((IkReal(-0.300705000000000))*(npy)))))), ((gconst11)*(((((IkReal(0.300705000000000))*(npx)))+(((IkReal(-1.00000000000000))*(npx)*(x317)))+(((npx)*(x316)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x318=IKsin(j7);
IkReal x319=IKcos(j7);
IkReal x320=((npx)*(x319));
IkReal x321=((npy)*(x318));
evalcond[0]=((((npx)*(x318)))+(((npy)*(x319))));
evalcond[1]=((IkReal(-0.300710000000000))+(((IkReal(0.0300000000000000))*(sj4)))+(x321)+(((IkReal(-1.00000000000000))*(x320)))+(((IkReal(-0.300700000000000))*(cj4))));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.601420000000000))*(x320)))+(((IkReal(0.0600000000000000))*(npz)))+(((IkReal(0.601420000000000))*(x321))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x322=((IkReal(0.0300000000000000))*(sj4));
IkReal x323=((IkReal(0.300700000000000))*(cj4));
if( IKabs(((gconst10)*(((((npy)*(x322)))+(((IkReal(-0.300710000000000))*(npy)))+(((IkReal(-1.00000000000000))*(npy)*(x323))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst10)*(((((IkReal(-1.00000000000000))*(npx)*(x322)))+(((npx)*(x323)))+(((IkReal(0.300710000000000))*(npx))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst10)*(((((npy)*(x322)))+(((IkReal(-0.300710000000000))*(npy)))+(((IkReal(-1.00000000000000))*(npy)*(x323)))))), ((gconst10)*(((((IkReal(-1.00000000000000))*(npx)*(x322)))+(((npx)*(x323)))+(((IkReal(0.300710000000000))*(npx)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x324=IKsin(j7);
IkReal x325=IKcos(j7);
IkReal x326=((npx)*(x325));
IkReal x327=((npy)*(x324));
evalcond[0]=((((npx)*(x324)))+(((npy)*(x325))));
evalcond[1]=((IkReal(-0.300710000000000))+(((IkReal(-1.00000000000000))*(x326)))+(((IkReal(0.0300000000000000))*(sj4)))+(x327)+(((IkReal(-0.300700000000000))*(cj4))));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(-0.601420000000000))*(x326)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.601420000000000))*(x327)))+(((IkReal(0.0600000000000000))*(npz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x328=((IkReal(0.300700000000000))*(cj4));
IkReal x329=((IkReal(0.0300000000000000))*(sj4));
IkReal x330=((cj6)*(npz));
if( IKabs(((gconst3)*(((((IkReal(-1.00000000000000))*(npy)*(x330)))+(((IkReal(-0.300710000000000))*(npy)))+(((npy)*(x329)))+(((IkReal(-1.00000000000000))*(npy)*(x328))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((((npx)*(x328)))+(((IkReal(0.300710000000000))*(npx)))+(((npx)*(x330)))+(((IkReal(-1.00000000000000))*(npx)*(x329))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst3)*(((((IkReal(-1.00000000000000))*(npy)*(x330)))+(((IkReal(-0.300710000000000))*(npy)))+(((npy)*(x329)))+(((IkReal(-1.00000000000000))*(npy)*(x328)))))), ((gconst3)*(((((npx)*(x328)))+(((IkReal(0.300710000000000))*(npx)))+(((npx)*(x330)))+(((IkReal(-1.00000000000000))*(npx)*(x329)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x331=IKcos(j7);
IkReal x332=IKsin(j7);
IkReal x333=((IkReal(1.00000000000000))*(cj6));
IkReal x334=((IkReal(0.0600000000000000))*(cj6));
IkReal x335=((IkReal(0.0300000000000000))*(cj6));
IkReal x336=((IkReal(0.300700000000000))*(sj4));
IkReal x337=((npz)*(sj6));
IkReal x338=((IkReal(0.601420000000000))*(sj6));
IkReal x339=((IkReal(0.0300000000000000))*(sj4));
IkReal x340=((IkReal(0.300700000000000))*(cj4));
IkReal x341=((npx)*(x331));
IkReal x342=((npy)*(x332));
evalcond[0]=((((npy)*(x331)))+(((npx)*(x332))));
evalcond[1]=((IkReal(-0.300710000000000))+(((IkReal(-1.00000000000000))*(x340)))+(((IkReal(-1.00000000000000))*(npz)*(x333)))+(((IkReal(-1.00000000000000))*(sj6)*(x342)))+(x339)+(((sj6)*(x341))));
evalcond[2]=((IkReal(0.0300000000000000))+(((cj6)*(x341)))+(((IkReal(-1.00000000000000))*(x333)*(x342)))+(x337)+(((IkReal(-0.0300000000000000))*(cj4)))+(((IkReal(-1.00000000000000))*(x336))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x342)))+(((IkReal(-1.00000000000000))*(sj6)*(x340)))+(((sj6)*(x339)))+(((IkReal(-1.00000000000000))*(cj4)*(x335)))+(x335)+(x341)+(((IkReal(-1.00000000000000))*(cj6)*(x336)))+(((IkReal(-0.300710000000000))*(sj6))));
evalcond[4]=((IkReal(-6.01410000000000e-6))+(((IkReal(-1.00000000000000))*(pp)))+(((x338)*(x341)))+(((IkReal(-0.0600000000000000))*(x337)))+(((IkReal(-1.00000000000000))*(x338)*(x342)))+(((IkReal(-0.601420000000000))*(cj6)*(npz)))+(((x334)*(x342)))+(((IkReal(-1.00000000000000))*(x334)*(x341))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x343=((npz)*(sj6));
IkReal x344=((IkReal(0.300700000000000))*(sj4));
IkReal x345=((IkReal(0.0300000000000000))*(npx));
IkReal x346=((IkReal(0.0300000000000000))*(npy));
if( IKabs(((gconst2)*(((((IkReal(-1.00000000000000))*(npy)*(x344)))+(((npy)*(x343)))+(x346)+(((IkReal(-1.00000000000000))*(cj4)*(x346))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((((npx)*(x344)))+(((IkReal(-1.00000000000000))*(npx)*(x343)))+(((IkReal(-1.00000000000000))*(x345)))+(((cj4)*(x345))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst2)*(((((IkReal(-1.00000000000000))*(npy)*(x344)))+(((npy)*(x343)))+(x346)+(((IkReal(-1.00000000000000))*(cj4)*(x346)))))), ((gconst2)*(((((npx)*(x344)))+(((IkReal(-1.00000000000000))*(npx)*(x343)))+(((IkReal(-1.00000000000000))*(x345)))+(((cj4)*(x345)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x347=IKcos(j7);
IkReal x348=IKsin(j7);
IkReal x349=((IkReal(1.00000000000000))*(cj6));
IkReal x350=((IkReal(0.0600000000000000))*(cj6));
IkReal x351=((IkReal(0.0300000000000000))*(cj6));
IkReal x352=((IkReal(0.300700000000000))*(sj4));
IkReal x353=((npz)*(sj6));
IkReal x354=((IkReal(0.601420000000000))*(sj6));
IkReal x355=((IkReal(0.0300000000000000))*(sj4));
IkReal x356=((IkReal(0.300700000000000))*(cj4));
IkReal x357=((npx)*(x347));
IkReal x358=((npy)*(x348));
evalcond[0]=((((npx)*(x348)))+(((npy)*(x347))));
evalcond[1]=((IkReal(-0.300710000000000))+(((sj6)*(x357)))+(((IkReal(-1.00000000000000))*(sj6)*(x358)))+(x355)+(((IkReal(-1.00000000000000))*(x356)))+(((IkReal(-1.00000000000000))*(npz)*(x349))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x352)))+(((IkReal(-0.0300000000000000))*(cj4)))+(((IkReal(-1.00000000000000))*(x349)*(x358)))+(x353)+(((cj6)*(x357))));
evalcond[3]=((((IkReal(-1.00000000000000))*(sj6)*(x356)))+(((IkReal(-1.00000000000000))*(cj6)*(x352)))+(((IkReal(-1.00000000000000))*(x358)))+(((sj6)*(x355)))+(x351)+(x357)+(((IkReal(-0.300710000000000))*(sj6)))+(((IkReal(-1.00000000000000))*(cj4)*(x351))));
evalcond[4]=((IkReal(-6.01410000000000e-6))+(((x350)*(x358)))+(((IkReal(-0.0600000000000000))*(x353)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x350)*(x357)))+(((IkReal(-1.00000000000000))*(x354)*(x358)))+(((IkReal(-0.601420000000000))*(cj6)*(npz)))+(((x354)*(x357))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x359=((IkReal(0.0300000000000000))*(sj6));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j5, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.182646994100000))+(((IkReal(-0.0360846000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.179046994000000))*(cj4))));
evalcond[2]=((((IkReal(-0.300700000000000))*(sj4)*(sj6)))+(((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-1.00000000000000))*(cj4)*(x359)))+(((IkReal(-0.300710000000000))*(cj6)))+(((IkReal(0.0300000000000000))*(cj6)*(sj4)))+(x359)+(((IkReal(-0.300700000000000))*(cj4)*(cj6))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst12;
gconst12=IKsign(((((sj6)*((npx)*(npx))))+(((sj6)*((npy)*(npy))))));
dummyeval[0]=((((sj6)*((npx)*(npx))))+(((sj6)*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst13;
gconst13=IKsign(((((cj6)*((npy)*(npy))))+(((cj6)*((npx)*(npx))))));
dummyeval[0]=((((cj6)*((npy)*(npy))))+(((cj6)*((npx)*(npx)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x360=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-0.300700000000000))*(sj4)))+(((IkReal(-0.0300000000000000))*(cj4))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j6)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.182646994100000))+(((IkReal(-0.0360846000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.179046994000000))*(cj4))));
evalcond[2]=x360;
evalcond[3]=x360;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst14;
gconst14=IKsign((((npy)*(npy))+((npx)*(npx))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst15;
gconst15=IKsign(((((IkReal(30071.0000000000))*((npx)*(npx))))+(((IkReal(30071.0000000000))*((npy)*(npy))))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x361=((IkReal(50000.0000000000))*(pp));
IkReal x362=((IkReal(3000.00000000000))*(npz));
if( IKabs(((gconst15)*(((((IkReal(-1.00000000000000))*(npy)*(x361)))+(((npy)*(x362)))+(((IkReal(-0.300705000000000))*(npy))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst15)*(((((IkReal(0.300705000000000))*(npx)))+(((IkReal(-1.00000000000000))*(npx)*(x362)))+(((npx)*(x361))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst15)*(((((IkReal(-1.00000000000000))*(npy)*(x361)))+(((npy)*(x362)))+(((IkReal(-0.300705000000000))*(npy)))))), ((gconst15)*(((((IkReal(0.300705000000000))*(npx)))+(((IkReal(-1.00000000000000))*(npx)*(x362)))+(((npx)*(x361)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x363=IKcos(j7);
IkReal x364=IKsin(j7);
IkReal x365=((npx)*(x363));
IkReal x366=((npy)*(x364));
evalcond[0]=((((npx)*(x364)))+(((npy)*(x363))));
evalcond[1]=((IkReal(-0.300710000000000))+(((IkReal(-1.00000000000000))*(x366)))+(x365)+(((IkReal(0.0300000000000000))*(sj4)))+(((IkReal(-0.300700000000000))*(cj4))));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(0.601420000000000))*(x365)))+(((IkReal(-0.601420000000000))*(x366)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(npz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x367=((IkReal(0.0300000000000000))*(sj4));
IkReal x368=((IkReal(0.300700000000000))*(cj4));
if( IKabs(((gconst14)*(((((npy)*(x367)))+(((IkReal(-1.00000000000000))*(npy)*(x368)))+(((IkReal(-0.300710000000000))*(npy))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst14)*(((((IkReal(-1.00000000000000))*(npx)*(x367)))+(((IkReal(0.300710000000000))*(npx)))+(((npx)*(x368))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst14)*(((((npy)*(x367)))+(((IkReal(-1.00000000000000))*(npy)*(x368)))+(((IkReal(-0.300710000000000))*(npy)))))), ((gconst14)*(((((IkReal(-1.00000000000000))*(npx)*(x367)))+(((IkReal(0.300710000000000))*(npx)))+(((npx)*(x368)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x369=IKcos(j7);
IkReal x370=IKsin(j7);
IkReal x371=((npx)*(x369));
IkReal x372=((npy)*(x370));
evalcond[0]=((((npy)*(x369)))+(((npx)*(x370))));
evalcond[1]=((IkReal(-0.300710000000000))+(x371)+(((IkReal(0.0300000000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(x372)))+(((IkReal(-0.300700000000000))*(cj4))));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(npz)))+(((IkReal(0.601420000000000))*(x371)))+(((IkReal(-0.601420000000000))*(x372))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x373=((IkReal(0.300700000000000))*(sj4));
IkReal x374=((IkReal(0.0300000000000000))*(cj4));
IkReal x375=((x374)+(x373));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j6)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.182646994100000))+(((IkReal(-0.0360846000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.179046994000000))*(cj4))));
evalcond[2]=((IkReal(-0.0300000000000000))+(((IkReal(-1.00000000000000))*(npz)))+(x375));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x375)))+(npz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst16;
gconst16=IKsign(((((IkReal(-1.00000000000000))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst17;
gconst17=IKsign(((((IkReal(-30071.0000000000))*((npx)*(npx))))+(((IkReal(-30071.0000000000))*((npy)*(npy))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x376=((IkReal(50000.0000000000))*(pp));
IkReal x377=((IkReal(3000.00000000000))*(npz));
if( IKabs(((gconst17)*(((((IkReal(-1.00000000000000))*(npy)*(x376)))+(((IkReal(-0.300705000000000))*(npy)))+(((IkReal(-1.00000000000000))*(npy)*(x377))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst17)*(((((IkReal(0.300705000000000))*(npx)))+(((npx)*(x377)))+(((npx)*(x376))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst17)*(((((IkReal(-1.00000000000000))*(npy)*(x376)))+(((IkReal(-0.300705000000000))*(npy)))+(((IkReal(-1.00000000000000))*(npy)*(x377)))))), ((gconst17)*(((((IkReal(0.300705000000000))*(npx)))+(((npx)*(x377)))+(((npx)*(x376)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x378=IKsin(j7);
IkReal x379=IKcos(j7);
IkReal x380=((npx)*(x379));
IkReal x381=((npy)*(x378));
evalcond[0]=((((npy)*(x379)))+(((npx)*(x378))));
evalcond[1]=((IkReal(-0.300710000000000))+(x381)+(((IkReal(0.0300000000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(x380)))+(((IkReal(-0.300700000000000))*(cj4))));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(-0.601420000000000))*(x380)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(npz)))+(((IkReal(0.601420000000000))*(x381))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x382=((IkReal(0.0300000000000000))*(sj4));
IkReal x383=((IkReal(0.300700000000000))*(cj4));
if( IKabs(((gconst16)*(((((IkReal(-1.00000000000000))*(npy)*(x383)))+(((npy)*(x382)))+(((IkReal(-0.300710000000000))*(npy))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst16)*(((((IkReal(-1.00000000000000))*(npx)*(x382)))+(((IkReal(0.300710000000000))*(npx)))+(((npx)*(x383))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst16)*(((((IkReal(-1.00000000000000))*(npy)*(x383)))+(((npy)*(x382)))+(((IkReal(-0.300710000000000))*(npy)))))), ((gconst16)*(((((IkReal(-1.00000000000000))*(npx)*(x382)))+(((IkReal(0.300710000000000))*(npx)))+(((npx)*(x383)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x384=IKsin(j7);
IkReal x385=IKcos(j7);
IkReal x386=((npx)*(x385));
IkReal x387=((npy)*(x384));
evalcond[0]=((((npy)*(x385)))+(((npx)*(x384))));
evalcond[1]=((IkReal(-0.300710000000000))+(x387)+(((IkReal(0.0300000000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(x386)))+(((IkReal(-0.300700000000000))*(cj4))));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(-0.601420000000000))*(x386)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.601420000000000))*(x387)))+(((IkReal(-0.0600000000000000))*(npz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x388=((IkReal(-0.300710000000000))+(((IkReal(-1.00000000000000))*(npz)))+(((IkReal(0.0300000000000000))*(sj4)))+(((IkReal(-0.300700000000000))*(cj4))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j6)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.182646994100000))+(((IkReal(-0.0360846000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.179046994000000))*(cj4))));
evalcond[2]=x388;
evalcond[3]=x388;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst18;
gconst18=IKsign(((((IkReal(-1.00000000000000))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst19;
gconst19=IKsign(((((IkReal(3.00000000000000))*((npx)*(npx))))+(((IkReal(3.00000000000000))*((npy)*(npy))))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x389=((IkReal(50.0000000000000))*(pp));
IkReal x390=((IkReal(30.0710000000000))*(npz));
if( IKabs(((gconst19)*(((((IkReal(-1.00000000000000))*(npy)*(x390)))+(((IkReal(-1.00000000000000))*(npy)*(x389)))+(((IkReal(-0.000300705000000000))*(npy))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst19)*(((((npx)*(x389)))+(((npx)*(x390)))+(((IkReal(0.000300705000000000))*(npx))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst19)*(((((IkReal(-1.00000000000000))*(npy)*(x390)))+(((IkReal(-1.00000000000000))*(npy)*(x389)))+(((IkReal(-0.000300705000000000))*(npy)))))), ((gconst19)*(((((npx)*(x389)))+(((npx)*(x390)))+(((IkReal(0.000300705000000000))*(npx)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x391=IKsin(j7);
IkReal x392=IKcos(j7);
IkReal x393=((npx)*(x392));
IkReal x394=((npy)*(x391));
evalcond[0]=((((npx)*(x391)))+(((npy)*(x392))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-0.300700000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(x393)))+(((IkReal(-0.0300000000000000))*(cj4)))+(x394));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(-0.0600000000000000))*(x394)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(x393)))+(((IkReal(-0.601420000000000))*(npz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x395=((IkReal(0.300700000000000))*(sj4));
IkReal x396=((IkReal(0.0300000000000000))*(npx));
IkReal x397=((IkReal(0.0300000000000000))*(npy));
if( IKabs(((gconst18)*(((((IkReal(-1.00000000000000))*(cj4)*(x397)))+(((IkReal(-1.00000000000000))*(npy)*(x395)))+(x397))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst18)*(((((cj4)*(x396)))+(((npx)*(x395)))+(((IkReal(-1.00000000000000))*(x396))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst18)*(((((IkReal(-1.00000000000000))*(cj4)*(x397)))+(((IkReal(-1.00000000000000))*(npy)*(x395)))+(x397)))), ((gconst18)*(((((cj4)*(x396)))+(((npx)*(x395)))+(((IkReal(-1.00000000000000))*(x396)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x398=IKsin(j7);
IkReal x399=IKcos(j7);
IkReal x400=((npx)*(x399));
IkReal x401=((npy)*(x398));
evalcond[0]=((((npy)*(x399)))+(((npx)*(x398))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x400)))+(((IkReal(-0.300700000000000))*(sj4)))+(((IkReal(-0.0300000000000000))*(cj4)))+(x401));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(-0.0600000000000000))*(x401)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(x400)))+(((IkReal(-0.601420000000000))*(npz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x402=((IkReal(0.300700000000000))*(cj4));
IkReal x403=((IkReal(0.0300000000000000))*(sj4));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j6, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.182646994100000))+(((IkReal(-0.0360846000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.179046994000000))*(cj4))));
evalcond[2]=((IkReal(-0.300710000000000))+(((IkReal(-1.00000000000000))*(x402)))+(npz)+(x403));
evalcond[3]=((IkReal(0.300710000000000))+(((IkReal(-1.00000000000000))*(x403)))+(((IkReal(-1.00000000000000))*(npz)))+(x402));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst20;
gconst20=IKsign((((npy)*(npy))+((npx)*(npx))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst21;
gconst21=IKsign(((((IkReal(-3.00000000000000))*((npx)*(npx))))+(((IkReal(-3.00000000000000))*((npy)*(npy))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x404=((IkReal(50.0000000000000))*(pp));
IkReal x405=((IkReal(30.0710000000000))*(npz));
if( IKabs(((gconst21)*(((((IkReal(-1.00000000000000))*(npy)*(x404)))+(((npy)*(x405)))+(((IkReal(-0.000300705000000000))*(npy))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst21)*(((((IkReal(-1.00000000000000))*(npx)*(x405)))+(((npx)*(x404)))+(((IkReal(0.000300705000000000))*(npx))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst21)*(((((IkReal(-1.00000000000000))*(npy)*(x404)))+(((npy)*(x405)))+(((IkReal(-0.000300705000000000))*(npy)))))), ((gconst21)*(((((IkReal(-1.00000000000000))*(npx)*(x405)))+(((npx)*(x404)))+(((IkReal(0.000300705000000000))*(npx)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x406=IKcos(j7);
IkReal x407=IKsin(j7);
IkReal x408=((npx)*(x406));
IkReal x409=((npy)*(x407));
evalcond[0]=((((npx)*(x407)))+(((npy)*(x406))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-0.300700000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(x409)))+(((IkReal(-0.0300000000000000))*(cj4)))+(x408));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(0.0600000000000000))*(x409)))+(((IkReal(-0.0600000000000000))*(x408)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.601420000000000))*(npz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x410=((IkReal(0.0300000000000000))*(npx));
IkReal x411=((IkReal(0.300700000000000))*(sj4));
IkReal x412=((IkReal(0.0300000000000000))*(npy));
if( IKabs(((gconst20)*(((((IkReal(-1.00000000000000))*(cj4)*(x412)))+(x412)+(((IkReal(-1.00000000000000))*(npy)*(x411))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst20)*(((((npx)*(x411)))+(((IkReal(-1.00000000000000))*(x410)))+(((cj4)*(x410))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst20)*(((((IkReal(-1.00000000000000))*(cj4)*(x412)))+(x412)+(((IkReal(-1.00000000000000))*(npy)*(x411)))))), ((gconst20)*(((((npx)*(x411)))+(((IkReal(-1.00000000000000))*(x410)))+(((cj4)*(x410)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x413=IKcos(j7);
IkReal x414=IKsin(j7);
IkReal x415=((npx)*(x413));
IkReal x416=((npy)*(x414));
evalcond[0]=((((npy)*(x413)))+(((npx)*(x414))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-0.300700000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(x416)))+(((IkReal(-0.0300000000000000))*(cj4)))+(x415));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(0.0600000000000000))*(x416)))+(((IkReal(-0.0600000000000000))*(x415)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.601420000000000))*(npz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x417=((npz)*(sj6));
IkReal x418=((IkReal(0.300700000000000))*(sj4));
IkReal x419=((IkReal(0.0300000000000000))*(npx));
IkReal x420=((IkReal(0.0300000000000000))*(npy));
if( IKabs(((gconst13)*(((((cj4)*(x420)))+(((npy)*(x417)))+(((npy)*(x418)))+(((IkReal(-1.00000000000000))*(x420))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst13)*(((((IkReal(-1.00000000000000))*(cj4)*(x419)))+(((IkReal(-1.00000000000000))*(npx)*(x417)))+(x419)+(((IkReal(-1.00000000000000))*(npx)*(x418))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst13)*(((((cj4)*(x420)))+(((npy)*(x417)))+(((npy)*(x418)))+(((IkReal(-1.00000000000000))*(x420)))))), ((gconst13)*(((((IkReal(-1.00000000000000))*(cj4)*(x419)))+(((IkReal(-1.00000000000000))*(npx)*(x417)))+(x419)+(((IkReal(-1.00000000000000))*(npx)*(x418)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x421=IKcos(j7);
IkReal x422=IKsin(j7);
IkReal x423=((IkReal(1.00000000000000))*(cj6));
IkReal x424=((IkReal(0.0600000000000000))*(cj6));
IkReal x425=((IkReal(0.0300000000000000))*(cj6));
IkReal x426=((IkReal(0.300700000000000))*(sj4));
IkReal x427=((IkReal(1.00000000000000))*(sj6));
IkReal x428=((IkReal(0.601420000000000))*(sj6));
IkReal x429=((IkReal(0.0300000000000000))*(sj4));
IkReal x430=((IkReal(0.300700000000000))*(cj4));
IkReal x431=((npx)*(x421));
IkReal x432=((npy)*(x422));
evalcond[0]=((((npx)*(x422)))+(((npy)*(x421))));
evalcond[1]=((IkReal(-0.300710000000000))+(x429)+(((sj6)*(x431)))+(((IkReal(-1.00000000000000))*(npz)*(x423)))+(((IkReal(-1.00000000000000))*(x430)))+(((IkReal(-1.00000000000000))*(x427)*(x432))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x426)))+(((IkReal(-1.00000000000000))*(x423)*(x431)))+(((cj6)*(x432)))+(((IkReal(-0.0300000000000000))*(cj4)))+(((IkReal(-1.00000000000000))*(npz)*(x427))));
evalcond[3]=((((IkReal(-1.00000000000000))*(sj6)*(x430)))+(x431)+(((IkReal(-1.00000000000000))*(x425)))+(((cj6)*(x426)))+(((IkReal(-0.300710000000000))*(sj6)))+(((IkReal(-1.00000000000000))*(x432)))+(((sj6)*(x429)))+(((cj4)*(x425))));
evalcond[4]=((IkReal(-6.01410000000000e-6))+(((x424)*(x431)))+(((IkReal(-1.00000000000000))*(x428)*(x432)))+(((IkReal(-1.00000000000000))*(pp)))+(((x428)*(x431)))+(((IkReal(-1.00000000000000))*(x424)*(x432)))+(((IkReal(0.0600000000000000))*(npz)*(sj6)))+(((IkReal(-0.601420000000000))*(cj6)*(npz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x433=((IkReal(0.0300000000000000))*(sj4));
IkReal x434=((IkReal(0.300700000000000))*(cj4));
IkReal x435=((cj6)*(npz));
if( IKabs(((gconst12)*(((((npy)*(x433)))+(((IkReal(-1.00000000000000))*(npy)*(x434)))+(((IkReal(-0.300710000000000))*(npy)))+(((IkReal(-1.00000000000000))*(npy)*(x435))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst12)*(((((npx)*(x434)))+(((IkReal(-1.00000000000000))*(npx)*(x433)))+(((IkReal(0.300710000000000))*(npx)))+(((npx)*(x435))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst12)*(((((npy)*(x433)))+(((IkReal(-1.00000000000000))*(npy)*(x434)))+(((IkReal(-0.300710000000000))*(npy)))+(((IkReal(-1.00000000000000))*(npy)*(x435)))))), ((gconst12)*(((((npx)*(x434)))+(((IkReal(-1.00000000000000))*(npx)*(x433)))+(((IkReal(0.300710000000000))*(npx)))+(((npx)*(x435)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x436=IKcos(j7);
IkReal x437=IKsin(j7);
IkReal x438=((IkReal(1.00000000000000))*(cj6));
IkReal x439=((IkReal(0.0600000000000000))*(cj6));
IkReal x440=((IkReal(0.0300000000000000))*(cj6));
IkReal x441=((IkReal(0.300700000000000))*(sj4));
IkReal x442=((IkReal(1.00000000000000))*(sj6));
IkReal x443=((IkReal(0.601420000000000))*(sj6));
IkReal x444=((IkReal(0.0300000000000000))*(sj4));
IkReal x445=((IkReal(0.300700000000000))*(cj4));
IkReal x446=((npx)*(x436));
IkReal x447=((npy)*(x437));
evalcond[0]=((((npx)*(x437)))+(((npy)*(x436))));
evalcond[1]=((IkReal(-0.300710000000000))+(((IkReal(-1.00000000000000))*(x445)))+(((IkReal(-1.00000000000000))*(npz)*(x438)))+(x444)+(((IkReal(-1.00000000000000))*(x442)*(x447)))+(((sj6)*(x446))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x438)*(x446)))+(((cj6)*(x447)))+(((IkReal(-1.00000000000000))*(x441)))+(((IkReal(-1.00000000000000))*(npz)*(x442)))+(((IkReal(-0.0300000000000000))*(cj4))));
evalcond[3]=((((sj6)*(x444)))+(x446)+(((cj6)*(x441)))+(((IkReal(-1.00000000000000))*(x447)))+(((IkReal(-1.00000000000000))*(x440)))+(((cj4)*(x440)))+(((IkReal(-0.300710000000000))*(sj6)))+(((IkReal(-1.00000000000000))*(sj6)*(x445))));
evalcond[4]=((IkReal(-6.01410000000000e-6))+(((IkReal(-1.00000000000000))*(pp)))+(((x439)*(x446)))+(((x443)*(x446)))+(((IkReal(-1.00000000000000))*(x443)*(x447)))+(((IkReal(-1.00000000000000))*(x439)*(x447)))+(((IkReal(0.0600000000000000))*(npz)*(sj6)))+(((IkReal(-0.601420000000000))*(cj6)*(npz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x448=((IkReal(0.0300000000000000))*(cj5));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j6)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.182646994100000))+(((IkReal(-0.0360846000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.179046994000000))*(cj4))));
evalcond[2]=((((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-1.00000000000000))*(x448)))+(((cj4)*(x448)))+(((IkReal(0.300700000000000))*(cj5)*(sj4))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst22;
gconst22=IKsign(((((cj5)*((npy)*(npy))))+(((cj5)*((npx)*(npx))))));
dummyeval[0]=((((cj5)*((npy)*(npy))))+(((cj5)*((npx)*(npx)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst23;
gconst23=IKsign((((npy)*(npy))+((npx)*(npx))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.182646994100000))+(((IkReal(-0.0360846000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.179046994000000))*(cj4))));
evalcond[2]=npz;
evalcond[3]=((IkReal(-1.00000000000000))*(npz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst24;
gconst24=IKsign((((npy)*(npy))+((npx)*(npx))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst25;
gconst25=IKsign(((((IkReal(0.601420000000000))*((npx)*(npx))))+(((IkReal(0.601420000000000))*((npy)*(npy))))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x449=((cj4)*(npx));
IkReal x450=((npx)*(sj4));
IkReal x451=((IkReal(0.0180426000000000))*(npy));
IkReal x452=((npy)*(sj4));
if( IKabs(((gconst25)*(((((IkReal(-0.0180426000000000))*(x449)))+(((IkReal(-1.00000000000000))*(npy)*(pp)))+(((IkReal(0.0180426000000000))*(npx)))+(((IkReal(0.00179398590000000))*(npy)))+(((IkReal(-0.0180420000000000))*(x452)))+(((IkReal(-0.00180000000000000))*(cj4)*(npy)))+(((IkReal(-0.180846994000000))*(x450))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst25)*(((((IkReal(0.0180420000000000))*(x450)))+(((npx)*(pp)))+(((IkReal(-0.180846994000000))*(x452)))+(x451)+(((IkReal(-0.00179398590000000))*(npx)))+(((IkReal(-1.00000000000000))*(cj4)*(x451)))+(((IkReal(0.00180000000000000))*(x449))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst25)*(((((IkReal(-0.0180426000000000))*(x449)))+(((IkReal(-1.00000000000000))*(npy)*(pp)))+(((IkReal(0.0180426000000000))*(npx)))+(((IkReal(0.00179398590000000))*(npy)))+(((IkReal(-0.0180420000000000))*(x452)))+(((IkReal(-0.00180000000000000))*(cj4)*(npy)))+(((IkReal(-0.180846994000000))*(x450)))))), ((gconst25)*(((((IkReal(0.0180420000000000))*(x450)))+(((npx)*(pp)))+(((IkReal(-0.180846994000000))*(x452)))+(x451)+(((IkReal(-0.00179398590000000))*(npx)))+(((IkReal(-1.00000000000000))*(cj4)*(x451)))+(((IkReal(0.00180000000000000))*(x449)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x453=IKcos(j7);
IkReal x454=IKsin(j7);
IkReal x455=((npx)*(x454));
IkReal x456=((npy)*(x453));
IkReal x457=((npx)*(x453));
IkReal x458=((npy)*(x454));
evalcond[0]=((IkReal(-0.0300000000000000))+(((IkReal(0.300700000000000))*(sj4)))+(x456)+(x455)+(((IkReal(0.0300000000000000))*(cj4))));
evalcond[1]=((IkReal(-0.300710000000000))+(x457)+(((IkReal(-1.00000000000000))*(x458)))+(((IkReal(0.0300000000000000))*(sj4)))+(((IkReal(-0.300700000000000))*(cj4))));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(0.0600000000000000))*(x456)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.601420000000000))*(x457)))+(((IkReal(-0.601420000000000))*(x458)))+(((IkReal(0.0600000000000000))*(x455))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x459=((npx)*(sj4));
IkReal x460=((IkReal(0.300700000000000))*(npy));
IkReal x461=((IkReal(0.0300000000000000))*(npx));
IkReal x462=((IkReal(0.0300000000000000))*(npy));
if( IKabs(((gconst24)*(((((IkReal(-1.00000000000000))*(cj4)*(x460)))+(((IkReal(-0.300700000000000))*(x459)))+(x461)+(((IkReal(-0.300710000000000))*(npy)))+(((sj4)*(x462)))+(((IkReal(-1.00000000000000))*(cj4)*(x461))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst24)*(((((IkReal(-1.00000000000000))*(sj4)*(x460)))+(((IkReal(0.300700000000000))*(cj4)*(npx)))+(x462)+(((IkReal(-0.0300000000000000))*(x459)))+(((IkReal(-1.00000000000000))*(cj4)*(x462)))+(((IkReal(0.300710000000000))*(npx))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst24)*(((((IkReal(-1.00000000000000))*(cj4)*(x460)))+(((IkReal(-0.300700000000000))*(x459)))+(x461)+(((IkReal(-0.300710000000000))*(npy)))+(((sj4)*(x462)))+(((IkReal(-1.00000000000000))*(cj4)*(x461)))))), ((gconst24)*(((((IkReal(-1.00000000000000))*(sj4)*(x460)))+(((IkReal(0.300700000000000))*(cj4)*(npx)))+(x462)+(((IkReal(-0.0300000000000000))*(x459)))+(((IkReal(-1.00000000000000))*(cj4)*(x462)))+(((IkReal(0.300710000000000))*(npx)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x463=IKcos(j7);
IkReal x464=IKsin(j7);
IkReal x465=((npx)*(x464));
IkReal x466=((npy)*(x463));
IkReal x467=((npx)*(x463));
IkReal x468=((npy)*(x464));
evalcond[0]=((IkReal(-0.0300000000000000))+(((IkReal(0.300700000000000))*(sj4)))+(x466)+(x465)+(((IkReal(0.0300000000000000))*(cj4))));
evalcond[1]=((IkReal(-0.300710000000000))+(((IkReal(0.0300000000000000))*(sj4)))+(x467)+(((IkReal(-1.00000000000000))*(x468)))+(((IkReal(-0.300700000000000))*(cj4))));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(0.0600000000000000))*(x466)))+(((IkReal(0.0600000000000000))*(x465)))+(((IkReal(0.601420000000000))*(x467)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.601420000000000))*(x468))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x469=((IkReal(-1.00000000000000))*(npz));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.182646994100000))+(((IkReal(-0.0360846000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.179046994000000))*(cj4))));
evalcond[2]=x469;
evalcond[3]=x469;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst26;
gconst26=IKsign((((npy)*(npy))+((npx)*(npx))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst27;
gconst27=IKsign(((((IkReal(0.601420000000000))*((npx)*(npx))))+(((IkReal(0.601420000000000))*((npy)*(npy))))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x470=((cj4)*(npx));
IkReal x471=((npx)*(sj4));
IkReal x472=((IkReal(0.0180426000000000))*(npy));
IkReal x473=((npy)*(sj4));
if( IKabs(((gconst27)*(((((IkReal(-0.0180420000000000))*(x473)))+(((IkReal(-0.0180426000000000))*(npx)))+(((IkReal(0.0180426000000000))*(x470)))+(((IkReal(-1.00000000000000))*(npy)*(pp)))+(((IkReal(0.00179398590000000))*(npy)))+(((IkReal(-0.00180000000000000))*(cj4)*(npy)))+(((IkReal(0.180846994000000))*(x471))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst27)*(((((npx)*(pp)))+(((IkReal(0.0180420000000000))*(x471)))+(((IkReal(0.00180000000000000))*(x470)))+(((cj4)*(x472)))+(((IkReal(-0.00179398590000000))*(npx)))+(((IkReal(0.180846994000000))*(x473)))+(((IkReal(-1.00000000000000))*(x472))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst27)*(((((IkReal(-0.0180420000000000))*(x473)))+(((IkReal(-0.0180426000000000))*(npx)))+(((IkReal(0.0180426000000000))*(x470)))+(((IkReal(-1.00000000000000))*(npy)*(pp)))+(((IkReal(0.00179398590000000))*(npy)))+(((IkReal(-0.00180000000000000))*(cj4)*(npy)))+(((IkReal(0.180846994000000))*(x471)))))), ((gconst27)*(((((npx)*(pp)))+(((IkReal(0.0180420000000000))*(x471)))+(((IkReal(0.00180000000000000))*(x470)))+(((cj4)*(x472)))+(((IkReal(-0.00179398590000000))*(npx)))+(((IkReal(0.180846994000000))*(x473)))+(((IkReal(-1.00000000000000))*(x472)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x474=IKcos(j7);
IkReal x475=IKsin(j7);
IkReal x476=((npx)*(x475));
IkReal x477=((npy)*(x474));
IkReal x478=((npx)*(x474));
IkReal x479=((npy)*(x475));
evalcond[0]=((IkReal(0.0300000000000000))+(x476)+(x477)+(((IkReal(-0.300700000000000))*(sj4)))+(((IkReal(-0.0300000000000000))*(cj4))));
evalcond[1]=((IkReal(-0.300710000000000))+(x478)+(((IkReal(0.0300000000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(x479)))+(((IkReal(-0.300700000000000))*(cj4))));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(0.601420000000000))*(x478)))+(((IkReal(-0.601420000000000))*(x479)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x477)))+(((IkReal(-0.0600000000000000))*(x476))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x480=((npx)*(sj4));
IkReal x481=((IkReal(0.300700000000000))*(npy));
IkReal x482=((IkReal(0.0300000000000000))*(npx));
IkReal x483=((IkReal(0.0300000000000000))*(npy));
if( IKabs(((gconst26)*(((((IkReal(-1.00000000000000))*(x482)))+(((IkReal(0.300700000000000))*(x480)))+(((sj4)*(x483)))+(((IkReal(-0.300710000000000))*(npy)))+(((IkReal(-1.00000000000000))*(cj4)*(x481)))+(((cj4)*(x482))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst26)*(((((IkReal(-1.00000000000000))*(x483)))+(((IkReal(-0.0300000000000000))*(x480)))+(((cj4)*(x483)))+(((IkReal(0.300700000000000))*(cj4)*(npx)))+(((IkReal(0.300710000000000))*(npx)))+(((sj4)*(x481))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst26)*(((((IkReal(-1.00000000000000))*(x482)))+(((IkReal(0.300700000000000))*(x480)))+(((sj4)*(x483)))+(((IkReal(-0.300710000000000))*(npy)))+(((IkReal(-1.00000000000000))*(cj4)*(x481)))+(((cj4)*(x482)))))), ((gconst26)*(((((IkReal(-1.00000000000000))*(x483)))+(((IkReal(-0.0300000000000000))*(x480)))+(((cj4)*(x483)))+(((IkReal(0.300700000000000))*(cj4)*(npx)))+(((IkReal(0.300710000000000))*(npx)))+(((sj4)*(x481)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x484=IKcos(j7);
IkReal x485=IKsin(j7);
IkReal x486=((npx)*(x485));
IkReal x487=((npy)*(x484));
IkReal x488=((npx)*(x484));
IkReal x489=((npy)*(x485));
evalcond[0]=((IkReal(0.0300000000000000))+(((IkReal(-0.300700000000000))*(sj4)))+(((IkReal(-0.0300000000000000))*(cj4)))+(x487)+(x486));
evalcond[1]=((IkReal(-0.300710000000000))+(((IkReal(0.0300000000000000))*(sj4)))+(x488)+(((IkReal(-1.00000000000000))*(x489)))+(((IkReal(-0.300700000000000))*(cj4))));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(-0.601420000000000))*(x489)))+(((IkReal(0.601420000000000))*(x488)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x487)))+(((IkReal(-0.0600000000000000))*(x486))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x490=((npx)*(sj4));
IkReal x491=((IkReal(0.300700000000000))*(sj5));
IkReal x492=((IkReal(0.0300000000000000))*(sj5));
IkReal x493=((cj4)*(npx));
IkReal x494=((cj4)*(npy));
IkReal x495=((npy)*(sj4));
if( IKabs(((gconst23)*(((((IkReal(-0.300700000000000))*(x494)))+(((npx)*(x492)))+(((IkReal(0.0300000000000000))*(x495)))+(((IkReal(-1.00000000000000))*(x492)*(x493)))+(((IkReal(-1.00000000000000))*(x490)*(x491)))+(((IkReal(-0.300710000000000))*(npy))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst23)*(((((IkReal(-1.00000000000000))*(x492)*(x494)))+(((IkReal(-1.00000000000000))*(x491)*(x495)))+(((IkReal(0.300710000000000))*(npx)))+(((npy)*(x492)))+(((IkReal(-0.0300000000000000))*(x490)))+(((IkReal(0.300700000000000))*(x493))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst23)*(((((IkReal(-0.300700000000000))*(x494)))+(((npx)*(x492)))+(((IkReal(0.0300000000000000))*(x495)))+(((IkReal(-1.00000000000000))*(x492)*(x493)))+(((IkReal(-1.00000000000000))*(x490)*(x491)))+(((IkReal(-0.300710000000000))*(npy)))))), ((gconst23)*(((((IkReal(-1.00000000000000))*(x492)*(x494)))+(((IkReal(-1.00000000000000))*(x491)*(x495)))+(((IkReal(0.300710000000000))*(npx)))+(((npy)*(x492)))+(((IkReal(-0.0300000000000000))*(x490)))+(((IkReal(0.300700000000000))*(x493)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x496=IKcos(j7);
IkReal x497=IKsin(j7);
IkReal x498=((IkReal(0.300700000000000))*(sj4));
IkReal x499=((IkReal(1.00000000000000))*(sj5));
IkReal x500=((IkReal(0.0600000000000000))*(sj5));
IkReal x501=((IkReal(0.0300000000000000))*(sj5));
IkReal x502=((cj5)*(npz));
IkReal x503=((npy)*(x496));
IkReal x504=((npx)*(x497));
IkReal x505=((npx)*(x496));
IkReal x506=((npy)*(x497));
evalcond[0]=((((IkReal(-1.00000000000000))*(x501)))+(((cj4)*(x501)))+(((sj5)*(x498)))+(x503)+(x504));
evalcond[1]=((IkReal(-0.300710000000000))+(((IkReal(0.0300000000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(x506)))+(((IkReal(-0.300700000000000))*(cj4)))+(x505));
evalcond[2]=((((cj5)*(x503)))+(((npz)*(sj5)))+(((cj5)*(x504))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x499)*(x503)))+(((IkReal(-1.00000000000000))*(x498)))+(((IkReal(-0.0300000000000000))*(cj4)))+(((IkReal(-1.00000000000000))*(x499)*(x504)))+(x502));
evalcond[4]=((IkReal(-6.01410000000000e-6))+(((x500)*(x503)))+(((IkReal(-0.601420000000000))*(x506)))+(((IkReal(-1.00000000000000))*(pp)))+(((x500)*(x504)))+(((IkReal(-0.0600000000000000))*(x502)))+(((IkReal(0.601420000000000))*(x505))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x507=((cj5)*(npx));
IkReal x508=((IkReal(0.0300000000000000))*(sj4));
IkReal x509=((IkReal(0.300700000000000))*(cj4));
IkReal x510=((cj5)*(npy));
IkReal x511=((IkReal(1.00000000000000))*(npz)*(sj5));
if( IKabs(((gconst22)*(((((IkReal(-1.00000000000000))*(x509)*(x510)))+(((IkReal(-1.00000000000000))*(npx)*(x511)))+(((x508)*(x510)))+(((IkReal(-0.300710000000000))*(x510))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst22)*(((((IkReal(-1.00000000000000))*(x507)*(x508)))+(((x507)*(x509)))+(((IkReal(0.300710000000000))*(x507)))+(((IkReal(-1.00000000000000))*(npy)*(x511))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst22)*(((((IkReal(-1.00000000000000))*(x509)*(x510)))+(((IkReal(-1.00000000000000))*(npx)*(x511)))+(((x508)*(x510)))+(((IkReal(-0.300710000000000))*(x510)))))), ((gconst22)*(((((IkReal(-1.00000000000000))*(x507)*(x508)))+(((x507)*(x509)))+(((IkReal(0.300710000000000))*(x507)))+(((IkReal(-1.00000000000000))*(npy)*(x511)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x512=IKcos(j7);
IkReal x513=IKsin(j7);
IkReal x514=((IkReal(0.300700000000000))*(sj4));
IkReal x515=((IkReal(1.00000000000000))*(sj5));
IkReal x516=((IkReal(0.0600000000000000))*(sj5));
IkReal x517=((IkReal(0.0300000000000000))*(sj5));
IkReal x518=((cj5)*(npz));
IkReal x519=((npy)*(x512));
IkReal x520=((npx)*(x513));
IkReal x521=((npx)*(x512));
IkReal x522=((npy)*(x513));
evalcond[0]=((x519)+(((IkReal(-1.00000000000000))*(x517)))+(((sj5)*(x514)))+(((cj4)*(x517)))+(x520));
evalcond[1]=((IkReal(-0.300710000000000))+(((IkReal(-1.00000000000000))*(x522)))+(((IkReal(0.0300000000000000))*(sj4)))+(x521)+(((IkReal(-0.300700000000000))*(cj4))));
evalcond[2]=((((cj5)*(x519)))+(((npz)*(sj5)))+(((cj5)*(x520))));
evalcond[3]=((IkReal(0.0300000000000000))+(x518)+(((IkReal(-1.00000000000000))*(x515)*(x520)))+(((IkReal(-1.00000000000000))*(x514)))+(((IkReal(-1.00000000000000))*(x515)*(x519)))+(((IkReal(-0.0300000000000000))*(cj4))));
evalcond[4]=((IkReal(-6.01410000000000e-6))+(((IkReal(-0.0600000000000000))*(x518)))+(((IkReal(-0.601420000000000))*(x522)))+(((IkReal(-1.00000000000000))*(pp)))+(((x516)*(x520)))+(((IkReal(0.601420000000000))*(x521)))+(((x516)*(x519))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x523=((IkReal(0.0300000000000000))*(cj5));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j6)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.182646994100000))+(((IkReal(-0.0360846000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.179046994000000))*(cj4))));
evalcond[2]=((((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-0.300700000000000))*(cj5)*(sj4)))+(x523)+(((IkReal(-1.00000000000000))*(cj4)*(x523))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst28;
gconst28=IKsign(((((cj5)*((npy)*(npy))))+(((cj5)*((npx)*(npx))))));
dummyeval[0]=((((cj5)*((npy)*(npy))))+(((cj5)*((npx)*(npx)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst29;
gconst29=IKsign(((((IkReal(-1.00000000000000))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x524=((IkReal(-1.00000000000000))*(npz));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.182646994100000))+(((IkReal(-0.0360846000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.179046994000000))*(cj4))));
evalcond[2]=x524;
evalcond[3]=x524;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst30;
gconst30=IKsign(((((IkReal(-1.00000000000000))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst31;
gconst31=IKsign(((((IkReal(-0.601420000000000))*((npx)*(npx))))+(((IkReal(-0.601420000000000))*((npy)*(npy))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x525=((cj4)*(npx));
IkReal x526=((npx)*(sj4));
IkReal x527=((IkReal(0.0180426000000000))*(npy));
IkReal x528=((npy)*(sj4));
if( IKabs(((gconst31)*(((((IkReal(-0.0180426000000000))*(npx)))+(((IkReal(0.0180426000000000))*(x525)))+(((IkReal(-1.00000000000000))*(npy)*(pp)))+(((IkReal(-0.0180420000000000))*(x528)))+(((IkReal(0.00179398590000000))*(npy)))+(((IkReal(-0.00180000000000000))*(cj4)*(npy)))+(((IkReal(0.180846994000000))*(x526))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst31)*(((((npx)*(pp)))+(((IkReal(-1.00000000000000))*(x527)))+(((cj4)*(x527)))+(((IkReal(0.0180420000000000))*(x526)))+(((IkReal(0.00180000000000000))*(x525)))+(((IkReal(-0.00179398590000000))*(npx)))+(((IkReal(0.180846994000000))*(x528))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst31)*(((((IkReal(-0.0180426000000000))*(npx)))+(((IkReal(0.0180426000000000))*(x525)))+(((IkReal(-1.00000000000000))*(npy)*(pp)))+(((IkReal(-0.0180420000000000))*(x528)))+(((IkReal(0.00179398590000000))*(npy)))+(((IkReal(-0.00180000000000000))*(cj4)*(npy)))+(((IkReal(0.180846994000000))*(x526)))))), ((gconst31)*(((((npx)*(pp)))+(((IkReal(-1.00000000000000))*(x527)))+(((cj4)*(x527)))+(((IkReal(0.0180420000000000))*(x526)))+(((IkReal(0.00180000000000000))*(x525)))+(((IkReal(-0.00179398590000000))*(npx)))+(((IkReal(0.180846994000000))*(x528)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x529=IKsin(j7);
IkReal x530=IKcos(j7);
IkReal x531=((npy)*(x530));
IkReal x532=((npx)*(x530));
IkReal x533=((npx)*(x529));
IkReal x534=((npy)*(x529));
evalcond[0]=((IkReal(-0.0300000000000000))+(((IkReal(0.300700000000000))*(sj4)))+(((IkReal(0.0300000000000000))*(cj4)))+(x531)+(x533));
evalcond[1]=((IkReal(-0.300710000000000))+(((IkReal(0.0300000000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(x532)))+(((IkReal(-0.300700000000000))*(cj4)))+(x534));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(-0.601420000000000))*(x532)))+(((IkReal(0.0600000000000000))*(x533)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.601420000000000))*(x534)))+(((IkReal(0.0600000000000000))*(x531))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x535=((npx)*(sj4));
IkReal x536=((IkReal(0.300700000000000))*(cj4));
IkReal x537=((IkReal(0.0300000000000000))*(npx));
IkReal x538=((IkReal(0.0300000000000000))*(npy));
if( IKabs(((gconst30)*(((((IkReal(-1.00000000000000))*(npy)*(x536)))+(((sj4)*(x538)))+(((cj4)*(x537)))+(((IkReal(0.300700000000000))*(x535)))+(((IkReal(-1.00000000000000))*(x537)))+(((IkReal(-0.300710000000000))*(npy))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst30)*(((((cj4)*(x538)))+(((IkReal(-0.0300000000000000))*(x535)))+(((IkReal(0.300710000000000))*(npx)))+(((IkReal(-1.00000000000000))*(x538)))+(((npx)*(x536)))+(((IkReal(0.300700000000000))*(npy)*(sj4))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst30)*(((((IkReal(-1.00000000000000))*(npy)*(x536)))+(((sj4)*(x538)))+(((cj4)*(x537)))+(((IkReal(0.300700000000000))*(x535)))+(((IkReal(-1.00000000000000))*(x537)))+(((IkReal(-0.300710000000000))*(npy)))))), ((gconst30)*(((((cj4)*(x538)))+(((IkReal(-0.0300000000000000))*(x535)))+(((IkReal(0.300710000000000))*(npx)))+(((IkReal(-1.00000000000000))*(x538)))+(((npx)*(x536)))+(((IkReal(0.300700000000000))*(npy)*(sj4)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x539=IKsin(j7);
IkReal x540=IKcos(j7);
IkReal x541=((npy)*(x540));
IkReal x542=((npx)*(x540));
IkReal x543=((npx)*(x539));
IkReal x544=((npy)*(x539));
evalcond[0]=((IkReal(-0.0300000000000000))+(((IkReal(0.300700000000000))*(sj4)))+(x541)+(x543)+(((IkReal(0.0300000000000000))*(cj4))));
evalcond[1]=((IkReal(-0.300710000000000))+(x544)+(((IkReal(-1.00000000000000))*(x542)))+(((IkReal(0.0300000000000000))*(sj4)))+(((IkReal(-0.300700000000000))*(cj4))));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(0.0600000000000000))*(x541)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.601420000000000))*(x544)))+(((IkReal(0.0600000000000000))*(x543)))+(((IkReal(-0.601420000000000))*(x542))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.182646994100000))+(((IkReal(-0.0360846000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.179046994000000))*(cj4))));
evalcond[2]=npz;
evalcond[3]=((IkReal(-1.00000000000000))*(npz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst32;
gconst32=IKsign(((((IkReal(-1.00000000000000))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst33;
gconst33=IKsign(((((IkReal(-0.601420000000000))*((npx)*(npx))))+(((IkReal(-0.601420000000000))*((npy)*(npy))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x545=((cj4)*(npx));
IkReal x546=((npx)*(sj4));
IkReal x547=((IkReal(0.0180426000000000))*(npy));
IkReal x548=((npy)*(sj4));
if( IKabs(((gconst33)*(((((IkReal(-0.0180426000000000))*(x545)))+(((IkReal(-1.00000000000000))*(npy)*(pp)))+(((IkReal(0.0180426000000000))*(npx)))+(((IkReal(0.00179398590000000))*(npy)))+(((IkReal(-0.00180000000000000))*(cj4)*(npy)))+(((IkReal(-0.180846994000000))*(x546)))+(((IkReal(-0.0180420000000000))*(x548))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst33)*(((((IkReal(0.00180000000000000))*(x545)))+(((npx)*(pp)))+(x547)+(((IkReal(-1.00000000000000))*(cj4)*(x547)))+(((IkReal(0.0180420000000000))*(x546)))+(((IkReal(-0.00179398590000000))*(npx)))+(((IkReal(-0.180846994000000))*(x548))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst33)*(((((IkReal(-0.0180426000000000))*(x545)))+(((IkReal(-1.00000000000000))*(npy)*(pp)))+(((IkReal(0.0180426000000000))*(npx)))+(((IkReal(0.00179398590000000))*(npy)))+(((IkReal(-0.00180000000000000))*(cj4)*(npy)))+(((IkReal(-0.180846994000000))*(x546)))+(((IkReal(-0.0180420000000000))*(x548)))))), ((gconst33)*(((((IkReal(0.00180000000000000))*(x545)))+(((npx)*(pp)))+(x547)+(((IkReal(-1.00000000000000))*(cj4)*(x547)))+(((IkReal(0.0180420000000000))*(x546)))+(((IkReal(-0.00179398590000000))*(npx)))+(((IkReal(-0.180846994000000))*(x548)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x549=IKsin(j7);
IkReal x550=IKcos(j7);
IkReal x551=((npy)*(x550));
IkReal x552=((npx)*(x550));
IkReal x553=((npx)*(x549));
IkReal x554=((npy)*(x549));
evalcond[0]=((IkReal(0.0300000000000000))+(((IkReal(-0.300700000000000))*(sj4)))+(((IkReal(-0.0300000000000000))*(cj4)))+(x553)+(x551));
evalcond[1]=((IkReal(-0.300710000000000))+(((IkReal(0.0300000000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(x552)))+(((IkReal(-0.300700000000000))*(cj4)))+(x554));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(-0.0600000000000000))*(x551)))+(((IkReal(-0.601420000000000))*(x552)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x553)))+(((IkReal(0.601420000000000))*(x554))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x555=((npx)*(sj4));
IkReal x556=((IkReal(0.300700000000000))*(npy));
IkReal x557=((IkReal(0.0300000000000000))*(npx));
IkReal x558=((IkReal(0.0300000000000000))*(npy));
if( IKabs(((gconst32)*(((((IkReal(-1.00000000000000))*(cj4)*(x556)))+(((sj4)*(x558)))+(((IkReal(-0.300700000000000))*(x555)))+(((IkReal(-0.300710000000000))*(npy)))+(((IkReal(-1.00000000000000))*(cj4)*(x557)))+(x557))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst32)*(((((IkReal(-1.00000000000000))*(sj4)*(x556)))+(((IkReal(-1.00000000000000))*(cj4)*(x558)))+(((IkReal(0.300700000000000))*(cj4)*(npx)))+(((IkReal(0.300710000000000))*(npx)))+(((IkReal(-0.0300000000000000))*(x555)))+(x558))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst32)*(((((IkReal(-1.00000000000000))*(cj4)*(x556)))+(((sj4)*(x558)))+(((IkReal(-0.300700000000000))*(x555)))+(((IkReal(-0.300710000000000))*(npy)))+(((IkReal(-1.00000000000000))*(cj4)*(x557)))+(x557)))), ((gconst32)*(((((IkReal(-1.00000000000000))*(sj4)*(x556)))+(((IkReal(-1.00000000000000))*(cj4)*(x558)))+(((IkReal(0.300700000000000))*(cj4)*(npx)))+(((IkReal(0.300710000000000))*(npx)))+(((IkReal(-0.0300000000000000))*(x555)))+(x558)))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x559=IKsin(j7);
IkReal x560=IKcos(j7);
IkReal x561=((npy)*(x560));
IkReal x562=((npx)*(x560));
IkReal x563=((npx)*(x559));
IkReal x564=((npy)*(x559));
evalcond[0]=((IkReal(0.0300000000000000))+(((IkReal(-0.300700000000000))*(sj4)))+(x563)+(x561)+(((IkReal(-0.0300000000000000))*(cj4))));
evalcond[1]=((IkReal(-0.300710000000000))+(((IkReal(-1.00000000000000))*(x562)))+(x564)+(((IkReal(0.0300000000000000))*(sj4)))+(((IkReal(-0.300700000000000))*(cj4))));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(-0.0600000000000000))*(x563)))+(((IkReal(0.601420000000000))*(x564)))+(((IkReal(-0.0600000000000000))*(x561)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.601420000000000))*(x562))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x565=((npx)*(sj5));
IkReal x566=((IkReal(0.300700000000000))*(sj4));
IkReal x567=((IkReal(0.0300000000000000))*(cj4));
IkReal x568=((IkReal(0.300700000000000))*(cj4));
IkReal x569=((IkReal(0.0300000000000000))*(npy));
IkReal x570=((npy)*(sj5));
if( IKabs(((gconst29)*(((((IkReal(-1.00000000000000))*(npy)*(x568)))+(((IkReal(-0.300710000000000))*(npy)))+(((x565)*(x567)))+(((IkReal(-0.0300000000000000))*(x565)))+(((sj4)*(x569)))+(((x565)*(x566))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst29)*(((((npx)*(x568)))+(((x566)*(x570)))+(((IkReal(-0.0300000000000000))*(npx)*(sj4)))+(((IkReal(0.300710000000000))*(npx)))+(((x567)*(x570)))+(((IkReal(-1.00000000000000))*(sj5)*(x569))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst29)*(((((IkReal(-1.00000000000000))*(npy)*(x568)))+(((IkReal(-0.300710000000000))*(npy)))+(((x565)*(x567)))+(((IkReal(-0.0300000000000000))*(x565)))+(((sj4)*(x569)))+(((x565)*(x566)))))), ((gconst29)*(((((npx)*(x568)))+(((x566)*(x570)))+(((IkReal(-0.0300000000000000))*(npx)*(sj4)))+(((IkReal(0.300710000000000))*(npx)))+(((x567)*(x570)))+(((IkReal(-1.00000000000000))*(sj5)*(x569)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x571=IKsin(j7);
IkReal x572=IKcos(j7);
IkReal x573=((IkReal(1.00000000000000))*(npz));
IkReal x574=((IkReal(0.300700000000000))*(sj4));
IkReal x575=((IkReal(1.00000000000000))*(sj5));
IkReal x576=((IkReal(0.0600000000000000))*(sj5));
IkReal x577=((IkReal(0.0300000000000000))*(sj5));
IkReal x578=((npy)*(x572));
IkReal x579=((npy)*(x571));
IkReal x580=((npx)*(x571));
IkReal x581=((npx)*(x572));
evalcond[0]=((x578)+(((sj5)*(x574)))+(((IkReal(-1.00000000000000))*(x577)))+(((cj4)*(x577)))+(x580));
evalcond[1]=((IkReal(-0.300710000000000))+(x579)+(((IkReal(0.0300000000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(x581)))+(((IkReal(-0.300700000000000))*(cj4))));
evalcond[2]=((((cj5)*(x578)))+(((cj5)*(x580)))+(((IkReal(-1.00000000000000))*(sj5)*(x573))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(cj5)*(x573)))+(((IkReal(-1.00000000000000))*(x574)))+(((IkReal(-1.00000000000000))*(x575)*(x580)))+(((IkReal(-1.00000000000000))*(x575)*(x578)))+(((IkReal(-0.0300000000000000))*(cj4))));
evalcond[4]=((IkReal(-6.01410000000000e-6))+(((x576)*(x580)))+(((IkReal(0.601420000000000))*(x579)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.601420000000000))*(x581)))+(((x576)*(x578)))+(((IkReal(0.0600000000000000))*(cj5)*(npz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x582=((npz)*(sj5));
IkReal x583=((cj5)*(npx));
IkReal x584=((IkReal(0.0300000000000000))*(sj4));
IkReal x585=((IkReal(0.300700000000000))*(cj4));
IkReal x586=((cj5)*(npy));
if( IKabs(((gconst28)*(((((npx)*(x582)))+(((IkReal(-1.00000000000000))*(x584)*(x586)))+(((x585)*(x586)))+(((IkReal(0.300710000000000))*(x586))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst28)*(((((IkReal(-1.00000000000000))*(x583)*(x585)))+(((npy)*(x582)))+(((IkReal(-0.300710000000000))*(x583)))+(((x583)*(x584))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst28)*(((((npx)*(x582)))+(((IkReal(-1.00000000000000))*(x584)*(x586)))+(((x585)*(x586)))+(((IkReal(0.300710000000000))*(x586)))))), ((gconst28)*(((((IkReal(-1.00000000000000))*(x583)*(x585)))+(((npy)*(x582)))+(((IkReal(-0.300710000000000))*(x583)))+(((x583)*(x584)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x587=IKsin(j7);
IkReal x588=IKcos(j7);
IkReal x589=((IkReal(1.00000000000000))*(npz));
IkReal x590=((IkReal(0.300700000000000))*(sj4));
IkReal x591=((IkReal(1.00000000000000))*(sj5));
IkReal x592=((IkReal(0.0600000000000000))*(sj5));
IkReal x593=((IkReal(0.0300000000000000))*(sj5));
IkReal x594=((npy)*(x588));
IkReal x595=((npy)*(x587));
IkReal x596=((npx)*(x587));
IkReal x597=((npx)*(x588));
evalcond[0]=((((cj4)*(x593)))+(((sj5)*(x590)))+(((IkReal(-1.00000000000000))*(x593)))+(x596)+(x594));
evalcond[1]=((IkReal(-0.300710000000000))+(((IkReal(0.0300000000000000))*(sj4)))+(x595)+(((IkReal(-0.300700000000000))*(cj4)))+(((IkReal(-1.00000000000000))*(x597))));
evalcond[2]=((((cj5)*(x594)))+(((IkReal(-1.00000000000000))*(sj5)*(x589)))+(((cj5)*(x596))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(cj5)*(x589)))+(((IkReal(-1.00000000000000))*(x590)))+(((IkReal(-1.00000000000000))*(x591)*(x594)))+(((IkReal(-0.0300000000000000))*(cj4)))+(((IkReal(-1.00000000000000))*(x591)*(x596))));
evalcond[4]=((IkReal(-6.01410000000000e-6))+(((x592)*(x596)))+(((IkReal(-0.601420000000000))*(x597)))+(((x592)*(x594)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.601420000000000))*(x595)))+(((IkReal(0.0600000000000000))*(cj5)*(npz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x598=((IkReal(-0.300710000000000))+(((IkReal(-1.00000000000000))*(npz)))+(((IkReal(0.0300000000000000))*(sj4)))+(((IkReal(-0.300700000000000))*(cj4))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j6)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.182646994100000))+(((IkReal(-0.0360846000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.179046994000000))*(cj4))));
evalcond[2]=x598;
evalcond[3]=x598;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst34;
gconst34=IKsign((((npy)*(npy))+((npx)*(npx))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst35;
IkReal x599=((IkReal(1.00000000000000))*(sj5));
gconst35=IKsign(((((IkReal(-1.00000000000000))*(x599)*((npx)*(npx))))+(((IkReal(-1.00000000000000))*(x599)*((npy)*(npy))))));
IkReal x600=((IkReal(1.00000000000000))*(sj5));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x600)*((npy)*(npy))))+(((IkReal(-1.00000000000000))*(x600)*((npx)*(npx)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x601=(sj5)*(sj5);
IkReal x602=((IkReal(0.0300000000000000))*(npx));
IkReal x603=((cj5)*(sj5));
IkReal x604=((IkReal(0.300700000000000))*(sj4));
IkReal x605=((IkReal(0.0300000000000000))*(npy));
IkReal x606=((cj4)*(x601));
IkReal x607=((npy)*(x601));
if( IKabs(((gconst35)*(((((IkReal(-1.00000000000000))*(x601)*(x602)))+(((IkReal(-1.00000000000000))*(x603)*(x605)))+(((npx)*(x601)*(x604)))+(((x602)*(x606)))+(((npy)*(x603)*(x604)))+(((cj4)*(x603)*(x605))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst35)*(((((IkReal(-1.00000000000000))*(npx)*(x603)*(x604)))+(((IkReal(-1.00000000000000))*(x601)*(x605)))+(((x604)*(x607)))+(((x602)*(x603)))+(((IkReal(-1.00000000000000))*(cj4)*(x602)*(x603)))+(((x605)*(x606))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst35)*(((((IkReal(-1.00000000000000))*(x601)*(x602)))+(((IkReal(-1.00000000000000))*(x603)*(x605)))+(((npx)*(x601)*(x604)))+(((x602)*(x606)))+(((npy)*(x603)*(x604)))+(((cj4)*(x603)*(x605)))))), ((gconst35)*(((((IkReal(-1.00000000000000))*(npx)*(x603)*(x604)))+(((IkReal(-1.00000000000000))*(x601)*(x605)))+(((x604)*(x607)))+(((x602)*(x603)))+(((IkReal(-1.00000000000000))*(cj4)*(x602)*(x603)))+(((x605)*(x606)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x608=IKcos(j7);
IkReal x609=IKsin(j7);
IkReal x610=((cj5)*(npy));
IkReal x611=((IkReal(0.300700000000000))*(sj4));
IkReal x612=((IkReal(1.00000000000000))*(sj5));
IkReal x613=((npx)*(sj5));
IkReal x614=((IkReal(0.0300000000000000))*(cj4));
IkReal x615=((cj5)*(npx));
IkReal x616=((npy)*(x608));
IkReal x617=((IkReal(0.0600000000000000))*(x609));
IkReal x618=((npy)*(x609));
IkReal x619=((npx)*(x609));
evalcond[0]=((((sj5)*(x611)))+(x619)+(x616)+(((IkReal(-0.0300000000000000))*(sj5)))+(((sj5)*(x614))));
evalcond[1]=((((x609)*(x615)))+(((x608)*(x613)))+(((x608)*(x610)))+(((IkReal(-1.00000000000000))*(x612)*(x618))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x612)*(x616)))+(((IkReal(-1.00000000000000))*(x612)*(x619)))+(((x608)*(x615)))+(((IkReal(-1.00000000000000))*(x611)))+(((IkReal(-1.00000000000000))*(x609)*(x610)))+(((IkReal(-1.00000000000000))*(x614))));
evalcond[3]=((((npx)*(x608)))+(((IkReal(-1.00000000000000))*(x618)))+(((IkReal(-1.00000000000000))*(cj5)*(x611)))+(((IkReal(-1.00000000000000))*(cj5)*(x614)))+(((IkReal(0.0300000000000000))*(cj5))));
evalcond[4]=((IkReal(-6.01410000000000e-6))+(((IkReal(-0.0600000000000000))*(x608)*(x615)))+(((x610)*(x617)))+(((IkReal(-1.00000000000000))*(pp)))+(((x613)*(x617)))+(((IkReal(0.0600000000000000))*(sj5)*(x616)))+(((IkReal(-0.601420000000000))*(npz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x620=((npx)*(sj5));
IkReal x621=((IkReal(0.300700000000000))*(sj4));
IkReal x622=((IkReal(0.0300000000000000))*(cj4));
IkReal x623=((cj5)*(npy));
IkReal x624=((npy)*(sj5));
IkReal x625=((cj5)*(npx));
if( IKabs(((gconst34)*(((((IkReal(-1.00000000000000))*(x620)*(x621)))+(((IkReal(-1.00000000000000))*(x620)*(x622)))+(((IkReal(-1.00000000000000))*(x621)*(x623)))+(((IkReal(-1.00000000000000))*(x622)*(x623)))+(((IkReal(0.0300000000000000))*(x620)))+(((IkReal(0.0300000000000000))*(x623))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst34)*(((((x621)*(x625)))+(((IkReal(-0.0300000000000000))*(x625)))+(((x622)*(x625)))+(((IkReal(-1.00000000000000))*(x621)*(x624)))+(((IkReal(0.0300000000000000))*(x624)))+(((IkReal(-1.00000000000000))*(x622)*(x624))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst34)*(((((IkReal(-1.00000000000000))*(x620)*(x621)))+(((IkReal(-1.00000000000000))*(x620)*(x622)))+(((IkReal(-1.00000000000000))*(x621)*(x623)))+(((IkReal(-1.00000000000000))*(x622)*(x623)))+(((IkReal(0.0300000000000000))*(x620)))+(((IkReal(0.0300000000000000))*(x623)))))), ((gconst34)*(((((x621)*(x625)))+(((IkReal(-0.0300000000000000))*(x625)))+(((x622)*(x625)))+(((IkReal(-1.00000000000000))*(x621)*(x624)))+(((IkReal(0.0300000000000000))*(x624)))+(((IkReal(-1.00000000000000))*(x622)*(x624)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x626=IKcos(j7);
IkReal x627=IKsin(j7);
IkReal x628=((cj5)*(npy));
IkReal x629=((IkReal(0.300700000000000))*(sj4));
IkReal x630=((IkReal(1.00000000000000))*(sj5));
IkReal x631=((npx)*(sj5));
IkReal x632=((IkReal(0.0300000000000000))*(cj4));
IkReal x633=((cj5)*(npx));
IkReal x634=((npy)*(x626));
IkReal x635=((IkReal(0.0600000000000000))*(x627));
IkReal x636=((npy)*(x627));
IkReal x637=((npx)*(x627));
evalcond[0]=((((sj5)*(x632)))+(((sj5)*(x629)))+(x637)+(x634)+(((IkReal(-0.0300000000000000))*(sj5))));
evalcond[1]=((((x626)*(x631)))+(((IkReal(-1.00000000000000))*(x630)*(x636)))+(((x626)*(x628)))+(((x627)*(x633))));
evalcond[2]=((IkReal(0.0300000000000000))+(((x626)*(x633)))+(((IkReal(-1.00000000000000))*(x627)*(x628)))+(((IkReal(-1.00000000000000))*(x629)))+(((IkReal(-1.00000000000000))*(x630)*(x634)))+(((IkReal(-1.00000000000000))*(x630)*(x637)))+(((IkReal(-1.00000000000000))*(x632))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj5)*(x632)))+(((npx)*(x626)))+(((IkReal(-1.00000000000000))*(cj5)*(x629)))+(((IkReal(-1.00000000000000))*(x636)))+(((IkReal(0.0300000000000000))*(cj5))));
evalcond[4]=((IkReal(-6.01410000000000e-6))+(((IkReal(-0.0600000000000000))*(x626)*(x633)))+(((x628)*(x635)))+(((IkReal(-1.00000000000000))*(pp)))+(((x631)*(x635)))+(((IkReal(0.0600000000000000))*(sj5)*(x634)))+(((IkReal(-0.601420000000000))*(npz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x638=((IkReal(0.300700000000000))*(cj4));
IkReal x639=((IkReal(0.0300000000000000))*(sj4));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j6, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.182646994100000))+(((IkReal(-0.0360846000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.179046994000000))*(cj4))));
evalcond[2]=((IkReal(-0.300710000000000))+(npz)+(((IkReal(-1.00000000000000))*(x638)))+(x639));
evalcond[3]=((IkReal(0.300710000000000))+(((IkReal(-1.00000000000000))*(npz)))+(x638)+(((IkReal(-1.00000000000000))*(x639))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst36;
gconst36=IKsign((((npy)*(npy))+((npx)*(npx))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst37;
gconst37=IKsign(((((sj5)*((npx)*(npx))))+(((sj5)*((npy)*(npy))))));
dummyeval[0]=((((sj5)*((npx)*(npx))))+(((sj5)*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x640=(sj5)*(sj5);
IkReal x641=((IkReal(0.0300000000000000))*(npx));
IkReal x642=((cj5)*(sj5));
IkReal x643=((IkReal(0.0300000000000000))*(npy));
IkReal x644=((cj4)*(x640));
IkReal x645=((IkReal(0.300700000000000))*(npx)*(sj4));
IkReal x646=((IkReal(0.300700000000000))*(npy)*(sj4));
if( IKabs(((gconst37)*(((((IkReal(-1.00000000000000))*(x641)*(x644)))+(((IkReal(-1.00000000000000))*(x642)*(x643)))+(((IkReal(-1.00000000000000))*(x640)*(x645)))+(((x640)*(x641)))+(((cj4)*(x642)*(x643)))+(((x642)*(x646))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst37)*(((((IkReal(-1.00000000000000))*(x640)*(x646)))+(((IkReal(-1.00000000000000))*(x643)*(x644)))+(((IkReal(-1.00000000000000))*(cj4)*(x641)*(x642)))+(((IkReal(-1.00000000000000))*(x642)*(x645)))+(((x640)*(x643)))+(((x641)*(x642))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst37)*(((((IkReal(-1.00000000000000))*(x641)*(x644)))+(((IkReal(-1.00000000000000))*(x642)*(x643)))+(((IkReal(-1.00000000000000))*(x640)*(x645)))+(((x640)*(x641)))+(((cj4)*(x642)*(x643)))+(((x642)*(x646)))))), ((gconst37)*(((((IkReal(-1.00000000000000))*(x640)*(x646)))+(((IkReal(-1.00000000000000))*(x643)*(x644)))+(((IkReal(-1.00000000000000))*(cj4)*(x641)*(x642)))+(((IkReal(-1.00000000000000))*(x642)*(x645)))+(((x640)*(x643)))+(((x641)*(x642)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x647=IKsin(j7);
IkReal x648=IKcos(j7);
IkReal x649=((IkReal(0.0600000000000000))*(cj5));
IkReal x650=((IkReal(0.300700000000000))*(sj4));
IkReal x651=((IkReal(1.00000000000000))*(sj5));
IkReal x652=((IkReal(0.0600000000000000))*(sj5));
IkReal x653=((IkReal(0.0300000000000000))*(sj5));
IkReal x654=((IkReal(0.0300000000000000))*(cj5));
IkReal x655=((npy)*(x648));
IkReal x656=((npy)*(x647));
IkReal x657=((npx)*(x647));
IkReal x658=((npx)*(x648));
evalcond[0]=((x655)+(x657)+(((IkReal(-1.00000000000000))*(x653)))+(((cj4)*(x653)))+(((sj5)*(x650))));
evalcond[1]=((((sj5)*(x656)))+(((IkReal(-1.00000000000000))*(x651)*(x658)))+(((cj5)*(x657)))+(((cj5)*(x655))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x651)*(x655)))+(((IkReal(-1.00000000000000))*(x650)))+(((IkReal(-0.0300000000000000))*(cj4)))+(((cj5)*(x656)))+(((IkReal(-1.00000000000000))*(cj5)*(x658)))+(((IkReal(-1.00000000000000))*(x651)*(x657))));
evalcond[3]=((x658)+(((IkReal(-1.00000000000000))*(x656)))+(((cj5)*(x650)))+(((IkReal(-1.00000000000000))*(x654)))+(((cj4)*(x654))));
evalcond[4]=((IkReal(-6.01410000000000e-6))+(((IkReal(-1.00000000000000))*(x649)*(x656)))+(((x652)*(x657)))+(((IkReal(-1.00000000000000))*(pp)))+(((x652)*(x655)))+(((x649)*(x658)))+(((IkReal(0.601420000000000))*(npz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x659=((IkReal(0.0300000000000000))*(cj4));
IkReal x660=((npx)*(sj5));
IkReal x661=((cj5)*(npy));
IkReal x662=((npy)*(sj5));
IkReal x663=((IkReal(0.300700000000000))*(sj4));
IkReal x664=((cj5)*(npx));
IkReal x665=((npx)*(x663));
if( IKabs(((gconst36)*(((((IkReal(-0.0300000000000000))*(x661)))+(((IkReal(-1.00000000000000))*(x659)*(x660)))+(((x661)*(x663)))+(((IkReal(-1.00000000000000))*(x660)*(x663)))+(((x659)*(x661)))+(((IkReal(0.0300000000000000))*(x660))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst36)*(((((IkReal(0.0300000000000000))*(x664)))+(((IkReal(-1.00000000000000))*(x663)*(x664)))+(((IkReal(-1.00000000000000))*(x659)*(x662)))+(((IkReal(-1.00000000000000))*(x662)*(x663)))+(((IkReal(-1.00000000000000))*(x659)*(x664)))+(((IkReal(0.0300000000000000))*(x662))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst36)*(((((IkReal(-0.0300000000000000))*(x661)))+(((IkReal(-1.00000000000000))*(x659)*(x660)))+(((x661)*(x663)))+(((IkReal(-1.00000000000000))*(x660)*(x663)))+(((x659)*(x661)))+(((IkReal(0.0300000000000000))*(x660)))))), ((gconst36)*(((((IkReal(0.0300000000000000))*(x664)))+(((IkReal(-1.00000000000000))*(x663)*(x664)))+(((IkReal(-1.00000000000000))*(x659)*(x662)))+(((IkReal(-1.00000000000000))*(x662)*(x663)))+(((IkReal(-1.00000000000000))*(x659)*(x664)))+(((IkReal(0.0300000000000000))*(x662)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x666=IKsin(j7);
IkReal x667=IKcos(j7);
IkReal x668=((IkReal(0.0600000000000000))*(cj5));
IkReal x669=((IkReal(0.300700000000000))*(sj4));
IkReal x670=((IkReal(1.00000000000000))*(sj5));
IkReal x671=((IkReal(0.0600000000000000))*(sj5));
IkReal x672=((IkReal(0.0300000000000000))*(sj5));
IkReal x673=((IkReal(0.0300000000000000))*(cj5));
IkReal x674=((npy)*(x667));
IkReal x675=((npy)*(x666));
IkReal x676=((npx)*(x666));
IkReal x677=((npx)*(x667));
evalcond[0]=((((IkReal(-1.00000000000000))*(x672)))+(((cj4)*(x672)))+(((sj5)*(x669)))+(x676)+(x674));
evalcond[1]=((((cj5)*(x674)))+(((sj5)*(x675)))+(((IkReal(-1.00000000000000))*(x670)*(x677)))+(((cj5)*(x676))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(cj5)*(x677)))+(((IkReal(-1.00000000000000))*(x669)))+(((IkReal(-1.00000000000000))*(x670)*(x674)))+(((IkReal(-0.0300000000000000))*(cj4)))+(((cj5)*(x675)))+(((IkReal(-1.00000000000000))*(x670)*(x676))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x675)))+(((cj4)*(x673)))+(((IkReal(-1.00000000000000))*(x673)))+(((cj5)*(x669)))+(x677));
evalcond[4]=((IkReal(-6.01410000000000e-6))+(((x668)*(x677)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x668)*(x675)))+(((x671)*(x674)))+(((x671)*(x676)))+(((IkReal(0.601420000000000))*(npz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x678=(sj5)*(sj5);
IkReal x679=((npx)*(sj5));
IkReal x680=((IkReal(0.0300000000000000))*(cj5));
IkReal x681=((npz)*(sj6));
IkReal x682=((IkReal(0.0300000000000000))*(cj4));
IkReal x683=((IkReal(0.300700000000000))*(sj4));
IkReal x684=((npy)*(sj5));
IkReal x685=((cj6)*(npy)*(x678));
IkReal x686=((cj6)*(npx)*(x678));
if( IKabs(((gconst1)*(((((IkReal(-1.00000000000000))*(cj5)*(x683)*(x684)))+(((x681)*(x684)))+(((IkReal(-1.00000000000000))*(cj4)*(x680)*(x684)))+(((IkReal(-1.00000000000000))*(x683)*(x686)))+(((x680)*(x684)))+(((IkReal(0.0300000000000000))*(x686)))+(((IkReal(-1.00000000000000))*(x682)*(x686))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((cj4)*(x679)*(x680)))+(((IkReal(-1.00000000000000))*(x679)*(x681)))+(((IkReal(-1.00000000000000))*(x682)*(x685)))+(((IkReal(-1.00000000000000))*(x679)*(x680)))+(((IkReal(-1.00000000000000))*(x683)*(x685)))+(((IkReal(0.0300000000000000))*(x685)))+(((cj5)*(x679)*(x683))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst1)*(((((IkReal(-1.00000000000000))*(cj5)*(x683)*(x684)))+(((x681)*(x684)))+(((IkReal(-1.00000000000000))*(cj4)*(x680)*(x684)))+(((IkReal(-1.00000000000000))*(x683)*(x686)))+(((x680)*(x684)))+(((IkReal(0.0300000000000000))*(x686)))+(((IkReal(-1.00000000000000))*(x682)*(x686)))))), ((gconst1)*(((((cj4)*(x679)*(x680)))+(((IkReal(-1.00000000000000))*(x679)*(x681)))+(((IkReal(-1.00000000000000))*(x682)*(x685)))+(((IkReal(-1.00000000000000))*(x679)*(x680)))+(((IkReal(-1.00000000000000))*(x683)*(x685)))+(((IkReal(0.0300000000000000))*(x685)))+(((cj5)*(x679)*(x683)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x687=IKcos(j7);
IkReal x688=IKsin(j7);
IkReal x689=((cj6)*(npz));
IkReal x690=((IkReal(0.300700000000000))*(sj4));
IkReal x691=((IkReal(0.0300000000000000))*(sj4));
IkReal x692=((IkReal(1.00000000000000))*(sj5));
IkReal x693=((npz)*(sj6));
IkReal x694=((cj5)*(cj6));
IkReal x695=((IkReal(0.0300000000000000))*(sj5));
IkReal x696=((IkReal(0.300700000000000))*(cj4));
IkReal x697=((IkReal(0.0300000000000000))*(cj4));
IkReal x698=((cj6)*(sj5));
IkReal x699=((IkReal(0.601420000000000))*(sj6));
IkReal x700=((IkReal(0.0600000000000000))*(sj5));
IkReal x701=((npy)*(x687));
IkReal x702=((npx)*(x687));
IkReal x703=((npx)*(x688));
IkReal x704=((npy)*(x688));
IkReal x705=((IkReal(1.00000000000000))*(x704));
evalcond[0]=((((IkReal(-1.00000000000000))*(x695)))+(((cj4)*(x695)))+(x703)+(x701)+(((sj5)*(x690))));
evalcond[1]=((IkReal(-0.300710000000000))+(x691)+(((sj6)*(x702)))+(((IkReal(-1.00000000000000))*(sj6)*(x705)))+(((IkReal(-1.00000000000000))*(x689)))+(((IkReal(-1.00000000000000))*(x696))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj6)*(x692)*(x704)))+(((x698)*(x702)))+(((cj5)*(x701)))+(((cj5)*(x703)))+(((sj5)*(x693))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x692)*(x703)))+(((x694)*(x702)))+(((IkReal(-1.00000000000000))*(x694)*(x705)))+(((IkReal(-1.00000000000000))*(x690)))+(((IkReal(-1.00000000000000))*(x692)*(x701)))+(((cj5)*(x693)))+(((IkReal(-1.00000000000000))*(x697))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x690)*(x694)))+(((IkReal(-1.00000000000000))*(x694)*(x697)))+(((sj6)*(x691)))+(((IkReal(-1.00000000000000))*(x705)))+(((IkReal(-1.00000000000000))*(sj6)*(x696)))+(((IkReal(0.0300000000000000))*(x694)))+(x702)+(((IkReal(-0.300710000000000))*(sj6))));
evalcond[5]=((IkReal(-6.01410000000000e-6))+(((IkReal(0.0600000000000000))*(x694)*(x704)))+(((x700)*(x703)))+(((IkReal(-1.00000000000000))*(x699)*(x704)))+(((IkReal(-0.601420000000000))*(x689)))+(((IkReal(-0.0600000000000000))*(cj5)*(x693)))+(((x700)*(x701)))+(((IkReal(-1.00000000000000))*(pp)))+(((x699)*(x702)))+(((IkReal(-0.0600000000000000))*(x694)*(x702))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x706=((IkReal(0.300700000000000))*(cj4));
IkReal x707=((npx)*(sj4));
IkReal x708=((cj6)*(npz));
IkReal x709=((npy)*(sj4));
IkReal x710=((IkReal(0.0300000000000000))*(sj5)*(sj6));
IkReal x711=((IkReal(0.300700000000000))*(sj5)*(sj6));
if( IKabs(((gconst0)*(((((npx)*(x710)))+(((IkReal(-1.00000000000000))*(npy)*(x708)))+(((IkReal(0.0300000000000000))*(x709)))+(((IkReal(-1.00000000000000))*(npy)*(x706)))+(((IkReal(-0.300710000000000))*(npy)))+(((IkReal(-1.00000000000000))*(cj4)*(npx)*(x710)))+(((IkReal(-1.00000000000000))*(x707)*(x711))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((npx)*(x706)))+(((IkReal(-1.00000000000000))*(x709)*(x711)))+(((IkReal(0.300710000000000))*(npx)))+(((IkReal(-0.0300000000000000))*(x707)))+(((npx)*(x708)))+(((npy)*(x710)))+(((IkReal(-1.00000000000000))*(cj4)*(npy)*(x710))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst0)*(((((npx)*(x710)))+(((IkReal(-1.00000000000000))*(npy)*(x708)))+(((IkReal(0.0300000000000000))*(x709)))+(((IkReal(-1.00000000000000))*(npy)*(x706)))+(((IkReal(-0.300710000000000))*(npy)))+(((IkReal(-1.00000000000000))*(cj4)*(npx)*(x710)))+(((IkReal(-1.00000000000000))*(x707)*(x711)))))), ((gconst0)*(((((npx)*(x706)))+(((IkReal(-1.00000000000000))*(x709)*(x711)))+(((IkReal(0.300710000000000))*(npx)))+(((IkReal(-0.0300000000000000))*(x707)))+(((npx)*(x708)))+(((npy)*(x710)))+(((IkReal(-1.00000000000000))*(cj4)*(npy)*(x710)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x712=IKcos(j7);
IkReal x713=IKsin(j7);
IkReal x714=((cj6)*(npz));
IkReal x715=((IkReal(0.300700000000000))*(sj4));
IkReal x716=((IkReal(0.0300000000000000))*(sj4));
IkReal x717=((IkReal(1.00000000000000))*(sj5));
IkReal x718=((npz)*(sj6));
IkReal x719=((cj5)*(cj6));
IkReal x720=((IkReal(0.0300000000000000))*(sj5));
IkReal x721=((IkReal(0.300700000000000))*(cj4));
IkReal x722=((IkReal(0.0300000000000000))*(cj4));
IkReal x723=((cj6)*(sj5));
IkReal x724=((IkReal(0.601420000000000))*(sj6));
IkReal x725=((IkReal(0.0600000000000000))*(sj5));
IkReal x726=((npy)*(x712));
IkReal x727=((npx)*(x712));
IkReal x728=((npx)*(x713));
IkReal x729=((npy)*(x713));
IkReal x730=((IkReal(1.00000000000000))*(x729));
evalcond[0]=((((sj5)*(x715)))+(x726)+(x728)+(((IkReal(-1.00000000000000))*(x720)))+(((cj4)*(x720))));
evalcond[1]=((IkReal(-0.300710000000000))+(((sj6)*(x727)))+(((IkReal(-1.00000000000000))*(x721)))+(((IkReal(-1.00000000000000))*(sj6)*(x730)))+(x716)+(((IkReal(-1.00000000000000))*(x714))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj6)*(x717)*(x729)))+(((x723)*(x727)))+(((sj5)*(x718)))+(((cj5)*(x726)))+(((cj5)*(x728))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x715)))+(((IkReal(-1.00000000000000))*(x722)))+(((cj5)*(x718)))+(((IkReal(-1.00000000000000))*(x717)*(x726)))+(((IkReal(-1.00000000000000))*(x717)*(x728)))+(((IkReal(-1.00000000000000))*(x719)*(x730)))+(((x719)*(x727))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x715)*(x719)))+(((IkReal(-1.00000000000000))*(x719)*(x722)))+(x727)+(((IkReal(-1.00000000000000))*(sj6)*(x721)))+(((sj6)*(x716)))+(((IkReal(0.0300000000000000))*(x719)))+(((IkReal(-1.00000000000000))*(x730)))+(((IkReal(-0.300710000000000))*(sj6))));
evalcond[5]=((IkReal(-6.01410000000000e-6))+(((IkReal(0.0600000000000000))*(x719)*(x729)))+(((IkReal(-0.0600000000000000))*(x719)*(x727)))+(((x725)*(x726)))+(((IkReal(-1.00000000000000))*(pp)))+(((x725)*(x728)))+(((IkReal(-0.0600000000000000))*(cj5)*(x718)))+(((IkReal(-1.00000000000000))*(x724)*(x729)))+(((x724)*(x727)))+(((IkReal(-0.601420000000000))*(x714))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
IkReal x731=((IkReal(0.0300000000000000))*(sj5));
if( IKabs(npy) < IKFAST_ATAN2_MAGTHRESH && IKabs(npx) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x732=((IkReal(1.00000000000000))*(IKatan2(npy, npx)));
if( ((((npy)*(npy))+((npx)*(npx)))) < (IkReal)-0.00001 )
    continue;
if( (((((IKabs(IKabs(IKsqrt((((npy)*(npy))+((npx)*(npx)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((npy)*(npy))+((npx)*(npx))))))):(IkReal)1.0e30))*(((((cj4)*(x731)))+(((IkReal(0.300700000000000))*(sj4)*(sj5)))+(((IkReal(-1.00000000000000))*(x731))))))) < -1-IKFAST_SINCOS_THRESH || (((((IKabs(IKabs(IKsqrt((((npy)*(npy))+((npx)*(npx)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((npy)*(npy))+((npx)*(npx))))))):(IkReal)1.0e30))*(((((cj4)*(x731)))+(((IkReal(0.300700000000000))*(sj4)*(sj5)))+(((IkReal(-1.00000000000000))*(x731))))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x733=IKasin(((((IKabs(IKabs(IKsqrt((((npy)*(npy))+((npx)*(npx)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((npy)*(npy))+((npx)*(npx))))))):(IkReal)1.0e30))*(((((cj4)*(x731)))+(((IkReal(0.300700000000000))*(sj4)*(sj5)))+(((IkReal(-1.00000000000000))*(x731)))))));
j7array[0]=((((IkReal(-1.00000000000000))*(x732)))+(((IkReal(-1.00000000000000))*(x733))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((IkReal(3.14159265358979))+(x733)+(((IkReal(-1.00000000000000))*(x732))));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[2];
IkReal x734=(sj5)*(sj5);
IkReal x735=(cj5)*(cj5);
IkReal x736=(npx)*(npx);
IkReal x737=IKcos(j7);
IkReal x738=(npy)*(npy);
IkReal x739=IKsin(j7);
IkReal x740=((npx)*(sj5));
IkReal x741=((IkReal(0.300700000000000))*(sj4));
IkReal x742=((npx)*(npy));
IkReal x743=((IkReal(0.0300000000000000))*(cj4));
IkReal x744=((npy)*(sj5));
IkReal x745=((IkReal(1.00000000000000))*(x738));
evalcond[0]=((((IkReal(-0.0300000000000000))*(x740)))+(((x740)*(x741)))+(((x737)*(((((x735)*(x742)))+(((x734)*(x742)))))))+(((x740)*(x743)))+(((x739)*(((((x734)*(x736)))+(((x735)*(x736))))))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x743)*(x744)))+(((IkReal(-1.00000000000000))*(x741)*(x744)))+(((IkReal(0.0300000000000000))*(x744)))+(((x739)*(((((IkReal(-1.00000000000000))*(x734)*(x742)))+(((IkReal(-1.00000000000000))*(x735)*(x742)))))))+(((x737)*(((((IkReal(-1.00000000000000))*(x734)*(x745)))+(((IkReal(-1.00000000000000))*(x735)*(x745))))))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst39;
IkReal x746=((IkReal(0.0300000000000000))*(sj4));
IkReal x747=((npy)*(sj7));
IkReal x748=((cj7)*(npx));
IkReal x749=((IkReal(0.300700000000000))*(cj4));
IkReal x750=((cj5)*(npz));
gconst39=IKsign(((((IkReal(-0.0300000000000000))*(x750)))+(((x747)*(x749)))+(((IkReal(0.300700000000000))*(sj4)*(x750)))+(((IkReal(0.0300000000000000))*(cj4)*(x750)))+(((IkReal(-0.300710000000000))*(x748)))+(((IkReal(-1.00000000000000))*(x746)*(x747)))+(((IkReal(0.300710000000000))*(x747)))+(((x746)*(x748)))+(((IkReal(-1.00000000000000))*(x748)*(x749)))));
IkReal x751=((cj7)*(npx));
IkReal x752=((IkReal(10.0233333333333))*(cj4));
IkReal x753=((cj5)*(npz));
IkReal x754=((npy)*(sj7));
dummyeval[0]=((((IkReal(-1.00000000000000))*(sj4)*(x754)))+(((IkReal(10.0236666666667))*(x754)))+(((IkReal(-1.00000000000000))*(x751)*(x752)))+(((sj4)*(x751)))+(((IkReal(-10.0236666666667))*(x751)))+(((IkReal(-1.00000000000000))*(x753)))+(((cj4)*(x753)))+(((IkReal(10.0233333333333))*(sj4)*(x753)))+(((x752)*(x754))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst38;
IkReal x755=((IkReal(1.00000000000000))*(sj5));
gconst38=IKsign(((((IkReal(-1.00000000000000))*(x755)*((cj7)*(cj7))*((npx)*(npx))))+(((IkReal(2.00000000000000))*(cj7)*(npx)*(npy)*(sj5)*(sj7)))+(((IkReal(-1.00000000000000))*(x755)*((npz)*(npz))))+(((IkReal(-1.00000000000000))*(x755)*((npy)*(npy))*((sj7)*(sj7))))));
IkReal x756=((IkReal(1.00000000000000))*(sj5));
dummyeval[0]=((((IkReal(2.00000000000000))*(cj7)*(npx)*(npy)*(sj5)*(sj7)))+(((IkReal(-1.00000000000000))*(x756)*((cj7)*(cj7))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*(x756)*((npz)*(npz))))+(((IkReal(-1.00000000000000))*(x756)*((npy)*(npy))*((sj7)*(sj7)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x757=((((cj7)*(npy)))+(((npx)*(sj7))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.182646994100000))+(((IkReal(-0.0360846000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.179046994000000))*(cj4))));
evalcond[2]=x757;
evalcond[3]=x757;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst41;
IkReal x758=((cj7)*(npx));
IkReal x759=((IkReal(0.300700000000000))*(sj4));
IkReal x760=((IkReal(0.0300000000000000))*(cj4));
IkReal x761=((npy)*(sj7));
gconst41=IKsign(((((IkReal(-1.00000000000000))*(x758)*(x760)))+(((x759)*(x761)))+(((IkReal(-1.00000000000000))*(x758)*(x759)))+(((IkReal(0.0300000000000000))*(x758)))+(((IkReal(0.0300000000000000))*(npz)*(sj4)))+(((IkReal(-0.0300000000000000))*(x761)))+(((IkReal(-0.300700000000000))*(cj4)*(npz)))+(((x760)*(x761)))+(((IkReal(-0.300710000000000))*(npz)))));
IkReal x762=((npy)*(sj7));
IkReal x763=((cj7)*(npx));
IkReal x764=((IkReal(10.0233333333333))*(sj4));
dummyeval[0]=((((IkReal(-1.00000000000000))*(cj4)*(x763)))+(((cj4)*(x762)))+(((IkReal(-1.00000000000000))*(x762)))+(x763)+(((IkReal(-10.0236666666667))*(npz)))+(((IkReal(-1.00000000000000))*(x763)*(x764)))+(((x762)*(x764)))+(((IkReal(-10.0233333333333))*(cj4)*(npz)))+(((npz)*(sj4))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst40;
gconst40=IKsign(((((IkReal(2.00000000000000))*(cj7)*(npx)*(npy)*(sj7)))+(((IkReal(-1.00000000000000))*((cj7)*(cj7))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy))*((sj7)*(sj7))))+(((IkReal(-1.00000000000000))*((npz)*(npz))))));
dummyeval[0]=((((IkReal(2.00000000000000))*(cj7)*(npx)*(npy)*(sj7)))+(((IkReal(-1.00000000000000))*((cj7)*(cj7))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy))*((sj7)*(sj7))))+(((IkReal(-1.00000000000000))*((npz)*(npz)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x765=((IkReal(0.300700000000000))*(cj4));
IkReal x766=((cj7)*(npx));
IkReal x767=((npy)*(sj7));
IkReal x768=((IkReal(0.300700000000000))*(sj4));
IkReal x769=((IkReal(0.0300000000000000))*(npz));
IkReal x770=((IkReal(0.0300000000000000))*(x766));
IkReal x771=((IkReal(0.0300000000000000))*(x767));
if( IKabs(((gconst40)*(((((sj4)*(x770)))+(((IkReal(-0.300710000000000))*(x766)))+(((IkReal(-1.00000000000000))*(npz)*(x768)))+(((IkReal(0.300710000000000))*(x767)))+(x769)+(((IkReal(-1.00000000000000))*(cj4)*(x769)))+(((IkReal(-1.00000000000000))*(sj4)*(x771)))+(((x765)*(x767)))+(((IkReal(-1.00000000000000))*(x765)*(x766))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst40)*(((((IkReal(-1.00000000000000))*(sj4)*(x769)))+(((IkReal(-1.00000000000000))*(x771)))+(((npz)*(x765)))+(((cj4)*(x771)))+(((IkReal(0.300710000000000))*(npz)))+(((x767)*(x768)))+(((IkReal(-1.00000000000000))*(cj4)*(x770)))+(x770)+(((IkReal(-1.00000000000000))*(x766)*(x768))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst40)*(((((sj4)*(x770)))+(((IkReal(-0.300710000000000))*(x766)))+(((IkReal(-1.00000000000000))*(npz)*(x768)))+(((IkReal(0.300710000000000))*(x767)))+(x769)+(((IkReal(-1.00000000000000))*(cj4)*(x769)))+(((IkReal(-1.00000000000000))*(sj4)*(x771)))+(((x765)*(x767)))+(((IkReal(-1.00000000000000))*(x765)*(x766)))))), ((gconst40)*(((((IkReal(-1.00000000000000))*(sj4)*(x769)))+(((IkReal(-1.00000000000000))*(x771)))+(((npz)*(x765)))+(((cj4)*(x771)))+(((IkReal(0.300710000000000))*(npz)))+(((x767)*(x768)))+(((IkReal(-1.00000000000000))*(cj4)*(x770)))+(x770)+(((IkReal(-1.00000000000000))*(x766)*(x768)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[5];
IkReal x772=IKsin(j6);
IkReal x773=IKcos(j6);
IkReal x774=((cj7)*(npx));
IkReal x775=((IkReal(0.300700000000000))*(sj4));
IkReal x776=((IkReal(0.0300000000000000))*(sj4));
IkReal x777=((IkReal(1.00000000000000))*(npz));
IkReal x778=((IkReal(0.300700000000000))*(cj4));
IkReal x779=((npy)*(sj7));
IkReal x780=((IkReal(1.00000000000000))*(x779));
IkReal x781=((npz)*(x772));
IkReal x782=((IkReal(0.0300000000000000))*(x772));
IkReal x783=((IkReal(0.0600000000000000))*(x773));
IkReal x784=((IkReal(0.0300000000000000))*(x773));
IkReal x785=((IkReal(0.601420000000000))*(x772));
evalcond[0]=((IkReal(-0.300710000000000))+(((x772)*(x774)))+(((IkReal(-1.00000000000000))*(x772)*(x780)))+(((IkReal(-1.00000000000000))*(x773)*(x777)))+(x776)+(((IkReal(-1.00000000000000))*(x778))));
evalcond[1]=((((cj4)*(x782)))+(((IkReal(-1.00000000000000))*(x782)))+(((IkReal(-1.00000000000000))*(x773)*(x778)))+(((x772)*(x775)))+(((x773)*(x776)))+(((IkReal(-0.300710000000000))*(x773)))+(((IkReal(-1.00000000000000))*(x777))));
evalcond[2]=((IkReal(0.0300000000000000))+(x781)+(((x773)*(x774)))+(((IkReal(-1.00000000000000))*(x775)))+(((IkReal(-1.00000000000000))*(x773)*(x780)))+(((IkReal(-0.0300000000000000))*(cj4))));
evalcond[3]=((((x772)*(x776)))+(((IkReal(-1.00000000000000))*(x780)))+(x784)+(((IkReal(-0.300710000000000))*(x772)))+(((IkReal(-1.00000000000000))*(x773)*(x775)))+(((IkReal(-1.00000000000000))*(cj4)*(x784)))+(x774)+(((IkReal(-1.00000000000000))*(x772)*(x778))));
evalcond[4]=((IkReal(-6.01410000000000e-6))+(((x779)*(x783)))+(((IkReal(-1.00000000000000))*(x779)*(x785)))+(((IkReal(-1.00000000000000))*(pp)))+(((x774)*(x785)))+(((IkReal(-1.00000000000000))*(x774)*(x783)))+(((IkReal(-0.0600000000000000))*(x781)))+(((IkReal(-0.601420000000000))*(npz)*(x773))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x786=(sj4)*(sj4);
IkReal x787=(cj4)*(cj4);
IkReal x788=((IkReal(0.0180420000000000))*(sj4));
if( IKabs(((gconst41)*(((IkReal(0.00902130000000000))+(((npy)*(npz)*(sj7)))+(((IkReal(-0.0895204900000000))*(cj4)*(sj4)))+(((IkReal(-3.00000000000000e-7))*(cj4)))+(((IkReal(-0.00902100000000000))*(x787)))+(((IkReal(-1.00000000000000))*(cj7)*(npx)*(npz)))+(((IkReal(-0.0913234970000000))*(sj4)))+(((IkReal(0.00902100000000000))*(x786))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst41)*(((IkReal(-0.000900000000000000))+(((IkReal(-1.00000000000000))*(cj4)*(x788)))+(x788)+(((IkReal(0.00180000000000000))*(cj4)))+(((IkReal(-0.000900000000000000))*(x787)))+(((IkReal(-0.0904204900000000))*(x786)))+((npz)*(npz)))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst41)*(((IkReal(0.00902130000000000))+(((npy)*(npz)*(sj7)))+(((IkReal(-0.0895204900000000))*(cj4)*(sj4)))+(((IkReal(-3.00000000000000e-7))*(cj4)))+(((IkReal(-0.00902100000000000))*(x787)))+(((IkReal(-1.00000000000000))*(cj7)*(npx)*(npz)))+(((IkReal(-0.0913234970000000))*(sj4)))+(((IkReal(0.00902100000000000))*(x786)))))), ((gconst41)*(((IkReal(-0.000900000000000000))+(((IkReal(-1.00000000000000))*(cj4)*(x788)))+(x788)+(((IkReal(0.00180000000000000))*(cj4)))+(((IkReal(-0.000900000000000000))*(x787)))+(((IkReal(-0.0904204900000000))*(x786)))+((npz)*(npz))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[5];
IkReal x789=IKsin(j6);
IkReal x790=IKcos(j6);
IkReal x791=((cj7)*(npx));
IkReal x792=((IkReal(0.300700000000000))*(sj4));
IkReal x793=((IkReal(0.0300000000000000))*(sj4));
IkReal x794=((IkReal(1.00000000000000))*(npz));
IkReal x795=((IkReal(0.300700000000000))*(cj4));
IkReal x796=((npy)*(sj7));
IkReal x797=((IkReal(1.00000000000000))*(x796));
IkReal x798=((npz)*(x789));
IkReal x799=((IkReal(0.0300000000000000))*(x789));
IkReal x800=((IkReal(0.0600000000000000))*(x790));
IkReal x801=((IkReal(0.0300000000000000))*(x790));
IkReal x802=((IkReal(0.601420000000000))*(x789));
evalcond[0]=((IkReal(-0.300710000000000))+(((IkReal(-1.00000000000000))*(x789)*(x797)))+(((IkReal(-1.00000000000000))*(x795)))+(x793)+(((IkReal(-1.00000000000000))*(x790)*(x794)))+(((x789)*(x791))));
evalcond[1]=((((x790)*(x793)))+(((x789)*(x792)))+(((IkReal(-1.00000000000000))*(x790)*(x795)))+(((IkReal(-1.00000000000000))*(x794)))+(((cj4)*(x799)))+(((IkReal(-1.00000000000000))*(x799)))+(((IkReal(-0.300710000000000))*(x790))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x792)))+(((x790)*(x791)))+(x798)+(((IkReal(-0.0300000000000000))*(cj4)))+(((IkReal(-1.00000000000000))*(x790)*(x797))));
evalcond[3]=((x801)+(((IkReal(-0.300710000000000))*(x789)))+(((IkReal(-1.00000000000000))*(x790)*(x792)))+(((IkReal(-1.00000000000000))*(x797)))+(x791)+(((IkReal(-1.00000000000000))*(x789)*(x795)))+(((x789)*(x793)))+(((IkReal(-1.00000000000000))*(cj4)*(x801))));
evalcond[4]=((IkReal(-6.01410000000000e-6))+(((IkReal(-0.601420000000000))*(npz)*(x790)))+(((IkReal(-1.00000000000000))*(x796)*(x802)))+(((IkReal(-1.00000000000000))*(pp)))+(((x791)*(x802)))+(((IkReal(-1.00000000000000))*(x791)*(x800)))+(((IkReal(-0.0600000000000000))*(x798)))+(((x796)*(x800))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x803=((cj7)*(npy));
IkReal x804=((npx)*(sj7));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j5, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.182646994100000))+(((IkReal(-0.0360846000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.179046994000000))*(cj4))));
evalcond[2]=((x804)+(x803));
evalcond[3]=((((IkReal(-1.00000000000000))*(x804)))+(((IkReal(-1.00000000000000))*(x803))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst43;
IkReal x805=((cj7)*(npx));
IkReal x806=((IkReal(0.0300000000000000))*(sj4));
IkReal x807=((IkReal(0.300700000000000))*(cj4));
IkReal x808=((npy)*(sj7));
IkReal x809=((IkReal(0.0300000000000000))*(npz));
gconst43=IKsign(((x809)+(((IkReal(-0.300710000000000))*(x805)))+(((x807)*(x808)))+(((IkReal(-1.00000000000000))*(cj4)*(x809)))+(((IkReal(0.300710000000000))*(x808)))+(((IkReal(-1.00000000000000))*(x805)*(x807)))+(((x805)*(x806)))+(((IkReal(-1.00000000000000))*(x806)*(x808)))+(((IkReal(-0.300700000000000))*(npz)*(sj4)))));
IkReal x810=((cj7)*(npx));
IkReal x811=((IkReal(10.0233333333333))*(cj4));
IkReal x812=((npy)*(sj7));
dummyeval[0]=((((IkReal(-10.0233333333333))*(npz)*(sj4)))+(npz)+(((sj4)*(x810)))+(((IkReal(10.0236666666667))*(x812)))+(((x811)*(x812)))+(((IkReal(-1.00000000000000))*(x810)*(x811)))+(((IkReal(-1.00000000000000))*(cj4)*(npz)))+(((IkReal(-10.0236666666667))*(x810)))+(((IkReal(-1.00000000000000))*(sj4)*(x812))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst42;
gconst42=IKsign(((((IkReal(2.00000000000000))*(cj7)*(npx)*(npy)*(sj7)))+(((IkReal(-1.00000000000000))*((cj7)*(cj7))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy))*((sj7)*(sj7))))+(((IkReal(-1.00000000000000))*((npz)*(npz))))));
dummyeval[0]=((((IkReal(2.00000000000000))*(cj7)*(npx)*(npy)*(sj7)))+(((IkReal(-1.00000000000000))*((cj7)*(cj7))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy))*((sj7)*(sj7))))+(((IkReal(-1.00000000000000))*((npz)*(npz)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x813=((IkReal(0.300700000000000))*(cj4));
IkReal x814=((cj7)*(npx));
IkReal x815=((npy)*(sj7));
IkReal x816=((IkReal(0.0300000000000000))*(npz));
IkReal x817=((IkReal(0.300700000000000))*(sj4));
IkReal x818=((IkReal(0.0300000000000000))*(x814));
IkReal x819=((IkReal(0.0300000000000000))*(x815));
if( IKabs(((gconst42)*(((((IkReal(-1.00000000000000))*(x813)*(x814)))+(((npz)*(x817)))+(((IkReal(-0.300710000000000))*(x814)))+(((IkReal(-1.00000000000000))*(sj4)*(x819)))+(((IkReal(-1.00000000000000))*(x816)))+(((IkReal(0.300710000000000))*(x815)))+(((sj4)*(x818)))+(((x813)*(x815)))+(((cj4)*(x816))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst42)*(((((IkReal(-1.00000000000000))*(sj4)*(x816)))+(((npz)*(x813)))+(((IkReal(0.300710000000000))*(npz)))+(((cj4)*(x818)))+(((IkReal(-1.00000000000000))*(x818)))+(((x814)*(x817)))+(((IkReal(-1.00000000000000))*(x815)*(x817)))+(((IkReal(-1.00000000000000))*(cj4)*(x819)))+(x819))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst42)*(((((IkReal(-1.00000000000000))*(x813)*(x814)))+(((npz)*(x817)))+(((IkReal(-0.300710000000000))*(x814)))+(((IkReal(-1.00000000000000))*(sj4)*(x819)))+(((IkReal(-1.00000000000000))*(x816)))+(((IkReal(0.300710000000000))*(x815)))+(((sj4)*(x818)))+(((x813)*(x815)))+(((cj4)*(x816)))))), ((gconst42)*(((((IkReal(-1.00000000000000))*(sj4)*(x816)))+(((npz)*(x813)))+(((IkReal(0.300710000000000))*(npz)))+(((cj4)*(x818)))+(((IkReal(-1.00000000000000))*(x818)))+(((x814)*(x817)))+(((IkReal(-1.00000000000000))*(x815)*(x817)))+(((IkReal(-1.00000000000000))*(cj4)*(x819)))+(x819)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[5];
IkReal x820=IKsin(j6);
IkReal x821=IKcos(j6);
IkReal x822=((cj7)*(npx));
IkReal x823=((IkReal(0.300700000000000))*(sj4));
IkReal x824=((IkReal(0.0300000000000000))*(sj4));
IkReal x825=((npy)*(sj7));
IkReal x826=((IkReal(0.300700000000000))*(cj4));
IkReal x827=((IkReal(1.00000000000000))*(x820));
IkReal x828=((IkReal(1.00000000000000))*(x821));
IkReal x829=((IkReal(0.0300000000000000))*(x820));
IkReal x830=((IkReal(0.0600000000000000))*(x821));
IkReal x831=((IkReal(0.0300000000000000))*(x821));
IkReal x832=((IkReal(0.601420000000000))*(x820));
evalcond[0]=((IkReal(-0.300710000000000))+(x824)+(((IkReal(-1.00000000000000))*(npz)*(x828)))+(((x820)*(x822)))+(((IkReal(-1.00000000000000))*(x826)))+(((IkReal(-1.00000000000000))*(x825)*(x827))));
evalcond[1]=((x829)+(((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-1.00000000000000))*(x821)*(x826)))+(((IkReal(-1.00000000000000))*(x820)*(x823)))+(((IkReal(-1.00000000000000))*(cj4)*(x829)))+(((x821)*(x824)))+(((IkReal(-0.300710000000000))*(x821))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x822)*(x828)))+(((IkReal(-1.00000000000000))*(npz)*(x827)))+(((x821)*(x825)))+(((IkReal(-0.0300000000000000))*(cj4)))+(((IkReal(-1.00000000000000))*(x823))));
evalcond[3]=((x822)+(((IkReal(-1.00000000000000))*(x825)))+(((cj4)*(x831)))+(((x820)*(x824)))+(((IkReal(-1.00000000000000))*(x820)*(x826)))+(((IkReal(-1.00000000000000))*(x831)))+(((IkReal(-0.300710000000000))*(x820)))+(((x821)*(x823))));
evalcond[4]=((IkReal(-6.01410000000000e-6))+(((IkReal(-1.00000000000000))*(x825)*(x832)))+(((IkReal(0.0600000000000000))*(npz)*(x820)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.601420000000000))*(npz)*(x821)))+(((IkReal(-1.00000000000000))*(x825)*(x830)))+(((x822)*(x830)))+(((x822)*(x832))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x833=(cj4)*(cj4);
IkReal x834=(sj4)*(sj4);
IkReal x835=((cj4)*(sj4));
if( IKabs(((gconst43)*(((IkReal(-0.0904265041000000))+(((IkReal(-0.0904204900000000))*(x833)))+(((IkReal(-0.180846994000000))*(cj4)))+(((IkReal(0.0180420000000000))*(x835)))+((npz)*(npz))+(((IkReal(-0.000900000000000000))*(x834)))+(((IkReal(0.0180426000000000))*(sj4))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst43)*(((IkReal(-0.00902130000000000))+(((IkReal(0.0895204900000000))*(x835)))+(((IkReal(0.00902100000000000))*(x833)))+(((IkReal(-1.00000000000000))*(npy)*(npz)*(sj7)))+(((IkReal(0.0913234970000000))*(sj4)))+(((cj7)*(npx)*(npz)))+(((IkReal(-0.00902100000000000))*(x834)))+(((IkReal(3.00000000000000e-7))*(cj4))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst43)*(((IkReal(-0.0904265041000000))+(((IkReal(-0.0904204900000000))*(x833)))+(((IkReal(-0.180846994000000))*(cj4)))+(((IkReal(0.0180420000000000))*(x835)))+((npz)*(npz))+(((IkReal(-0.000900000000000000))*(x834)))+(((IkReal(0.0180426000000000))*(sj4)))))), ((gconst43)*(((IkReal(-0.00902130000000000))+(((IkReal(0.0895204900000000))*(x835)))+(((IkReal(0.00902100000000000))*(x833)))+(((IkReal(-1.00000000000000))*(npy)*(npz)*(sj7)))+(((IkReal(0.0913234970000000))*(sj4)))+(((cj7)*(npx)*(npz)))+(((IkReal(-0.00902100000000000))*(x834)))+(((IkReal(3.00000000000000e-7))*(cj4)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[5];
IkReal x836=IKsin(j6);
IkReal x837=IKcos(j6);
IkReal x838=((cj7)*(npx));
IkReal x839=((IkReal(0.300700000000000))*(sj4));
IkReal x840=((IkReal(0.0300000000000000))*(sj4));
IkReal x841=((npy)*(sj7));
IkReal x842=((IkReal(0.300700000000000))*(cj4));
IkReal x843=((IkReal(1.00000000000000))*(x836));
IkReal x844=((IkReal(1.00000000000000))*(x837));
IkReal x845=((IkReal(0.0300000000000000))*(x836));
IkReal x846=((IkReal(0.0600000000000000))*(x837));
IkReal x847=((IkReal(0.0300000000000000))*(x837));
IkReal x848=((IkReal(0.601420000000000))*(x836));
evalcond[0]=((IkReal(-0.300710000000000))+(((IkReal(-1.00000000000000))*(x841)*(x843)))+(x840)+(((x836)*(x838)))+(((IkReal(-1.00000000000000))*(npz)*(x844)))+(((IkReal(-1.00000000000000))*(x842))));
evalcond[1]=((((IkReal(-1.00000000000000))*(npz)))+(((x837)*(x840)))+(((IkReal(-0.300710000000000))*(x837)))+(((IkReal(-1.00000000000000))*(x837)*(x842)))+(x845)+(((IkReal(-1.00000000000000))*(cj4)*(x845)))+(((IkReal(-1.00000000000000))*(x836)*(x839))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x838)*(x844)))+(((x837)*(x841)))+(((IkReal(-1.00000000000000))*(x839)))+(((IkReal(-0.0300000000000000))*(cj4)))+(((IkReal(-1.00000000000000))*(npz)*(x843))));
evalcond[3]=((((cj4)*(x847)))+(((x837)*(x839)))+(((IkReal(-1.00000000000000))*(x841)))+(((IkReal(-1.00000000000000))*(x836)*(x842)))+(((x836)*(x840)))+(((IkReal(-0.300710000000000))*(x836)))+(x838)+(((IkReal(-1.00000000000000))*(x847))));
evalcond[4]=((IkReal(-6.01410000000000e-6))+(((IkReal(0.0600000000000000))*(npz)*(x836)))+(((IkReal(-1.00000000000000))*(x841)*(x846)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x841)*(x848)))+(((x838)*(x846)))+(((IkReal(-0.601420000000000))*(npz)*(x837)))+(((x838)*(x848))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x849=((IkReal(0.300710000000000))*(sj5));
IkReal x850=((cj7)*(npx));
IkReal x851=((npy)*(sj7));
IkReal x852=((cj5)*(cj7));
IkReal x853=((cj5)*(npx)*(npy));
IkReal x854=((IkReal(0.0300000000000000))*(sj4)*(sj5));
IkReal x855=((IkReal(0.300700000000000))*(cj4)*(sj5));
if( IKabs(((gconst38)*(((((x849)*(x851)))+(((npy)*(npz)*(x852)))+(((IkReal(-1.00000000000000))*(x851)*(x854)))+(((x850)*(x854)))+(((IkReal(-1.00000000000000))*(x849)*(x850)))+(((x851)*(x855)))+(((cj5)*(npx)*(npz)*(sj7)))+(((IkReal(-1.00000000000000))*(x850)*(x855))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst38)*(((((npz)*(x855)))+(((npz)*(x849)))+(((IkReal(-1.00000000000000))*(cj5)*(npx)*(sj7)*(x851)))+(((cj5)*(npx)*(sj7)*(x850)))+(((IkReal(-1.00000000000000))*(npy)*(x851)*(x852)))+(((npy)*(x850)*(x852)))+(((IkReal(-1.00000000000000))*(npz)*(x854))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst38)*(((((x849)*(x851)))+(((npy)*(npz)*(x852)))+(((IkReal(-1.00000000000000))*(x851)*(x854)))+(((x850)*(x854)))+(((IkReal(-1.00000000000000))*(x849)*(x850)))+(((x851)*(x855)))+(((cj5)*(npx)*(npz)*(sj7)))+(((IkReal(-1.00000000000000))*(x850)*(x855)))))), ((gconst38)*(((((npz)*(x855)))+(((npz)*(x849)))+(((IkReal(-1.00000000000000))*(cj5)*(npx)*(sj7)*(x851)))+(((cj5)*(npx)*(sj7)*(x850)))+(((IkReal(-1.00000000000000))*(npy)*(x851)*(x852)))+(((npy)*(x850)*(x852)))+(((IkReal(-1.00000000000000))*(npz)*(x854)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x856=IKsin(j6);
IkReal x857=IKcos(j6);
IkReal x858=((IkReal(0.0300000000000000))*(cj4));
IkReal x859=((cj7)*(npx));
IkReal x860=((IkReal(0.300700000000000))*(sj4));
IkReal x861=((IkReal(0.0300000000000000))*(sj4));
IkReal x862=((IkReal(0.300700000000000))*(cj4));
IkReal x863=((IkReal(1.00000000000000))*(npz));
IkReal x864=((IkReal(0.0600000000000000))*(sj7));
IkReal x865=((npx)*(sj5));
IkReal x866=((cj5)*(x857));
IkReal x867=((cj7)*(npy)*(sj5));
IkReal x868=((IkReal(1.00000000000000))*(npy)*(sj7));
IkReal x869=((cj5)*(x856));
IkReal x870=((sj5)*(x857));
IkReal x871=((IkReal(0.601420000000000))*(x856));
IkReal x872=((npz)*(x869));
evalcond[0]=((IkReal(-0.300710000000000))+(x861)+(((IkReal(-1.00000000000000))*(x862)))+(((IkReal(-1.00000000000000))*(x857)*(x863)))+(((IkReal(-1.00000000000000))*(x856)*(x868)))+(((x856)*(x859))));
evalcond[1]=((((cj5)*(npx)*(sj7)))+(((npz)*(sj5)*(x856)))+(((x859)*(x870)))+(((IkReal(-1.00000000000000))*(x868)*(x870)))+(((cj5)*(cj7)*(npy))));
evalcond[2]=((((x860)*(x869)))+(((IkReal(-1.00000000000000))*(x857)*(x862)))+(((IkReal(-0.300710000000000))*(x857)))+(((IkReal(-0.0300000000000000))*(x869)))+(((x857)*(x861)))+(((IkReal(-1.00000000000000))*(x863)))+(((x858)*(x869))));
evalcond[3]=((IkReal(0.0300000000000000))+(((x859)*(x866)))+(((IkReal(-1.00000000000000))*(x867)))+(((IkReal(-1.00000000000000))*(x866)*(x868)))+(((IkReal(-1.00000000000000))*(x860)))+(x872)+(((IkReal(-1.00000000000000))*(x858)))+(((IkReal(-1.00000000000000))*(sj7)*(x865))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x868)))+(((x856)*(x861)))+(((IkReal(-0.300710000000000))*(x856)))+(((IkReal(-1.00000000000000))*(x858)*(x866)))+(((IkReal(-1.00000000000000))*(x856)*(x862)))+(((IkReal(0.0300000000000000))*(x866)))+(x859)+(((IkReal(-1.00000000000000))*(x860)*(x866))));
evalcond[5]=((IkReal(-6.01410000000000e-6))+(((IkReal(-1.00000000000000))*(npy)*(sj7)*(x871)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x872)))+(((npy)*(x864)*(x866)))+(((IkReal(0.0600000000000000))*(x867)))+(((x864)*(x865)))+(((IkReal(-0.601420000000000))*(npz)*(x857)))+(((x859)*(x871)))+(((IkReal(-0.0600000000000000))*(x859)*(x866))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x873=(sj4)*(sj4);
IkReal x874=(cj4)*(cj4);
IkReal x875=((cj4)*(cj5));
IkReal x876=((IkReal(0.00902100000000000))*(cj5));
if( IKabs(((gconst39)*(((IkReal(-0.0904265041000000))+(((IkReal(-0.0904204900000000))*(x874)))+(((IkReal(0.0180420000000000))*(cj4)*(sj4)))+(((IkReal(-0.180846994000000))*(cj4)))+((npz)*(npz))+(((IkReal(0.0180426000000000))*(sj4)))+(((IkReal(-0.000900000000000000))*(x873))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst39)*(((((IkReal(0.00902130000000000))*(cj5)))+(((IkReal(-0.0913234970000000))*(cj5)*(sj4)))+(((IkReal(-1.00000000000000))*(npy)*(npz)*(sj7)))+(((IkReal(-0.0895204900000000))*(sj4)*(x875)))+(((IkReal(-1.00000000000000))*(x874)*(x876)))+(((IkReal(-3.00000000000000e-7))*(x875)))+(((cj7)*(npx)*(npz)))+(((x873)*(x876))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst39)*(((IkReal(-0.0904265041000000))+(((IkReal(-0.0904204900000000))*(x874)))+(((IkReal(0.0180420000000000))*(cj4)*(sj4)))+(((IkReal(-0.180846994000000))*(cj4)))+((npz)*(npz))+(((IkReal(0.0180426000000000))*(sj4)))+(((IkReal(-0.000900000000000000))*(x873)))))), ((gconst39)*(((((IkReal(0.00902130000000000))*(cj5)))+(((IkReal(-0.0913234970000000))*(cj5)*(sj4)))+(((IkReal(-1.00000000000000))*(npy)*(npz)*(sj7)))+(((IkReal(-0.0895204900000000))*(sj4)*(x875)))+(((IkReal(-1.00000000000000))*(x874)*(x876)))+(((IkReal(-3.00000000000000e-7))*(x875)))+(((cj7)*(npx)*(npz)))+(((x873)*(x876)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x877=IKsin(j6);
IkReal x878=IKcos(j6);
IkReal x879=((IkReal(0.0300000000000000))*(cj4));
IkReal x880=((cj7)*(npx));
IkReal x881=((IkReal(0.300700000000000))*(sj4));
IkReal x882=((IkReal(0.0300000000000000))*(sj4));
IkReal x883=((IkReal(0.300700000000000))*(cj4));
IkReal x884=((IkReal(1.00000000000000))*(npz));
IkReal x885=((IkReal(0.0600000000000000))*(sj7));
IkReal x886=((npx)*(sj5));
IkReal x887=((cj5)*(x878));
IkReal x888=((cj7)*(npy)*(sj5));
IkReal x889=((IkReal(1.00000000000000))*(npy)*(sj7));
IkReal x890=((cj5)*(x877));
IkReal x891=((sj5)*(x878));
IkReal x892=((IkReal(0.601420000000000))*(x877));
IkReal x893=((npz)*(x890));
evalcond[0]=((IkReal(-0.300710000000000))+(((IkReal(-1.00000000000000))*(x883)))+(x882)+(((IkReal(-1.00000000000000))*(x877)*(x889)))+(((x877)*(x880)))+(((IkReal(-1.00000000000000))*(x878)*(x884))));
evalcond[1]=((((cj5)*(npx)*(sj7)))+(((npz)*(sj5)*(x877)))+(((IkReal(-1.00000000000000))*(x889)*(x891)))+(((x880)*(x891)))+(((cj5)*(cj7)*(npy))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x878)*(x883)))+(((x879)*(x890)))+(((x881)*(x890)))+(((x878)*(x882)))+(((IkReal(-0.300710000000000))*(x878)))+(((IkReal(-0.0300000000000000))*(x890)))+(((IkReal(-1.00000000000000))*(x884))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x881)))+(((IkReal(-1.00000000000000))*(x888)))+(((x880)*(x887)))+(((IkReal(-1.00000000000000))*(sj7)*(x886)))+(((IkReal(-1.00000000000000))*(x887)*(x889)))+(x893)+(((IkReal(-1.00000000000000))*(x879))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x889)))+(((IkReal(-1.00000000000000))*(x879)*(x887)))+(x880)+(((IkReal(-1.00000000000000))*(x877)*(x883)))+(((IkReal(-0.300710000000000))*(x877)))+(((IkReal(-1.00000000000000))*(x881)*(x887)))+(((IkReal(0.0300000000000000))*(x887)))+(((x877)*(x882))));
evalcond[5]=((IkReal(-6.01410000000000e-6))+(((IkReal(-1.00000000000000))*(npy)*(sj7)*(x892)))+(((x885)*(x886)))+(((IkReal(-0.601420000000000))*(npz)*(x878)))+(((IkReal(0.0600000000000000))*(x888)))+(((x880)*(x892)))+(((IkReal(-1.00000000000000))*(pp)))+(((npy)*(x885)*(x887)))+(((IkReal(-0.0600000000000000))*(x893)))+(((IkReal(-0.0600000000000000))*(x880)*(x887))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
IkReal x894=((IkReal(0.0300000000000000))*(sj5));
if( IKabs(npy) < IKFAST_ATAN2_MAGTHRESH && IKabs(npx) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x895=((IkReal(1.00000000000000))*(IKatan2(npy, npx)));
if( ((((npy)*(npy))+((npx)*(npx)))) < (IkReal)-0.00001 )
    continue;
if( (((((IKabs(IKabs(IKsqrt((((npy)*(npy))+((npx)*(npx)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((npy)*(npy))+((npx)*(npx))))))):(IkReal)1.0e30))*(((((IkReal(0.300700000000000))*(sj4)*(sj5)))+(((cj4)*(x894)))+(((IkReal(-1.00000000000000))*(x894))))))) < -1-IKFAST_SINCOS_THRESH || (((((IKabs(IKabs(IKsqrt((((npy)*(npy))+((npx)*(npx)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((npy)*(npy))+((npx)*(npx))))))):(IkReal)1.0e30))*(((((IkReal(0.300700000000000))*(sj4)*(sj5)))+(((cj4)*(x894)))+(((IkReal(-1.00000000000000))*(x894))))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x896=IKasin(((((IKabs(IKabs(IKsqrt((((npy)*(npy))+((npx)*(npx)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((npy)*(npy))+((npx)*(npx))))))):(IkReal)1.0e30))*(((((IkReal(0.300700000000000))*(sj4)*(sj5)))+(((cj4)*(x894)))+(((IkReal(-1.00000000000000))*(x894)))))));
j7array[0]=((((IkReal(-1.00000000000000))*(x895)))+(((IkReal(-1.00000000000000))*(x896))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x895)))+(x896));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];

{
IkReal dummyeval[1];
IkReal gconst39;
IkReal x897=((IkReal(0.0300000000000000))*(sj4));
IkReal x898=((npy)*(sj7));
IkReal x899=((cj7)*(npx));
IkReal x900=((IkReal(0.300700000000000))*(cj4));
IkReal x901=((cj5)*(npz));
gconst39=IKsign(((((IkReal(-1.00000000000000))*(x897)*(x898)))+(((IkReal(-0.0300000000000000))*(x901)))+(((IkReal(0.0300000000000000))*(cj4)*(x901)))+(((IkReal(0.300700000000000))*(sj4)*(x901)))+(((IkReal(-0.300710000000000))*(x899)))+(((IkReal(0.300710000000000))*(x898)))+(((x897)*(x899)))+(((IkReal(-1.00000000000000))*(x899)*(x900)))+(((x898)*(x900)))));
IkReal x902=((cj7)*(npx));
IkReal x903=((IkReal(10.0233333333333))*(cj4));
IkReal x904=((cj5)*(npz));
IkReal x905=((npy)*(sj7));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x904)))+(((IkReal(-1.00000000000000))*(x902)*(x903)))+(((IkReal(-10.0236666666667))*(x902)))+(((x903)*(x905)))+(((IkReal(10.0233333333333))*(sj4)*(x904)))+(((sj4)*(x902)))+(((IkReal(-1.00000000000000))*(sj4)*(x905)))+(((cj4)*(x904)))+(((IkReal(10.0236666666667))*(x905))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst38;
IkReal x906=((IkReal(1.00000000000000))*(sj5));
gconst38=IKsign(((((IkReal(-1.00000000000000))*(x906)*((cj7)*(cj7))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*(x906)*((npy)*(npy))*((sj7)*(sj7))))+(((IkReal(-1.00000000000000))*(x906)*((npz)*(npz))))+(((IkReal(2.00000000000000))*(cj7)*(npx)*(npy)*(sj5)*(sj7)))));
IkReal x907=((IkReal(1.00000000000000))*(sj5));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x907)*((npz)*(npz))))+(((IkReal(-1.00000000000000))*(x907)*((npy)*(npy))*((sj7)*(sj7))))+(((IkReal(2.00000000000000))*(cj7)*(npx)*(npy)*(sj5)*(sj7)))+(((IkReal(-1.00000000000000))*(x907)*((cj7)*(cj7))*((npx)*(npx)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x908=((((cj7)*(npy)))+(((npx)*(sj7))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.182646994100000))+(((IkReal(-0.0360846000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.179046994000000))*(cj4))));
evalcond[2]=x908;
evalcond[3]=x908;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst41;
IkReal x909=((cj7)*(npx));
IkReal x910=((IkReal(0.300700000000000))*(sj4));
IkReal x911=((IkReal(0.0300000000000000))*(cj4));
IkReal x912=((npy)*(sj7));
gconst41=IKsign(((((x910)*(x912)))+(((IkReal(0.0300000000000000))*(x909)))+(((IkReal(0.0300000000000000))*(npz)*(sj4)))+(((IkReal(-0.300700000000000))*(cj4)*(npz)))+(((IkReal(-1.00000000000000))*(x909)*(x910)))+(((x911)*(x912)))+(((IkReal(-0.300710000000000))*(npz)))+(((IkReal(-1.00000000000000))*(x909)*(x911)))+(((IkReal(-0.0300000000000000))*(x912)))));
IkReal x913=((npy)*(sj7));
IkReal x914=((cj7)*(npx));
IkReal x915=((IkReal(10.0233333333333))*(sj4));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x913)))+(((x913)*(x915)))+(((IkReal(-1.00000000000000))*(x914)*(x915)))+(((cj4)*(x913)))+(((IkReal(-10.0236666666667))*(npz)))+(x914)+(((IkReal(-1.00000000000000))*(cj4)*(x914)))+(((IkReal(-10.0233333333333))*(cj4)*(npz)))+(((npz)*(sj4))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst40;
gconst40=IKsign(((((IkReal(2.00000000000000))*(cj7)*(npx)*(npy)*(sj7)))+(((IkReal(-1.00000000000000))*((cj7)*(cj7))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy))*((sj7)*(sj7))))+(((IkReal(-1.00000000000000))*((npz)*(npz))))));
dummyeval[0]=((((IkReal(2.00000000000000))*(cj7)*(npx)*(npy)*(sj7)))+(((IkReal(-1.00000000000000))*((cj7)*(cj7))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy))*((sj7)*(sj7))))+(((IkReal(-1.00000000000000))*((npz)*(npz)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x916=((IkReal(0.300700000000000))*(cj4));
IkReal x917=((cj7)*(npx));
IkReal x918=((npy)*(sj7));
IkReal x919=((IkReal(0.300700000000000))*(sj4));
IkReal x920=((IkReal(0.0300000000000000))*(npz));
IkReal x921=((IkReal(0.0300000000000000))*(x917));
IkReal x922=((IkReal(0.0300000000000000))*(x918));
if( IKabs(((gconst40)*(((x920)+(((x916)*(x918)))+(((IkReal(-1.00000000000000))*(sj4)*(x922)))+(((IkReal(-0.300710000000000))*(x917)))+(((IkReal(-1.00000000000000))*(cj4)*(x920)))+(((IkReal(-1.00000000000000))*(npz)*(x919)))+(((IkReal(-1.00000000000000))*(x916)*(x917)))+(((IkReal(0.300710000000000))*(x918)))+(((sj4)*(x921))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst40)*(((((IkReal(-1.00000000000000))*(x922)))+(x921)+(((IkReal(0.300710000000000))*(npz)))+(((npz)*(x916)))+(((IkReal(-1.00000000000000))*(cj4)*(x921)))+(((x918)*(x919)))+(((IkReal(-1.00000000000000))*(sj4)*(x920)))+(((IkReal(-1.00000000000000))*(x917)*(x919)))+(((cj4)*(x922))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst40)*(((x920)+(((x916)*(x918)))+(((IkReal(-1.00000000000000))*(sj4)*(x922)))+(((IkReal(-0.300710000000000))*(x917)))+(((IkReal(-1.00000000000000))*(cj4)*(x920)))+(((IkReal(-1.00000000000000))*(npz)*(x919)))+(((IkReal(-1.00000000000000))*(x916)*(x917)))+(((IkReal(0.300710000000000))*(x918)))+(((sj4)*(x921)))))), ((gconst40)*(((((IkReal(-1.00000000000000))*(x922)))+(x921)+(((IkReal(0.300710000000000))*(npz)))+(((npz)*(x916)))+(((IkReal(-1.00000000000000))*(cj4)*(x921)))+(((x918)*(x919)))+(((IkReal(-1.00000000000000))*(sj4)*(x920)))+(((IkReal(-1.00000000000000))*(x917)*(x919)))+(((cj4)*(x922)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[5];
IkReal x923=IKsin(j6);
IkReal x924=IKcos(j6);
IkReal x925=((cj7)*(npx));
IkReal x926=((IkReal(0.300700000000000))*(sj4));
IkReal x927=((IkReal(0.0300000000000000))*(sj4));
IkReal x928=((IkReal(1.00000000000000))*(npz));
IkReal x929=((IkReal(0.300700000000000))*(cj4));
IkReal x930=((npy)*(sj7));
IkReal x931=((IkReal(1.00000000000000))*(x930));
IkReal x932=((npz)*(x923));
IkReal x933=((IkReal(0.0300000000000000))*(x923));
IkReal x934=((IkReal(0.0600000000000000))*(x924));
IkReal x935=((IkReal(0.0300000000000000))*(x924));
IkReal x936=((IkReal(0.601420000000000))*(x923));
evalcond[0]=((IkReal(-0.300710000000000))+(x927)+(((IkReal(-1.00000000000000))*(x923)*(x931)))+(((x923)*(x925)))+(((IkReal(-1.00000000000000))*(x929)))+(((IkReal(-1.00000000000000))*(x924)*(x928))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x928)))+(((IkReal(-1.00000000000000))*(x933)))+(((cj4)*(x933)))+(((x924)*(x927)))+(((x923)*(x926)))+(((IkReal(-1.00000000000000))*(x924)*(x929)))+(((IkReal(-0.300710000000000))*(x924))));
evalcond[2]=((IkReal(0.0300000000000000))+(((x924)*(x925)))+(((IkReal(-1.00000000000000))*(x924)*(x931)))+(x932)+(((IkReal(-0.0300000000000000))*(cj4)))+(((IkReal(-1.00000000000000))*(x926))));
evalcond[3]=((x925)+(((IkReal(-1.00000000000000))*(x931)))+(((IkReal(-1.00000000000000))*(cj4)*(x935)))+(x935)+(((IkReal(-1.00000000000000))*(x924)*(x926)))+(((IkReal(-1.00000000000000))*(x923)*(x929)))+(((x923)*(x927)))+(((IkReal(-0.300710000000000))*(x923))));
evalcond[4]=((IkReal(-6.01410000000000e-6))+(((IkReal(-0.0600000000000000))*(x932)))+(((IkReal(-0.601420000000000))*(npz)*(x924)))+(((x930)*(x934)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x930)*(x936)))+(((IkReal(-1.00000000000000))*(x925)*(x934)))+(((x925)*(x936))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x937=(sj4)*(sj4);
IkReal x938=(cj4)*(cj4);
IkReal x939=((IkReal(0.0180420000000000))*(sj4));
if( IKabs(((gconst41)*(((IkReal(0.00902130000000000))+(((IkReal(0.00902100000000000))*(x937)))+(((npy)*(npz)*(sj7)))+(((IkReal(-0.0895204900000000))*(cj4)*(sj4)))+(((IkReal(-3.00000000000000e-7))*(cj4)))+(((IkReal(-1.00000000000000))*(cj7)*(npx)*(npz)))+(((IkReal(-0.00902100000000000))*(x938)))+(((IkReal(-0.0913234970000000))*(sj4))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst41)*(((IkReal(-0.000900000000000000))+(((IkReal(-0.0904204900000000))*(x937)))+(((IkReal(0.00180000000000000))*(cj4)))+(((IkReal(-1.00000000000000))*(cj4)*(x939)))+((npz)*(npz))+(x939)+(((IkReal(-0.000900000000000000))*(x938))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst41)*(((IkReal(0.00902130000000000))+(((IkReal(0.00902100000000000))*(x937)))+(((npy)*(npz)*(sj7)))+(((IkReal(-0.0895204900000000))*(cj4)*(sj4)))+(((IkReal(-3.00000000000000e-7))*(cj4)))+(((IkReal(-1.00000000000000))*(cj7)*(npx)*(npz)))+(((IkReal(-0.00902100000000000))*(x938)))+(((IkReal(-0.0913234970000000))*(sj4)))))), ((gconst41)*(((IkReal(-0.000900000000000000))+(((IkReal(-0.0904204900000000))*(x937)))+(((IkReal(0.00180000000000000))*(cj4)))+(((IkReal(-1.00000000000000))*(cj4)*(x939)))+((npz)*(npz))+(x939)+(((IkReal(-0.000900000000000000))*(x938)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[5];
IkReal x940=IKsin(j6);
IkReal x941=IKcos(j6);
IkReal x942=((cj7)*(npx));
IkReal x943=((IkReal(0.300700000000000))*(sj4));
IkReal x944=((IkReal(0.0300000000000000))*(sj4));
IkReal x945=((IkReal(1.00000000000000))*(npz));
IkReal x946=((IkReal(0.300700000000000))*(cj4));
IkReal x947=((npy)*(sj7));
IkReal x948=((IkReal(1.00000000000000))*(x947));
IkReal x949=((npz)*(x940));
IkReal x950=((IkReal(0.0300000000000000))*(x940));
IkReal x951=((IkReal(0.0600000000000000))*(x941));
IkReal x952=((IkReal(0.0300000000000000))*(x941));
IkReal x953=((IkReal(0.601420000000000))*(x940));
evalcond[0]=((IkReal(-0.300710000000000))+(((x940)*(x942)))+(((IkReal(-1.00000000000000))*(x940)*(x948)))+(((IkReal(-1.00000000000000))*(x941)*(x945)))+(x944)+(((IkReal(-1.00000000000000))*(x946))));
evalcond[1]=((((x940)*(x943)))+(((cj4)*(x950)))+(((IkReal(-1.00000000000000))*(x945)))+(((x941)*(x944)))+(((IkReal(-0.300710000000000))*(x941)))+(((IkReal(-1.00000000000000))*(x941)*(x946)))+(((IkReal(-1.00000000000000))*(x950))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x943)))+(((IkReal(-1.00000000000000))*(x941)*(x948)))+(x949)+(((x941)*(x942)))+(((IkReal(-0.0300000000000000))*(cj4))));
evalcond[3]=((((x940)*(x944)))+(((IkReal(-0.300710000000000))*(x940)))+(x942)+(x952)+(((IkReal(-1.00000000000000))*(x948)))+(((IkReal(-1.00000000000000))*(x941)*(x943)))+(((IkReal(-1.00000000000000))*(x940)*(x946)))+(((IkReal(-1.00000000000000))*(cj4)*(x952))));
evalcond[4]=((IkReal(-6.01410000000000e-6))+(((x947)*(x951)))+(((IkReal(-1.00000000000000))*(x942)*(x951)))+(((IkReal(-1.00000000000000))*(x947)*(x953)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.601420000000000))*(npz)*(x941)))+(((IkReal(-0.0600000000000000))*(x949)))+(((x942)*(x953))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x954=((cj7)*(npy));
IkReal x955=((npx)*(sj7));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j5, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.182646994100000))+(((IkReal(-0.0360846000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.179046994000000))*(cj4))));
evalcond[2]=((x955)+(x954));
evalcond[3]=((((IkReal(-1.00000000000000))*(x955)))+(((IkReal(-1.00000000000000))*(x954))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst43;
IkReal x956=((cj7)*(npx));
IkReal x957=((IkReal(0.0300000000000000))*(sj4));
IkReal x958=((IkReal(0.300700000000000))*(cj4));
IkReal x959=((npy)*(sj7));
IkReal x960=((IkReal(0.0300000000000000))*(npz));
gconst43=IKsign(((((x956)*(x957)))+(((IkReal(-1.00000000000000))*(x957)*(x959)))+(((IkReal(-0.300710000000000))*(x956)))+(((IkReal(-1.00000000000000))*(x956)*(x958)))+(((IkReal(0.300710000000000))*(x959)))+(((x958)*(x959)))+(((IkReal(-1.00000000000000))*(cj4)*(x960)))+(((IkReal(-0.300700000000000))*(npz)*(sj4)))+(x960)));
IkReal x961=((cj7)*(npx));
IkReal x962=((IkReal(10.0233333333333))*(cj4));
IkReal x963=((npy)*(sj7));
dummyeval[0]=((((IkReal(-10.0236666666667))*(x961)))+(((IkReal(10.0236666666667))*(x963)))+(((x962)*(x963)))+(((IkReal(-10.0233333333333))*(npz)*(sj4)))+(npz)+(((sj4)*(x961)))+(((IkReal(-1.00000000000000))*(cj4)*(npz)))+(((IkReal(-1.00000000000000))*(x961)*(x962)))+(((IkReal(-1.00000000000000))*(sj4)*(x963))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst42;
gconst42=IKsign(((((IkReal(2.00000000000000))*(cj7)*(npx)*(npy)*(sj7)))+(((IkReal(-1.00000000000000))*((cj7)*(cj7))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy))*((sj7)*(sj7))))+(((IkReal(-1.00000000000000))*((npz)*(npz))))));
dummyeval[0]=((((IkReal(2.00000000000000))*(cj7)*(npx)*(npy)*(sj7)))+(((IkReal(-1.00000000000000))*((cj7)*(cj7))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy))*((sj7)*(sj7))))+(((IkReal(-1.00000000000000))*((npz)*(npz)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x964=((IkReal(0.300700000000000))*(cj4));
IkReal x965=((cj7)*(npx));
IkReal x966=((npy)*(sj7));
IkReal x967=((IkReal(0.0300000000000000))*(npz));
IkReal x968=((IkReal(0.300700000000000))*(sj4));
IkReal x969=((IkReal(0.0300000000000000))*(x965));
IkReal x970=((IkReal(0.0300000000000000))*(x966));
if( IKabs(((gconst42)*(((((npz)*(x968)))+(((sj4)*(x969)))+(((IkReal(-1.00000000000000))*(x967)))+(((IkReal(-1.00000000000000))*(x964)*(x965)))+(((x964)*(x966)))+(((IkReal(-1.00000000000000))*(sj4)*(x970)))+(((IkReal(-0.300710000000000))*(x965)))+(((cj4)*(x967)))+(((IkReal(0.300710000000000))*(x966))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst42)*(((((IkReal(-1.00000000000000))*(sj4)*(x967)))+(((IkReal(-1.00000000000000))*(cj4)*(x970)))+(x970)+(((cj4)*(x969)))+(((IkReal(-1.00000000000000))*(x966)*(x968)))+(((IkReal(0.300710000000000))*(npz)))+(((npz)*(x964)))+(((IkReal(-1.00000000000000))*(x969)))+(((x965)*(x968))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst42)*(((((npz)*(x968)))+(((sj4)*(x969)))+(((IkReal(-1.00000000000000))*(x967)))+(((IkReal(-1.00000000000000))*(x964)*(x965)))+(((x964)*(x966)))+(((IkReal(-1.00000000000000))*(sj4)*(x970)))+(((IkReal(-0.300710000000000))*(x965)))+(((cj4)*(x967)))+(((IkReal(0.300710000000000))*(x966)))))), ((gconst42)*(((((IkReal(-1.00000000000000))*(sj4)*(x967)))+(((IkReal(-1.00000000000000))*(cj4)*(x970)))+(x970)+(((cj4)*(x969)))+(((IkReal(-1.00000000000000))*(x966)*(x968)))+(((IkReal(0.300710000000000))*(npz)))+(((npz)*(x964)))+(((IkReal(-1.00000000000000))*(x969)))+(((x965)*(x968)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[5];
IkReal x971=IKsin(j6);
IkReal x972=IKcos(j6);
IkReal x973=((cj7)*(npx));
IkReal x974=((IkReal(0.300700000000000))*(sj4));
IkReal x975=((IkReal(0.0300000000000000))*(sj4));
IkReal x976=((npy)*(sj7));
IkReal x977=((IkReal(0.300700000000000))*(cj4));
IkReal x978=((IkReal(1.00000000000000))*(x971));
IkReal x979=((IkReal(1.00000000000000))*(x972));
IkReal x980=((IkReal(0.0300000000000000))*(x971));
IkReal x981=((IkReal(0.0600000000000000))*(x972));
IkReal x982=((IkReal(0.0300000000000000))*(x972));
IkReal x983=((IkReal(0.601420000000000))*(x971));
evalcond[0]=((IkReal(-0.300710000000000))+(((IkReal(-1.00000000000000))*(x976)*(x978)))+(((x971)*(x973)))+(x975)+(((IkReal(-1.00000000000000))*(x977)))+(((IkReal(-1.00000000000000))*(npz)*(x979))));
evalcond[1]=((((IkReal(-1.00000000000000))*(npz)))+(((x972)*(x975)))+(x980)+(((IkReal(-0.300710000000000))*(x972)))+(((IkReal(-1.00000000000000))*(x972)*(x977)))+(((IkReal(-1.00000000000000))*(x971)*(x974)))+(((IkReal(-1.00000000000000))*(cj4)*(x980))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x973)*(x979)))+(((IkReal(-0.0300000000000000))*(cj4)))+(((x972)*(x976)))+(((IkReal(-1.00000000000000))*(x974)))+(((IkReal(-1.00000000000000))*(npz)*(x978))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x971)*(x977)))+(((x972)*(x974)))+(x973)+(((cj4)*(x982)))+(((IkReal(-1.00000000000000))*(x976)))+(((IkReal(-1.00000000000000))*(x982)))+(((x971)*(x975)))+(((IkReal(-0.300710000000000))*(x971))));
evalcond[4]=((IkReal(-6.01410000000000e-6))+(((x973)*(x981)))+(((IkReal(-0.601420000000000))*(npz)*(x972)))+(((IkReal(-1.00000000000000))*(x976)*(x983)))+(((IkReal(0.0600000000000000))*(npz)*(x971)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x976)*(x981)))+(((x973)*(x983))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x984=(cj4)*(cj4);
IkReal x985=(sj4)*(sj4);
IkReal x986=((cj4)*(sj4));
if( IKabs(((gconst43)*(((IkReal(-0.0904265041000000))+(((IkReal(-0.0904204900000000))*(x984)))+(((IkReal(-0.000900000000000000))*(x985)))+(((IkReal(-0.180846994000000))*(cj4)))+((npz)*(npz))+(((IkReal(0.0180420000000000))*(x986)))+(((IkReal(0.0180426000000000))*(sj4))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst43)*(((IkReal(-0.00902130000000000))+(((IkReal(0.0895204900000000))*(x986)))+(((IkReal(0.00902100000000000))*(x984)))+(((IkReal(-1.00000000000000))*(npy)*(npz)*(sj7)))+(((IkReal(0.0913234970000000))*(sj4)))+(((cj7)*(npx)*(npz)))+(((IkReal(-0.00902100000000000))*(x985)))+(((IkReal(3.00000000000000e-7))*(cj4))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst43)*(((IkReal(-0.0904265041000000))+(((IkReal(-0.0904204900000000))*(x984)))+(((IkReal(-0.000900000000000000))*(x985)))+(((IkReal(-0.180846994000000))*(cj4)))+((npz)*(npz))+(((IkReal(0.0180420000000000))*(x986)))+(((IkReal(0.0180426000000000))*(sj4)))))), ((gconst43)*(((IkReal(-0.00902130000000000))+(((IkReal(0.0895204900000000))*(x986)))+(((IkReal(0.00902100000000000))*(x984)))+(((IkReal(-1.00000000000000))*(npy)*(npz)*(sj7)))+(((IkReal(0.0913234970000000))*(sj4)))+(((cj7)*(npx)*(npz)))+(((IkReal(-0.00902100000000000))*(x985)))+(((IkReal(3.00000000000000e-7))*(cj4)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[5];
IkReal x987=IKsin(j6);
IkReal x988=IKcos(j6);
IkReal x989=((cj7)*(npx));
IkReal x990=((IkReal(0.300700000000000))*(sj4));
IkReal x991=((IkReal(0.0300000000000000))*(sj4));
IkReal x992=((npy)*(sj7));
IkReal x993=((IkReal(0.300700000000000))*(cj4));
IkReal x994=((IkReal(1.00000000000000))*(x987));
IkReal x995=((IkReal(1.00000000000000))*(x988));
IkReal x996=((IkReal(0.0300000000000000))*(x987));
IkReal x997=((IkReal(0.0600000000000000))*(x988));
IkReal x998=((IkReal(0.0300000000000000))*(x988));
IkReal x999=((IkReal(0.601420000000000))*(x987));
evalcond[0]=((IkReal(-0.300710000000000))+(((IkReal(-1.00000000000000))*(npz)*(x995)))+(((IkReal(-1.00000000000000))*(x993)))+(((x987)*(x989)))+(((IkReal(-1.00000000000000))*(x992)*(x994)))+(x991));
evalcond[1]=((((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-1.00000000000000))*(cj4)*(x996)))+(((x988)*(x991)))+(((IkReal(-1.00000000000000))*(x988)*(x993)))+(((IkReal(-0.300710000000000))*(x988)))+(((IkReal(-1.00000000000000))*(x987)*(x990)))+(x996));
evalcond[2]=((IkReal(0.0300000000000000))+(((x988)*(x992)))+(((IkReal(-1.00000000000000))*(npz)*(x994)))+(((IkReal(-1.00000000000000))*(x990)))+(((IkReal(-0.0300000000000000))*(cj4)))+(((IkReal(-1.00000000000000))*(x989)*(x995))));
evalcond[3]=((x989)+(((IkReal(-1.00000000000000))*(x992)))+(((IkReal(-1.00000000000000))*(x987)*(x993)))+(((IkReal(-1.00000000000000))*(x998)))+(((x988)*(x990)))+(((x987)*(x991)))+(((cj4)*(x998)))+(((IkReal(-0.300710000000000))*(x987))));
evalcond[4]=((IkReal(-6.01410000000000e-6))+(((x989)*(x999)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.601420000000000))*(npz)*(x988)))+(((IkReal(-1.00000000000000))*(x992)*(x999)))+(((x989)*(x997)))+(((IkReal(-1.00000000000000))*(x992)*(x997)))+(((IkReal(0.0600000000000000))*(npz)*(x987))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1000=((IkReal(0.300710000000000))*(sj5));
IkReal x1001=((cj7)*(npx));
IkReal x1002=((npy)*(sj7));
IkReal x1003=((cj5)*(cj7));
IkReal x1004=((cj5)*(npx)*(npy));
IkReal x1005=((IkReal(0.0300000000000000))*(sj4)*(sj5));
IkReal x1006=((IkReal(0.300700000000000))*(cj4)*(sj5));
if( IKabs(((gconst38)*(((((IkReal(-1.00000000000000))*(x1000)*(x1001)))+(((x1002)*(x1006)))+(((x1001)*(x1005)))+(((npy)*(npz)*(x1003)))+(((IkReal(-1.00000000000000))*(x1002)*(x1005)))+(((cj5)*(npx)*(npz)*(sj7)))+(((x1000)*(x1002)))+(((IkReal(-1.00000000000000))*(x1001)*(x1006))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst38)*(((((IkReal(-1.00000000000000))*(npz)*(x1005)))+(((IkReal(-1.00000000000000))*(npy)*(x1002)*(x1003)))+(((IkReal(-1.00000000000000))*(cj5)*(npx)*(sj7)*(x1002)))+(((npz)*(x1006)))+(((npz)*(x1000)))+(((npy)*(x1001)*(x1003)))+(((cj5)*(npx)*(sj7)*(x1001))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst38)*(((((IkReal(-1.00000000000000))*(x1000)*(x1001)))+(((x1002)*(x1006)))+(((x1001)*(x1005)))+(((npy)*(npz)*(x1003)))+(((IkReal(-1.00000000000000))*(x1002)*(x1005)))+(((cj5)*(npx)*(npz)*(sj7)))+(((x1000)*(x1002)))+(((IkReal(-1.00000000000000))*(x1001)*(x1006)))))), ((gconst38)*(((((IkReal(-1.00000000000000))*(npz)*(x1005)))+(((IkReal(-1.00000000000000))*(npy)*(x1002)*(x1003)))+(((IkReal(-1.00000000000000))*(cj5)*(npx)*(sj7)*(x1002)))+(((npz)*(x1006)))+(((npz)*(x1000)))+(((npy)*(x1001)*(x1003)))+(((cj5)*(npx)*(sj7)*(x1001)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x1007=IKsin(j6);
IkReal x1008=IKcos(j6);
IkReal x1009=((IkReal(0.0300000000000000))*(cj4));
IkReal x1010=((cj7)*(npx));
IkReal x1011=((IkReal(0.300700000000000))*(sj4));
IkReal x1012=((IkReal(0.0300000000000000))*(sj4));
IkReal x1013=((IkReal(0.300700000000000))*(cj4));
IkReal x1014=((IkReal(1.00000000000000))*(npz));
IkReal x1015=((IkReal(0.0600000000000000))*(sj7));
IkReal x1016=((npx)*(sj5));
IkReal x1017=((cj5)*(x1008));
IkReal x1018=((cj7)*(npy)*(sj5));
IkReal x1019=((IkReal(1.00000000000000))*(npy)*(sj7));
IkReal x1020=((cj5)*(x1007));
IkReal x1021=((sj5)*(x1008));
IkReal x1022=((IkReal(0.601420000000000))*(x1007));
IkReal x1023=((npz)*(x1020));
evalcond[0]=((IkReal(-0.300710000000000))+(((IkReal(-1.00000000000000))*(x1008)*(x1014)))+(((IkReal(-1.00000000000000))*(x1007)*(x1019)))+(((IkReal(-1.00000000000000))*(x1013)))+(((x1007)*(x1010)))+(x1012));
evalcond[1]=((((x1010)*(x1021)))+(((cj5)*(npx)*(sj7)))+(((npz)*(sj5)*(x1007)))+(((IkReal(-1.00000000000000))*(x1019)*(x1021)))+(((cj5)*(cj7)*(npy))));
evalcond[2]=((((IkReal(-0.300710000000000))*(x1008)))+(((x1008)*(x1012)))+(((IkReal(-0.0300000000000000))*(x1020)))+(((x1011)*(x1020)))+(((IkReal(-1.00000000000000))*(x1014)))+(((x1009)*(x1020)))+(((IkReal(-1.00000000000000))*(x1008)*(x1013))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x1017)*(x1019)))+(((IkReal(-1.00000000000000))*(x1009)))+(((IkReal(-1.00000000000000))*(x1018)))+(((IkReal(-1.00000000000000))*(sj7)*(x1016)))+(((IkReal(-1.00000000000000))*(x1011)))+(x1023)+(((x1010)*(x1017))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x1011)*(x1017)))+(((x1007)*(x1012)))+(((IkReal(-0.300710000000000))*(x1007)))+(((IkReal(0.0300000000000000))*(x1017)))+(((IkReal(-1.00000000000000))*(x1019)))+(((IkReal(-1.00000000000000))*(x1009)*(x1017)))+(x1010)+(((IkReal(-1.00000000000000))*(x1007)*(x1013))));
evalcond[5]=((IkReal(-6.01410000000000e-6))+(((IkReal(0.0600000000000000))*(x1018)))+(((IkReal(-0.0600000000000000))*(x1023)))+(((IkReal(-0.0600000000000000))*(x1010)*(x1017)))+(((IkReal(-0.601420000000000))*(npz)*(x1008)))+(((IkReal(-1.00000000000000))*(npy)*(sj7)*(x1022)))+(((IkReal(-1.00000000000000))*(pp)))+(((x1010)*(x1022)))+(((npy)*(x1015)*(x1017)))+(((x1015)*(x1016))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1024=(sj4)*(sj4);
IkReal x1025=(cj4)*(cj4);
IkReal x1026=((cj4)*(cj5));
IkReal x1027=((IkReal(0.00902100000000000))*(cj5));
if( IKabs(((gconst39)*(((IkReal(-0.0904265041000000))+(((IkReal(0.0180420000000000))*(cj4)*(sj4)))+(((IkReal(-0.000900000000000000))*(x1024)))+(((IkReal(-0.180846994000000))*(cj4)))+((npz)*(npz))+(((IkReal(-0.0904204900000000))*(x1025)))+(((IkReal(0.0180426000000000))*(sj4))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst39)*(((((IkReal(-3.00000000000000e-7))*(x1026)))+(((IkReal(0.00902130000000000))*(cj5)))+(((IkReal(-0.0913234970000000))*(cj5)*(sj4)))+(((IkReal(-1.00000000000000))*(x1025)*(x1027)))+(((IkReal(-1.00000000000000))*(npy)*(npz)*(sj7)))+(((x1024)*(x1027)))+(((cj7)*(npx)*(npz)))+(((IkReal(-0.0895204900000000))*(sj4)*(x1026))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst39)*(((IkReal(-0.0904265041000000))+(((IkReal(0.0180420000000000))*(cj4)*(sj4)))+(((IkReal(-0.000900000000000000))*(x1024)))+(((IkReal(-0.180846994000000))*(cj4)))+((npz)*(npz))+(((IkReal(-0.0904204900000000))*(x1025)))+(((IkReal(0.0180426000000000))*(sj4)))))), ((gconst39)*(((((IkReal(-3.00000000000000e-7))*(x1026)))+(((IkReal(0.00902130000000000))*(cj5)))+(((IkReal(-0.0913234970000000))*(cj5)*(sj4)))+(((IkReal(-1.00000000000000))*(x1025)*(x1027)))+(((IkReal(-1.00000000000000))*(npy)*(npz)*(sj7)))+(((x1024)*(x1027)))+(((cj7)*(npx)*(npz)))+(((IkReal(-0.0895204900000000))*(sj4)*(x1026)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x1028=IKsin(j6);
IkReal x1029=IKcos(j6);
IkReal x1030=((IkReal(0.0300000000000000))*(cj4));
IkReal x1031=((cj7)*(npx));
IkReal x1032=((IkReal(0.300700000000000))*(sj4));
IkReal x1033=((IkReal(0.0300000000000000))*(sj4));
IkReal x1034=((IkReal(0.300700000000000))*(cj4));
IkReal x1035=((IkReal(1.00000000000000))*(npz));
IkReal x1036=((IkReal(0.0600000000000000))*(sj7));
IkReal x1037=((npx)*(sj5));
IkReal x1038=((cj5)*(x1029));
IkReal x1039=((cj7)*(npy)*(sj5));
IkReal x1040=((IkReal(1.00000000000000))*(npy)*(sj7));
IkReal x1041=((cj5)*(x1028));
IkReal x1042=((sj5)*(x1029));
IkReal x1043=((IkReal(0.601420000000000))*(x1028));
IkReal x1044=((npz)*(x1041));
evalcond[0]=((IkReal(-0.300710000000000))+(x1033)+(((IkReal(-1.00000000000000))*(x1028)*(x1040)))+(((IkReal(-1.00000000000000))*(x1034)))+(((x1028)*(x1031)))+(((IkReal(-1.00000000000000))*(x1029)*(x1035))));
evalcond[1]=((((cj5)*(npx)*(sj7)))+(((npz)*(sj5)*(x1028)))+(((x1031)*(x1042)))+(((IkReal(-1.00000000000000))*(x1040)*(x1042)))+(((cj5)*(cj7)*(npy))));
evalcond[2]=((((x1030)*(x1041)))+(((IkReal(-0.0300000000000000))*(x1041)))+(((IkReal(-0.300710000000000))*(x1029)))+(((x1029)*(x1033)))+(((IkReal(-1.00000000000000))*(x1029)*(x1034)))+(((x1032)*(x1041)))+(((IkReal(-1.00000000000000))*(x1035))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x1032)))+(x1044)+(((IkReal(-1.00000000000000))*(x1030)))+(((IkReal(-1.00000000000000))*(x1039)))+(((IkReal(-1.00000000000000))*(sj7)*(x1037)))+(((IkReal(-1.00000000000000))*(x1038)*(x1040)))+(((x1031)*(x1038))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x1040)))+(x1031)+(((IkReal(-0.300710000000000))*(x1028)))+(((IkReal(0.0300000000000000))*(x1038)))+(((IkReal(-1.00000000000000))*(x1030)*(x1038)))+(((IkReal(-1.00000000000000))*(x1032)*(x1038)))+(((x1028)*(x1033)))+(((IkReal(-1.00000000000000))*(x1028)*(x1034))));
evalcond[5]=((IkReal(-6.01410000000000e-6))+(((IkReal(0.0600000000000000))*(x1039)))+(((IkReal(-0.0600000000000000))*(x1044)))+(((npy)*(x1036)*(x1038)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(npy)*(sj7)*(x1043)))+(((x1031)*(x1043)))+(((IkReal(-0.601420000000000))*(npz)*(x1029)))+(((IkReal(-0.0600000000000000))*(x1031)*(x1038)))+(((x1036)*(x1037))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x89=((sj5)*(sj6));
IkReal x90=((IkReal(1.00000000000000))*(sj7));
IkReal x91=((cj6)*(sj5));
IkReal x92=((cj4)*(cj6));
IkReal x93=((IkReal(1.00000000000000))*(sj6));
IkReal x94=((cj5)*(sj4));
IkReal x95=((cj7)*(sj5));
IkReal x96=((sj5)*(sj7));
IkReal x97=((sj4)*(x95));
IkReal x98=((IkReal(-1.00000000000000))*(cj4));
IkReal x99=((IkReal(-1.00000000000000))*(sj7));
IkReal x100=((((IkReal(-1.00000000000000))*(sj4)*(x93)))+(((cj5)*(x92))));
IkReal x101=((((cj4)*(cj5)*(sj6)))+(((cj6)*(sj4))));
IkReal x102=((((cj7)*(x91)))+(((cj5)*(sj7))));
IkReal x103=((((cj5)*(cj7)))+(((IkReal(-1.00000000000000))*(x90)*(x91))));
IkReal x104=((((IkReal(-1.00000000000000))*(x93)*(x94)))+(x92));
IkReal x105=((cj7)*(x100));
IkReal x106=((((IkReal(-1.00000000000000))*(cj4)*(x93)))+(((IkReal(-1.00000000000000))*(cj6)*(x94))));
IkReal x107=((x105)+(((IkReal(-1.00000000000000))*(cj4)*(sj5)*(x90))));
IkReal x108=((((sj4)*(x96)))+(((cj7)*(x106))));
IkReal x109=((((x100)*(x99)))+(((x95)*(x98))));
IkReal x110=((((x106)*(x99)))+(x97));
new_r00=((((r01)*(x109)))+(((r02)*(x101)))+(((r00)*(x107))));
new_r01=((((r10)*(((((x96)*(x98)))+(x105)))))+(((r11)*(((((IkReal(-1.00000000000000))*(cj4)*(x95)))+(((IkReal(-1.00000000000000))*(x100)*(x90)))))))+(((r12)*(x101))));
new_r02=((((r20)*(x107)))+(((r22)*(x101)))+(((r21)*(x109))));
new_r10=((((r00)*(x102)))+(((r02)*(x89)))+(((r01)*(x103))));
new_r11=((((r10)*(x102)))+(((r12)*(x89)))+(((r11)*(x103))));
new_r12=((((r21)*(x103)))+(((r22)*(x89)))+(((r20)*(x102))));
new_r20=((((r00)*(x108)))+(((r02)*(x104)))+(((r01)*(((((IkReal(-1.00000000000000))*(x106)*(x90)))+(x97))))));
new_r21=((((r12)*(x104)))+(((r10)*(x108)))+(((r11)*(x110))));
new_r22=((((r22)*(x104)))+(((r21)*(x110)))+(((r20)*(x108))));
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
sj2array[0]=((IkReal(-1.00000000000000))*(new_r22));
if( sj2array[0] >= -1-IKFAST_SINCOS_THRESH && sj2array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j2valid[0] = j2valid[1] = true;
    j2array[0] = IKasin(sj2array[0]);
    cj2array[0] = IKcos(j2array[0]);
    sj2array[1] = sj2array[0];
    j2array[1] = j2array[0] > 0 ? (IKPI-j2array[0]) : (-IKPI-j2array[0]);
    cj2array[1] = -cj2array[0];
}
else if( isnan(sj2array[0]) )
{
    // probably any value will work
    j2valid[0] = true;
    cj2array[0] = 1; sj2array[0] = 0; j2array[0] = 0;
}
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal dummyeval[1];
IkReal gconst44;
gconst44=IKsign(cj2);
dummyeval[0]=cj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst45;
gconst45=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst46;
gconst46=IKsign(((((cj2)*(new_r00)*(new_r02)))+(((cj2)*(new_r10)*(new_r12)))));
dummyeval[0]=((((cj2)*(new_r00)*(new_r02)))+(((cj2)*(new_r10)*(new_r12))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(1.00000000000000))+(new_r22));
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[5]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[6]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
if( IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x111=IKatan2(new_r12, new_r02);
j3array[0]=((IkReal(-1.00000000000000))*(x111));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x111))));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r12)*(IKsin(j3))))+(((new_r02)*(IKcos(j3)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((((cj3)*(new_r10)))+(((new_r00)*(sj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(new_r01)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj3)*(new_r10)))+(((new_r00)*(sj3)))))+IKsqr(((((IkReal(-1.00000000000000))*(new_r01)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((cj3)*(new_r10)))+(((new_r00)*(sj3)))), ((((IkReal(-1.00000000000000))*(new_r01)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(new_r11)))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x112=IKcos(j1);
IkReal x113=((IkReal(1.00000000000000))*(sj3));
IkReal x114=((IkReal(1.00000000000000))*(IKsin(j1)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x112)))+(((IkReal(-1.00000000000000))*(new_r10)*(x113)))+(((cj3)*(new_r00))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x114)))+(((IkReal(-1.00000000000000))*(new_r11)*(x113)))+(((cj3)*(new_r01))));
evalcond[2]=((((cj3)*(new_r11)))+(((new_r01)*(sj3)))+(x112));
evalcond[3]=((((IkReal(-1.00000000000000))*(x114)))+(((cj3)*(new_r10)))+(((new_r00)*(sj3))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
IkReal x115=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=x115;
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x115;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
if( IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x116=IKatan2(new_r12, new_r02);
j3array[0]=((IkReal(-1.00000000000000))*(x116));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x116))));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r12)*(IKsin(j3))))+(((new_r02)*(IKcos(j3)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj3)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj3)*(new_r11)))+(((new_r01)*(sj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj3)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj3)))))+IKsqr(((((cj3)*(new_r11)))+(((new_r01)*(sj3)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj3)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj3)))), ((((cj3)*(new_r11)))+(((new_r01)*(sj3)))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x117=IKsin(j1);
IkReal x118=((IkReal(1.00000000000000))*(sj3));
IkReal x119=((IkReal(1.00000000000000))*(IKcos(j1)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r10)*(x118)))+(((IkReal(-1.00000000000000))*(x119)))+(((cj3)*(new_r00))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x117)))+(((IkReal(-1.00000000000000))*(new_r11)*(x118)))+(((cj3)*(new_r01))));
evalcond[2]=((((cj3)*(new_r11)))+(((new_r01)*(sj3)))+(((IkReal(-1.00000000000000))*(x119))));
evalcond[3]=((((cj3)*(new_r10)))+(x117)+(((new_r00)*(sj3))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x120=((gconst46)*(new_r20)*(sj2));
if( IKabs(((new_r02)*(x120))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r12)*(x120))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((new_r02)*(x120)), ((new_r12)*(x120)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x121=IKcos(j3);
IkReal x122=IKsin(j3);
IkReal x123=((IkReal(1.00000000000000))*(sj2));
IkReal x124=((IkReal(1.00000000000000))*(cj2));
IkReal x125=((cj2)*(x121));
IkReal x126=((cj2)*(x122));
IkReal x127=((new_r12)*(x121));
IkReal x128=((new_r02)*(x122));
evalcond[0]=((((new_r02)*(x121)))+(((IkReal(-1.00000000000000))*(new_r12)*(x122))));
evalcond[1]=((x127)+(((IkReal(-1.00000000000000))*(x124)))+(x128));
evalcond[2]=((((new_r00)*(x126)))+(((new_r10)*(x125)))+(((IkReal(-1.00000000000000))*(new_r20)*(x123))));
evalcond[3]=((((new_r11)*(x125)))+(((new_r01)*(x126)))+(((IkReal(-1.00000000000000))*(new_r21)*(x123))));
evalcond[4]=((IkReal(-1.00000000000000))+(((new_r02)*(x126)))+(((new_r12)*(x125)))+(((IkReal(-1.00000000000000))*(new_r22)*(x123))));
evalcond[5]=((((IkReal(-1.00000000000000))*(new_r22)*(x124)))+(((IkReal(-1.00000000000000))*(x123)*(x127)))+(((IkReal(-1.00000000000000))*(x123)*(x128))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst47;
gconst47=IKsign(cj2);
dummyeval[0]=cj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=sj2;
dummyeval[1]=cj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x129=((((IkReal(-1.00000000000000))*(new_r12)*(sj3)))+(((cj3)*(new_r02))));
IkReal x130=((((cj3)*(new_r10)))+(((new_r00)*(sj3))));
IkReal x131=((((cj3)*(new_r11)))+(((new_r01)*(sj3))));
IkReal x132=((IkReal(-1.00000000000000))+(((cj3)*(new_r12)))+(((new_r02)*(sj3))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=x129;
evalcond[3]=x129;
evalcond[4]=x132;
evalcond[5]=x131;
evalcond[6]=x130;
evalcond[7]=x130;
evalcond[8]=x131;
evalcond[9]=x132;
evalcond[10]=((IkReal(-1.00000000000000))*(new_r22));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(((IkReal(-1.00000000000000))*(new_r21)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(new_r20, ((IkReal(-1.00000000000000))*(new_r21)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x133=IKcos(j1);
IkReal x134=((IkReal(1.00000000000000))*(sj3));
IkReal x135=((IkReal(1.00000000000000))*(IKsin(j1)));
evalcond[0]=((new_r21)+(x133));
evalcond[1]=((((IkReal(-1.00000000000000))*(x135)))+(new_r20));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r10)*(x134)))+(((IkReal(-1.00000000000000))*(x133)))+(((cj3)*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x135)))+(((IkReal(-1.00000000000000))*(new_r11)*(x134)))+(((cj3)*(new_r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x136=((cj3)*(new_r12));
IkReal x137=((new_r01)*(sj3));
IkReal x138=((IkReal(1.00000000000000))*(cj3));
IkReal x139=((new_r00)*(sj3));
IkReal x140=((new_r02)*(sj3));
IkReal x141=((((IkReal(-1.00000000000000))*(new_r12)*(sj3)))+(((cj3)*(new_r02))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j2, IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=x141;
evalcond[3]=x141;
evalcond[4]=((IkReal(1.00000000000000))+(x136)+(x140));
evalcond[5]=((((cj3)*(new_r11)))+(x137));
evalcond[6]=((((cj3)*(new_r10)))+(x139));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r10)*(x138)))+(((IkReal(-1.00000000000000))*(x139))));
evalcond[8]=((((IkReal(-1.00000000000000))*(x137)))+(((IkReal(-1.00000000000000))*(new_r11)*(x138))));
evalcond[9]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(x140)))+(((IkReal(-1.00000000000000))*(x136))));
evalcond[10]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r20)))+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r20)), new_r21);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x142=IKsin(j1);
IkReal x143=((IkReal(1.00000000000000))*(sj3));
IkReal x144=((IkReal(1.00000000000000))*(IKcos(j1)));
evalcond[0]=((new_r21)+(((IkReal(-1.00000000000000))*(x144))));
evalcond[1]=((new_r20)+(x142));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r10)*(x143)))+(((IkReal(-1.00000000000000))*(x144)))+(((cj3)*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x142)))+(((IkReal(-1.00000000000000))*(new_r11)*(x143)))+(((cj3)*(new_r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x145=((cj3)*(new_r12));
IkReal x146=((new_r02)*(sj3));
IkReal x147=((((IkReal(-1.00000000000000))*(new_r12)*(sj3)))+(((cj3)*(new_r02))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(1.00000000000000))+(new_r22));
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=x147;
evalcond[5]=x147;
evalcond[6]=((x145)+(x146));
evalcond[7]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[8]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[9]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
evalcond[10]=((((IkReal(-1.00000000000000))*(x145)))+(((IkReal(-1.00000000000000))*(x146))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((((cj3)*(new_r10)))+(((new_r00)*(sj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(new_r01)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj3)*(new_r10)))+(((new_r00)*(sj3)))))+IKsqr(((((IkReal(-1.00000000000000))*(new_r01)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((cj3)*(new_r10)))+(((new_r00)*(sj3)))), ((((IkReal(-1.00000000000000))*(new_r01)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(new_r11)))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x148=IKcos(j1);
IkReal x149=((IkReal(1.00000000000000))*(sj3));
IkReal x150=((IkReal(1.00000000000000))*(IKsin(j1)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x148)))+(((IkReal(-1.00000000000000))*(new_r10)*(x149)))+(((cj3)*(new_r00))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r11)*(x149)))+(((IkReal(-1.00000000000000))*(x150)))+(((cj3)*(new_r01))));
evalcond[2]=((((cj3)*(new_r11)))+(((new_r01)*(sj3)))+(x148));
evalcond[3]=((((cj3)*(new_r10)))+(((IkReal(-1.00000000000000))*(x150)))+(((new_r00)*(sj3))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x151=((IkReal(-1.00000000000000))+(new_r22));
IkReal x152=((((IkReal(-1.00000000000000))*(new_r12)*(sj3)))+(((cj3)*(new_r02))));
IkReal x153=((((cj3)*(new_r12)))+(((new_r02)*(sj3))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=x151;
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=x152;
evalcond[5]=x152;
evalcond[6]=x153;
evalcond[7]=new_r20;
evalcond[8]=new_r21;
evalcond[9]=x151;
evalcond[10]=x153;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj3)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj3)*(new_r11)))+(((new_r01)*(sj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj3)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj3)))))+IKsqr(((((cj3)*(new_r11)))+(((new_r01)*(sj3)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj3)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj3)))), ((((cj3)*(new_r11)))+(((new_r01)*(sj3)))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x154=IKsin(j1);
IkReal x155=((IkReal(1.00000000000000))*(sj3));
IkReal x156=((IkReal(1.00000000000000))*(IKcos(j1)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x156)))+(((IkReal(-1.00000000000000))*(new_r10)*(x155)))+(((cj3)*(new_r00))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r11)*(x155)))+(((cj3)*(new_r01)))+(((IkReal(-1.00000000000000))*(x154))));
evalcond[2]=((((cj3)*(new_r11)))+(((IkReal(-1.00000000000000))*(x156)))+(((new_r01)*(sj3))));
evalcond[3]=((x154)+(((cj3)*(new_r10)))+(((new_r00)*(sj3))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((((IKabs(sj2) != 0)?((IkReal)1/(sj2)):(IkReal)1.0e30))*(((((cj3)*(new_r10)))+(((new_r00)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj2) != 0)?((IkReal)1/(cj2)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(sj2) != 0)?((IkReal)1/(sj2)):(IkReal)1.0e30))*(((((cj3)*(new_r10)))+(((new_r00)*(sj3)))))))+IKsqr(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj2) != 0)?((IkReal)1/(cj2)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IKabs(sj2) != 0)?((IkReal)1/(sj2)):(IkReal)1.0e30))*(((((cj3)*(new_r10)))+(((new_r00)*(sj3)))))), ((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj2) != 0)?((IkReal)1/(cj2)):(IkReal)1.0e30))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x157=IKcos(j1);
IkReal x158=IKsin(j1);
IkReal x159=((new_r00)*(sj3));
IkReal x160=((IkReal(1.00000000000000))*(sj2));
IkReal x161=((IkReal(1.00000000000000))*(cj2));
IkReal x162=((new_r01)*(sj3));
IkReal x163=((cj3)*(new_r10));
IkReal x164=((IkReal(1.00000000000000))*(sj3));
IkReal x165=((cj3)*(new_r11));
IkReal x166=((IkReal(1.00000000000000))*(x157));
evalcond[0]=((((cj2)*(x157)))+(new_r21));
evalcond[1]=((new_r20)+(((IkReal(-1.00000000000000))*(x158)*(x161))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x166)))+(((IkReal(-1.00000000000000))*(new_r10)*(x164)))+(((cj3)*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r11)*(x164)))+(((IkReal(-1.00000000000000))*(x158)))+(((cj3)*(new_r01))));
evalcond[4]=((x162)+(x165)+(((sj2)*(x157))));
evalcond[5]=((x159)+(((IkReal(-1.00000000000000))*(x158)*(x160)))+(x163));
evalcond[6]=((x158)+(((IkReal(-1.00000000000000))*(x159)*(x160)))+(((IkReal(-1.00000000000000))*(new_r20)*(x161)))+(((IkReal(-1.00000000000000))*(x160)*(x163))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x166)))+(((IkReal(-1.00000000000000))*(new_r21)*(x161)))+(((IkReal(-1.00000000000000))*(x160)*(x165)))+(((IkReal(-1.00000000000000))*(x160)*(x162))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(new_r11)*(sj3)))+(((cj3)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj2) != 0)?((IkReal)1/(cj2)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r11)*(sj3)))+(((cj3)*(new_r01)))))+IKsqr(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj2) != 0)?((IkReal)1/(cj2)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r11)*(sj3)))+(((cj3)*(new_r01)))), ((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj2) != 0)?((IkReal)1/(cj2)):(IkReal)1.0e30))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x167=IKcos(j1);
IkReal x168=IKsin(j1);
IkReal x169=((new_r00)*(sj3));
IkReal x170=((IkReal(1.00000000000000))*(sj2));
IkReal x171=((IkReal(1.00000000000000))*(cj2));
IkReal x172=((new_r01)*(sj3));
IkReal x173=((cj3)*(new_r10));
IkReal x174=((IkReal(1.00000000000000))*(sj3));
IkReal x175=((cj3)*(new_r11));
IkReal x176=((IkReal(1.00000000000000))*(x167));
evalcond[0]=((new_r21)+(((cj2)*(x167))));
evalcond[1]=((new_r20)+(((IkReal(-1.00000000000000))*(x168)*(x171))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r10)*(x174)))+(((IkReal(-1.00000000000000))*(x176)))+(((cj3)*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x168)))+(((IkReal(-1.00000000000000))*(new_r11)*(x174)))+(((cj3)*(new_r01))));
evalcond[4]=((x172)+(x175)+(((sj2)*(x167))));
evalcond[5]=((x173)+(x169)+(((IkReal(-1.00000000000000))*(x168)*(x170))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r20)*(x171)))+(((IkReal(-1.00000000000000))*(x170)*(x173)))+(((IkReal(-1.00000000000000))*(x169)*(x170)))+(x168));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r21)*(x171)))+(((IkReal(-1.00000000000000))*(x170)*(x175)))+(((IkReal(-1.00000000000000))*(x170)*(x172)))+(((IkReal(-1.00000000000000))*(x176))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((gconst47)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst47)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst47)*(new_r20)), ((IkReal(-1.00000000000000))*(gconst47)*(new_r21)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x177=IKcos(j1);
IkReal x178=IKsin(j1);
IkReal x179=((new_r00)*(sj3));
IkReal x180=((IkReal(1.00000000000000))*(sj2));
IkReal x181=((IkReal(1.00000000000000))*(cj2));
IkReal x182=((new_r01)*(sj3));
IkReal x183=((cj3)*(new_r10));
IkReal x184=((IkReal(1.00000000000000))*(sj3));
IkReal x185=((cj3)*(new_r11));
IkReal x186=((IkReal(1.00000000000000))*(x177));
evalcond[0]=((new_r21)+(((cj2)*(x177))));
evalcond[1]=((new_r20)+(((IkReal(-1.00000000000000))*(x178)*(x181))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r10)*(x184)))+(((IkReal(-1.00000000000000))*(x186)))+(((cj3)*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x178)))+(((IkReal(-1.00000000000000))*(new_r11)*(x184)))+(((cj3)*(new_r01))));
evalcond[4]=((((sj2)*(x177)))+(x185)+(x182));
evalcond[5]=((x179)+(x183)+(((IkReal(-1.00000000000000))*(x178)*(x180))));
evalcond[6]=((x178)+(((IkReal(-1.00000000000000))*(x180)*(x183)))+(((IkReal(-1.00000000000000))*(x179)*(x180)))+(((IkReal(-1.00000000000000))*(new_r20)*(x181))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x180)*(x185)))+(((IkReal(-1.00000000000000))*(new_r21)*(x181)))+(((IkReal(-1.00000000000000))*(x180)*(x182)))+(((IkReal(-1.00000000000000))*(x186))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x187=((cj2)*(gconst45));
if( IKabs(((new_r02)*(x187))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r12)*(x187))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((new_r02)*(x187)), ((new_r12)*(x187)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x188=IKcos(j3);
IkReal x189=IKsin(j3);
IkReal x190=((IkReal(1.00000000000000))*(sj2));
IkReal x191=((IkReal(1.00000000000000))*(cj2));
IkReal x192=((cj2)*(x188));
IkReal x193=((cj2)*(x189));
IkReal x194=((new_r12)*(x188));
IkReal x195=((new_r02)*(x189));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r12)*(x189)))+(((new_r02)*(x188))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x191)))+(x195)+(x194));
evalcond[2]=((((new_r00)*(x193)))+(((new_r10)*(x192)))+(((IkReal(-1.00000000000000))*(new_r20)*(x190))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r21)*(x190)))+(((new_r11)*(x192)))+(((new_r01)*(x193))));
evalcond[4]=((IkReal(-1.00000000000000))+(((new_r02)*(x193)))+(((new_r12)*(x192)))+(((IkReal(-1.00000000000000))*(new_r22)*(x190))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x190)*(x194)))+(((IkReal(-1.00000000000000))*(new_r22)*(x191)))+(((IkReal(-1.00000000000000))*(x190)*(x195))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst47;
gconst47=IKsign(cj2);
dummyeval[0]=cj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=sj2;
dummyeval[1]=cj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x196=((((IkReal(-1.00000000000000))*(new_r12)*(sj3)))+(((cj3)*(new_r02))));
IkReal x197=((((cj3)*(new_r10)))+(((new_r00)*(sj3))));
IkReal x198=((((cj3)*(new_r11)))+(((new_r01)*(sj3))));
IkReal x199=((IkReal(-1.00000000000000))+(((cj3)*(new_r12)))+(((new_r02)*(sj3))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=x196;
evalcond[3]=x196;
evalcond[4]=x199;
evalcond[5]=x198;
evalcond[6]=x197;
evalcond[7]=x197;
evalcond[8]=x198;
evalcond[9]=x199;
evalcond[10]=((IkReal(-1.00000000000000))*(new_r22));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(((IkReal(-1.00000000000000))*(new_r21)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(new_r20, ((IkReal(-1.00000000000000))*(new_r21)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x200=IKcos(j1);
IkReal x201=((IkReal(1.00000000000000))*(sj3));
IkReal x202=((IkReal(1.00000000000000))*(IKsin(j1)));
evalcond[0]=((new_r21)+(x200));
evalcond[1]=((((IkReal(-1.00000000000000))*(x202)))+(new_r20));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r10)*(x201)))+(((IkReal(-1.00000000000000))*(x200)))+(((cj3)*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x202)))+(((IkReal(-1.00000000000000))*(new_r11)*(x201)))+(((cj3)*(new_r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x203=((cj3)*(new_r12));
IkReal x204=((new_r01)*(sj3));
IkReal x205=((IkReal(1.00000000000000))*(cj3));
IkReal x206=((new_r00)*(sj3));
IkReal x207=((new_r02)*(sj3));
IkReal x208=((((IkReal(-1.00000000000000))*(new_r12)*(sj3)))+(((cj3)*(new_r02))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j2, IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=x208;
evalcond[3]=x208;
evalcond[4]=((IkReal(1.00000000000000))+(x207)+(x203));
evalcond[5]=((((cj3)*(new_r11)))+(x204));
evalcond[6]=((x206)+(((cj3)*(new_r10))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r10)*(x205)))+(((IkReal(-1.00000000000000))*(x206))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r11)*(x205)))+(((IkReal(-1.00000000000000))*(x204))));
evalcond[9]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(x203)))+(((IkReal(-1.00000000000000))*(x207))));
evalcond[10]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r20)))+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r20)), new_r21);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x209=IKsin(j1);
IkReal x210=((IkReal(1.00000000000000))*(sj3));
IkReal x211=((IkReal(1.00000000000000))*(IKcos(j1)));
evalcond[0]=((new_r21)+(((IkReal(-1.00000000000000))*(x211))));
evalcond[1]=((new_r20)+(x209));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r10)*(x210)))+(((IkReal(-1.00000000000000))*(x211)))+(((cj3)*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x209)))+(((IkReal(-1.00000000000000))*(new_r11)*(x210)))+(((cj3)*(new_r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x212=((cj3)*(new_r12));
IkReal x213=((new_r02)*(sj3));
IkReal x214=((((IkReal(-1.00000000000000))*(new_r12)*(sj3)))+(((cj3)*(new_r02))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(1.00000000000000))+(new_r22));
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=x214;
evalcond[5]=x214;
evalcond[6]=((x212)+(x213));
evalcond[7]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[8]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[9]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
evalcond[10]=((((IkReal(-1.00000000000000))*(x212)))+(((IkReal(-1.00000000000000))*(x213))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((((cj3)*(new_r10)))+(((new_r00)*(sj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(new_r01)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj3)*(new_r10)))+(((new_r00)*(sj3)))))+IKsqr(((((IkReal(-1.00000000000000))*(new_r01)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((cj3)*(new_r10)))+(((new_r00)*(sj3)))), ((((IkReal(-1.00000000000000))*(new_r01)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(new_r11)))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x215=IKcos(j1);
IkReal x216=((IkReal(1.00000000000000))*(sj3));
IkReal x217=((IkReal(1.00000000000000))*(IKsin(j1)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x215)))+(((IkReal(-1.00000000000000))*(new_r10)*(x216)))+(((cj3)*(new_r00))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x217)))+(((IkReal(-1.00000000000000))*(new_r11)*(x216)))+(((cj3)*(new_r01))));
evalcond[2]=((x215)+(((cj3)*(new_r11)))+(((new_r01)*(sj3))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x217)))+(((cj3)*(new_r10)))+(((new_r00)*(sj3))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x218=((IkReal(-1.00000000000000))+(new_r22));
IkReal x219=((((IkReal(-1.00000000000000))*(new_r12)*(sj3)))+(((cj3)*(new_r02))));
IkReal x220=((((cj3)*(new_r12)))+(((new_r02)*(sj3))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=x218;
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=x219;
evalcond[5]=x219;
evalcond[6]=x220;
evalcond[7]=new_r20;
evalcond[8]=new_r21;
evalcond[9]=x218;
evalcond[10]=x220;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj3)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj3)*(new_r11)))+(((new_r01)*(sj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj3)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj3)))))+IKsqr(((((cj3)*(new_r11)))+(((new_r01)*(sj3)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj3)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj3)))), ((((cj3)*(new_r11)))+(((new_r01)*(sj3)))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x221=IKsin(j1);
IkReal x222=((IkReal(1.00000000000000))*(sj3));
IkReal x223=((IkReal(1.00000000000000))*(IKcos(j1)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x223)))+(((IkReal(-1.00000000000000))*(new_r10)*(x222)))+(((cj3)*(new_r00))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x221)))+(((IkReal(-1.00000000000000))*(new_r11)*(x222)))+(((cj3)*(new_r01))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x223)))+(((cj3)*(new_r11)))+(((new_r01)*(sj3))));
evalcond[3]=((x221)+(((cj3)*(new_r10)))+(((new_r00)*(sj3))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((((IKabs(sj2) != 0)?((IkReal)1/(sj2)):(IkReal)1.0e30))*(((((cj3)*(new_r10)))+(((new_r00)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj2) != 0)?((IkReal)1/(cj2)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(sj2) != 0)?((IkReal)1/(sj2)):(IkReal)1.0e30))*(((((cj3)*(new_r10)))+(((new_r00)*(sj3)))))))+IKsqr(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj2) != 0)?((IkReal)1/(cj2)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IKabs(sj2) != 0)?((IkReal)1/(sj2)):(IkReal)1.0e30))*(((((cj3)*(new_r10)))+(((new_r00)*(sj3)))))), ((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj2) != 0)?((IkReal)1/(cj2)):(IkReal)1.0e30))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x224=IKcos(j1);
IkReal x225=IKsin(j1);
IkReal x226=((new_r00)*(sj3));
IkReal x227=((IkReal(1.00000000000000))*(sj2));
IkReal x228=((IkReal(1.00000000000000))*(cj2));
IkReal x229=((new_r01)*(sj3));
IkReal x230=((cj3)*(new_r10));
IkReal x231=((IkReal(1.00000000000000))*(sj3));
IkReal x232=((cj3)*(new_r11));
IkReal x233=((IkReal(1.00000000000000))*(x224));
evalcond[0]=((new_r21)+(((cj2)*(x224))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x225)*(x228)))+(new_r20));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r10)*(x231)))+(((IkReal(-1.00000000000000))*(x233)))+(((cj3)*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r11)*(x231)))+(((IkReal(-1.00000000000000))*(x225)))+(((cj3)*(new_r01))));
evalcond[4]=((x232)+(((sj2)*(x224)))+(x229));
evalcond[5]=((x230)+(((IkReal(-1.00000000000000))*(x225)*(x227)))+(x226));
evalcond[6]=((((IkReal(-1.00000000000000))*(x227)*(x230)))+(x225)+(((IkReal(-1.00000000000000))*(x226)*(x227)))+(((IkReal(-1.00000000000000))*(new_r20)*(x228))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r21)*(x228)))+(((IkReal(-1.00000000000000))*(x227)*(x232)))+(((IkReal(-1.00000000000000))*(x233)))+(((IkReal(-1.00000000000000))*(x227)*(x229))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(new_r11)*(sj3)))+(((cj3)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj2) != 0)?((IkReal)1/(cj2)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r11)*(sj3)))+(((cj3)*(new_r01)))))+IKsqr(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj2) != 0)?((IkReal)1/(cj2)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r11)*(sj3)))+(((cj3)*(new_r01)))), ((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj2) != 0)?((IkReal)1/(cj2)):(IkReal)1.0e30))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x234=IKcos(j1);
IkReal x235=IKsin(j1);
IkReal x236=((new_r00)*(sj3));
IkReal x237=((IkReal(1.00000000000000))*(sj2));
IkReal x238=((IkReal(1.00000000000000))*(cj2));
IkReal x239=((new_r01)*(sj3));
IkReal x240=((cj3)*(new_r10));
IkReal x241=((IkReal(1.00000000000000))*(sj3));
IkReal x242=((cj3)*(new_r11));
IkReal x243=((IkReal(1.00000000000000))*(x234));
evalcond[0]=((((cj2)*(x234)))+(new_r21));
evalcond[1]=((new_r20)+(((IkReal(-1.00000000000000))*(x235)*(x238))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r10)*(x241)))+(((IkReal(-1.00000000000000))*(x243)))+(((cj3)*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r11)*(x241)))+(((IkReal(-1.00000000000000))*(x235)))+(((cj3)*(new_r01))));
evalcond[4]=((x239)+(((sj2)*(x234)))+(x242));
evalcond[5]=((x236)+(((IkReal(-1.00000000000000))*(x235)*(x237)))+(x240));
evalcond[6]=((x235)+(((IkReal(-1.00000000000000))*(x236)*(x237)))+(((IkReal(-1.00000000000000))*(x237)*(x240)))+(((IkReal(-1.00000000000000))*(new_r20)*(x238))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x237)*(x242)))+(((IkReal(-1.00000000000000))*(x243)))+(((IkReal(-1.00000000000000))*(new_r21)*(x238)))+(((IkReal(-1.00000000000000))*(x237)*(x239))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((gconst47)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst47)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst47)*(new_r20)), ((IkReal(-1.00000000000000))*(gconst47)*(new_r21)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x244=IKcos(j1);
IkReal x245=IKsin(j1);
IkReal x246=((new_r00)*(sj3));
IkReal x247=((IkReal(1.00000000000000))*(sj2));
IkReal x248=((IkReal(1.00000000000000))*(cj2));
IkReal x249=((new_r01)*(sj3));
IkReal x250=((cj3)*(new_r10));
IkReal x251=((IkReal(1.00000000000000))*(sj3));
IkReal x252=((cj3)*(new_r11));
IkReal x253=((IkReal(1.00000000000000))*(x244));
evalcond[0]=((new_r21)+(((cj2)*(x244))));
evalcond[1]=((new_r20)+(((IkReal(-1.00000000000000))*(x245)*(x248))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r10)*(x251)))+(((IkReal(-1.00000000000000))*(x253)))+(((cj3)*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r11)*(x251)))+(((IkReal(-1.00000000000000))*(x245)))+(((cj3)*(new_r01))));
evalcond[4]=((x252)+(x249)+(((sj2)*(x244))));
evalcond[5]=((x250)+(x246)+(((IkReal(-1.00000000000000))*(x245)*(x247))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r20)*(x248)))+(((IkReal(-1.00000000000000))*(x246)*(x247)))+(x245)+(((IkReal(-1.00000000000000))*(x247)*(x250))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x247)*(x249)))+(((IkReal(-1.00000000000000))*(new_r21)*(x248)))+(((IkReal(-1.00000000000000))*(x247)*(x252)))+(((IkReal(-1.00000000000000))*(x253))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((gconst44)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst44)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst44)*(new_r20)), ((IkReal(-1.00000000000000))*(gconst44)*(new_r21)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[2];
evalcond[0]=((new_r21)+(((cj2)*(IKcos(j1)))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj2)*(IKsin(j1))))+(new_r20));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst48;
gconst48=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst49;
gconst49=IKsign(((((IkReal(-1.00000000000000))*(new_r01)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r11)*(new_r12)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r01)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r11)*(new_r12))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x254=((cj1)*(gconst49)*(sj2));
if( IKabs(((new_r02)*(x254))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r12)*(x254))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((new_r02)*(x254)), ((new_r12)*(x254)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[12];
IkReal x255=IKcos(j3);
IkReal x256=IKsin(j3);
IkReal x257=((IkReal(1.00000000000000))*(cj1));
IkReal x258=((IkReal(1.00000000000000))*(sj1));
IkReal x259=((IkReal(1.00000000000000))*(sj2));
IkReal x260=((IkReal(1.00000000000000))*(cj2));
IkReal x261=((IkReal(1.00000000000000))*(x256));
IkReal x262=((new_r11)*(x255));
IkReal x263=((cj2)*(x256));
IkReal x264=((new_r12)*(x255));
IkReal x265=((new_r10)*(x255));
evalcond[0]=((((new_r02)*(x255)))+(((IkReal(-1.00000000000000))*(new_r12)*(x261))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x260)))+(x264)+(((new_r02)*(x256))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x257)))+(((new_r00)*(x255)))+(((IkReal(-1.00000000000000))*(new_r10)*(x261))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x258)))+(((IkReal(-1.00000000000000))*(new_r11)*(x261)))+(((new_r01)*(x255))));
evalcond[4]=((((cj1)*(sj2)))+(((new_r01)*(x256)))+(x262));
evalcond[5]=((((IkReal(-1.00000000000000))*(sj2)*(x258)))+(x265)+(((new_r00)*(x256))));
evalcond[6]=((((new_r00)*(x263)))+(((IkReal(-1.00000000000000))*(new_r20)*(x259)))+(((cj2)*(x265))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r21)*(x259)))+(((new_r01)*(x263)))+(((cj2)*(x262))));
evalcond[8]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22)*(x259)))+(((cj2)*(x264)))+(((new_r02)*(x263))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r02)*(x256)*(x259)))+(((IkReal(-1.00000000000000))*(x259)*(x264)))+(((IkReal(-1.00000000000000))*(new_r22)*(x260))));
evalcond[10]=((sj1)+(((IkReal(-1.00000000000000))*(x259)*(x265)))+(((IkReal(-1.00000000000000))*(new_r00)*(x256)*(x259)))+(((IkReal(-1.00000000000000))*(new_r20)*(x260))));
evalcond[11]=((((IkReal(-1.00000000000000))*(new_r01)*(x256)*(x259)))+(((IkReal(-1.00000000000000))*(x259)*(x262)))+(((IkReal(-1.00000000000000))*(x257)))+(((IkReal(-1.00000000000000))*(new_r21)*(x260))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x266=((cj2)*(gconst48));
if( IKabs(((new_r02)*(x266))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r12)*(x266))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((new_r02)*(x266)), ((new_r12)*(x266)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[12];
IkReal x267=IKcos(j3);
IkReal x268=IKsin(j3);
IkReal x269=((IkReal(1.00000000000000))*(cj1));
IkReal x270=((IkReal(1.00000000000000))*(sj1));
IkReal x271=((IkReal(1.00000000000000))*(sj2));
IkReal x272=((IkReal(1.00000000000000))*(cj2));
IkReal x273=((IkReal(1.00000000000000))*(x268));
IkReal x274=((new_r11)*(x267));
IkReal x275=((cj2)*(x268));
IkReal x276=((new_r12)*(x267));
IkReal x277=((new_r10)*(x267));
evalcond[0]=((((new_r02)*(x267)))+(((IkReal(-1.00000000000000))*(new_r12)*(x273))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x272)))+(x276)+(((new_r02)*(x268))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x269)))+(((new_r00)*(x267)))+(((IkReal(-1.00000000000000))*(new_r10)*(x273))));
evalcond[3]=((((new_r01)*(x267)))+(((IkReal(-1.00000000000000))*(new_r11)*(x273)))+(((IkReal(-1.00000000000000))*(x270))));
evalcond[4]=((((cj1)*(sj2)))+(x274)+(((new_r01)*(x268))));
evalcond[5]=((((new_r00)*(x268)))+(x277)+(((IkReal(-1.00000000000000))*(sj2)*(x270))));
evalcond[6]=((((cj2)*(x277)))+(((new_r00)*(x275)))+(((IkReal(-1.00000000000000))*(new_r20)*(x271))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r21)*(x271)))+(((new_r01)*(x275)))+(((cj2)*(x274))));
evalcond[8]=((IkReal(-1.00000000000000))+(((new_r02)*(x275)))+(((IkReal(-1.00000000000000))*(new_r22)*(x271)))+(((cj2)*(x276))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r22)*(x272)))+(((IkReal(-1.00000000000000))*(x271)*(x276)))+(((IkReal(-1.00000000000000))*(new_r02)*(x268)*(x271))));
evalcond[10]=((((IkReal(-1.00000000000000))*(x271)*(x277)))+(sj1)+(((IkReal(-1.00000000000000))*(new_r20)*(x272)))+(((IkReal(-1.00000000000000))*(new_r00)*(x268)*(x271))));
evalcond[11]=((((IkReal(-1.00000000000000))*(x271)*(x274)))+(((IkReal(-1.00000000000000))*(x269)))+(((IkReal(-1.00000000000000))*(new_r21)*(x272)))+(((IkReal(-1.00000000000000))*(new_r01)*(x268)*(x271))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "8e404e31b2d706bbfe020971dd830d74"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
