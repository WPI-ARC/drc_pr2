/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 61 generated on 2013-04-04 13:05:42.772296
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==61);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67;
x0=IKsin(j[0]);
x1=IKcos(j[2]);
x2=IKsin(j[1]);
x3=IKcos(j[0]);
x4=IKsin(j[2]);
x5=IKcos(j[4]);
x6=IKcos(j[3]);
x7=IKsin(j[4]);
x8=IKsin(j[3]);
x9=IKcos(j[1]);
x10=IKsin(j[6]);
x11=IKsin(j[5]);
x12=IKcos(j[5]);
x13=IKcos(j[6]);
x14=((IkReal(0.176987500000000))*(x7));
x15=((IkReal(1.00000000000000))*(x12));
x16=((IkReal(1.00000000000000))*(x4));
x17=((IkReal(0.0300000000000000))*(x4));
x18=((IkReal(1.00000000000000))*(x8));
x19=((IkReal(1.00000000000000))*(x11));
x20=((IkReal(1.00000000000000))*(x6));
x21=((IkReal(0.176987500000000))*(x8));
x22=((IkReal(0.176987500000000))*(x5));
x23=((IkReal(0.300710000000000))*(x3));
x24=((x2)*(x6));
x25=((x1)*(x3));
x26=((x0)*(x9));
x27=((x6)*(x9));
x28=((x0)*(x1));
x29=((x1)*(x9));
x30=((x2)*(x8));
x31=((x2)*(x4));
x32=((x2)*(x3));
x33=((x0)*(x2));
x34=((IkReal(0.0300000000000000))*(x25));
x35=((IkReal(0.0300000000000000))*(x28));
x36=((x3)*(x8)*(x9));
x37=((x4)*(x8)*(x9));
x38=((x18)*(x26));
x39=((x20)*(x26));
x40=((x17)*(x33));
x41=((x16)*(x8)*(x9));
x42=((x16)*(x32));
x43=((x17)*(x32));
x44=((x25)+(((x0)*(x31))));
x45=((((IkReal(-1.00000000000000))*(x16)*(x3)))+(((x2)*(x28))));
x46=((x24)+(((IkReal(-1.00000000000000))*(x41))));
x47=((x30)+(((x27)*(x4))));
x48=((x28)+(((IkReal(-1.00000000000000))*(x42))));
x49=((((IkReal(-1.00000000000000))*(x28)))+(x42));
x50=((((IkReal(-1.00000000000000))*(x16)*(x33)))+(((IkReal(-1.00000000000000))*(x25))));
x51=((((IkReal(-1.00000000000000))*(x0)*(x16)))+(((IkReal(-1.00000000000000))*(x2)*(x25))));
x52=((x40)+(x34));
x53=((x48)*(x6));
x54=((x50)*(x8));
x55=((x51)*(x7));
x56=((((IkReal(-1.00000000000000))*(x38)))+(((x44)*(x6))));
x57=((((x29)*(x7)))+(((x47)*(x5))));
x58=((x53)+(x36));
x59=((((x27)*(x3)))+(((x49)*(x8))));
x60=((x54)+(((IkReal(-1.00000000000000))*(x39))));
x61=((((x29)*(x5)))+(((x7)*(((((IkReal(-1.00000000000000))*(x18)*(x2)))+(((IkReal(-1.00000000000000))*(x16)*(x27))))))));
x62=((x5)*(x58));
x63=((((x45)*(x7)))+(((x5)*(x56))));
x64=((((x45)*(x5)))+(((x7)*(((((IkReal(-1.00000000000000))*(x20)*(x44)))+(x38))))));
x65=((x55)+(x62));
x66=((x12)*(x63));
x67=((((x7)*(((((IkReal(1.00000000000000))*(x36)))+(((IkReal(1.00000000000000))*(x53)))))))+(((IkReal(-1.00000000000000))*(x5)*(x51))));
eerot[0]=((((x13)*(((x66)+(((x11)*(x60)))))))+(((x10)*(x64))));
eerot[1]=((((x10)*(((((IkReal(-1.00000000000000))*(x15)*(x63)))+(((IkReal(-1.00000000000000))*(x19)*(x60)))))))+(((x13)*(x64))));
eerot[2]=((((x11)*(x63)))+(((x12)*(((((IkReal(-1.00000000000000))*(x18)*(x50)))+(x39))))));
IkReal x68=((x26)*(x6));
eetrans[0]=((IkReal(0.00152455000000000))+(x52)+(((x11)*(((((IkReal(-1.00000000000000))*(x22)*(x56)))+(((IkReal(-1.00000000000000))*(x14)*(x45)))))))+(((IkReal(-0.300710000000000))*(x68)))+(((x12)*(((((IkReal(-0.176987500000000))*(x68)))+(((x21)*(x50)))))))+(((IkReal(-1.00000000000000))*(x52)*(x6)))+(((x8)*(((((IkReal(-1.00000000000000))*(x1)*(x23)))+(((IkReal(-0.300710000000000))*(x0)*(x31)))))))+(((IkReal(-0.300700000000000))*(x26)))+(((IkReal(0.0300000000000000))*(x26)*(x8))));
eerot[3]=((((x10)*(x61)))+(((x13)*(((((x12)*(x57)))+(((x11)*(x46))))))));
eerot[4]=((((x13)*(x61)))+(((x10)*(((((IkReal(-1.00000000000000))*(x19)*(x46)))+(((IkReal(-1.00000000000000))*(x15)*(x57))))))));
eerot[5]=((((x12)*(((x41)+(((IkReal(-1.00000000000000))*(x2)*(x20)))))))+(((x11)*(x57))));
eetrans[1]=((IkReal(-0.208513409563377))+(((x12)*(((((IkReal(-1.00000000000000))*(x21)*(x4)*(x9)))+(((IkReal(0.176987500000000))*(x24)))))))+(((x17)*(x9)))+(((IkReal(0.300700000000000))*(x2)))+(((IkReal(-0.300710000000000))*(x37)))+(((IkReal(-0.0300000000000000))*(x30)))+(((IkReal(-1.00000000000000))*(x17)*(x27)))+(((x11)*(((((IkReal(-1.00000000000000))*(x14)*(x29)))+(((IkReal(-1.00000000000000))*(x22)*(x47)))))))+(((IkReal(0.300710000000000))*(x24))));
eerot[6]=((((x13)*(((((IkReal(-1.00000000000000))*(x19)*(x59)))+(((IkReal(-1.00000000000000))*(x15)*(x65)))))))+(((x10)*(x67))));
eerot[7]=((((x13)*(x67)))+(((x10)*(((((x11)*(x59)))+(((x12)*(x65))))))));
eerot[8]=((((x11)*(((((IkReal(-1.00000000000000))*(x55)))+(((IkReal(-1.00000000000000))*(x62)))))))+(((x12)*(x59))));
IkReal x69=((IkReal(1.00000000000000))*(x23));
eetrans[2]=((IkReal(0.197099990575467))+(((IkReal(-0.300700000000000))*(x3)*(x9)))+(((x11)*(((((x14)*(x51)))+(((x22)*(x58)))))))+(((x12)*(((((IkReal(-1.00000000000000))*(x21)*(x49)))+(((IkReal(-0.176987500000000))*(x27)*(x3)))))))+(x43)+(((IkReal(0.0300000000000000))*(x36)))+(((x6)*(((x35)+(((IkReal(-1.00000000000000))*(x43)))))))+(((IkReal(-1.00000000000000))*(x35)))+(((IkReal(-1.00000000000000))*(x27)*(x69)))+(((x8)*(((((IkReal(-1.00000000000000))*(x31)*(x69)))+(((IkReal(0.300710000000000))*(x28))))))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {4}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j19,cj19,sj19,htj19,j20,cj20,sj20,htj20,j21,cj21,sj21,htj21,j22,cj22,sj22,htj22,j24,cj24,sj24,htj24,j25,cj25,sj25,htj25,j23,cj23,sj23,htj23,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij19[2], _nj19,_ij20[2], _nj20,_ij21[2], _nj21,_ij22[2], _nj22,_ij24[2], _nj24,_ij25[2], _nj25,_ij23[2], _nj23;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j19=numeric_limits<IkReal>::quiet_NaN(); _ij19[0] = -1; _ij19[1] = -1; _nj19 = -1; j20=numeric_limits<IkReal>::quiet_NaN(); _ij20[0] = -1; _ij20[1] = -1; _nj20 = -1; j21=numeric_limits<IkReal>::quiet_NaN(); _ij21[0] = -1; _ij21[1] = -1; _nj21 = -1; j22=numeric_limits<IkReal>::quiet_NaN(); _ij22[0] = -1; _ij22[1] = -1; _nj22 = -1; j24=numeric_limits<IkReal>::quiet_NaN(); _ij24[0] = -1; _ij24[1] = -1; _nj24 = -1; j25=numeric_limits<IkReal>::quiet_NaN(); _ij25[0] = -1; _ij25[1] = -1; _nj25 = -1;  _ij23[0] = -1; _ij23[1] = -1; _nj23 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j23=pfree[0]; cj23=cos(pfree[0]); sj23=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((IkReal(-0.00152455000000000))+(((IkReal(0.176987500000000))*(r02)))+(px));
new_r10=((IkReal(-1.00000000000000))*(r20));
new_r11=((IkReal(-1.00000000000000))*(r21));
new_r12=((IkReal(-1.00000000000000))*(r22));
new_py=((IkReal(0.197099990575467))+(((IkReal(-0.176987500000000))*(r22)))+(((IkReal(-1.00000000000000))*(pz))));
new_r20=r10;
new_r21=r11;
new_r22=r12;
new_pz=((IkReal(0.208513409563377))+(py)+(((IkReal(0.176987500000000))*(r12))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((pz)*(pz))+((py)*(py)));
npx=((((py)*(r10)))+(((pz)*(r20)))+(((px)*(r00))));
npy=((((px)*(r01)))+(((pz)*(r21)))+(((py)*(r11))));
npz=((((py)*(r12)))+(((pz)*(r22)))+(((px)*(r02))));
rxp0_0=((((IkReal(-1.00000000000000))*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((IkReal(-1.00000000000000))*(pz)*(r00))));
rxp0_2=((((py)*(r00)))+(((IkReal(-1.00000000000000))*(px)*(r10))));
rxp1_0=((((pz)*(r11)))+(((IkReal(-1.00000000000000))*(py)*(r21))));
rxp1_1=((((IkReal(-1.00000000000000))*(pz)*(r01)))+(((px)*(r21))));
rxp1_2=((((py)*(r01)))+(((IkReal(-1.00000000000000))*(px)*(r11))));
rxp2_0=((((IkReal(-1.00000000000000))*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((IkReal(-1.00000000000000))*(pz)*(r02))));
rxp2_2=((((py)*(r02)))+(((IkReal(-1.00000000000000))*(px)*(r12))));
{
IkReal j22array[2], cj22array[2], sj22array[2];
bool j22valid[2]={false};
_nj22 = 2;
if( (((IkReal(1.00000000054211))+(((IkReal(-5.47504220077449))*(pp))))) < -1-IKFAST_SINCOS_THRESH || (((IkReal(1.00000000054211))+(((IkReal(-5.47504220077449))*(pp))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x70=IKasin(((IkReal(1.00000000054211))+(((IkReal(-5.47504220077449))*(pp)))));
j22array[0]=((IkReal(-1.76966936552859))+(((IkReal(-1.00000000000000))*(x70))));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
j22array[1]=((IkReal(1.37192328806121))+(x70));
sj22array[1]=IKsin(j22array[1]);
cj22array[1]=IKcos(j22array[1]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
if( j22array[1] > IKPI )
{
    j22array[1]-=IK2PI;
}
else if( j22array[1] < -IKPI )
{    j22array[1]+=IK2PI;
}
j22valid[1] = true;
for(int ij22 = 0; ij22 < 2; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 2; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];

{
IkReal dummyeval[1];
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal x71=(cj22)*(cj22);
IkReal x72=(cj23)*(cj23);
IkReal x73=(sj22)*(sj22);
IkReal x74=((IkReal(20.0466666666667))*(sj22));
IkReal x75=((cj22)*(x72));
dummyeval[0]=((IkReal(100.473893444444))+(((IkReal(-2.00000000000000))*(x75)))+(((x71)*(x72)))+(((IkReal(-1.00000000000000))*(x72)*(x74)))+(((IkReal(100.467211111111))*(x71)))+(((IkReal(-20.0473333333333))*(sj22)))+(x73)+(x72)+(((x74)*(x75)))+(((IkReal(200.941104444444))*(cj22)))+(((IkReal(-1.00000000000000))*(cj22)*(x74)))+(((IkReal(100.467211111111))*(x72)*(x73))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j24array[2], cj24array[2], sj24array[2];
bool j24valid[2]={false};
_nj24 = 2;
IkReal x76=((IkReal(0.0300000000000000))*(cj23));
IkReal x77=((IkReal(-0.300710000000000))+(((IkReal(-0.300700000000000))*(cj22)))+(((IkReal(0.0300000000000000))*(sj22))));
IkReal x78=((((cj22)*(x76)))+(((IkReal(0.300700000000000))*(cj23)*(sj22)))+(((IkReal(-1.00000000000000))*(x76))));
if( IKabs(x77) < IKFAST_ATAN2_MAGTHRESH && IKabs(x78) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x79=((IkReal(1.00000000000000))*(IKatan2(x77, x78)));
if( ((((x78)*(x78))+((x77)*(x77)))) < (IkReal)-0.00001 )
    continue;
if( (((npz)*(((IKabs(IKabs(IKsqrt((((x78)*(x78))+((x77)*(x77)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x78)*(x78))+((x77)*(x77))))))):(IkReal)1.0e30)))) < -1-IKFAST_SINCOS_THRESH || (((npz)*(((IKabs(IKabs(IKsqrt((((x78)*(x78))+((x77)*(x77)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x78)*(x78))+((x77)*(x77))))))):(IkReal)1.0e30)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x80=IKasin(((npz)*(((IKabs(IKabs(IKsqrt((((x78)*(x78))+((x77)*(x77)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x78)*(x78))+((x77)*(x77))))))):(IkReal)1.0e30))));
j24array[0]=((((IkReal(-1.00000000000000))*(x79)))+(x80));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
j24array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x79)))+(((IkReal(-1.00000000000000))*(x80))));
sj24array[1]=IKsin(j24array[1]);
cj24array[1]=IKcos(j24array[1]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
if( j24array[1] > IKPI )
{
    j24array[1]-=IK2PI;
}
else if( j24array[1] < -IKPI )
{    j24array[1]+=IK2PI;
}
j24valid[1] = true;
for(int ij24 = 0; ij24 < 2; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 2; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];

{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=IKsign(((((sj24)*((npx)*(npx))))+(((sj24)*((npy)*(npy))))));
dummyeval[0]=((((sj24)*((npx)*(npx))))+(((sj24)*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst1;
IkReal x81=((cj24)*(sj23));
gconst1=IKsign(((((x81)*((npx)*(npx))))+(((x81)*((npy)*(npy))))));
IkReal x82=((cj24)*(sj23));
dummyeval[0]=((((x82)*((npx)*(npx))))+(((x82)*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x83=((IkReal(0.0300000000000000))*(sj24));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j23)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.182646994100000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.179046994000000))*(cj22)))+(((IkReal(-0.0360846000000000))*(sj22))));
evalcond[2]=((((IkReal(-1.00000000000000))*(npz)))+(((IkReal(0.0300000000000000))*(cj24)*(sj22)))+(((cj22)*(x83)))+(((IkReal(-1.00000000000000))*(x83)))+(((IkReal(-0.300700000000000))*(cj22)*(cj24)))+(((IkReal(0.300700000000000))*(sj22)*(sj24)))+(((IkReal(-0.300710000000000))*(cj24))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
gconst2=IKsign(((((cj24)*((npx)*(npx))))+(((cj24)*((npy)*(npy))))));
dummyeval[0]=((((cj24)*((npx)*(npx))))+(((cj24)*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(((((sj24)*((npx)*(npx))))+(((sj24)*((npy)*(npy))))));
dummyeval[0]=((((sj24)*((npx)*(npx))))+(((sj24)*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x84=((IkReal(-0.300710000000000))+(((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-0.300700000000000))*(cj22)))+(((IkReal(0.0300000000000000))*(sj22))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j24)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.182646994100000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.179046994000000))*(cj22)))+(((IkReal(-0.0360846000000000))*(sj22))));
evalcond[2]=x84;
evalcond[3]=x84;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign((((npy)*(npy))+((npx)*(npx))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign(((((IkReal(-3.00000000000000))*((npx)*(npx))))+(((IkReal(-3.00000000000000))*((npy)*(npy))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
IkReal x85=((IkReal(50.0000000000000))*(pp));
IkReal x86=((IkReal(30.0710000000000))*(npz));
if( IKabs(((gconst5)*(((((IkReal(-1.00000000000000))*(npy)*(x86)))+(((IkReal(-1.00000000000000))*(npy)*(x85)))+(((IkReal(-0.000300705000000000))*(npy))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst5)*(((((npx)*(x85)))+(((npx)*(x86)))+(((IkReal(0.000300705000000000))*(npx))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j25array[0]=IKatan2(((gconst5)*(((((IkReal(-1.00000000000000))*(npy)*(x86)))+(((IkReal(-1.00000000000000))*(npy)*(x85)))+(((IkReal(-0.000300705000000000))*(npy)))))), ((gconst5)*(((((npx)*(x85)))+(((npx)*(x86)))+(((IkReal(0.000300705000000000))*(npx)))))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[3];
IkReal x87=IKcos(j25);
IkReal x88=IKsin(j25);
IkReal x89=((npx)*(x87));
IkReal x90=((npy)*(x88));
evalcond[0]=((((npx)*(x88)))+(((npy)*(x87))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj22)))+(((IkReal(-0.300700000000000))*(sj22)))+(((IkReal(-1.00000000000000))*(x90)))+(x89));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(x90)))+(((IkReal(-0.601420000000000))*(npz)))+(((IkReal(-0.0600000000000000))*(x89))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
IkReal x291=((IkReal(0.0300000000000000))*(npx));
IkReal x292=((IkReal(0.0300000000000000))*(npy));
IkReal x293=((IkReal(0.300700000000000))*(sj22));
if( IKabs(((gconst4)*(((x292)+(((IkReal(-1.00000000000000))*(npy)*(x293)))+(((IkReal(-1.00000000000000))*(cj22)*(x292))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst4)*(((((npx)*(x293)))+(((IkReal(-1.00000000000000))*(x291)))+(((cj22)*(x291))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j25array[0]=IKatan2(((gconst4)*(((x292)+(((IkReal(-1.00000000000000))*(npy)*(x293)))+(((IkReal(-1.00000000000000))*(cj22)*(x292)))))), ((gconst4)*(((((npx)*(x293)))+(((IkReal(-1.00000000000000))*(x291)))+(((cj22)*(x291)))))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[3];
IkReal x294=IKcos(j25);
IkReal x295=IKsin(j25);
IkReal x296=((npx)*(x294));
IkReal x297=((npy)*(x295));
evalcond[0]=((((npx)*(x295)))+(((npy)*(x294))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x297)))+(((IkReal(-0.0300000000000000))*(cj22)))+(((IkReal(-0.300700000000000))*(sj22)))+(x296));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(x297)))+(((IkReal(-0.0600000000000000))*(x296)))+(((IkReal(-0.601420000000000))*(npz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x298=((IkReal(0.300700000000000))*(cj22));
IkReal x299=((IkReal(0.0300000000000000))*(sj22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j24, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.182646994100000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.179046994000000))*(cj22)))+(((IkReal(-0.0360846000000000))*(sj22))));
evalcond[2]=((IkReal(-0.300710000000000))+(npz)+(x299)+(((IkReal(-1.00000000000000))*(x298))));
evalcond[3]=((IkReal(0.300710000000000))+(((IkReal(-1.00000000000000))*(npz)))+(x298)+(((IkReal(-1.00000000000000))*(x299))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst6;
gconst6=IKsign(((((IkReal(-1.00000000000000))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst7;
gconst7=IKsign(((((IkReal(3.00000000000000))*((npx)*(npx))))+(((IkReal(3.00000000000000))*((npy)*(npy))))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
IkReal x300=((IkReal(50.0000000000000))*(pp));
IkReal x301=((IkReal(30.0710000000000))*(npz));
if( IKabs(((gconst7)*(((((IkReal(-1.00000000000000))*(npy)*(x300)))+(((IkReal(-0.000300705000000000))*(npy)))+(((npy)*(x301))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst7)*(((((IkReal(-1.00000000000000))*(npx)*(x301)))+(((npx)*(x300)))+(((IkReal(0.000300705000000000))*(npx))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j25array[0]=IKatan2(((gconst7)*(((((IkReal(-1.00000000000000))*(npy)*(x300)))+(((IkReal(-0.000300705000000000))*(npy)))+(((npy)*(x301)))))), ((gconst7)*(((((IkReal(-1.00000000000000))*(npx)*(x301)))+(((npx)*(x300)))+(((IkReal(0.000300705000000000))*(npx)))))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[3];
IkReal x302=IKsin(j25);
IkReal x303=IKcos(j25);
IkReal x304=((npx)*(x303));
IkReal x305=((npy)*(x302));
evalcond[0]=((((npx)*(x302)))+(((npy)*(x303))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj22)))+(x305)+(((IkReal(-0.300700000000000))*(sj22)))+(((IkReal(-1.00000000000000))*(x304))));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(-0.0600000000000000))*(x305)))+(((IkReal(0.0600000000000000))*(x304)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.601420000000000))*(npz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
IkReal x306=((IkReal(0.0300000000000000))*(npx));
IkReal x307=((IkReal(0.0300000000000000))*(npy));
IkReal x308=((IkReal(0.300700000000000))*(sj22));
if( IKabs(((gconst6)*(((((IkReal(-1.00000000000000))*(npy)*(x308)))+(x307)+(((IkReal(-1.00000000000000))*(cj22)*(x307))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst6)*(((((npx)*(x308)))+(((cj22)*(x306)))+(((IkReal(-1.00000000000000))*(x306))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j25array[0]=IKatan2(((gconst6)*(((((IkReal(-1.00000000000000))*(npy)*(x308)))+(x307)+(((IkReal(-1.00000000000000))*(cj22)*(x307)))))), ((gconst6)*(((((npx)*(x308)))+(((cj22)*(x306)))+(((IkReal(-1.00000000000000))*(x306)))))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[3];
IkReal x309=IKsin(j25);
IkReal x310=IKcos(j25);
IkReal x311=((npx)*(x310));
IkReal x312=((npy)*(x309));
evalcond[0]=((((npx)*(x309)))+(((npy)*(x310))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(x311)))+(((IkReal(-0.300700000000000))*(sj22)))+(x312));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(-0.0600000000000000))*(x312)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(x311)))+(((IkReal(0.601420000000000))*(npz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x313=((IkReal(0.0300000000000000))*(cj22));
IkReal x314=((IkReal(0.300700000000000))*(sj22));
IkReal x315=((x314)+(x313));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j24)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.182646994100000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.179046994000000))*(cj22)))+(((IkReal(-0.0360846000000000))*(sj22))));
evalcond[2]=((IkReal(-0.0300000000000000))+(((IkReal(-1.00000000000000))*(npz)))+(x315));
evalcond[3]=((IkReal(0.0300000000000000))+(npz)+(((IkReal(-1.00000000000000))*(x315))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst8;
gconst8=IKsign((((npy)*(npy))+((npx)*(npx))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst9;
gconst9=IKsign(((((IkReal(30071.0000000000))*((npx)*(npx))))+(((IkReal(30071.0000000000))*((npy)*(npy))))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
IkReal x316=((IkReal(3000.00000000000))*(npz));
IkReal x317=((IkReal(50000.0000000000))*(pp));
if( IKabs(((gconst9)*(((((IkReal(-1.00000000000000))*(npy)*(x316)))+(((IkReal(-1.00000000000000))*(npy)*(x317)))+(((IkReal(-0.300705000000000))*(npy))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst9)*(((((IkReal(0.300705000000000))*(npx)))+(((npx)*(x316)))+(((npx)*(x317))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j25array[0]=IKatan2(((gconst9)*(((((IkReal(-1.00000000000000))*(npy)*(x316)))+(((IkReal(-1.00000000000000))*(npy)*(x317)))+(((IkReal(-0.300705000000000))*(npy)))))), ((gconst9)*(((((IkReal(0.300705000000000))*(npx)))+(((npx)*(x316)))+(((npx)*(x317)))))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[3];
IkReal x318=IKcos(j25);
IkReal x319=IKsin(j25);
IkReal x320=((npx)*(x318));
IkReal x321=((npy)*(x319));
evalcond[0]=((((npx)*(x319)))+(((npy)*(x318))));
evalcond[1]=((IkReal(-0.300710000000000))+(((IkReal(-1.00000000000000))*(x321)))+(((IkReal(-0.300700000000000))*(cj22)))+(((IkReal(0.0300000000000000))*(sj22)))+(x320));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(npz)))+(((IkReal(-0.601420000000000))*(x321)))+(((IkReal(0.601420000000000))*(x320))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
IkReal x322=((IkReal(0.0300000000000000))*(sj22));
IkReal x323=((IkReal(0.300700000000000))*(cj22));
if( IKabs(((gconst8)*(((((npy)*(x322)))+(((IkReal(-0.300710000000000))*(npy)))+(((IkReal(-1.00000000000000))*(npy)*(x323))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst8)*(((((IkReal(-1.00000000000000))*(npx)*(x322)))+(((npx)*(x323)))+(((IkReal(0.300710000000000))*(npx))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j25array[0]=IKatan2(((gconst8)*(((((npy)*(x322)))+(((IkReal(-0.300710000000000))*(npy)))+(((IkReal(-1.00000000000000))*(npy)*(x323)))))), ((gconst8)*(((((IkReal(-1.00000000000000))*(npx)*(x322)))+(((npx)*(x323)))+(((IkReal(0.300710000000000))*(npx)))))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[3];
IkReal x324=IKcos(j25);
IkReal x325=IKsin(j25);
IkReal x326=((npx)*(x324));
IkReal x327=((npy)*(x325));
evalcond[0]=((((npx)*(x325)))+(((npy)*(x324))));
evalcond[1]=((IkReal(-0.300710000000000))+(((IkReal(-1.00000000000000))*(x327)))+(((IkReal(-0.300700000000000))*(cj22)))+(((IkReal(0.0300000000000000))*(sj22)))+(x326));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.601420000000000))*(x326)))+(((IkReal(-0.0600000000000000))*(npz)))+(((IkReal(-0.601420000000000))*(x327))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x328=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-0.0300000000000000))*(cj22)))+(((IkReal(-0.300700000000000))*(sj22))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j24)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.182646994100000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.179046994000000))*(cj22)))+(((IkReal(-0.0360846000000000))*(sj22))));
evalcond[2]=x328;
evalcond[3]=x328;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst10;
gconst10=IKsign(((((IkReal(-1.00000000000000))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst11;
gconst11=IKsign(((((IkReal(-30071.0000000000))*((npx)*(npx))))+(((IkReal(-30071.0000000000))*((npy)*(npy))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
IkReal x329=((IkReal(50000.0000000000))*(pp));
IkReal x330=((IkReal(3000.00000000000))*(npz));
if( IKabs(((gconst11)*(((((IkReal(-1.00000000000000))*(npy)*(x329)))+(((npy)*(x330)))+(((IkReal(-0.300705000000000))*(npy))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst11)*(((((IkReal(0.300705000000000))*(npx)))+(((IkReal(-1.00000000000000))*(npx)*(x330)))+(((npx)*(x329))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j25array[0]=IKatan2(((gconst11)*(((((IkReal(-1.00000000000000))*(npy)*(x329)))+(((npy)*(x330)))+(((IkReal(-0.300705000000000))*(npy)))))), ((gconst11)*(((((IkReal(0.300705000000000))*(npx)))+(((IkReal(-1.00000000000000))*(npx)*(x330)))+(((npx)*(x329)))))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[3];
IkReal x331=IKsin(j25);
IkReal x332=IKcos(j25);
IkReal x333=((npx)*(x332));
IkReal x334=((npy)*(x331));
evalcond[0]=((((npx)*(x331)))+(((npy)*(x332))));
evalcond[1]=((IkReal(-0.300710000000000))+(((IkReal(-0.300700000000000))*(cj22)))+(((IkReal(0.0300000000000000))*(sj22)))+(x334)+(((IkReal(-1.00000000000000))*(x333))));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(npz)))+(((IkReal(0.601420000000000))*(x334)))+(((IkReal(-0.601420000000000))*(x333))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
IkReal x335=((IkReal(0.0300000000000000))*(sj22));
IkReal x336=((IkReal(0.300700000000000))*(cj22));
if( IKabs(((gconst10)*(((((IkReal(-0.300710000000000))*(npy)))+(((IkReal(-1.00000000000000))*(npy)*(x336)))+(((npy)*(x335))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst10)*(((((npx)*(x336)))+(((IkReal(0.300710000000000))*(npx)))+(((IkReal(-1.00000000000000))*(npx)*(x335))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j25array[0]=IKatan2(((gconst10)*(((((IkReal(-0.300710000000000))*(npy)))+(((IkReal(-1.00000000000000))*(npy)*(x336)))+(((npy)*(x335)))))), ((gconst10)*(((((npx)*(x336)))+(((IkReal(0.300710000000000))*(npx)))+(((IkReal(-1.00000000000000))*(npx)*(x335)))))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[3];
IkReal x337=IKsin(j25);
IkReal x338=IKcos(j25);
IkReal x339=((npx)*(x338));
IkReal x340=((npy)*(x337));
evalcond[0]=((((npy)*(x338)))+(((npx)*(x337))));
evalcond[1]=((IkReal(-0.300710000000000))+(((IkReal(-0.300700000000000))*(cj22)))+(((IkReal(0.0300000000000000))*(sj22)))+(((IkReal(-1.00000000000000))*(x339)))+(x340));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.601420000000000))*(x340)))+(((IkReal(0.0600000000000000))*(npz)))+(((IkReal(-0.601420000000000))*(x339))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
IkReal x341=((IkReal(0.0300000000000000))*(sj22));
IkReal x342=((IkReal(0.300700000000000))*(cj22));
IkReal x343=((cj24)*(npz));
if( IKabs(((gconst3)*(((((IkReal(-1.00000000000000))*(npy)*(x343)))+(((IkReal(-1.00000000000000))*(npy)*(x342)))+(((IkReal(-0.300710000000000))*(npy)))+(((npy)*(x341))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((((npx)*(x342)))+(((IkReal(-1.00000000000000))*(npx)*(x341)))+(((IkReal(0.300710000000000))*(npx)))+(((npx)*(x343))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j25array[0]=IKatan2(((gconst3)*(((((IkReal(-1.00000000000000))*(npy)*(x343)))+(((IkReal(-1.00000000000000))*(npy)*(x342)))+(((IkReal(-0.300710000000000))*(npy)))+(((npy)*(x341)))))), ((gconst3)*(((((npx)*(x342)))+(((IkReal(-1.00000000000000))*(npx)*(x341)))+(((IkReal(0.300710000000000))*(npx)))+(((npx)*(x343)))))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[5];
IkReal x344=IKcos(j25);
IkReal x345=IKsin(j25);
IkReal x346=((IkReal(0.0300000000000000))*(cj24));
IkReal x347=((IkReal(0.300700000000000))*(sj22));
IkReal x348=((IkReal(0.300700000000000))*(cj22));
IkReal x349=((npz)*(sj24));
IkReal x350=((IkReal(0.601420000000000))*(sj24));
IkReal x351=((cj24)*(npz));
IkReal x352=((IkReal(0.0600000000000000))*(cj24));
IkReal x353=((IkReal(0.0300000000000000))*(sj22));
IkReal x354=((npx)*(x344));
IkReal x355=((npy)*(x345));
IkReal x356=((IkReal(1.00000000000000))*(x355));
evalcond[0]=((((npy)*(x344)))+(((npx)*(x345))));
evalcond[1]=((IkReal(-0.300710000000000))+(((sj24)*(x354)))+(((IkReal(-1.00000000000000))*(sj24)*(x356)))+(((IkReal(-1.00000000000000))*(x351)))+(((IkReal(-1.00000000000000))*(x348)))+(x353));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(cj24)*(x356)))+(((cj24)*(x354)))+(x349)+(((IkReal(-1.00000000000000))*(x347))));
evalcond[3]=((((IkReal(-1.00000000000000))*(sj24)*(x348)))+(((IkReal(-1.00000000000000))*(cj24)*(x347)))+(((IkReal(-0.300710000000000))*(sj24)))+(((sj24)*(x353)))+(x346)+(x354)+(((IkReal(-1.00000000000000))*(x356)))+(((IkReal(-1.00000000000000))*(cj22)*(x346))));
evalcond[4]=((IkReal(-6.01410000000000e-6))+(((x352)*(x355)))+(((IkReal(-1.00000000000000))*(x350)*(x355)))+(((IkReal(-0.601420000000000))*(x351)))+(((x350)*(x354)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x349)))+(((IkReal(-1.00000000000000))*(x352)*(x354))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
IkReal x357=((npz)*(sj24));
IkReal x358=((IkReal(0.0300000000000000))*(npx));
IkReal x359=((IkReal(0.0300000000000000))*(npy));
IkReal x360=((IkReal(0.300700000000000))*(sj22));
if( IKabs(((gconst2)*(((((IkReal(-1.00000000000000))*(npy)*(x360)))+(((npy)*(x357)))+(((IkReal(-1.00000000000000))*(cj22)*(x359)))+(x359))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((((cj22)*(x358)))+(((npx)*(x360)))+(((IkReal(-1.00000000000000))*(npx)*(x357)))+(((IkReal(-1.00000000000000))*(x358))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j25array[0]=IKatan2(((gconst2)*(((((IkReal(-1.00000000000000))*(npy)*(x360)))+(((npy)*(x357)))+(((IkReal(-1.00000000000000))*(cj22)*(x359)))+(x359)))), ((gconst2)*(((((cj22)*(x358)))+(((npx)*(x360)))+(((IkReal(-1.00000000000000))*(npx)*(x357)))+(((IkReal(-1.00000000000000))*(x358)))))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[5];
IkReal x361=IKcos(j25);
IkReal x362=IKsin(j25);
IkReal x363=((IkReal(0.0300000000000000))*(cj24));
IkReal x364=((IkReal(0.300700000000000))*(sj22));
IkReal x365=((IkReal(0.300700000000000))*(cj22));
IkReal x366=((npz)*(sj24));
IkReal x367=((IkReal(0.601420000000000))*(sj24));
IkReal x368=((cj24)*(npz));
IkReal x369=((IkReal(0.0600000000000000))*(cj24));
IkReal x370=((IkReal(0.0300000000000000))*(sj22));
IkReal x371=((npx)*(x361));
IkReal x372=((npy)*(x362));
IkReal x373=((IkReal(1.00000000000000))*(x372));
evalcond[0]=((((npy)*(x361)))+(((npx)*(x362))));
evalcond[1]=((IkReal(-0.300710000000000))+(((IkReal(-1.00000000000000))*(sj24)*(x373)))+(((sj24)*(x371)))+(x370)+(((IkReal(-1.00000000000000))*(x368)))+(((IkReal(-1.00000000000000))*(x365))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj22)))+(x366)+(((cj24)*(x371)))+(((IkReal(-1.00000000000000))*(x364)))+(((IkReal(-1.00000000000000))*(cj24)*(x373))));
evalcond[3]=((x371)+(((IkReal(-1.00000000000000))*(sj24)*(x365)))+(x363)+(((IkReal(-0.300710000000000))*(sj24)))+(((sj24)*(x370)))+(((IkReal(-1.00000000000000))*(x373)))+(((IkReal(-1.00000000000000))*(cj22)*(x363)))+(((IkReal(-1.00000000000000))*(cj24)*(x364))));
evalcond[4]=((IkReal(-6.01410000000000e-6))+(((IkReal(-0.0600000000000000))*(x366)))+(((x369)*(x372)))+(((IkReal(-1.00000000000000))*(x367)*(x372)))+(((IkReal(-1.00000000000000))*(pp)))+(((x367)*(x371)))+(((IkReal(-0.601420000000000))*(x368)))+(((IkReal(-1.00000000000000))*(x369)*(x371))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x374=((IkReal(0.0300000000000000))*(sj24));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j23, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.182646994100000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.179046994000000))*(cj22)))+(((IkReal(-0.0360846000000000))*(sj22))));
evalcond[2]=((((IkReal(-1.00000000000000))*(npz)))+(x374)+(((IkReal(-0.300700000000000))*(sj22)*(sj24)))+(((IkReal(0.0300000000000000))*(cj24)*(sj22)))+(((IkReal(-1.00000000000000))*(cj22)*(x374)))+(((IkReal(-0.300700000000000))*(cj22)*(cj24)))+(((IkReal(-0.300710000000000))*(cj24))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst12;
gconst12=IKsign(((((sj24)*((npx)*(npx))))+(((sj24)*((npy)*(npy))))));
dummyeval[0]=((((sj24)*((npx)*(npx))))+(((sj24)*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst13;
gconst13=IKsign(((((cj24)*((npx)*(npx))))+(((cj24)*((npy)*(npy))))));
dummyeval[0]=((((cj24)*((npx)*(npx))))+(((cj24)*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x375=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-0.0300000000000000))*(cj22)))+(((IkReal(-0.300700000000000))*(sj22))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j24)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.182646994100000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.179046994000000))*(cj22)))+(((IkReal(-0.0360846000000000))*(sj22))));
evalcond[2]=x375;
evalcond[3]=x375;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst14;
gconst14=IKsign((((npy)*(npy))+((npx)*(npx))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst15;
gconst15=IKsign(((((IkReal(30071.0000000000))*((npx)*(npx))))+(((IkReal(30071.0000000000))*((npy)*(npy))))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
IkReal x376=((IkReal(50000.0000000000))*(pp));
IkReal x377=((IkReal(3000.00000000000))*(npz));
if( IKabs(((gconst15)*(((((IkReal(-1.00000000000000))*(npy)*(x376)))+(((npy)*(x377)))+(((IkReal(-0.300705000000000))*(npy))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst15)*(((((IkReal(0.300705000000000))*(npx)))+(((IkReal(-1.00000000000000))*(npx)*(x377)))+(((npx)*(x376))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j25array[0]=IKatan2(((gconst15)*(((((IkReal(-1.00000000000000))*(npy)*(x376)))+(((npy)*(x377)))+(((IkReal(-0.300705000000000))*(npy)))))), ((gconst15)*(((((IkReal(0.300705000000000))*(npx)))+(((IkReal(-1.00000000000000))*(npx)*(x377)))+(((npx)*(x376)))))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[3];
IkReal x378=IKcos(j25);
IkReal x379=IKsin(j25);
IkReal x380=((npx)*(x378));
IkReal x381=((npy)*(x379));
evalcond[0]=((((npx)*(x379)))+(((npy)*(x378))));
evalcond[1]=((IkReal(-0.300710000000000))+(x380)+(((IkReal(-0.300700000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(x381)))+(((IkReal(0.0300000000000000))*(sj22))));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(-0.601420000000000))*(x381)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(npz)))+(((IkReal(0.601420000000000))*(x380))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
IkReal x382=((IkReal(0.0300000000000000))*(sj22));
IkReal x383=((IkReal(0.300700000000000))*(cj22));
if( IKabs(((gconst14)*(((((IkReal(-1.00000000000000))*(npy)*(x383)))+(((npy)*(x382)))+(((IkReal(-0.300710000000000))*(npy))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst14)*(((((IkReal(-1.00000000000000))*(npx)*(x382)))+(((IkReal(0.300710000000000))*(npx)))+(((npx)*(x383))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j25array[0]=IKatan2(((gconst14)*(((((IkReal(-1.00000000000000))*(npy)*(x383)))+(((npy)*(x382)))+(((IkReal(-0.300710000000000))*(npy)))))), ((gconst14)*(((((IkReal(-1.00000000000000))*(npx)*(x382)))+(((IkReal(0.300710000000000))*(npx)))+(((npx)*(x383)))))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[3];
IkReal x384=IKcos(j25);
IkReal x385=IKsin(j25);
IkReal x386=((npx)*(x384));
IkReal x387=((npy)*(x385));
evalcond[0]=((((npx)*(x385)))+(((npy)*(x384))));
evalcond[1]=((IkReal(-0.300710000000000))+(x386)+(((IkReal(-0.300700000000000))*(cj22)))+(((IkReal(0.0300000000000000))*(sj22)))+(((IkReal(-1.00000000000000))*(x387))));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(-0.601420000000000))*(x387)))+(((IkReal(0.601420000000000))*(x386)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(npz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x388=((IkReal(0.0300000000000000))*(cj22));
IkReal x389=((IkReal(0.300700000000000))*(sj22));
IkReal x390=((x388)+(x389));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j24)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.182646994100000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.179046994000000))*(cj22)))+(((IkReal(-0.0360846000000000))*(sj22))));
evalcond[2]=((IkReal(-0.0300000000000000))+(((IkReal(-1.00000000000000))*(npz)))+(x390));
evalcond[3]=((IkReal(0.0300000000000000))+(npz)+(((IkReal(-1.00000000000000))*(x390))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst16;
gconst16=IKsign(((((IkReal(-1.00000000000000))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst17;
gconst17=IKsign(((((IkReal(-30071.0000000000))*((npx)*(npx))))+(((IkReal(-30071.0000000000))*((npy)*(npy))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
IkReal x391=((IkReal(50000.0000000000))*(pp));
IkReal x392=((IkReal(3000.00000000000))*(npz));
if( IKabs(((gconst17)*(((((IkReal(-1.00000000000000))*(npy)*(x391)))+(((IkReal(-1.00000000000000))*(npy)*(x392)))+(((IkReal(-0.300705000000000))*(npy))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst17)*(((((IkReal(0.300705000000000))*(npx)))+(((npx)*(x392)))+(((npx)*(x391))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j25array[0]=IKatan2(((gconst17)*(((((IkReal(-1.00000000000000))*(npy)*(x391)))+(((IkReal(-1.00000000000000))*(npy)*(x392)))+(((IkReal(-0.300705000000000))*(npy)))))), ((gconst17)*(((((IkReal(0.300705000000000))*(npx)))+(((npx)*(x392)))+(((npx)*(x391)))))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[3];
IkReal x393=IKsin(j25);
IkReal x394=IKcos(j25);
IkReal x395=((npx)*(x394));
IkReal x396=((npy)*(x393));
evalcond[0]=((((npx)*(x393)))+(((npy)*(x394))));
evalcond[1]=((IkReal(-0.300710000000000))+(((IkReal(-0.300700000000000))*(cj22)))+(((IkReal(0.0300000000000000))*(sj22)))+(((IkReal(-1.00000000000000))*(x395)))+(x396));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(0.601420000000000))*(x396)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(npz)))+(((IkReal(-0.601420000000000))*(x395))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
IkReal x397=((IkReal(0.0300000000000000))*(sj22));
IkReal x398=((IkReal(0.300700000000000))*(cj22));
if( IKabs(((gconst16)*(((((IkReal(-0.300710000000000))*(npy)))+(((IkReal(-1.00000000000000))*(npy)*(x398)))+(((npy)*(x397))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst16)*(((((IkReal(-1.00000000000000))*(npx)*(x397)))+(((IkReal(0.300710000000000))*(npx)))+(((npx)*(x398))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j25array[0]=IKatan2(((gconst16)*(((((IkReal(-0.300710000000000))*(npy)))+(((IkReal(-1.00000000000000))*(npy)*(x398)))+(((npy)*(x397)))))), ((gconst16)*(((((IkReal(-1.00000000000000))*(npx)*(x397)))+(((IkReal(0.300710000000000))*(npx)))+(((npx)*(x398)))))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[3];
IkReal x399=IKsin(j25);
IkReal x400=IKcos(j25);
IkReal x401=((npx)*(x400));
IkReal x402=((npy)*(x399));
evalcond[0]=((((npy)*(x400)))+(((npx)*(x399))));
evalcond[1]=((IkReal(-0.300710000000000))+(((IkReal(-0.300700000000000))*(cj22)))+(((IkReal(0.0300000000000000))*(sj22)))+(((IkReal(-1.00000000000000))*(x401)))+(x402));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.601420000000000))*(x402)))+(((IkReal(-0.0600000000000000))*(npz)))+(((IkReal(-0.601420000000000))*(x401))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x403=((IkReal(-0.300710000000000))+(((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-0.300700000000000))*(cj22)))+(((IkReal(0.0300000000000000))*(sj22))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j24)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.182646994100000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.179046994000000))*(cj22)))+(((IkReal(-0.0360846000000000))*(sj22))));
evalcond[2]=x403;
evalcond[3]=x403;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst18;
gconst18=IKsign(((((IkReal(-1.00000000000000))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst19;
gconst19=IKsign(((((IkReal(3.00000000000000))*((npx)*(npx))))+(((IkReal(3.00000000000000))*((npy)*(npy))))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
IkReal x404=((IkReal(50.0000000000000))*(pp));
IkReal x405=((IkReal(30.0710000000000))*(npz));
if( IKabs(((gconst19)*(((((IkReal(-1.00000000000000))*(npy)*(x405)))+(((IkReal(-1.00000000000000))*(npy)*(x404)))+(((IkReal(-0.000300705000000000))*(npy))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst19)*(((((npx)*(x404)))+(((npx)*(x405)))+(((IkReal(0.000300705000000000))*(npx))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j25array[0]=IKatan2(((gconst19)*(((((IkReal(-1.00000000000000))*(npy)*(x405)))+(((IkReal(-1.00000000000000))*(npy)*(x404)))+(((IkReal(-0.000300705000000000))*(npy)))))), ((gconst19)*(((((npx)*(x404)))+(((npx)*(x405)))+(((IkReal(0.000300705000000000))*(npx)))))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[3];
IkReal x406=IKsin(j25);
IkReal x407=IKcos(j25);
IkReal x408=((npx)*(x407));
IkReal x409=((npy)*(x406));
evalcond[0]=((((npx)*(x406)))+(((npy)*(x407))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj22)))+(((IkReal(-0.300700000000000))*(sj22)))+(x409)+(((IkReal(-1.00000000000000))*(x408))));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(0.0600000000000000))*(x408)))+(((IkReal(-0.0600000000000000))*(x409)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.601420000000000))*(npz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
IkReal x410=((IkReal(0.0300000000000000))*(npx));
IkReal x411=((IkReal(0.0300000000000000))*(npy));
IkReal x412=((IkReal(0.300700000000000))*(sj22));
if( IKabs(((gconst18)*(((((IkReal(-1.00000000000000))*(cj22)*(x411)))+(((IkReal(-1.00000000000000))*(npy)*(x412)))+(x411))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst18)*(((((cj22)*(x410)))+(((IkReal(-1.00000000000000))*(x410)))+(((npx)*(x412))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j25array[0]=IKatan2(((gconst18)*(((((IkReal(-1.00000000000000))*(cj22)*(x411)))+(((IkReal(-1.00000000000000))*(npy)*(x412)))+(x411)))), ((gconst18)*(((((cj22)*(x410)))+(((IkReal(-1.00000000000000))*(x410)))+(((npx)*(x412)))))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[3];
IkReal x413=IKsin(j25);
IkReal x414=IKcos(j25);
IkReal x415=((npx)*(x414));
IkReal x416=((npy)*(x413));
evalcond[0]=((((npx)*(x413)))+(((npy)*(x414))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj22)))+(((IkReal(-0.300700000000000))*(sj22)))+(((IkReal(-1.00000000000000))*(x415)))+(x416));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(-0.0600000000000000))*(x416)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(x415)))+(((IkReal(-0.601420000000000))*(npz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x417=((IkReal(0.300700000000000))*(cj22));
IkReal x418=((IkReal(0.0300000000000000))*(sj22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j24, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.182646994100000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.179046994000000))*(cj22)))+(((IkReal(-0.0360846000000000))*(sj22))));
evalcond[2]=((IkReal(-0.300710000000000))+(npz)+(x418)+(((IkReal(-1.00000000000000))*(x417))));
evalcond[3]=((IkReal(0.300710000000000))+(((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-1.00000000000000))*(x418)))+(x417));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst20;
gconst20=IKsign((((npy)*(npy))+((npx)*(npx))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst21;
gconst21=IKsign(((((IkReal(-3.00000000000000))*((npx)*(npx))))+(((IkReal(-3.00000000000000))*((npy)*(npy))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
IkReal x419=((IkReal(50.0000000000000))*(pp));
IkReal x420=((IkReal(30.0710000000000))*(npz));
if( IKabs(((gconst21)*(((((IkReal(-0.000300705000000000))*(npy)))+(((IkReal(-1.00000000000000))*(npy)*(x419)))+(((npy)*(x420))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst21)*(((((IkReal(-1.00000000000000))*(npx)*(x420)))+(((npx)*(x419)))+(((IkReal(0.000300705000000000))*(npx))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j25array[0]=IKatan2(((gconst21)*(((((IkReal(-0.000300705000000000))*(npy)))+(((IkReal(-1.00000000000000))*(npy)*(x419)))+(((npy)*(x420)))))), ((gconst21)*(((((IkReal(-1.00000000000000))*(npx)*(x420)))+(((npx)*(x419)))+(((IkReal(0.000300705000000000))*(npx)))))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[3];
IkReal x421=IKcos(j25);
IkReal x422=IKsin(j25);
IkReal x423=((npx)*(x421));
IkReal x424=((npy)*(x422));
evalcond[0]=((((npx)*(x422)))+(((npy)*(x421))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj22)))+(x423)+(((IkReal(-0.300700000000000))*(sj22)))+(((IkReal(-1.00000000000000))*(x424))));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(-0.0600000000000000))*(x423)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(x424)))+(((IkReal(0.601420000000000))*(npz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
IkReal x425=((IkReal(0.0300000000000000))*(npx));
IkReal x426=((IkReal(0.0300000000000000))*(npy));
IkReal x427=((IkReal(0.300700000000000))*(sj22));
if( IKabs(((gconst20)*(((((IkReal(-1.00000000000000))*(npy)*(x427)))+(x426)+(((IkReal(-1.00000000000000))*(cj22)*(x426))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst20)*(((((npx)*(x427)))+(((IkReal(-1.00000000000000))*(x425)))+(((cj22)*(x425))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j25array[0]=IKatan2(((gconst20)*(((((IkReal(-1.00000000000000))*(npy)*(x427)))+(x426)+(((IkReal(-1.00000000000000))*(cj22)*(x426)))))), ((gconst20)*(((((npx)*(x427)))+(((IkReal(-1.00000000000000))*(x425)))+(((cj22)*(x425)))))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[3];
IkReal x428=IKcos(j25);
IkReal x429=IKsin(j25);
IkReal x430=((npx)*(x428));
IkReal x431=((npy)*(x429));
evalcond[0]=((((npy)*(x428)))+(((npx)*(x429))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x431)))+(x430)+(((IkReal(-0.0300000000000000))*(cj22)))+(((IkReal(-0.300700000000000))*(sj22))));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(-0.0600000000000000))*(x430)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(x431)))+(((IkReal(0.601420000000000))*(npz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
IkReal x432=((npz)*(sj24));
IkReal x433=((IkReal(0.0300000000000000))*(npx));
IkReal x434=((IkReal(0.0300000000000000))*(npy));
IkReal x435=((IkReal(0.300700000000000))*(sj22));
if( IKabs(((gconst13)*(((((npy)*(x435)))+(((cj22)*(x434)))+(((npy)*(x432)))+(((IkReal(-1.00000000000000))*(x434))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst13)*(((x433)+(((IkReal(-1.00000000000000))*(npx)*(x435)))+(((IkReal(-1.00000000000000))*(npx)*(x432)))+(((IkReal(-1.00000000000000))*(cj22)*(x433))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j25array[0]=IKatan2(((gconst13)*(((((npy)*(x435)))+(((cj22)*(x434)))+(((npy)*(x432)))+(((IkReal(-1.00000000000000))*(x434)))))), ((gconst13)*(((x433)+(((IkReal(-1.00000000000000))*(npx)*(x435)))+(((IkReal(-1.00000000000000))*(npx)*(x432)))+(((IkReal(-1.00000000000000))*(cj22)*(x433)))))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[5];
IkReal x436=IKcos(j25);
IkReal x437=IKsin(j25);
IkReal x438=((IkReal(0.0300000000000000))*(cj24));
IkReal x439=((IkReal(0.300700000000000))*(sj22));
IkReal x440=((IkReal(0.300700000000000))*(cj22));
IkReal x441=((IkReal(0.601420000000000))*(sj24));
IkReal x442=((npz)*(sj24));
IkReal x443=((cj24)*(npz));
IkReal x444=((IkReal(0.0600000000000000))*(cj24));
IkReal x445=((IkReal(0.0300000000000000))*(sj22));
IkReal x446=((npy)*(x437));
IkReal x447=((npx)*(x436));
evalcond[0]=((((npx)*(x437)))+(((npy)*(x436))));
evalcond[1]=((IkReal(-0.300710000000000))+(((sj24)*(x447)))+(x445)+(((IkReal(-1.00000000000000))*(sj24)*(x446)))+(((IkReal(-1.00000000000000))*(x440)))+(((IkReal(-1.00000000000000))*(x443))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(cj24)*(x447)))+(((cj24)*(x446)))+(((IkReal(-1.00000000000000))*(x442)))+(((IkReal(-1.00000000000000))*(x439))));
evalcond[3]=((((IkReal(-1.00000000000000))*(sj24)*(x440)))+(((IkReal(-1.00000000000000))*(x446)))+(x447)+(((IkReal(-0.300710000000000))*(sj24)))+(((IkReal(-1.00000000000000))*(x438)))+(((sj24)*(x445)))+(((cj22)*(x438)))+(((cj24)*(x439))));
evalcond[4]=((IkReal(-6.01410000000000e-6))+(((IkReal(-0.601420000000000))*(x443)))+(((IkReal(0.0600000000000000))*(x442)))+(((IkReal(-1.00000000000000))*(pp)))+(((x444)*(x447)))+(((IkReal(-1.00000000000000))*(x441)*(x446)))+(((x441)*(x447)))+(((IkReal(-1.00000000000000))*(x444)*(x446))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
IkReal x448=((IkReal(0.0300000000000000))*(sj22));
IkReal x449=((cj24)*(npz));
IkReal x450=((IkReal(0.300700000000000))*(cj22));
if( IKabs(((gconst12)*(((((IkReal(-0.300710000000000))*(npy)))+(((npy)*(x448)))+(((IkReal(-1.00000000000000))*(npy)*(x449)))+(((IkReal(-1.00000000000000))*(npy)*(x450))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst12)*(((((IkReal(-1.00000000000000))*(npx)*(x448)))+(((npx)*(x450)))+(((IkReal(0.300710000000000))*(npx)))+(((npx)*(x449))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j25array[0]=IKatan2(((gconst12)*(((((IkReal(-0.300710000000000))*(npy)))+(((npy)*(x448)))+(((IkReal(-1.00000000000000))*(npy)*(x449)))+(((IkReal(-1.00000000000000))*(npy)*(x450)))))), ((gconst12)*(((((IkReal(-1.00000000000000))*(npx)*(x448)))+(((npx)*(x450)))+(((IkReal(0.300710000000000))*(npx)))+(((npx)*(x449)))))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[5];
IkReal x451=IKcos(j25);
IkReal x452=IKsin(j25);
IkReal x453=((IkReal(0.0300000000000000))*(cj24));
IkReal x454=((IkReal(0.300700000000000))*(sj22));
IkReal x455=((IkReal(0.300700000000000))*(cj22));
IkReal x456=((IkReal(0.601420000000000))*(sj24));
IkReal x457=((npz)*(sj24));
IkReal x458=((cj24)*(npz));
IkReal x459=((IkReal(0.0600000000000000))*(cj24));
IkReal x460=((IkReal(0.0300000000000000))*(sj22));
IkReal x461=((npy)*(x452));
IkReal x462=((npx)*(x451));
evalcond[0]=((((npx)*(x452)))+(((npy)*(x451))));
evalcond[1]=((IkReal(-0.300710000000000))+(((IkReal(-1.00000000000000))*(x455)))+(((IkReal(-1.00000000000000))*(x458)))+(x460)+(((sj24)*(x462)))+(((IkReal(-1.00000000000000))*(sj24)*(x461))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x454)))+(((IkReal(-0.0300000000000000))*(cj22)))+(((cj24)*(x461)))+(((IkReal(-1.00000000000000))*(x457)))+(((IkReal(-1.00000000000000))*(cj24)*(x462))));
evalcond[3]=((((cj24)*(x454)))+(((IkReal(-1.00000000000000))*(x461)))+(((cj22)*(x453)))+(x462)+(((IkReal(-0.300710000000000))*(sj24)))+(((sj24)*(x460)))+(((IkReal(-1.00000000000000))*(sj24)*(x455)))+(((IkReal(-1.00000000000000))*(x453))));
evalcond[4]=((IkReal(-6.01410000000000e-6))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x459)*(x461)))+(((x456)*(x462)))+(((IkReal(-1.00000000000000))*(x456)*(x461)))+(((IkReal(-0.601420000000000))*(x458)))+(((IkReal(0.0600000000000000))*(x457)))+(((x459)*(x462))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x463=((IkReal(0.0300000000000000))*(cj23));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j24)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.182646994100000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.179046994000000))*(cj22)))+(((IkReal(-0.0360846000000000))*(sj22))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x463)))+(((cj22)*(x463)))+(((IkReal(-1.00000000000000))*(npz)))+(((IkReal(0.300700000000000))*(cj23)*(sj22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst22;
gconst22=IKsign(((((cj23)*((npx)*(npx))))+(((cj23)*((npy)*(npy))))));
dummyeval[0]=((((cj23)*((npx)*(npx))))+(((cj23)*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst23;
gconst23=IKsign((((npy)*(npy))+((npx)*(npx))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j23)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.182646994100000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.179046994000000))*(cj22)))+(((IkReal(-0.0360846000000000))*(sj22))));
evalcond[2]=npz;
evalcond[3]=((IkReal(-1.00000000000000))*(npz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst24;
gconst24=IKsign((((npy)*(npy))+((npx)*(npx))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst25;
gconst25=IKsign(((((IkReal(0.601420000000000))*((npx)*(npx))))+(((IkReal(0.601420000000000))*((npy)*(npy))))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
IkReal x464=((IkReal(0.180846994000000))*(sj22));
IkReal x465=((cj22)*(npy));
IkReal x466=((IkReal(0.0180426000000000))*(npx));
IkReal x467=((IkReal(0.0180420000000000))*(sj22));
if( IKabs(((gconst25)*(((((IkReal(-0.00180000000000000))*(x465)))+(((IkReal(-1.00000000000000))*(cj22)*(x466)))+(x466)+(((IkReal(-1.00000000000000))*(npy)*(x467)))+(((IkReal(-1.00000000000000))*(npy)*(pp)))+(((IkReal(-1.00000000000000))*(npx)*(x464)))+(((IkReal(0.00179398590000000))*(npy))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst25)*(((((npx)*(pp)))+(((IkReal(-1.00000000000000))*(npy)*(x464)))+(((npx)*(x467)))+(((IkReal(-0.0180426000000000))*(x465)))+(((IkReal(0.0180426000000000))*(npy)))+(((IkReal(-0.00179398590000000))*(npx)))+(((IkReal(0.00180000000000000))*(cj22)*(npx))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j25array[0]=IKatan2(((gconst25)*(((((IkReal(-0.00180000000000000))*(x465)))+(((IkReal(-1.00000000000000))*(cj22)*(x466)))+(x466)+(((IkReal(-1.00000000000000))*(npy)*(x467)))+(((IkReal(-1.00000000000000))*(npy)*(pp)))+(((IkReal(-1.00000000000000))*(npx)*(x464)))+(((IkReal(0.00179398590000000))*(npy)))))), ((gconst25)*(((((npx)*(pp)))+(((IkReal(-1.00000000000000))*(npy)*(x464)))+(((npx)*(x467)))+(((IkReal(-0.0180426000000000))*(x465)))+(((IkReal(0.0180426000000000))*(npy)))+(((IkReal(-0.00179398590000000))*(npx)))+(((IkReal(0.00180000000000000))*(cj22)*(npx)))))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[3];
IkReal x468=IKcos(j25);
IkReal x469=IKsin(j25);
IkReal x470=((npx)*(x469));
IkReal x471=((npx)*(x468));
IkReal x472=((npy)*(x469));
IkReal x473=((npy)*(x468));
evalcond[0]=((IkReal(-0.0300000000000000))+(x470)+(x473)+(((IkReal(0.0300000000000000))*(cj22)))+(((IkReal(0.300700000000000))*(sj22))));
evalcond[1]=((IkReal(-0.300710000000000))+(x471)+(((IkReal(-1.00000000000000))*(x472)))+(((IkReal(-0.300700000000000))*(cj22)))+(((IkReal(0.0300000000000000))*(sj22))));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(0.0600000000000000))*(x473)))+(((IkReal(-0.601420000000000))*(x472)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.601420000000000))*(x471)))+(((IkReal(0.0600000000000000))*(x470))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
IkReal x474=((IkReal(0.0300000000000000))*(npy));
IkReal x475=((IkReal(0.0300000000000000))*(npx));
IkReal x476=((IkReal(0.300700000000000))*(cj22));
IkReal x477=((IkReal(0.300700000000000))*(sj22));
if( IKabs(((gconst24)*(((x475)+(((IkReal(-1.00000000000000))*(npy)*(x476)))+(((IkReal(-1.00000000000000))*(cj22)*(x475)))+(((IkReal(-0.300710000000000))*(npy)))+(((sj22)*(x474)))+(((IkReal(-1.00000000000000))*(npx)*(x477))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst24)*(((x474)+(((IkReal(-1.00000000000000))*(sj22)*(x475)))+(((IkReal(-1.00000000000000))*(cj22)*(x474)))+(((IkReal(0.300710000000000))*(npx)))+(((npx)*(x476)))+(((IkReal(-1.00000000000000))*(npy)*(x477))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j25array[0]=IKatan2(((gconst24)*(((x475)+(((IkReal(-1.00000000000000))*(npy)*(x476)))+(((IkReal(-1.00000000000000))*(cj22)*(x475)))+(((IkReal(-0.300710000000000))*(npy)))+(((sj22)*(x474)))+(((IkReal(-1.00000000000000))*(npx)*(x477)))))), ((gconst24)*(((x474)+(((IkReal(-1.00000000000000))*(sj22)*(x475)))+(((IkReal(-1.00000000000000))*(cj22)*(x474)))+(((IkReal(0.300710000000000))*(npx)))+(((npx)*(x476)))+(((IkReal(-1.00000000000000))*(npy)*(x477)))))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[3];
IkReal x478=IKcos(j25);
IkReal x479=IKsin(j25);
IkReal x480=((npx)*(x479));
IkReal x481=((npx)*(x478));
IkReal x482=((npy)*(x479));
IkReal x483=((npy)*(x478));
evalcond[0]=((IkReal(-0.0300000000000000))+(((IkReal(0.0300000000000000))*(cj22)))+(((IkReal(0.300700000000000))*(sj22)))+(x480)+(x483));
evalcond[1]=((IkReal(-0.300710000000000))+(((IkReal(-0.300700000000000))*(cj22)))+(((IkReal(0.0300000000000000))*(sj22)))+(((IkReal(-1.00000000000000))*(x482)))+(x481));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(-0.601420000000000))*(x482)))+(((IkReal(0.601420000000000))*(x481)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(x483)))+(((IkReal(0.0600000000000000))*(x480))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x484=((IkReal(-1.00000000000000))*(npz));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j23)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.182646994100000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.179046994000000))*(cj22)))+(((IkReal(-0.0360846000000000))*(sj22))));
evalcond[2]=x484;
evalcond[3]=x484;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst26;
gconst26=IKsign((((npy)*(npy))+((npx)*(npx))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst27;
gconst27=IKsign(((((IkReal(0.601420000000000))*((npx)*(npx))))+(((IkReal(0.601420000000000))*((npy)*(npy))))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
IkReal x485=((cj22)*(npy));
IkReal x486=((IkReal(0.0180426000000000))*(npx));
IkReal x487=((npx)*(sj22));
IkReal x488=((npy)*(sj22));
if( IKabs(((gconst27)*(((((IkReal(-0.0180420000000000))*(x488)))+(((cj22)*(x486)))+(((IkReal(-1.00000000000000))*(x486)))+(((IkReal(-1.00000000000000))*(npy)*(pp)))+(((IkReal(0.00179398590000000))*(npy)))+(((IkReal(0.180846994000000))*(x487)))+(((IkReal(-0.00180000000000000))*(x485))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst27)*(((((npx)*(pp)))+(((IkReal(0.0180426000000000))*(x485)))+(((IkReal(0.0180420000000000))*(x487)))+(((IkReal(-0.0180426000000000))*(npy)))+(((IkReal(-0.00179398590000000))*(npx)))+(((IkReal(0.180846994000000))*(x488)))+(((IkReal(0.00180000000000000))*(cj22)*(npx))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j25array[0]=IKatan2(((gconst27)*(((((IkReal(-0.0180420000000000))*(x488)))+(((cj22)*(x486)))+(((IkReal(-1.00000000000000))*(x486)))+(((IkReal(-1.00000000000000))*(npy)*(pp)))+(((IkReal(0.00179398590000000))*(npy)))+(((IkReal(0.180846994000000))*(x487)))+(((IkReal(-0.00180000000000000))*(x485)))))), ((gconst27)*(((((npx)*(pp)))+(((IkReal(0.0180426000000000))*(x485)))+(((IkReal(0.0180420000000000))*(x487)))+(((IkReal(-0.0180426000000000))*(npy)))+(((IkReal(-0.00179398590000000))*(npx)))+(((IkReal(0.180846994000000))*(x488)))+(((IkReal(0.00180000000000000))*(cj22)*(npx)))))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[3];
IkReal x489=IKcos(j25);
IkReal x490=IKsin(j25);
IkReal x491=((npx)*(x490));
IkReal x492=((npx)*(x489));
IkReal x493=((npy)*(x490));
IkReal x494=((npy)*(x489));
evalcond[0]=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj22)))+(((IkReal(-0.300700000000000))*(sj22)))+(x491)+(x494));
evalcond[1]=((IkReal(-0.300710000000000))+(((IkReal(-1.00000000000000))*(x493)))+(((IkReal(-0.300700000000000))*(cj22)))+(((IkReal(0.0300000000000000))*(sj22)))+(x492));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(-0.601420000000000))*(x493)))+(((IkReal(-0.0600000000000000))*(x491)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x494)))+(((IkReal(0.601420000000000))*(x492))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
IkReal x495=((IkReal(0.0300000000000000))*(npy));
IkReal x496=((IkReal(0.0300000000000000))*(npx));
IkReal x497=((IkReal(0.300700000000000))*(cj22));
IkReal x498=((IkReal(0.300700000000000))*(sj22));
if( IKabs(((gconst26)*(((((sj22)*(x495)))+(((IkReal(-1.00000000000000))*(x496)))+(((cj22)*(x496)))+(((IkReal(-0.300710000000000))*(npy)))+(((npx)*(x498)))+(((IkReal(-1.00000000000000))*(npy)*(x497))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst26)*(((((IkReal(-1.00000000000000))*(sj22)*(x496)))+(((npy)*(x498)))+(((cj22)*(x495)))+(((npx)*(x497)))+(((IkReal(0.300710000000000))*(npx)))+(((IkReal(-1.00000000000000))*(x495))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j25array[0]=IKatan2(((gconst26)*(((((sj22)*(x495)))+(((IkReal(-1.00000000000000))*(x496)))+(((cj22)*(x496)))+(((IkReal(-0.300710000000000))*(npy)))+(((npx)*(x498)))+(((IkReal(-1.00000000000000))*(npy)*(x497)))))), ((gconst26)*(((((IkReal(-1.00000000000000))*(sj22)*(x496)))+(((npy)*(x498)))+(((cj22)*(x495)))+(((npx)*(x497)))+(((IkReal(0.300710000000000))*(npx)))+(((IkReal(-1.00000000000000))*(x495)))))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[3];
IkReal x499=IKcos(j25);
IkReal x500=IKsin(j25);
IkReal x501=((npx)*(x500));
IkReal x502=((npx)*(x499));
IkReal x503=((npy)*(x500));
IkReal x504=((npy)*(x499));
evalcond[0]=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj22)))+(((IkReal(-0.300700000000000))*(sj22)))+(x501)+(x504));
evalcond[1]=((IkReal(-0.300710000000000))+(((IkReal(-0.300700000000000))*(cj22)))+(((IkReal(0.0300000000000000))*(sj22)))+(((IkReal(-1.00000000000000))*(x503)))+(x502));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(0.601420000000000))*(x502)))+(((IkReal(-0.0600000000000000))*(x501)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x504)))+(((IkReal(-0.601420000000000))*(x503))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
IkReal x505=((IkReal(0.300700000000000))*(cj22));
IkReal x506=((IkReal(0.0300000000000000))*(npy));
IkReal x507=((IkReal(0.0300000000000000))*(npx));
IkReal x508=((IkReal(0.0300000000000000))*(cj22)*(sj23));
IkReal x509=((IkReal(0.300700000000000))*(sj22)*(sj23));
if( IKabs(((gconst23)*(((((IkReal(-0.300710000000000))*(npy)))+(((sj22)*(x506)))+(((IkReal(-1.00000000000000))*(npx)*(x509)))+(((IkReal(-1.00000000000000))*(cj22)*(sj23)*(x507)))+(((sj23)*(x507)))+(((IkReal(-1.00000000000000))*(npy)*(x505))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst23)*(((((IkReal(-1.00000000000000))*(sj22)*(x507)))+(((IkReal(-1.00000000000000))*(cj22)*(sj23)*(x506)))+(((IkReal(0.300710000000000))*(npx)))+(((sj23)*(x506)))+(((npx)*(x505)))+(((IkReal(-1.00000000000000))*(npy)*(x509))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j25array[0]=IKatan2(((gconst23)*(((((IkReal(-0.300710000000000))*(npy)))+(((sj22)*(x506)))+(((IkReal(-1.00000000000000))*(npx)*(x509)))+(((IkReal(-1.00000000000000))*(cj22)*(sj23)*(x507)))+(((sj23)*(x507)))+(((IkReal(-1.00000000000000))*(npy)*(x505)))))), ((gconst23)*(((((IkReal(-1.00000000000000))*(sj22)*(x507)))+(((IkReal(-1.00000000000000))*(cj22)*(sj23)*(x506)))+(((IkReal(0.300710000000000))*(npx)))+(((sj23)*(x506)))+(((npx)*(x505)))+(((IkReal(-1.00000000000000))*(npy)*(x509)))))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[5];
IkReal x510=IKcos(j25);
IkReal x511=IKsin(j25);
IkReal x512=((IkReal(0.0300000000000000))*(cj22));
IkReal x513=((cj23)*(npz));
IkReal x514=((IkReal(0.300700000000000))*(sj22));
IkReal x515=((IkReal(0.0600000000000000))*(sj23));
IkReal x516=((IkReal(1.00000000000000))*(sj23));
IkReal x517=((npx)*(x510));
IkReal x518=((npy)*(x511));
IkReal x519=((npx)*(x511));
IkReal x520=((npy)*(x510));
evalcond[0]=((x519)+(((IkReal(-0.0300000000000000))*(sj23)))+(((sj23)*(x512)))+(((sj23)*(x514)))+(x520));
evalcond[1]=((IkReal(-0.300710000000000))+(((IkReal(-1.00000000000000))*(x518)))+(x517)+(((IkReal(-0.300700000000000))*(cj22)))+(((IkReal(0.0300000000000000))*(sj22))));
evalcond[2]=((((cj23)*(x519)))+(((cj23)*(x520)))+(((npz)*(sj23))));
evalcond[3]=((IkReal(0.0300000000000000))+(x513)+(((IkReal(-1.00000000000000))*(x514)))+(((IkReal(-1.00000000000000))*(x516)*(x520)))+(((IkReal(-1.00000000000000))*(x516)*(x519)))+(((IkReal(-1.00000000000000))*(x512))));
evalcond[4]=((IkReal(-6.01410000000000e-6))+(((IkReal(0.601420000000000))*(x517)))+(((x515)*(x520)))+(((IkReal(-0.601420000000000))*(x518)))+(((IkReal(-0.0600000000000000))*(x513)))+(((x515)*(x519)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
IkReal x521=((cj23)*(npy));
IkReal x522=((IkReal(0.0300000000000000))*(sj22));
IkReal x523=((cj23)*(npx));
IkReal x524=((IkReal(0.300700000000000))*(cj22)*(cj23));
IkReal x525=((IkReal(1.00000000000000))*(npz)*(sj23));
if( IKabs(((gconst22)*(((((x521)*(x522)))+(((IkReal(-0.300710000000000))*(x521)))+(((IkReal(-1.00000000000000))*(npx)*(x525)))+(((IkReal(-0.300700000000000))*(cj22)*(x521))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst22)*(((((IkReal(0.300700000000000))*(cj22)*(x523)))+(((IkReal(-1.00000000000000))*(x522)*(x523)))+(((IkReal(0.300710000000000))*(x523)))+(((IkReal(-1.00000000000000))*(npy)*(x525))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j25array[0]=IKatan2(((gconst22)*(((((x521)*(x522)))+(((IkReal(-0.300710000000000))*(x521)))+(((IkReal(-1.00000000000000))*(npx)*(x525)))+(((IkReal(-0.300700000000000))*(cj22)*(x521)))))), ((gconst22)*(((((IkReal(0.300700000000000))*(cj22)*(x523)))+(((IkReal(-1.00000000000000))*(x522)*(x523)))+(((IkReal(0.300710000000000))*(x523)))+(((IkReal(-1.00000000000000))*(npy)*(x525)))))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[5];
IkReal x526=IKcos(j25);
IkReal x527=IKsin(j25);
IkReal x528=((IkReal(0.0300000000000000))*(cj22));
IkReal x529=((cj23)*(npz));
IkReal x530=((IkReal(0.300700000000000))*(sj22));
IkReal x531=((IkReal(0.0600000000000000))*(sj23));
IkReal x532=((IkReal(1.00000000000000))*(sj23));
IkReal x533=((npx)*(x526));
IkReal x534=((npy)*(x527));
IkReal x535=((npx)*(x527));
IkReal x536=((npy)*(x526));
evalcond[0]=((((IkReal(-0.0300000000000000))*(sj23)))+(((sj23)*(x528)))+(((sj23)*(x530)))+(x535)+(x536));
evalcond[1]=((IkReal(-0.300710000000000))+(((IkReal(-1.00000000000000))*(x534)))+(((IkReal(-0.300700000000000))*(cj22)))+(((IkReal(0.0300000000000000))*(sj22)))+(x533));
evalcond[2]=((((cj23)*(x535)))+(((cj23)*(x536)))+(((npz)*(sj23))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x532)*(x536)))+(((IkReal(-1.00000000000000))*(x528)))+(((IkReal(-1.00000000000000))*(x532)*(x535)))+(((IkReal(-1.00000000000000))*(x530)))+(x529));
evalcond[4]=((IkReal(-6.01410000000000e-6))+(((x531)*(x536)))+(((IkReal(0.601420000000000))*(x533)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.601420000000000))*(x534)))+(((IkReal(-0.0600000000000000))*(x529)))+(((x531)*(x535))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x537=((IkReal(0.0300000000000000))*(cj23));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j24)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.182646994100000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.179046994000000))*(cj22)))+(((IkReal(-0.0360846000000000))*(sj22))));
evalcond[2]=((((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-0.300700000000000))*(cj23)*(sj22)))+(((IkReal(-1.00000000000000))*(cj22)*(x537)))+(x537));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst28;
gconst28=IKsign(((((cj23)*((npx)*(npx))))+(((cj23)*((npy)*(npy))))));
dummyeval[0]=((((cj23)*((npx)*(npx))))+(((cj23)*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst29;
gconst29=IKsign(((((IkReal(-1.00000000000000))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x538=((IkReal(-1.00000000000000))*(npz));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j23)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.182646994100000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.179046994000000))*(cj22)))+(((IkReal(-0.0360846000000000))*(sj22))));
evalcond[2]=x538;
evalcond[3]=x538;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst30;
gconst30=IKsign(((((IkReal(-1.00000000000000))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst31;
gconst31=IKsign(((((IkReal(-0.601420000000000))*((npx)*(npx))))+(((IkReal(-0.601420000000000))*((npy)*(npy))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
IkReal x539=((cj22)*(npy));
IkReal x540=((IkReal(0.0180426000000000))*(npx));
IkReal x541=((npx)*(sj22));
IkReal x542=((npy)*(sj22));
if( IKabs(((gconst31)*(((((IkReal(0.180846994000000))*(x541)))+(((IkReal(-0.0180420000000000))*(x542)))+(((cj22)*(x540)))+(((IkReal(-1.00000000000000))*(x540)))+(((IkReal(-0.00180000000000000))*(x539)))+(((IkReal(-1.00000000000000))*(npy)*(pp)))+(((IkReal(0.00179398590000000))*(npy))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst31)*(((((npx)*(pp)))+(((IkReal(0.0180426000000000))*(x539)))+(((IkReal(-0.0180426000000000))*(npy)))+(((IkReal(-0.00179398590000000))*(npx)))+(((IkReal(0.0180420000000000))*(x541)))+(((IkReal(0.00180000000000000))*(cj22)*(npx)))+(((IkReal(0.180846994000000))*(x542))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j25array[0]=IKatan2(((gconst31)*(((((IkReal(0.180846994000000))*(x541)))+(((IkReal(-0.0180420000000000))*(x542)))+(((cj22)*(x540)))+(((IkReal(-1.00000000000000))*(x540)))+(((IkReal(-0.00180000000000000))*(x539)))+(((IkReal(-1.00000000000000))*(npy)*(pp)))+(((IkReal(0.00179398590000000))*(npy)))))), ((gconst31)*(((((npx)*(pp)))+(((IkReal(0.0180426000000000))*(x539)))+(((IkReal(-0.0180426000000000))*(npy)))+(((IkReal(-0.00179398590000000))*(npx)))+(((IkReal(0.0180420000000000))*(x541)))+(((IkReal(0.00180000000000000))*(cj22)*(npx)))+(((IkReal(0.180846994000000))*(x542)))))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[3];
IkReal x543=IKsin(j25);
IkReal x544=IKcos(j25);
IkReal x545=((npx)*(x543));
IkReal x546=((npx)*(x544));
IkReal x547=((npy)*(x543));
IkReal x548=((npy)*(x544));
evalcond[0]=((IkReal(-0.0300000000000000))+(x545)+(x548)+(((IkReal(0.0300000000000000))*(cj22)))+(((IkReal(0.300700000000000))*(sj22))));
evalcond[1]=((IkReal(-0.300710000000000))+(((IkReal(-1.00000000000000))*(x546)))+(((IkReal(-0.300700000000000))*(cj22)))+(x547)+(((IkReal(0.0300000000000000))*(sj22))));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(-0.601420000000000))*(x546)))+(((IkReal(0.0600000000000000))*(x548)))+(((IkReal(0.0600000000000000))*(x545)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.601420000000000))*(x547))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
IkReal x549=((IkReal(0.0300000000000000))*(npy));
IkReal x550=((IkReal(0.0300000000000000))*(npx));
IkReal x551=((IkReal(0.300700000000000))*(npy));
IkReal x552=((IkReal(0.300700000000000))*(npx));
if( IKabs(((gconst30)*(((((cj22)*(x550)))+(((IkReal(-1.00000000000000))*(cj22)*(x551)))+(((IkReal(-1.00000000000000))*(x550)))+(((IkReal(-0.300710000000000))*(npy)))+(((sj22)*(x552)))+(((sj22)*(x549))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst30)*(((((sj22)*(x551)))+(((IkReal(0.300710000000000))*(npx)))+(((cj22)*(x549)))+(((IkReal(-1.00000000000000))*(x549)))+(((IkReal(-1.00000000000000))*(sj22)*(x550)))+(((cj22)*(x552))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j25array[0]=IKatan2(((gconst30)*(((((cj22)*(x550)))+(((IkReal(-1.00000000000000))*(cj22)*(x551)))+(((IkReal(-1.00000000000000))*(x550)))+(((IkReal(-0.300710000000000))*(npy)))+(((sj22)*(x552)))+(((sj22)*(x549)))))), ((gconst30)*(((((sj22)*(x551)))+(((IkReal(0.300710000000000))*(npx)))+(((cj22)*(x549)))+(((IkReal(-1.00000000000000))*(x549)))+(((IkReal(-1.00000000000000))*(sj22)*(x550)))+(((cj22)*(x552)))))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[3];
IkReal x553=IKsin(j25);
IkReal x554=IKcos(j25);
IkReal x555=((npx)*(x553));
IkReal x556=((npx)*(x554));
IkReal x557=((npy)*(x553));
IkReal x558=((npy)*(x554));
evalcond[0]=((IkReal(-0.0300000000000000))+(((IkReal(0.0300000000000000))*(cj22)))+(((IkReal(0.300700000000000))*(sj22)))+(x558)+(x555));
evalcond[1]=((IkReal(-0.300710000000000))+(((IkReal(-0.300700000000000))*(cj22)))+(((IkReal(0.0300000000000000))*(sj22)))+(((IkReal(-1.00000000000000))*(x556)))+(x557));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(0.0600000000000000))*(x558)))+(((IkReal(0.601420000000000))*(x557)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.601420000000000))*(x556)))+(((IkReal(0.0600000000000000))*(x555))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j23)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.182646994100000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.179046994000000))*(cj22)))+(((IkReal(-0.0360846000000000))*(sj22))));
evalcond[2]=npz;
evalcond[3]=((IkReal(-1.00000000000000))*(npz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst32;
gconst32=IKsign(((((IkReal(-1.00000000000000))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst33;
gconst33=IKsign(((((IkReal(-0.601420000000000))*((npx)*(npx))))+(((IkReal(-0.601420000000000))*((npy)*(npy))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
IkReal x559=((cj22)*(npy));
IkReal x560=((IkReal(0.0180426000000000))*(npx));
IkReal x561=((npx)*(sj22));
IkReal x562=((npy)*(sj22));
if( IKabs(((gconst33)*(((((IkReal(-1.00000000000000))*(cj22)*(x560)))+(x560)+(((IkReal(-0.00180000000000000))*(x559)))+(((IkReal(-1.00000000000000))*(npy)*(pp)))+(((IkReal(-0.0180420000000000))*(x562)))+(((IkReal(0.00179398590000000))*(npy)))+(((IkReal(-0.180846994000000))*(x561))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst33)*(((((npx)*(pp)))+(((IkReal(-0.180846994000000))*(x562)))+(((IkReal(-0.0180426000000000))*(x559)))+(((IkReal(0.0180420000000000))*(x561)))+(((IkReal(0.0180426000000000))*(npy)))+(((IkReal(-0.00179398590000000))*(npx)))+(((IkReal(0.00180000000000000))*(cj22)*(npx))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j25array[0]=IKatan2(((gconst33)*(((((IkReal(-1.00000000000000))*(cj22)*(x560)))+(x560)+(((IkReal(-0.00180000000000000))*(x559)))+(((IkReal(-1.00000000000000))*(npy)*(pp)))+(((IkReal(-0.0180420000000000))*(x562)))+(((IkReal(0.00179398590000000))*(npy)))+(((IkReal(-0.180846994000000))*(x561)))))), ((gconst33)*(((((npx)*(pp)))+(((IkReal(-0.180846994000000))*(x562)))+(((IkReal(-0.0180426000000000))*(x559)))+(((IkReal(0.0180420000000000))*(x561)))+(((IkReal(0.0180426000000000))*(npy)))+(((IkReal(-0.00179398590000000))*(npx)))+(((IkReal(0.00180000000000000))*(cj22)*(npx)))))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[3];
IkReal x563=IKsin(j25);
IkReal x564=IKcos(j25);
IkReal x565=((npx)*(x563));
IkReal x566=((npx)*(x564));
IkReal x567=((npy)*(x563));
IkReal x568=((npy)*(x564));
evalcond[0]=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj22)))+(x568)+(x565)+(((IkReal(-0.300700000000000))*(sj22))));
evalcond[1]=((IkReal(-0.300710000000000))+(((IkReal(-0.300700000000000))*(cj22)))+(((IkReal(0.0300000000000000))*(sj22)))+(x567)+(((IkReal(-1.00000000000000))*(x566))));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(-0.0600000000000000))*(x565)))+(((IkReal(-0.601420000000000))*(x566)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x568)))+(((IkReal(0.601420000000000))*(x567))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
IkReal x569=((IkReal(0.0300000000000000))*(npy));
IkReal x570=((IkReal(0.0300000000000000))*(npx));
IkReal x571=((IkReal(0.300700000000000))*(cj22));
IkReal x572=((IkReal(0.300700000000000))*(sj22));
if( IKabs(((gconst32)*(((x570)+(((IkReal(-1.00000000000000))*(npx)*(x572)))+(((IkReal(-1.00000000000000))*(npy)*(x571)))+(((sj22)*(x569)))+(((IkReal(-0.300710000000000))*(npy)))+(((IkReal(-1.00000000000000))*(cj22)*(x570))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst32)*(((((IkReal(-1.00000000000000))*(sj22)*(x570)))+(x569)+(((IkReal(0.300710000000000))*(npx)))+(((npx)*(x571)))+(((IkReal(-1.00000000000000))*(npy)*(x572)))+(((IkReal(-1.00000000000000))*(cj22)*(x569))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j25array[0]=IKatan2(((gconst32)*(((x570)+(((IkReal(-1.00000000000000))*(npx)*(x572)))+(((IkReal(-1.00000000000000))*(npy)*(x571)))+(((sj22)*(x569)))+(((IkReal(-0.300710000000000))*(npy)))+(((IkReal(-1.00000000000000))*(cj22)*(x570)))))), ((gconst32)*(((((IkReal(-1.00000000000000))*(sj22)*(x570)))+(x569)+(((IkReal(0.300710000000000))*(npx)))+(((npx)*(x571)))+(((IkReal(-1.00000000000000))*(npy)*(x572)))+(((IkReal(-1.00000000000000))*(cj22)*(x569)))))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[3];
IkReal x573=IKsin(j25);
IkReal x574=IKcos(j25);
IkReal x575=((npx)*(x573));
IkReal x576=((npx)*(x574));
IkReal x577=((npy)*(x573));
IkReal x578=((npy)*(x574));
evalcond[0]=((IkReal(0.0300000000000000))+(x578)+(x575)+(((IkReal(-0.0300000000000000))*(cj22)))+(((IkReal(-0.300700000000000))*(sj22))));
evalcond[1]=((IkReal(-0.300710000000000))+(x577)+(((IkReal(-0.300700000000000))*(cj22)))+(((IkReal(0.0300000000000000))*(sj22)))+(((IkReal(-1.00000000000000))*(x576))));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(-0.0600000000000000))*(x578)))+(((IkReal(0.601420000000000))*(x577)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x575)))+(((IkReal(-0.601420000000000))*(x576))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
IkReal x579=((npx)*(sj22));
IkReal x580=((IkReal(0.300700000000000))*(cj22));
IkReal x581=((IkReal(0.300700000000000))*(sj23));
IkReal x582=((IkReal(0.0300000000000000))*(sj23));
IkReal x583=((npy)*(sj22));
IkReal x584=((cj22)*(x582));
if( IKabs(((gconst29)*(((((IkReal(0.0300000000000000))*(x583)))+(((npx)*(x584)))+(((IkReal(-1.00000000000000))*(npx)*(x582)))+(((x579)*(x581)))+(((IkReal(-0.300710000000000))*(npy)))+(((IkReal(-1.00000000000000))*(npy)*(x580))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst29)*(((((x581)*(x583)))+(((IkReal(0.300710000000000))*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(x582)))+(((npy)*(x584)))+(((npx)*(x580)))+(((IkReal(-0.0300000000000000))*(x579))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j25array[0]=IKatan2(((gconst29)*(((((IkReal(0.0300000000000000))*(x583)))+(((npx)*(x584)))+(((IkReal(-1.00000000000000))*(npx)*(x582)))+(((x579)*(x581)))+(((IkReal(-0.300710000000000))*(npy)))+(((IkReal(-1.00000000000000))*(npy)*(x580)))))), ((gconst29)*(((((x581)*(x583)))+(((IkReal(0.300710000000000))*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(x582)))+(((npy)*(x584)))+(((npx)*(x580)))+(((IkReal(-0.0300000000000000))*(x579)))))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[5];
IkReal x585=IKsin(j25);
IkReal x586=IKcos(j25);
IkReal x587=((IkReal(1.00000000000000))*(npz));
IkReal x588=((IkReal(0.0300000000000000))*(cj22));
IkReal x589=((IkReal(0.300700000000000))*(sj22));
IkReal x590=((IkReal(0.0600000000000000))*(sj23));
IkReal x591=((IkReal(1.00000000000000))*(sj23));
IkReal x592=((npy)*(x585));
IkReal x593=((npx)*(x585));
IkReal x594=((npy)*(x586));
IkReal x595=((npx)*(x586));
evalcond[0]=((((sj23)*(x588)))+(((IkReal(-0.0300000000000000))*(sj23)))+(((sj23)*(x589)))+(x594)+(x593));
evalcond[1]=((IkReal(-0.300710000000000))+(((IkReal(-0.300700000000000))*(cj22)))+(((IkReal(0.0300000000000000))*(sj22)))+(((IkReal(-1.00000000000000))*(x595)))+(x592));
evalcond[2]=((((cj23)*(x594)))+(((IkReal(-1.00000000000000))*(sj23)*(x587)))+(((cj23)*(x593))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x591)*(x593)))+(((IkReal(-1.00000000000000))*(cj23)*(x587)))+(((IkReal(-1.00000000000000))*(x589)))+(((IkReal(-1.00000000000000))*(x591)*(x594)))+(((IkReal(-1.00000000000000))*(x588))));
evalcond[4]=((IkReal(-6.01410000000000e-6))+(((IkReal(0.601420000000000))*(x592)))+(((IkReal(-0.601420000000000))*(x595)))+(((IkReal(-1.00000000000000))*(pp)))+(((x590)*(x594)))+(((IkReal(0.0600000000000000))*(cj23)*(npz)))+(((x590)*(x593))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
IkReal x596=((npz)*(sj23));
IkReal x597=((cj23)*(npy));
IkReal x598=((IkReal(0.0300000000000000))*(sj22));
IkReal x599=((cj23)*(npx));
IkReal x600=((IkReal(0.300700000000000))*(cj22)*(cj23));
if( IKabs(((gconst28)*(((((IkReal(0.300710000000000))*(x597)))+(((IkReal(-1.00000000000000))*(x597)*(x598)))+(((npx)*(x596)))+(((IkReal(0.300700000000000))*(cj22)*(x597))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst28)*(((((IkReal(-0.300700000000000))*(cj22)*(x599)))+(((IkReal(-0.300710000000000))*(x599)))+(((x598)*(x599)))+(((npy)*(x596))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j25array[0]=IKatan2(((gconst28)*(((((IkReal(0.300710000000000))*(x597)))+(((IkReal(-1.00000000000000))*(x597)*(x598)))+(((npx)*(x596)))+(((IkReal(0.300700000000000))*(cj22)*(x597)))))), ((gconst28)*(((((IkReal(-0.300700000000000))*(cj22)*(x599)))+(((IkReal(-0.300710000000000))*(x599)))+(((x598)*(x599)))+(((npy)*(x596)))))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[5];
IkReal x601=IKsin(j25);
IkReal x602=IKcos(j25);
IkReal x603=((IkReal(1.00000000000000))*(npz));
IkReal x604=((IkReal(0.0300000000000000))*(cj22));
IkReal x605=((IkReal(0.300700000000000))*(sj22));
IkReal x606=((IkReal(0.0600000000000000))*(sj23));
IkReal x607=((IkReal(1.00000000000000))*(sj23));
IkReal x608=((npy)*(x601));
IkReal x609=((npx)*(x601));
IkReal x610=((npy)*(x602));
IkReal x611=((npx)*(x602));
evalcond[0]=((((IkReal(-0.0300000000000000))*(sj23)))+(x610)+(((sj23)*(x604)))+(((sj23)*(x605)))+(x609));
evalcond[1]=((IkReal(-0.300710000000000))+(((IkReal(-0.300700000000000))*(cj22)))+(((IkReal(0.0300000000000000))*(sj22)))+(((IkReal(-1.00000000000000))*(x611)))+(x608));
evalcond[2]=((((cj23)*(x610)))+(((cj23)*(x609)))+(((IkReal(-1.00000000000000))*(sj23)*(x603))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x605)))+(((IkReal(-1.00000000000000))*(x607)*(x609)))+(((IkReal(-1.00000000000000))*(cj23)*(x603)))+(((IkReal(-1.00000000000000))*(x604)))+(((IkReal(-1.00000000000000))*(x607)*(x610))));
evalcond[4]=((IkReal(-6.01410000000000e-6))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(cj23)*(npz)))+(((IkReal(-0.601420000000000))*(x611)))+(((x606)*(x609)))+(((IkReal(0.601420000000000))*(x608)))+(((x606)*(x610))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x612=((IkReal(-0.300710000000000))+(((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-0.300700000000000))*(cj22)))+(((IkReal(0.0300000000000000))*(sj22))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j24)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.182646994100000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.179046994000000))*(cj22)))+(((IkReal(-0.0360846000000000))*(sj22))));
evalcond[2]=x612;
evalcond[3]=x612;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst34;
gconst34=IKsign((((npy)*(npy))+((npx)*(npx))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst35;
IkReal x613=((IkReal(1.00000000000000))*(sj23));
gconst35=IKsign(((((IkReal(-1.00000000000000))*(x613)*((npy)*(npy))))+(((IkReal(-1.00000000000000))*(x613)*((npx)*(npx))))));
IkReal x614=((IkReal(1.00000000000000))*(sj23));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x614)*((npy)*(npy))))+(((IkReal(-1.00000000000000))*(x614)*((npx)*(npx)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
IkReal x615=(sj23)*(sj23);
IkReal x616=((cj22)*(npy));
IkReal x617=((cj22)*(npx));
IkReal x618=((cj23)*(sj23));
IkReal x619=((IkReal(0.0300000000000000))*(x618));
IkReal x620=((IkReal(0.0300000000000000))*(x615));
IkReal x621=((IkReal(0.300700000000000))*(npx)*(sj22));
IkReal x622=((IkReal(0.300700000000000))*(npy)*(sj22));
if( IKabs(((gconst35)*(((((x618)*(x622)))+(((IkReal(-1.00000000000000))*(npy)*(x619)))+(((x617)*(x620)))+(((x615)*(x621)))+(((x616)*(x619)))+(((IkReal(-1.00000000000000))*(npx)*(x620))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst35)*(((((IkReal(-1.00000000000000))*(x617)*(x619)))+(((IkReal(-1.00000000000000))*(x618)*(x621)))+(((npx)*(x619)))+(((IkReal(-1.00000000000000))*(npy)*(x620)))+(((x616)*(x620)))+(((x615)*(x622))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j25array[0]=IKatan2(((gconst35)*(((((x618)*(x622)))+(((IkReal(-1.00000000000000))*(npy)*(x619)))+(((x617)*(x620)))+(((x615)*(x621)))+(((x616)*(x619)))+(((IkReal(-1.00000000000000))*(npx)*(x620)))))), ((gconst35)*(((((IkReal(-1.00000000000000))*(x617)*(x619)))+(((IkReal(-1.00000000000000))*(x618)*(x621)))+(((npx)*(x619)))+(((IkReal(-1.00000000000000))*(npy)*(x620)))+(((x616)*(x620)))+(((x615)*(x622)))))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[5];
IkReal x623=IKcos(j25);
IkReal x624=IKsin(j25);
IkReal x625=((IkReal(0.0300000000000000))*(cj22));
IkReal x626=((IkReal(0.300700000000000))*(sj22));
IkReal x627=((IkReal(0.0600000000000000))*(sj23));
IkReal x628=((IkReal(0.0600000000000000))*(cj23));
IkReal x629=((IkReal(1.00000000000000))*(sj23));
IkReal x630=((npx)*(x623));
IkReal x631=((npx)*(x624));
IkReal x632=((npy)*(x623));
IkReal x633=((IkReal(1.00000000000000))*(npy)*(x624));
evalcond[0]=((((sj23)*(x626)))+(((IkReal(-0.0300000000000000))*(sj23)))+(((sj23)*(x625)))+(x632)+(x631));
evalcond[1]=((((cj23)*(x631)))+(((cj23)*(x632)))+(((sj23)*(x630)))+(((IkReal(-1.00000000000000))*(npy)*(x624)*(x629))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x625)))+(((IkReal(-1.00000000000000))*(x629)*(x632)))+(((IkReal(-1.00000000000000))*(x626)))+(((IkReal(-1.00000000000000))*(cj23)*(x633)))+(((cj23)*(x630)))+(((IkReal(-1.00000000000000))*(x629)*(x631))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj23)*(x626)))+(((IkReal(-1.00000000000000))*(cj23)*(x625)))+(x630)+(((IkReal(-1.00000000000000))*(x633)))+(((IkReal(0.0300000000000000))*(cj23))));
evalcond[4]=((IkReal(-6.01410000000000e-6))+(((IkReal(-1.00000000000000))*(pp)))+(((x627)*(x631)))+(((npy)*(x624)*(x628)))+(((IkReal(-1.00000000000000))*(x628)*(x630)))+(((x627)*(x632)))+(((IkReal(-0.601420000000000))*(npz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
IkReal x634=((IkReal(0.0300000000000000))*(npy));
IkReal x635=((IkReal(0.0300000000000000))*(npx));
IkReal x636=((cj22)*(cj23));
IkReal x637=((IkReal(0.0300000000000000))*(cj22)*(sj23));
IkReal x638=((IkReal(0.300700000000000))*(npx)*(sj22));
IkReal x639=((IkReal(0.300700000000000))*(npy)*(sj22));
if( IKabs(((gconst34)*(((((IkReal(-1.00000000000000))*(cj23)*(x639)))+(((IkReal(-1.00000000000000))*(x634)*(x636)))+(((IkReal(-1.00000000000000))*(cj22)*(sj23)*(x635)))+(((IkReal(-1.00000000000000))*(sj23)*(x638)))+(((sj23)*(x635)))+(((cj23)*(x634))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst34)*(((((x635)*(x636)))+(((IkReal(-1.00000000000000))*(cj22)*(sj23)*(x634)))+(((IkReal(-1.00000000000000))*(cj23)*(x635)))+(((sj23)*(x634)))+(((cj23)*(x638)))+(((IkReal(-1.00000000000000))*(sj23)*(x639))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j25array[0]=IKatan2(((gconst34)*(((((IkReal(-1.00000000000000))*(cj23)*(x639)))+(((IkReal(-1.00000000000000))*(x634)*(x636)))+(((IkReal(-1.00000000000000))*(cj22)*(sj23)*(x635)))+(((IkReal(-1.00000000000000))*(sj23)*(x638)))+(((sj23)*(x635)))+(((cj23)*(x634)))))), ((gconst34)*(((((x635)*(x636)))+(((IkReal(-1.00000000000000))*(cj22)*(sj23)*(x634)))+(((IkReal(-1.00000000000000))*(cj23)*(x635)))+(((sj23)*(x634)))+(((cj23)*(x638)))+(((IkReal(-1.00000000000000))*(sj23)*(x639)))))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[5];
IkReal x640=IKcos(j25);
IkReal x641=IKsin(j25);
IkReal x642=((IkReal(0.0300000000000000))*(cj22));
IkReal x643=((IkReal(0.300700000000000))*(sj22));
IkReal x644=((IkReal(0.0600000000000000))*(sj23));
IkReal x645=((IkReal(0.0600000000000000))*(cj23));
IkReal x646=((IkReal(1.00000000000000))*(sj23));
IkReal x647=((npx)*(x640));
IkReal x648=((npx)*(x641));
IkReal x649=((npy)*(x640));
IkReal x650=((IkReal(1.00000000000000))*(npy)*(x641));
evalcond[0]=((x649)+(x648)+(((IkReal(-0.0300000000000000))*(sj23)))+(((sj23)*(x642)))+(((sj23)*(x643))));
evalcond[1]=((((cj23)*(x648)))+(((IkReal(-1.00000000000000))*(npy)*(x641)*(x646)))+(((sj23)*(x647)))+(((cj23)*(x649))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x643)))+(((IkReal(-1.00000000000000))*(x646)*(x648)))+(((IkReal(-1.00000000000000))*(x642)))+(((cj23)*(x647)))+(((IkReal(-1.00000000000000))*(x646)*(x649)))+(((IkReal(-1.00000000000000))*(cj23)*(x650))));
evalcond[3]=((x647)+(((IkReal(-1.00000000000000))*(cj23)*(x642)))+(((IkReal(-1.00000000000000))*(x650)))+(((IkReal(-1.00000000000000))*(cj23)*(x643)))+(((IkReal(0.0300000000000000))*(cj23))));
evalcond[4]=((IkReal(-6.01410000000000e-6))+(((x644)*(x648)))+(((IkReal(-1.00000000000000))*(pp)))+(((npy)*(x641)*(x645)))+(((IkReal(-1.00000000000000))*(x645)*(x647)))+(((x644)*(x649)))+(((IkReal(-0.601420000000000))*(npz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x651=((IkReal(0.300700000000000))*(cj22));
IkReal x652=((IkReal(0.0300000000000000))*(sj22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j24, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.182646994100000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.179046994000000))*(cj22)))+(((IkReal(-0.0360846000000000))*(sj22))));
evalcond[2]=((IkReal(-0.300710000000000))+(x652)+(npz)+(((IkReal(-1.00000000000000))*(x651))));
evalcond[3]=((IkReal(0.300710000000000))+(((IkReal(-1.00000000000000))*(npz)))+(x651)+(((IkReal(-1.00000000000000))*(x652))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst36;
gconst36=IKsign((((npy)*(npy))+((npx)*(npx))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst37;
gconst37=IKsign(((((sj23)*((npy)*(npy))))+(((sj23)*((npx)*(npx))))));
dummyeval[0]=((((sj23)*((npy)*(npy))))+(((sj23)*((npx)*(npx)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
IkReal x653=(sj23)*(sj23);
IkReal x654=((IkReal(0.0300000000000000))*(cj22));
IkReal x655=((cj23)*(sj23));
IkReal x656=((IkReal(0.300700000000000))*(sj22));
IkReal x657=((npy)*(x653));
IkReal x658=((npx)*(x653));
if( IKabs(((gconst37)*(((((IkReal(-0.0300000000000000))*(npy)*(x655)))+(((npy)*(x654)*(x655)))+(((IkReal(-1.00000000000000))*(x656)*(x658)))+(((IkReal(-1.00000000000000))*(x654)*(x658)))+(((IkReal(0.0300000000000000))*(x658)))+(((npy)*(x655)*(x656))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst37)*(((((IkReal(0.0300000000000000))*(npx)*(x655)))+(((IkReal(-1.00000000000000))*(npx)*(x655)*(x656)))+(((IkReal(-1.00000000000000))*(x656)*(x657)))+(((IkReal(0.0300000000000000))*(x657)))+(((IkReal(-1.00000000000000))*(npx)*(x654)*(x655)))+(((IkReal(-1.00000000000000))*(x654)*(x657))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j25array[0]=IKatan2(((gconst37)*(((((IkReal(-0.0300000000000000))*(npy)*(x655)))+(((npy)*(x654)*(x655)))+(((IkReal(-1.00000000000000))*(x656)*(x658)))+(((IkReal(-1.00000000000000))*(x654)*(x658)))+(((IkReal(0.0300000000000000))*(x658)))+(((npy)*(x655)*(x656)))))), ((gconst37)*(((((IkReal(0.0300000000000000))*(npx)*(x655)))+(((IkReal(-1.00000000000000))*(npx)*(x655)*(x656)))+(((IkReal(-1.00000000000000))*(x656)*(x657)))+(((IkReal(0.0300000000000000))*(x657)))+(((IkReal(-1.00000000000000))*(npx)*(x654)*(x655)))+(((IkReal(-1.00000000000000))*(x654)*(x657)))))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[5];
IkReal x659=IKcos(j25);
IkReal x660=IKsin(j25);
IkReal x661=((IkReal(0.0300000000000000))*(cj22));
IkReal x662=((IkReal(0.300700000000000))*(sj22));
IkReal x663=((IkReal(0.0600000000000000))*(sj23));
IkReal x664=((IkReal(0.0600000000000000))*(cj23));
IkReal x665=((IkReal(1.00000000000000))*(sj23));
IkReal x666=((npx)*(x659));
IkReal x667=((npy)*(x660));
IkReal x668=((npx)*(x660));
IkReal x669=((npy)*(x659));
evalcond[0]=((x669)+(x668)+(((sj23)*(x661)))+(((IkReal(-0.0300000000000000))*(sj23)))+(((sj23)*(x662))));
evalcond[1]=((((cj23)*(x669)))+(((IkReal(-1.00000000000000))*(x665)*(x666)))+(((sj23)*(x667)))+(((cj23)*(x668))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(cj23)*(x666)))+(((IkReal(-1.00000000000000))*(x662)))+(((IkReal(-1.00000000000000))*(x665)*(x669)))+(((IkReal(-1.00000000000000))*(x661)))+(((IkReal(-1.00000000000000))*(x665)*(x668)))+(((cj23)*(x667))));
evalcond[3]=((x666)+(((IkReal(-0.0300000000000000))*(cj23)))+(((IkReal(-1.00000000000000))*(x667)))+(((cj23)*(x661)))+(((cj23)*(x662))));
evalcond[4]=((IkReal(-6.01410000000000e-6))+(((x663)*(x669)))+(((IkReal(-1.00000000000000))*(pp)))+(((x663)*(x668)))+(((x664)*(x666)))+(((IkReal(0.601420000000000))*(npz)))+(((IkReal(-1.00000000000000))*(x664)*(x667))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
IkReal x670=((IkReal(0.0300000000000000))*(npy));
IkReal x671=((IkReal(0.0300000000000000))*(npx));
IkReal x672=((cj22)*(cj23));
IkReal x673=((IkReal(0.0300000000000000))*(cj22)*(sj23));
IkReal x674=((IkReal(0.300700000000000))*(npx)*(sj22));
IkReal x675=((IkReal(0.300700000000000))*(npy)*(sj22));
if( IKabs(((gconst36)*(((((x670)*(x672)))+(((sj23)*(x671)))+(((IkReal(-1.00000000000000))*(sj23)*(x674)))+(((cj23)*(x675)))+(((IkReal(-1.00000000000000))*(cj22)*(sj23)*(x671)))+(((IkReal(-1.00000000000000))*(cj23)*(x670))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst36)*(((((IkReal(-1.00000000000000))*(sj23)*(x675)))+(((cj23)*(x671)))+(((IkReal(-1.00000000000000))*(x671)*(x672)))+(((sj23)*(x670)))+(((IkReal(-1.00000000000000))*(cj23)*(x674)))+(((IkReal(-1.00000000000000))*(cj22)*(sj23)*(x670))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j25array[0]=IKatan2(((gconst36)*(((((x670)*(x672)))+(((sj23)*(x671)))+(((IkReal(-1.00000000000000))*(sj23)*(x674)))+(((cj23)*(x675)))+(((IkReal(-1.00000000000000))*(cj22)*(sj23)*(x671)))+(((IkReal(-1.00000000000000))*(cj23)*(x670)))))), ((gconst36)*(((((IkReal(-1.00000000000000))*(sj23)*(x675)))+(((cj23)*(x671)))+(((IkReal(-1.00000000000000))*(x671)*(x672)))+(((sj23)*(x670)))+(((IkReal(-1.00000000000000))*(cj23)*(x674)))+(((IkReal(-1.00000000000000))*(cj22)*(sj23)*(x670)))))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[5];
IkReal x676=IKcos(j25);
IkReal x677=IKsin(j25);
IkReal x678=((IkReal(0.0300000000000000))*(cj22));
IkReal x679=((IkReal(0.300700000000000))*(sj22));
IkReal x680=((IkReal(0.0600000000000000))*(sj23));
IkReal x681=((IkReal(0.0600000000000000))*(cj23));
IkReal x682=((IkReal(1.00000000000000))*(sj23));
IkReal x683=((npx)*(x676));
IkReal x684=((npy)*(x677));
IkReal x685=((npx)*(x677));
IkReal x686=((npy)*(x676));
evalcond[0]=((((IkReal(-0.0300000000000000))*(sj23)))+(((sj23)*(x679)))+(((sj23)*(x678)))+(x686)+(x685));
evalcond[1]=((((IkReal(-1.00000000000000))*(x682)*(x683)))+(((sj23)*(x684)))+(((cj23)*(x686)))+(((cj23)*(x685))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(cj23)*(x683)))+(((IkReal(-1.00000000000000))*(x682)*(x685)))+(((IkReal(-1.00000000000000))*(x682)*(x686)))+(((IkReal(-1.00000000000000))*(x678)))+(((IkReal(-1.00000000000000))*(x679)))+(((cj23)*(x684))));
evalcond[3]=((((IkReal(-0.0300000000000000))*(cj23)))+(((cj23)*(x678)))+(((IkReal(-1.00000000000000))*(x684)))+(x683)+(((cj23)*(x679))));
evalcond[4]=((IkReal(-6.01410000000000e-6))+(((IkReal(-1.00000000000000))*(x681)*(x684)))+(((IkReal(-1.00000000000000))*(pp)))+(((x680)*(x686)))+(((x680)*(x685)))+(((x681)*(x683)))+(((IkReal(0.601420000000000))*(npz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
IkReal x687=(sj23)*(sj23);
IkReal x688=((IkReal(0.0300000000000000))*(npy));
IkReal x689=((IkReal(0.300700000000000))*(sj22));
IkReal x690=((IkReal(0.0300000000000000))*(npx));
IkReal x691=((cj23)*(sj23));
IkReal x692=((cj24)*(x687));
IkReal x693=((npz)*(sj23)*(sj24));
if( IKabs(((gconst1)*(((((IkReal(-1.00000000000000))*(npx)*(x689)*(x692)))+(((IkReal(-1.00000000000000))*(cj22)*(x690)*(x692)))+(((npy)*(x693)))+(((x690)*(x692)))+(((x688)*(x691)))+(((IkReal(-1.00000000000000))*(npy)*(x689)*(x691)))+(((IkReal(-1.00000000000000))*(cj22)*(x688)*(x691))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((cj22)*(x690)*(x691)))+(((IkReal(-1.00000000000000))*(x690)*(x691)))+(((IkReal(-1.00000000000000))*(npx)*(x693)))+(((npx)*(x689)*(x691)))+(((x688)*(x692)))+(((IkReal(-1.00000000000000))*(npy)*(x689)*(x692)))+(((IkReal(-1.00000000000000))*(cj22)*(x688)*(x692))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j25array[0]=IKatan2(((gconst1)*(((((IkReal(-1.00000000000000))*(npx)*(x689)*(x692)))+(((IkReal(-1.00000000000000))*(cj22)*(x690)*(x692)))+(((npy)*(x693)))+(((x690)*(x692)))+(((x688)*(x691)))+(((IkReal(-1.00000000000000))*(npy)*(x689)*(x691)))+(((IkReal(-1.00000000000000))*(cj22)*(x688)*(x691)))))), ((gconst1)*(((((cj22)*(x690)*(x691)))+(((IkReal(-1.00000000000000))*(x690)*(x691)))+(((IkReal(-1.00000000000000))*(npx)*(x693)))+(((npx)*(x689)*(x691)))+(((x688)*(x692)))+(((IkReal(-1.00000000000000))*(npy)*(x689)*(x692)))+(((IkReal(-1.00000000000000))*(cj22)*(x688)*(x692)))))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[6];
IkReal x694=IKcos(j25);
IkReal x695=IKsin(j25);
IkReal x696=((IkReal(1.00000000000000))*(sj23));
IkReal x697=((IkReal(0.0300000000000000))*(cj22));
IkReal x698=((IkReal(0.0600000000000000))*(cj23));
IkReal x699=((IkReal(0.601420000000000))*(sj24));
IkReal x700=((IkReal(0.300700000000000))*(sj22));
IkReal x701=((cj23)*(cj24));
IkReal x702=((IkReal(0.0600000000000000))*(sj23));
IkReal x703=((cj24)*(npz));
IkReal x704=((npz)*(sj24));
IkReal x705=((IkReal(0.300700000000000))*(cj22));
IkReal x706=((IkReal(0.0300000000000000))*(sj22));
IkReal x707=((npx)*(x694));
IkReal x708=((npy)*(x695));
IkReal x709=((npx)*(x695));
IkReal x710=((npy)*(x694));
IkReal x711=((cj24)*(x708));
evalcond[0]=((((IkReal(-0.0300000000000000))*(sj23)))+(((sj23)*(x700)))+(x709)+(((sj23)*(x697)))+(x710));
evalcond[1]=((IkReal(-0.300710000000000))+(((IkReal(-1.00000000000000))*(x703)))+(((IkReal(-1.00000000000000))*(x705)))+(((IkReal(-1.00000000000000))*(sj24)*(x708)))+(((sj24)*(x707)))+(x706));
evalcond[2]=((((sj23)*(x704)))+(((cj24)*(sj23)*(x707)))+(((cj23)*(x709)))+(((cj23)*(x710)))+(((IkReal(-1.00000000000000))*(x696)*(x711))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x696)*(x710)))+(((IkReal(-1.00000000000000))*(x696)*(x709)))+(((IkReal(-1.00000000000000))*(x700)))+(((cj23)*(x704)))+(((IkReal(-1.00000000000000))*(x697)))+(((x701)*(x707)))+(((IkReal(-1.00000000000000))*(x701)*(x708))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x697)*(x701)))+(((IkReal(-1.00000000000000))*(x700)*(x701)))+(((IkReal(-1.00000000000000))*(x708)))+(((IkReal(-0.300710000000000))*(sj24)))+(((sj24)*(x706)))+(((IkReal(0.0300000000000000))*(x701)))+(x707)+(((IkReal(-1.00000000000000))*(sj24)*(x705))));
evalcond[5]=((IkReal(-6.01410000000000e-6))+(((IkReal(-1.00000000000000))*(x698)*(x704)))+(((IkReal(-0.601420000000000))*(x703)))+(((x702)*(x710)))+(((x698)*(x711)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(cj24)*(x698)*(x707)))+(((x702)*(x709)))+(((x699)*(x707)))+(((IkReal(-1.00000000000000))*(x699)*(x708))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
IkReal x712=((IkReal(0.0300000000000000))*(npy));
IkReal x713=((sj23)*(sj24));
IkReal x714=((IkReal(0.0300000000000000))*(npx));
IkReal x715=((IkReal(0.300700000000000))*(npx));
IkReal x716=((cj24)*(npz));
IkReal x717=((IkReal(0.300700000000000))*(npy));
if( IKabs(((gconst0)*(((((IkReal(-1.00000000000000))*(sj22)*(x713)*(x715)))+(((sj22)*(x712)))+(((IkReal(-0.300710000000000))*(npy)))+(((IkReal(-1.00000000000000))*(cj22)*(x713)*(x714)))+(((x713)*(x714)))+(((IkReal(-1.00000000000000))*(npy)*(x716)))+(((IkReal(-1.00000000000000))*(cj22)*(x717))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((IkReal(-1.00000000000000))*(sj22)*(x714)))+(((IkReal(-1.00000000000000))*(cj22)*(x712)*(x713)))+(((x712)*(x713)))+(((IkReal(0.300710000000000))*(npx)))+(((npx)*(x716)))+(((cj22)*(x715)))+(((IkReal(-1.00000000000000))*(sj22)*(x713)*(x717))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j25array[0]=IKatan2(((gconst0)*(((((IkReal(-1.00000000000000))*(sj22)*(x713)*(x715)))+(((sj22)*(x712)))+(((IkReal(-0.300710000000000))*(npy)))+(((IkReal(-1.00000000000000))*(cj22)*(x713)*(x714)))+(((x713)*(x714)))+(((IkReal(-1.00000000000000))*(npy)*(x716)))+(((IkReal(-1.00000000000000))*(cj22)*(x717)))))), ((gconst0)*(((((IkReal(-1.00000000000000))*(sj22)*(x714)))+(((IkReal(-1.00000000000000))*(cj22)*(x712)*(x713)))+(((x712)*(x713)))+(((IkReal(0.300710000000000))*(npx)))+(((npx)*(x716)))+(((cj22)*(x715)))+(((IkReal(-1.00000000000000))*(sj22)*(x713)*(x717)))))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[6];
IkReal x718=IKcos(j25);
IkReal x719=IKsin(j25);
IkReal x720=((IkReal(1.00000000000000))*(sj23));
IkReal x721=((IkReal(0.0300000000000000))*(cj22));
IkReal x722=((IkReal(0.0600000000000000))*(cj23));
IkReal x723=((IkReal(0.601420000000000))*(sj24));
IkReal x724=((IkReal(0.300700000000000))*(sj22));
IkReal x725=((cj23)*(cj24));
IkReal x726=((IkReal(0.0600000000000000))*(sj23));
IkReal x727=((cj24)*(npz));
IkReal x728=((npz)*(sj24));
IkReal x729=((IkReal(0.300700000000000))*(cj22));
IkReal x730=((IkReal(0.0300000000000000))*(sj22));
IkReal x731=((npx)*(x718));
IkReal x732=((npy)*(x719));
IkReal x733=((npx)*(x719));
IkReal x734=((npy)*(x718));
IkReal x735=((cj24)*(x732));
evalcond[0]=((((sj23)*(x721)))+(((IkReal(-0.0300000000000000))*(sj23)))+(((sj23)*(x724)))+(x734)+(x733));
evalcond[1]=((IkReal(-0.300710000000000))+(((sj24)*(x731)))+(((IkReal(-1.00000000000000))*(x727)))+(x730)+(((IkReal(-1.00000000000000))*(x729)))+(((IkReal(-1.00000000000000))*(sj24)*(x732))));
evalcond[2]=((((cj24)*(sj23)*(x731)))+(((cj23)*(x734)))+(((cj23)*(x733)))+(((sj23)*(x728)))+(((IkReal(-1.00000000000000))*(x720)*(x735))));
evalcond[3]=((IkReal(0.0300000000000000))+(((cj23)*(x728)))+(((IkReal(-1.00000000000000))*(x721)))+(((IkReal(-1.00000000000000))*(x720)*(x733)))+(((IkReal(-1.00000000000000))*(x724)))+(((IkReal(-1.00000000000000))*(x720)*(x734)))+(((IkReal(-1.00000000000000))*(x725)*(x732)))+(((x725)*(x731))));
evalcond[4]=((((sj24)*(x730)))+(((IkReal(-0.300710000000000))*(sj24)))+(x731)+(((IkReal(-1.00000000000000))*(x724)*(x725)))+(((IkReal(-1.00000000000000))*(sj24)*(x729)))+(((IkReal(0.0300000000000000))*(x725)))+(((IkReal(-1.00000000000000))*(x732)))+(((IkReal(-1.00000000000000))*(x721)*(x725))));
evalcond[5]=((IkReal(-6.01410000000000e-6))+(((x723)*(x731)))+(((x726)*(x733)))+(((IkReal(-0.601420000000000))*(x727)))+(((x726)*(x734)))+(((x722)*(x735)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x722)*(x728)))+(((IkReal(-1.00000000000000))*(cj24)*(x722)*(x731)))+(((IkReal(-1.00000000000000))*(x723)*(x732))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j25array[2], cj25array[2], sj25array[2];
bool j25valid[2]={false};
_nj25 = 2;
IkReal x736=((IkReal(0.0300000000000000))*(sj23));
if( IKabs(npy) < IKFAST_ATAN2_MAGTHRESH && IKabs(npx) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x737=((IkReal(1.00000000000000))*(IKatan2(npy, npx)));
if( ((((npy)*(npy))+((npx)*(npx)))) < (IkReal)-0.00001 )
    continue;
if( (((((IKabs(IKabs(IKsqrt((((npy)*(npy))+((npx)*(npx)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((npy)*(npy))+((npx)*(npx))))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(x736)))+(((cj22)*(x736)))+(((IkReal(0.300700000000000))*(sj22)*(sj23))))))) < -1-IKFAST_SINCOS_THRESH || (((((IKabs(IKabs(IKsqrt((((npy)*(npy))+((npx)*(npx)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((npy)*(npy))+((npx)*(npx))))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(x736)))+(((cj22)*(x736)))+(((IkReal(0.300700000000000))*(sj22)*(sj23))))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x738=IKasin(((((IKabs(IKabs(IKsqrt((((npy)*(npy))+((npx)*(npx)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((npy)*(npy))+((npx)*(npx))))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(x736)))+(((cj22)*(x736)))+(((IkReal(0.300700000000000))*(sj22)*(sj23)))))));
j25array[0]=((((IkReal(-1.00000000000000))*(x738)))+(((IkReal(-1.00000000000000))*(x737))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
j25array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x737)))+(x738));
sj25array[1]=IKsin(j25array[1]);
cj25array[1]=IKcos(j25array[1]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
if( j25array[1] > IKPI )
{
    j25array[1]-=IK2PI;
}
else if( j25array[1] < -IKPI )
{    j25array[1]+=IK2PI;
}
j25valid[1] = true;
for(int ij25 = 0; ij25 < 2; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 2; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[2];
IkReal x739=(sj23)*(sj23);
IkReal x740=(cj23)*(cj23);
IkReal x741=(npx)*(npx);
IkReal x742=IKcos(j25);
IkReal x743=(npy)*(npy);
IkReal x744=IKsin(j25);
IkReal x745=((npx)*(sj23));
IkReal x746=((IkReal(0.0300000000000000))*(cj22));
IkReal x747=((IkReal(0.300700000000000))*(sj22));
IkReal x748=((npy)*(sj23));
IkReal x749=((npx)*(npy));
IkReal x750=((IkReal(1.00000000000000))*(x739));
IkReal x751=((IkReal(1.00000000000000))*(x740));
evalcond[0]=((((x744)*(((((x740)*(x741)))+(((x739)*(x741)))))))+(((x742)*(((((x739)*(x749)))+(((x740)*(x749)))))))+(((IkReal(-0.0300000000000000))*(x745)))+(((x745)*(x747)))+(((x745)*(x746))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x747)*(x748)))+(((IkReal(-1.00000000000000))*(x746)*(x748)))+(((x742)*(((((IkReal(-1.00000000000000))*(x743)*(x750)))+(((IkReal(-1.00000000000000))*(x743)*(x751)))))))+(((x744)*(((((IkReal(-1.00000000000000))*(x749)*(x751)))+(((IkReal(-1.00000000000000))*(x749)*(x750)))))))+(((IkReal(0.0300000000000000))*(x748))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst39;
IkReal x752=((cj25)*(npx));
IkReal x753=((npy)*(sj25));
IkReal x754=((IkReal(0.0300000000000000))*(sj22));
IkReal x755=((IkReal(0.300700000000000))*(cj22));
IkReal x756=((cj23)*(npz));
gconst39=IKsign(((((IkReal(-1.00000000000000))*(x753)*(x754)))+(((IkReal(0.0300000000000000))*(cj22)*(x756)))+(((IkReal(0.300700000000000))*(sj22)*(x756)))+(((IkReal(-0.0300000000000000))*(x756)))+(((IkReal(-1.00000000000000))*(x752)*(x755)))+(((x753)*(x755)))+(((IkReal(0.300710000000000))*(x753)))+(((x752)*(x754)))+(((IkReal(-0.300710000000000))*(x752)))));
IkReal x757=((cj25)*(npx));
IkReal x758=((cj23)*(npz));
IkReal x759=((IkReal(10.0233333333333))*(cj22));
IkReal x760=((npy)*(sj25));
dummyeval[0]=((((sj22)*(x757)))+(((IkReal(-1.00000000000000))*(x758)))+(((cj22)*(x758)))+(((IkReal(-1.00000000000000))*(sj22)*(x760)))+(((IkReal(-1.00000000000000))*(x757)*(x759)))+(((IkReal(10.0236666666667))*(x760)))+(((x759)*(x760)))+(((IkReal(-10.0236666666667))*(x757)))+(((IkReal(10.0233333333333))*(sj22)*(x758))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst38;
IkReal x761=((IkReal(1.00000000000000))*(sj23));
gconst38=IKsign(((((IkReal(-1.00000000000000))*(x761)*((npz)*(npz))))+(((IkReal(2.00000000000000))*(cj25)*(npx)*(npy)*(sj23)*(sj25)))+(((IkReal(-1.00000000000000))*(x761)*((cj25)*(cj25))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*(x761)*((npy)*(npy))*((sj25)*(sj25))))));
IkReal x762=((IkReal(1.00000000000000))*(sj23));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x762)*((npz)*(npz))))+(((IkReal(-1.00000000000000))*(x762)*((npy)*(npy))*((sj25)*(sj25))))+(((IkReal(2.00000000000000))*(cj25)*(npx)*(npy)*(sj23)*(sj25)))+(((IkReal(-1.00000000000000))*(x762)*((cj25)*(cj25))*((npx)*(npx)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x763=((((npx)*(sj25)))+(((cj25)*(npy))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j23)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.182646994100000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.179046994000000))*(cj22)))+(((IkReal(-0.0360846000000000))*(sj22))));
evalcond[2]=x763;
evalcond[3]=x763;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst41;
IkReal x764=((cj25)*(npx));
IkReal x765=((IkReal(0.300700000000000))*(sj22));
IkReal x766=((IkReal(0.0300000000000000))*(npy)*(sj25));
gconst41=IKsign(((((IkReal(0.0300000000000000))*(npz)*(sj22)))+(((npy)*(sj25)*(x765)))+(((IkReal(-1.00000000000000))*(x766)))+(((cj22)*(x766)))+(((IkReal(-0.300700000000000))*(cj22)*(npz)))+(((IkReal(-1.00000000000000))*(x764)*(x765)))+(((IkReal(-0.0300000000000000))*(cj22)*(x764)))+(((IkReal(0.0300000000000000))*(x764)))+(((IkReal(-0.300710000000000))*(npz)))));
IkReal x767=((cj25)*(npx));
IkReal x768=((IkReal(10.0233333333333))*(sj22));
IkReal x769=((npy)*(sj25));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x769)))+(((cj22)*(x769)))+(((npz)*(sj22)))+(((x768)*(x769)))+(((IkReal(-1.00000000000000))*(x767)*(x768)))+(((IkReal(-1.00000000000000))*(cj22)*(x767)))+(x767)+(((IkReal(-10.0236666666667))*(npz)))+(((IkReal(-10.0233333333333))*(cj22)*(npz))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst40;
gconst40=IKsign(((((IkReal(2.00000000000000))*(cj25)*(npx)*(npy)*(sj25)))+(((IkReal(-1.00000000000000))*((npz)*(npz))))+(((IkReal(-1.00000000000000))*((npy)*(npy))*((sj25)*(sj25))))+(((IkReal(-1.00000000000000))*((cj25)*(cj25))*((npx)*(npx))))));
dummyeval[0]=((((IkReal(2.00000000000000))*(cj25)*(npx)*(npy)*(sj25)))+(((IkReal(-1.00000000000000))*((npz)*(npz))))+(((IkReal(-1.00000000000000))*((npy)*(npy))*((sj25)*(sj25))))+(((IkReal(-1.00000000000000))*((cj25)*(cj25))*((npx)*(npx)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
IkReal x770=((IkReal(0.0300000000000000))*(cj22));
IkReal x771=((npy)*(sj25));
IkReal x772=((cj25)*(npx));
IkReal x773=((IkReal(0.300700000000000))*(sj22));
IkReal x774=((IkReal(0.0300000000000000))*(sj22));
IkReal x775=((IkReal(0.300700000000000))*(cj22));
if( IKabs(((gconst40)*(((((IkReal(0.0300000000000000))*(npz)))+(((x772)*(x774)))+(((IkReal(-1.00000000000000))*(x771)*(x774)))+(((IkReal(-1.00000000000000))*(npz)*(x770)))+(((IkReal(-1.00000000000000))*(x772)*(x775)))+(((IkReal(-1.00000000000000))*(npz)*(x773)))+(((x771)*(x775)))+(((IkReal(-0.300710000000000))*(x772)))+(((IkReal(0.300710000000000))*(x771))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst40)*(((((x770)*(x771)))+(((IkReal(-1.00000000000000))*(x772)*(x773)))+(((x771)*(x773)))+(((npz)*(x775)))+(((IkReal(0.0300000000000000))*(x772)))+(((IkReal(0.300710000000000))*(npz)))+(((IkReal(-1.00000000000000))*(npz)*(x774)))+(((IkReal(-0.0300000000000000))*(x771)))+(((IkReal(-1.00000000000000))*(x770)*(x772))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j24array[0]=IKatan2(((gconst40)*(((((IkReal(0.0300000000000000))*(npz)))+(((x772)*(x774)))+(((IkReal(-1.00000000000000))*(x771)*(x774)))+(((IkReal(-1.00000000000000))*(npz)*(x770)))+(((IkReal(-1.00000000000000))*(x772)*(x775)))+(((IkReal(-1.00000000000000))*(npz)*(x773)))+(((x771)*(x775)))+(((IkReal(-0.300710000000000))*(x772)))+(((IkReal(0.300710000000000))*(x771)))))), ((gconst40)*(((((x770)*(x771)))+(((IkReal(-1.00000000000000))*(x772)*(x773)))+(((x771)*(x773)))+(((npz)*(x775)))+(((IkReal(0.0300000000000000))*(x772)))+(((IkReal(0.300710000000000))*(npz)))+(((IkReal(-1.00000000000000))*(npz)*(x774)))+(((IkReal(-0.0300000000000000))*(x771)))+(((IkReal(-1.00000000000000))*(x770)*(x772)))))));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[5];
IkReal x776=IKsin(j24);
IkReal x777=IKcos(j24);
IkReal x778=((cj25)*(npx));
IkReal x779=((IkReal(0.0300000000000000))*(cj22));
IkReal x780=((IkReal(0.300700000000000))*(sj22));
IkReal x781=((npy)*(sj25));
IkReal x782=((IkReal(0.300700000000000))*(cj22));
IkReal x783=((IkReal(1.00000000000000))*(npz));
IkReal x784=((IkReal(0.0300000000000000))*(x777));
IkReal x785=((IkReal(1.00000000000000))*(x781));
IkReal x786=((sj22)*(x776));
IkReal x787=((IkReal(0.0600000000000000))*(x777));
IkReal x788=((IkReal(0.601420000000000))*(x776));
IkReal x789=((npz)*(x776));
evalcond[0]=((IkReal(-0.300710000000000))+(((IkReal(-1.00000000000000))*(x782)))+(((IkReal(0.0300000000000000))*(sj22)))+(((IkReal(-1.00000000000000))*(x777)*(x783)))+(((x776)*(x778)))+(((IkReal(-1.00000000000000))*(x776)*(x785))));
evalcond[1]=((((x776)*(x780)))+(((IkReal(-0.0300000000000000))*(x776)))+(((x776)*(x779)))+(((sj22)*(x784)))+(((IkReal(-1.00000000000000))*(x783)))+(((IkReal(-0.300710000000000))*(x777)))+(((IkReal(-1.00000000000000))*(x777)*(x782))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x777)*(x785)))+(((x777)*(x778)))+(((IkReal(-1.00000000000000))*(x780)))+(x789)+(((IkReal(-1.00000000000000))*(x779))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x776)*(x782)))+(((IkReal(0.0300000000000000))*(x786)))+(x784)+(((IkReal(-1.00000000000000))*(x777)*(x779)))+(((IkReal(-0.300710000000000))*(x776)))+(((IkReal(-1.00000000000000))*(x785)))+(((IkReal(-1.00000000000000))*(x777)*(x780)))+(x778));
evalcond[4]=((IkReal(-6.01410000000000e-6))+(((IkReal(-1.00000000000000))*(x778)*(x787)))+(((IkReal(-0.0600000000000000))*(x789)))+(((IkReal(-1.00000000000000))*(x781)*(x788)))+(((IkReal(-1.00000000000000))*(pp)))+(((x781)*(x787)))+(((IkReal(-0.601420000000000))*(npz)*(x777)))+(((x778)*(x788))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
IkReal x790=(cj22)*(cj22);
IkReal x791=(sj22)*(sj22);
IkReal x792=((cj22)*(sj22));
if( IKabs(((gconst41)*(((IkReal(0.00902130000000000))+(((IkReal(-0.0895204900000000))*(x792)))+(((IkReal(-0.0913234970000000))*(sj22)))+(((IkReal(0.00902100000000000))*(x791)))+(((IkReal(-3.00000000000000e-7))*(cj22)))+(((IkReal(-0.00902100000000000))*(x790)))+(((npy)*(npz)*(sj25)))+(((IkReal(-1.00000000000000))*(cj25)*(npx)*(npz))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst41)*(((IkReal(-0.000900000000000000))+(((IkReal(-0.000900000000000000))*(x790)))+(((IkReal(-0.0180420000000000))*(x792)))+((npz)*(npz))+(((IkReal(-0.0904204900000000))*(x791)))+(((IkReal(0.00180000000000000))*(cj22)))+(((IkReal(0.0180420000000000))*(sj22))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j24array[0]=IKatan2(((gconst41)*(((IkReal(0.00902130000000000))+(((IkReal(-0.0895204900000000))*(x792)))+(((IkReal(-0.0913234970000000))*(sj22)))+(((IkReal(0.00902100000000000))*(x791)))+(((IkReal(-3.00000000000000e-7))*(cj22)))+(((IkReal(-0.00902100000000000))*(x790)))+(((npy)*(npz)*(sj25)))+(((IkReal(-1.00000000000000))*(cj25)*(npx)*(npz)))))), ((gconst41)*(((IkReal(-0.000900000000000000))+(((IkReal(-0.000900000000000000))*(x790)))+(((IkReal(-0.0180420000000000))*(x792)))+((npz)*(npz))+(((IkReal(-0.0904204900000000))*(x791)))+(((IkReal(0.00180000000000000))*(cj22)))+(((IkReal(0.0180420000000000))*(sj22)))))));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[5];
IkReal x793=IKsin(j24);
IkReal x794=IKcos(j24);
IkReal x795=((cj25)*(npx));
IkReal x796=((IkReal(0.0300000000000000))*(cj22));
IkReal x797=((IkReal(0.300700000000000))*(sj22));
IkReal x798=((npy)*(sj25));
IkReal x799=((IkReal(0.300700000000000))*(cj22));
IkReal x800=((IkReal(1.00000000000000))*(npz));
IkReal x801=((IkReal(0.0300000000000000))*(x794));
IkReal x802=((IkReal(1.00000000000000))*(x798));
IkReal x803=((sj22)*(x793));
IkReal x804=((IkReal(0.0600000000000000))*(x794));
IkReal x805=((IkReal(0.601420000000000))*(x793));
IkReal x806=((npz)*(x793));
evalcond[0]=((IkReal(-0.300710000000000))+(((IkReal(0.0300000000000000))*(sj22)))+(((x793)*(x795)))+(((IkReal(-1.00000000000000))*(x794)*(x800)))+(((IkReal(-1.00000000000000))*(x799)))+(((IkReal(-1.00000000000000))*(x793)*(x802))));
evalcond[1]=((((IkReal(-0.0300000000000000))*(x793)))+(((IkReal(-1.00000000000000))*(x794)*(x799)))+(((x793)*(x797)))+(((sj22)*(x801)))+(((IkReal(-1.00000000000000))*(x800)))+(((IkReal(-0.300710000000000))*(x794)))+(((x793)*(x796))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x794)*(x802)))+(x806)+(((IkReal(-1.00000000000000))*(x796)))+(((x794)*(x795)))+(((IkReal(-1.00000000000000))*(x797))));
evalcond[3]=((x801)+(((IkReal(0.0300000000000000))*(x803)))+(((IkReal(-1.00000000000000))*(x794)*(x797)))+(((IkReal(-1.00000000000000))*(x793)*(x799)))+(x795)+(((IkReal(-1.00000000000000))*(x802)))+(((IkReal(-0.300710000000000))*(x793)))+(((IkReal(-1.00000000000000))*(x794)*(x796))));
evalcond[4]=((IkReal(-6.01410000000000e-6))+(((IkReal(-0.0600000000000000))*(x806)))+(((IkReal(-1.00000000000000))*(x795)*(x804)))+(((IkReal(-1.00000000000000))*(x798)*(x805)))+(((IkReal(-1.00000000000000))*(pp)))+(((x795)*(x805)))+(((IkReal(-0.601420000000000))*(npz)*(x794)))+(((x798)*(x804))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x807=((npx)*(sj25));
IkReal x808=((cj25)*(npy));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j23, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.182646994100000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.179046994000000))*(cj22)))+(((IkReal(-0.0360846000000000))*(sj22))));
evalcond[2]=((x808)+(x807));
evalcond[3]=((((IkReal(-1.00000000000000))*(x808)))+(((IkReal(-1.00000000000000))*(x807))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst43;
IkReal x809=((IkReal(0.0300000000000000))*(npz));
IkReal x810=((cj25)*(npx));
IkReal x811=((npy)*(sj25));
IkReal x812=((IkReal(0.0300000000000000))*(sj22));
IkReal x813=((IkReal(0.300700000000000))*(cj22));
gconst43=IKsign(((x809)+(((IkReal(-1.00000000000000))*(x810)*(x813)))+(((IkReal(0.300710000000000))*(x811)))+(((IkReal(-0.300700000000000))*(npz)*(sj22)))+(((x810)*(x812)))+(((IkReal(-0.300710000000000))*(x810)))+(((IkReal(-1.00000000000000))*(cj22)*(x809)))+(((IkReal(-1.00000000000000))*(x811)*(x812)))+(((x811)*(x813)))));
IkReal x814=((cj25)*(npx));
IkReal x815=((npy)*(sj25));
IkReal x816=((IkReal(10.0233333333333))*(cj22));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x814)*(x816)))+(((sj22)*(x814)))+(((IkReal(-1.00000000000000))*(cj22)*(npz)))+(((IkReal(-1.00000000000000))*(sj22)*(x815)))+(((IkReal(10.0236666666667))*(x815)))+(((x815)*(x816)))+(npz)+(((IkReal(-10.0236666666667))*(x814)))+(((IkReal(-10.0233333333333))*(npz)*(sj22))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst42;
gconst42=IKsign(((((IkReal(2.00000000000000))*(cj25)*(npx)*(npy)*(sj25)))+(((IkReal(-1.00000000000000))*((npz)*(npz))))+(((IkReal(-1.00000000000000))*((npy)*(npy))*((sj25)*(sj25))))+(((IkReal(-1.00000000000000))*((cj25)*(cj25))*((npx)*(npx))))));
dummyeval[0]=((((IkReal(2.00000000000000))*(cj25)*(npx)*(npy)*(sj25)))+(((IkReal(-1.00000000000000))*((npz)*(npz))))+(((IkReal(-1.00000000000000))*((npy)*(npy))*((sj25)*(sj25))))+(((IkReal(-1.00000000000000))*((cj25)*(cj25))*((npx)*(npx)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
IkReal x817=((IkReal(0.0300000000000000))*(cj22));
IkReal x818=((cj25)*(npx));
IkReal x819=((IkReal(0.300700000000000))*(sj22));
IkReal x820=((IkReal(0.300700000000000))*(cj22));
IkReal x821=((npy)*(sj25));
IkReal x822=((IkReal(0.0300000000000000))*(npz));
IkReal x823=((IkReal(0.0300000000000000))*(x821));
if( IKabs(((gconst42)*(((((npz)*(x819)))+(((npz)*(x817)))+(((IkReal(-1.00000000000000))*(x822)))+(((IkReal(0.0300000000000000))*(sj22)*(x818)))+(((IkReal(-1.00000000000000))*(x818)*(x820)))+(((IkReal(-1.00000000000000))*(sj22)*(x823)))+(((x820)*(x821)))+(((IkReal(-0.300710000000000))*(x818)))+(((IkReal(0.300710000000000))*(x821))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst42)*(((x823)+(((IkReal(-1.00000000000000))*(x817)*(x821)))+(((x817)*(x818)))+(((IkReal(-1.00000000000000))*(sj22)*(x822)))+(((x818)*(x819)))+(((IkReal(0.300710000000000))*(npz)))+(((npz)*(x820)))+(((IkReal(-1.00000000000000))*(x819)*(x821)))+(((IkReal(-0.0300000000000000))*(x818))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j24array[0]=IKatan2(((gconst42)*(((((npz)*(x819)))+(((npz)*(x817)))+(((IkReal(-1.00000000000000))*(x822)))+(((IkReal(0.0300000000000000))*(sj22)*(x818)))+(((IkReal(-1.00000000000000))*(x818)*(x820)))+(((IkReal(-1.00000000000000))*(sj22)*(x823)))+(((x820)*(x821)))+(((IkReal(-0.300710000000000))*(x818)))+(((IkReal(0.300710000000000))*(x821)))))), ((gconst42)*(((x823)+(((IkReal(-1.00000000000000))*(x817)*(x821)))+(((x817)*(x818)))+(((IkReal(-1.00000000000000))*(sj22)*(x822)))+(((x818)*(x819)))+(((IkReal(0.300710000000000))*(npz)))+(((npz)*(x820)))+(((IkReal(-1.00000000000000))*(x819)*(x821)))+(((IkReal(-0.0300000000000000))*(x818)))))));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[5];
IkReal x824=IKsin(j24);
IkReal x825=IKcos(j24);
IkReal x826=((cj25)*(npx));
IkReal x827=((IkReal(0.0300000000000000))*(cj22));
IkReal x828=((npy)*(sj25));
IkReal x829=((IkReal(0.300700000000000))*(sj22));
IkReal x830=((IkReal(0.300700000000000))*(cj22));
IkReal x831=((IkReal(0.0300000000000000))*(x825));
IkReal x832=((IkReal(1.00000000000000))*(x824));
IkReal x833=((sj22)*(x824));
IkReal x834=((IkReal(1.00000000000000))*(x825));
IkReal x835=((IkReal(0.0600000000000000))*(x825));
IkReal x836=((IkReal(0.601420000000000))*(x824));
evalcond[0]=((IkReal(-0.300710000000000))+(((IkReal(-1.00000000000000))*(npz)*(x834)))+(((IkReal(0.0300000000000000))*(sj22)))+(((IkReal(-1.00000000000000))*(x830)))+(((x824)*(x826)))+(((IkReal(-1.00000000000000))*(x828)*(x832))));
evalcond[1]=((((IkReal(-1.00000000000000))*(npz)))+(((IkReal(0.0300000000000000))*(x824)))+(((sj22)*(x831)))+(((IkReal(-1.00000000000000))*(x824)*(x827)))+(((IkReal(-1.00000000000000))*(x825)*(x830)))+(((IkReal(-1.00000000000000))*(x824)*(x829)))+(((IkReal(-0.300710000000000))*(x825))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(npz)*(x832)))+(((IkReal(-1.00000000000000))*(x826)*(x834)))+(((IkReal(-1.00000000000000))*(x827)))+(((x825)*(x828)))+(((IkReal(-1.00000000000000))*(x829))));
evalcond[3]=((x826)+(((IkReal(-1.00000000000000))*(x824)*(x830)))+(((x825)*(x829)))+(((IkReal(-1.00000000000000))*(x828)))+(((x825)*(x827)))+(((IkReal(-1.00000000000000))*(x831)))+(((IkReal(0.0300000000000000))*(x833)))+(((IkReal(-0.300710000000000))*(x824))));
evalcond[4]=((IkReal(-6.01410000000000e-6))+(((IkReal(-1.00000000000000))*(x828)*(x835)))+(((x826)*(x835)))+(((x826)*(x836)))+(((IkReal(0.0600000000000000))*(npz)*(x824)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x828)*(x836)))+(((IkReal(-0.601420000000000))*(npz)*(x825))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
IkReal x837=(cj22)*(cj22);
IkReal x838=(sj22)*(sj22);
IkReal x839=((cj22)*(sj22));
if( IKabs(((gconst43)*(((IkReal(-0.0904265041000000))+(((IkReal(0.0180420000000000))*(x839)))+(((IkReal(0.0180426000000000))*(sj22)))+(((IkReal(-0.180846994000000))*(cj22)))+((npz)*(npz))+(((IkReal(-0.000900000000000000))*(x838)))+(((IkReal(-0.0904204900000000))*(x837))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst43)*(((IkReal(-0.00902130000000000))+(((IkReal(0.0895204900000000))*(x839)))+(((IkReal(3.00000000000000e-7))*(cj22)))+(((IkReal(0.0913234970000000))*(sj22)))+(((cj25)*(npx)*(npz)))+(((IkReal(-1.00000000000000))*(npy)*(npz)*(sj25)))+(((IkReal(-0.00902100000000000))*(x838)))+(((IkReal(0.00902100000000000))*(x837))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j24array[0]=IKatan2(((gconst43)*(((IkReal(-0.0904265041000000))+(((IkReal(0.0180420000000000))*(x839)))+(((IkReal(0.0180426000000000))*(sj22)))+(((IkReal(-0.180846994000000))*(cj22)))+((npz)*(npz))+(((IkReal(-0.000900000000000000))*(x838)))+(((IkReal(-0.0904204900000000))*(x837)))))), ((gconst43)*(((IkReal(-0.00902130000000000))+(((IkReal(0.0895204900000000))*(x839)))+(((IkReal(3.00000000000000e-7))*(cj22)))+(((IkReal(0.0913234970000000))*(sj22)))+(((cj25)*(npx)*(npz)))+(((IkReal(-1.00000000000000))*(npy)*(npz)*(sj25)))+(((IkReal(-0.00902100000000000))*(x838)))+(((IkReal(0.00902100000000000))*(x837)))))));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[5];
IkReal x840=IKsin(j24);
IkReal x841=IKcos(j24);
IkReal x842=((cj25)*(npx));
IkReal x843=((IkReal(0.0300000000000000))*(cj22));
IkReal x844=((npy)*(sj25));
IkReal x845=((IkReal(0.300700000000000))*(sj22));
IkReal x846=((IkReal(0.300700000000000))*(cj22));
IkReal x847=((IkReal(0.0300000000000000))*(x841));
IkReal x848=((IkReal(1.00000000000000))*(x840));
IkReal x849=((sj22)*(x840));
IkReal x850=((IkReal(1.00000000000000))*(x841));
IkReal x851=((IkReal(0.0600000000000000))*(x841));
IkReal x852=((IkReal(0.601420000000000))*(x840));
evalcond[0]=((IkReal(-0.300710000000000))+(((x840)*(x842)))+(((IkReal(-1.00000000000000))*(x844)*(x848)))+(((IkReal(-1.00000000000000))*(x846)))+(((IkReal(0.0300000000000000))*(sj22)))+(((IkReal(-1.00000000000000))*(npz)*(x850))));
evalcond[1]=((((IkReal(0.0300000000000000))*(x840)))+(((IkReal(-1.00000000000000))*(npz)))+(((sj22)*(x847)))+(((IkReal(-1.00000000000000))*(x841)*(x846)))+(((IkReal(-1.00000000000000))*(x840)*(x843)))+(((IkReal(-0.300710000000000))*(x841)))+(((IkReal(-1.00000000000000))*(x840)*(x845))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x842)*(x850)))+(((x841)*(x844)))+(((IkReal(-1.00000000000000))*(x845)))+(((IkReal(-1.00000000000000))*(x843)))+(((IkReal(-1.00000000000000))*(npz)*(x848))));
evalcond[3]=((((IkReal(-0.300710000000000))*(x840)))+(((x841)*(x845)))+(x842)+(((IkReal(-1.00000000000000))*(x840)*(x846)))+(((IkReal(-1.00000000000000))*(x844)))+(((IkReal(0.0300000000000000))*(x849)))+(((IkReal(-1.00000000000000))*(x847)))+(((x841)*(x843))));
evalcond[4]=((IkReal(-6.01410000000000e-6))+(((IkReal(-0.601420000000000))*(npz)*(x841)))+(((IkReal(-1.00000000000000))*(x844)*(x852)))+(((IkReal(-1.00000000000000))*(x844)*(x851)))+(((IkReal(-1.00000000000000))*(pp)))+(((x842)*(x852)))+(((x842)*(x851)))+(((IkReal(0.0600000000000000))*(npz)*(x840))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
IkReal x853=((cj23)*(npy));
IkReal x854=((IkReal(0.0300000000000000))*(sj22));
IkReal x855=((IkReal(0.300700000000000))*(cj22));
IkReal x856=((npz)*(sj23));
IkReal x857=((npy)*(sj23)*(sj25));
IkReal x858=((cj25)*(npx)*(sj23));
IkReal x859=((cj23)*(cj25)*(sj25));
if( IKabs(((gconst38)*(((((IkReal(-1.00000000000000))*(x854)*(x857)))+(((IkReal(-1.00000000000000))*(x855)*(x858)))+(((x854)*(x858)))+(((x855)*(x857)))+(((IkReal(-0.300710000000000))*(x858)))+(((cj23)*(npx)*(npz)*(sj25)))+(((IkReal(0.300710000000000))*(x857)))+(((cj25)*(npz)*(x853))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst38)*(((((IkReal(-1.00000000000000))*(npx)*(x853)*((sj25)*(sj25))))+(((x855)*(x856)))+(((IkReal(-1.00000000000000))*(cj25)*(npy)*(sj25)*(x853)))+(((npx)*(x853)*((cj25)*(cj25))))+(((x859)*((npx)*(npx))))+(((IkReal(-1.00000000000000))*(x854)*(x856)))+(((IkReal(0.300710000000000))*(x856))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j24array[0]=IKatan2(((gconst38)*(((((IkReal(-1.00000000000000))*(x854)*(x857)))+(((IkReal(-1.00000000000000))*(x855)*(x858)))+(((x854)*(x858)))+(((x855)*(x857)))+(((IkReal(-0.300710000000000))*(x858)))+(((cj23)*(npx)*(npz)*(sj25)))+(((IkReal(0.300710000000000))*(x857)))+(((cj25)*(npz)*(x853)))))), ((gconst38)*(((((IkReal(-1.00000000000000))*(npx)*(x853)*((sj25)*(sj25))))+(((x855)*(x856)))+(((IkReal(-1.00000000000000))*(cj25)*(npy)*(sj25)*(x853)))+(((npx)*(x853)*((cj25)*(cj25))))+(((x859)*((npx)*(npx))))+(((IkReal(-1.00000000000000))*(x854)*(x856)))+(((IkReal(0.300710000000000))*(x856)))))));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[6];
IkReal x860=IKsin(j24);
IkReal x861=IKcos(j24);
IkReal x862=((cj25)*(npx));
IkReal x863=((IkReal(0.0300000000000000))*(cj22));
IkReal x864=((npy)*(sj25));
IkReal x865=((IkReal(0.300700000000000))*(sj22));
IkReal x866=((IkReal(0.0300000000000000))*(sj22));
IkReal x867=((npx)*(sj25));
IkReal x868=((IkReal(0.300700000000000))*(cj22));
IkReal x869=((cj23)*(x861));
IkReal x870=((npz)*(x860));
IkReal x871=((IkReal(0.601420000000000))*(x860));
IkReal x872=((cj25)*(npy)*(sj23));
IkReal x873=((cj23)*(x860));
IkReal x874=((IkReal(1.00000000000000))*(x861));
evalcond[0]=((IkReal(-0.300710000000000))+(((IkReal(-1.00000000000000))*(x868)))+(((IkReal(-1.00000000000000))*(x860)*(x864)))+(((x860)*(x862)))+(x866)+(((IkReal(-1.00000000000000))*(npz)*(x874))));
evalcond[1]=((((cj23)*(cj25)*(npy)))+(((sj23)*(x861)*(x862)))+(((cj23)*(x867)))+(((sj23)*(x870)))+(((IkReal(-1.00000000000000))*(sj23)*(x864)*(x874))));
evalcond[2]=((((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-1.00000000000000))*(x861)*(x868)))+(((x863)*(x873)))+(((IkReal(-0.300710000000000))*(x861)))+(((IkReal(-0.0300000000000000))*(x873)))+(((x861)*(x866)))+(((x865)*(x873))));
evalcond[3]=((IkReal(0.0300000000000000))+(((cj23)*(x870)))+(((IkReal(-1.00000000000000))*(x872)))+(((IkReal(-1.00000000000000))*(sj23)*(x867)))+(((IkReal(-1.00000000000000))*(x864)*(x869)))+(((x862)*(x869)))+(((IkReal(-1.00000000000000))*(x863)))+(((IkReal(-1.00000000000000))*(x865))));
evalcond[4]=((((IkReal(0.0300000000000000))*(x869)))+(x862)+(((IkReal(-0.300710000000000))*(x860)))+(((IkReal(-1.00000000000000))*(x864)))+(((IkReal(-1.00000000000000))*(x860)*(x868)))+(((IkReal(-1.00000000000000))*(x863)*(x869)))+(((x860)*(x866)))+(((IkReal(-1.00000000000000))*(x865)*(x869))));
evalcond[5]=((IkReal(-6.01410000000000e-6))+(((IkReal(-0.601420000000000))*(npz)*(x861)))+(((IkReal(0.0600000000000000))*(x872)))+(((IkReal(0.0600000000000000))*(sj23)*(x867)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(cj23)*(x870)))+(((IkReal(-1.00000000000000))*(x864)*(x871)))+(((IkReal(0.0600000000000000))*(x864)*(x869)))+(((x862)*(x871)))+(((IkReal(-0.0600000000000000))*(x862)*(x869))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
IkReal x875=(sj22)*(sj22);
IkReal x876=(cj22)*(cj22);
IkReal x877=((cj22)*(sj22));
IkReal x878=((IkReal(0.00902100000000000))*(cj23));
if( IKabs(((gconst39)*(((IkReal(-0.0904265041000000))+(((IkReal(0.0180426000000000))*(sj22)))+(((IkReal(-0.0904204900000000))*(x876)))+(((IkReal(-0.180846994000000))*(cj22)))+((npz)*(npz))+(((IkReal(0.0180420000000000))*(x877)))+(((IkReal(-0.000900000000000000))*(x875))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst39)*(((((IkReal(-3.00000000000000e-7))*(cj22)*(cj23)))+(((cj25)*(npx)*(npz)))+(((IkReal(-1.00000000000000))*(x876)*(x878)))+(((IkReal(0.00902130000000000))*(cj23)))+(((x875)*(x878)))+(((IkReal(-0.0913234970000000))*(cj23)*(sj22)))+(((IkReal(-1.00000000000000))*(npy)*(npz)*(sj25)))+(((IkReal(-0.0895204900000000))*(cj23)*(x877))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j24array[0]=IKatan2(((gconst39)*(((IkReal(-0.0904265041000000))+(((IkReal(0.0180426000000000))*(sj22)))+(((IkReal(-0.0904204900000000))*(x876)))+(((IkReal(-0.180846994000000))*(cj22)))+((npz)*(npz))+(((IkReal(0.0180420000000000))*(x877)))+(((IkReal(-0.000900000000000000))*(x875)))))), ((gconst39)*(((((IkReal(-3.00000000000000e-7))*(cj22)*(cj23)))+(((cj25)*(npx)*(npz)))+(((IkReal(-1.00000000000000))*(x876)*(x878)))+(((IkReal(0.00902130000000000))*(cj23)))+(((x875)*(x878)))+(((IkReal(-0.0913234970000000))*(cj23)*(sj22)))+(((IkReal(-1.00000000000000))*(npy)*(npz)*(sj25)))+(((IkReal(-0.0895204900000000))*(cj23)*(x877)))))));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[6];
IkReal x879=IKsin(j24);
IkReal x880=IKcos(j24);
IkReal x881=((cj25)*(npx));
IkReal x882=((IkReal(0.0300000000000000))*(cj22));
IkReal x883=((npy)*(sj25));
IkReal x884=((IkReal(0.300700000000000))*(sj22));
IkReal x885=((IkReal(0.0300000000000000))*(sj22));
IkReal x886=((npx)*(sj25));
IkReal x887=((IkReal(0.300700000000000))*(cj22));
IkReal x888=((cj23)*(x880));
IkReal x889=((npz)*(x879));
IkReal x890=((IkReal(0.601420000000000))*(x879));
IkReal x891=((cj25)*(npy)*(sj23));
IkReal x892=((cj23)*(x879));
IkReal x893=((IkReal(1.00000000000000))*(x880));
evalcond[0]=((IkReal(-0.300710000000000))+(x885)+(((x879)*(x881)))+(((IkReal(-1.00000000000000))*(npz)*(x893)))+(((IkReal(-1.00000000000000))*(x879)*(x883)))+(((IkReal(-1.00000000000000))*(x887))));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj23)*(x883)*(x893)))+(((sj23)*(x889)))+(((sj23)*(x880)*(x881)))+(((cj23)*(cj25)*(npy)))+(((cj23)*(x886))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x880)*(x887)))+(((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-0.0300000000000000))*(x892)))+(((x884)*(x892)))+(((x882)*(x892)))+(((x880)*(x885)))+(((IkReal(-0.300710000000000))*(x880))));
evalcond[3]=((IkReal(0.0300000000000000))+(((cj23)*(x889)))+(((IkReal(-1.00000000000000))*(x883)*(x888)))+(((IkReal(-1.00000000000000))*(x882)))+(((IkReal(-1.00000000000000))*(x891)))+(((IkReal(-1.00000000000000))*(sj23)*(x886)))+(((x881)*(x888)))+(((IkReal(-1.00000000000000))*(x884))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x879)*(x887)))+(x881)+(((IkReal(-0.300710000000000))*(x879)))+(((IkReal(-1.00000000000000))*(x882)*(x888)))+(((IkReal(-1.00000000000000))*(x883)))+(((IkReal(-1.00000000000000))*(x884)*(x888)))+(((IkReal(0.0300000000000000))*(x888)))+(((x879)*(x885))));
evalcond[5]=((IkReal(-6.01410000000000e-6))+(((IkReal(0.0600000000000000))*(sj23)*(x886)))+(((x881)*(x890)))+(((IkReal(-0.0600000000000000))*(x881)*(x888)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(cj23)*(x889)))+(((IkReal(0.0600000000000000))*(x883)*(x888)))+(((IkReal(-1.00000000000000))*(x883)*(x890)))+(((IkReal(0.0600000000000000))*(x891)))+(((IkReal(-0.601420000000000))*(npz)*(x880))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j25array[2], cj25array[2], sj25array[2];
bool j25valid[2]={false};
_nj25 = 2;
IkReal x894=((IkReal(0.0300000000000000))*(sj23));
if( IKabs(npy) < IKFAST_ATAN2_MAGTHRESH && IKabs(npx) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x895=((IkReal(1.00000000000000))*(IKatan2(npy, npx)));
if( ((((npy)*(npy))+((npx)*(npx)))) < (IkReal)-0.00001 )
    continue;
if( (((((IKabs(IKabs(IKsqrt((((npy)*(npy))+((npx)*(npx)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((npy)*(npy))+((npx)*(npx))))))):(IkReal)1.0e30))*(((((cj22)*(x894)))+(((IkReal(-1.00000000000000))*(x894)))+(((IkReal(0.300700000000000))*(sj22)*(sj23))))))) < -1-IKFAST_SINCOS_THRESH || (((((IKabs(IKabs(IKsqrt((((npy)*(npy))+((npx)*(npx)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((npy)*(npy))+((npx)*(npx))))))):(IkReal)1.0e30))*(((((cj22)*(x894)))+(((IkReal(-1.00000000000000))*(x894)))+(((IkReal(0.300700000000000))*(sj22)*(sj23))))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x896=IKasin(((((IKabs(IKabs(IKsqrt((((npy)*(npy))+((npx)*(npx)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((npy)*(npy))+((npx)*(npx))))))):(IkReal)1.0e30))*(((((cj22)*(x894)))+(((IkReal(-1.00000000000000))*(x894)))+(((IkReal(0.300700000000000))*(sj22)*(sj23)))))));
j25array[0]=((((IkReal(-1.00000000000000))*(x895)))+(((IkReal(-1.00000000000000))*(x896))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
j25array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x895)))+(x896));
sj25array[1]=IKsin(j25array[1]);
cj25array[1]=IKcos(j25array[1]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
if( j25array[1] > IKPI )
{
    j25array[1]-=IK2PI;
}
else if( j25array[1] < -IKPI )
{    j25array[1]+=IK2PI;
}
j25valid[1] = true;
for(int ij25 = 0; ij25 < 2; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 2; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];

{
IkReal dummyeval[1];
IkReal gconst39;
IkReal x897=((cj25)*(npx));
IkReal x898=((npy)*(sj25));
IkReal x899=((IkReal(0.0300000000000000))*(sj22));
IkReal x900=((IkReal(0.300700000000000))*(cj22));
IkReal x901=((cj23)*(npz));
gconst39=IKsign(((((IkReal(-1.00000000000000))*(x898)*(x899)))+(((IkReal(-0.0300000000000000))*(x901)))+(((IkReal(0.300700000000000))*(sj22)*(x901)))+(((IkReal(-1.00000000000000))*(x897)*(x900)))+(((IkReal(0.300710000000000))*(x898)))+(((x897)*(x899)))+(((x898)*(x900)))+(((IkReal(-0.300710000000000))*(x897)))+(((IkReal(0.0300000000000000))*(cj22)*(x901)))));
IkReal x902=((cj25)*(npx));
IkReal x903=((cj23)*(npz));
IkReal x904=((IkReal(10.0233333333333))*(cj22));
IkReal x905=((npy)*(sj25));
dummyeval[0]=((((IkReal(-10.0236666666667))*(x902)))+(((IkReal(-1.00000000000000))*(x903)))+(((cj22)*(x903)))+(((IkReal(-1.00000000000000))*(x902)*(x904)))+(((IkReal(10.0233333333333))*(sj22)*(x903)))+(((sj22)*(x902)))+(((x904)*(x905)))+(((IkReal(10.0236666666667))*(x905)))+(((IkReal(-1.00000000000000))*(sj22)*(x905))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst38;
IkReal x906=((IkReal(1.00000000000000))*(sj23));
gconst38=IKsign(((((IkReal(-1.00000000000000))*(x906)*((npz)*(npz))))+(((IkReal(-1.00000000000000))*(x906)*((npy)*(npy))*((sj25)*(sj25))))+(((IkReal(-1.00000000000000))*(x906)*((cj25)*(cj25))*((npx)*(npx))))+(((IkReal(2.00000000000000))*(cj25)*(npx)*(npy)*(sj23)*(sj25)))));
IkReal x907=((IkReal(1.00000000000000))*(sj23));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x907)*((npz)*(npz))))+(((IkReal(-1.00000000000000))*(x907)*((npy)*(npy))*((sj25)*(sj25))))+(((IkReal(-1.00000000000000))*(x907)*((cj25)*(cj25))*((npx)*(npx))))+(((IkReal(2.00000000000000))*(cj25)*(npx)*(npy)*(sj23)*(sj25))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x908=((((npx)*(sj25)))+(((cj25)*(npy))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j23)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.182646994100000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.179046994000000))*(cj22)))+(((IkReal(-0.0360846000000000))*(sj22))));
evalcond[2]=x908;
evalcond[3]=x908;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst41;
IkReal x909=((cj25)*(npx));
IkReal x910=((IkReal(0.300700000000000))*(sj22));
IkReal x911=((IkReal(0.0300000000000000))*(npy)*(sj25));
gconst41=IKsign(((((IkReal(0.0300000000000000))*(npz)*(sj22)))+(((IkReal(-1.00000000000000))*(x911)))+(((IkReal(0.0300000000000000))*(x909)))+(((cj22)*(x911)))+(((IkReal(-0.300700000000000))*(cj22)*(npz)))+(((IkReal(-0.0300000000000000))*(cj22)*(x909)))+(((IkReal(-1.00000000000000))*(x909)*(x910)))+(((npy)*(sj25)*(x910)))+(((IkReal(-0.300710000000000))*(npz)))));
IkReal x912=((cj25)*(npx));
IkReal x913=((IkReal(10.0233333333333))*(sj22));
IkReal x914=((npy)*(sj25));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x914)))+(((IkReal(-1.00000000000000))*(x912)*(x913)))+(((npz)*(sj22)))+(((IkReal(-1.00000000000000))*(cj22)*(x912)))+(((cj22)*(x914)))+(((IkReal(-10.0236666666667))*(npz)))+(x912)+(((x913)*(x914)))+(((IkReal(-10.0233333333333))*(cj22)*(npz))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst40;
gconst40=IKsign(((((IkReal(2.00000000000000))*(cj25)*(npx)*(npy)*(sj25)))+(((IkReal(-1.00000000000000))*((npz)*(npz))))+(((IkReal(-1.00000000000000))*((npy)*(npy))*((sj25)*(sj25))))+(((IkReal(-1.00000000000000))*((cj25)*(cj25))*((npx)*(npx))))));
dummyeval[0]=((((IkReal(2.00000000000000))*(cj25)*(npx)*(npy)*(sj25)))+(((IkReal(-1.00000000000000))*((npz)*(npz))))+(((IkReal(-1.00000000000000))*((npy)*(npy))*((sj25)*(sj25))))+(((IkReal(-1.00000000000000))*((cj25)*(cj25))*((npx)*(npx)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
IkReal x915=((IkReal(0.0300000000000000))*(cj22));
IkReal x916=((npy)*(sj25));
IkReal x917=((cj25)*(npx));
IkReal x918=((IkReal(0.300700000000000))*(sj22));
IkReal x919=((IkReal(0.0300000000000000))*(sj22));
IkReal x920=((IkReal(0.300700000000000))*(cj22));
if( IKabs(((gconst40)*(((((IkReal(0.0300000000000000))*(npz)))+(((IkReal(-1.00000000000000))*(npz)*(x918)))+(((IkReal(-1.00000000000000))*(x916)*(x919)))+(((x916)*(x920)))+(((IkReal(-1.00000000000000))*(x917)*(x920)))+(((IkReal(-0.300710000000000))*(x917)))+(((IkReal(0.300710000000000))*(x916)))+(((IkReal(-1.00000000000000))*(npz)*(x915)))+(((x917)*(x919))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst40)*(((((IkReal(0.0300000000000000))*(x917)))+(((x916)*(x918)))+(((x915)*(x916)))+(((IkReal(-1.00000000000000))*(x915)*(x917)))+(((IkReal(0.300710000000000))*(npz)))+(((IkReal(-1.00000000000000))*(x917)*(x918)))+(((IkReal(-0.0300000000000000))*(x916)))+(((IkReal(-1.00000000000000))*(npz)*(x919)))+(((npz)*(x920))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j24array[0]=IKatan2(((gconst40)*(((((IkReal(0.0300000000000000))*(npz)))+(((IkReal(-1.00000000000000))*(npz)*(x918)))+(((IkReal(-1.00000000000000))*(x916)*(x919)))+(((x916)*(x920)))+(((IkReal(-1.00000000000000))*(x917)*(x920)))+(((IkReal(-0.300710000000000))*(x917)))+(((IkReal(0.300710000000000))*(x916)))+(((IkReal(-1.00000000000000))*(npz)*(x915)))+(((x917)*(x919)))))), ((gconst40)*(((((IkReal(0.0300000000000000))*(x917)))+(((x916)*(x918)))+(((x915)*(x916)))+(((IkReal(-1.00000000000000))*(x915)*(x917)))+(((IkReal(0.300710000000000))*(npz)))+(((IkReal(-1.00000000000000))*(x917)*(x918)))+(((IkReal(-0.0300000000000000))*(x916)))+(((IkReal(-1.00000000000000))*(npz)*(x919)))+(((npz)*(x920)))))));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[5];
IkReal x921=IKsin(j24);
IkReal x922=IKcos(j24);
IkReal x923=((cj25)*(npx));
IkReal x924=((IkReal(0.0300000000000000))*(cj22));
IkReal x925=((IkReal(0.300700000000000))*(sj22));
IkReal x926=((npy)*(sj25));
IkReal x927=((IkReal(0.300700000000000))*(cj22));
IkReal x928=((IkReal(1.00000000000000))*(npz));
IkReal x929=((IkReal(0.0300000000000000))*(x922));
IkReal x930=((IkReal(1.00000000000000))*(x926));
IkReal x931=((sj22)*(x921));
IkReal x932=((IkReal(0.0600000000000000))*(x922));
IkReal x933=((IkReal(0.601420000000000))*(x921));
IkReal x934=((npz)*(x921));
evalcond[0]=((IkReal(-0.300710000000000))+(((IkReal(-1.00000000000000))*(x921)*(x930)))+(((IkReal(-1.00000000000000))*(x922)*(x928)))+(((IkReal(0.0300000000000000))*(sj22)))+(((x921)*(x923)))+(((IkReal(-1.00000000000000))*(x927))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x928)))+(((IkReal(-1.00000000000000))*(x922)*(x927)))+(((IkReal(-0.0300000000000000))*(x921)))+(((IkReal(-0.300710000000000))*(x922)))+(((x921)*(x924)))+(((sj22)*(x929)))+(((x921)*(x925))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x924)))+(((IkReal(-1.00000000000000))*(x925)))+(((IkReal(-1.00000000000000))*(x922)*(x930)))+(x934)+(((x922)*(x923))));
evalcond[3]=((x929)+(x923)+(((IkReal(-1.00000000000000))*(x921)*(x927)))+(((IkReal(-0.300710000000000))*(x921)))+(((IkReal(-1.00000000000000))*(x922)*(x924)))+(((IkReal(-1.00000000000000))*(x930)))+(((IkReal(0.0300000000000000))*(x931)))+(((IkReal(-1.00000000000000))*(x922)*(x925))));
evalcond[4]=((IkReal(-6.01410000000000e-6))+(((IkReal(-0.601420000000000))*(npz)*(x922)))+(((IkReal(-1.00000000000000))*(x926)*(x933)))+(((x923)*(x933)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x923)*(x932)))+(((IkReal(-0.0600000000000000))*(x934)))+(((x926)*(x932))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
IkReal x935=(cj22)*(cj22);
IkReal x936=(sj22)*(sj22);
IkReal x937=((cj22)*(sj22));
if( IKabs(((gconst41)*(((IkReal(0.00902130000000000))+(((IkReal(-0.0913234970000000))*(sj22)))+(((IkReal(-3.00000000000000e-7))*(cj22)))+(((IkReal(0.00902100000000000))*(x936)))+(((IkReal(-0.0895204900000000))*(x937)))+(((IkReal(-0.00902100000000000))*(x935)))+(((npy)*(npz)*(sj25)))+(((IkReal(-1.00000000000000))*(cj25)*(npx)*(npz))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst41)*(((IkReal(-0.000900000000000000))+(((IkReal(-0.000900000000000000))*(x935)))+((npz)*(npz))+(((IkReal(-0.0904204900000000))*(x936)))+(((IkReal(0.00180000000000000))*(cj22)))+(((IkReal(0.0180420000000000))*(sj22)))+(((IkReal(-0.0180420000000000))*(x937))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j24array[0]=IKatan2(((gconst41)*(((IkReal(0.00902130000000000))+(((IkReal(-0.0913234970000000))*(sj22)))+(((IkReal(-3.00000000000000e-7))*(cj22)))+(((IkReal(0.00902100000000000))*(x936)))+(((IkReal(-0.0895204900000000))*(x937)))+(((IkReal(-0.00902100000000000))*(x935)))+(((npy)*(npz)*(sj25)))+(((IkReal(-1.00000000000000))*(cj25)*(npx)*(npz)))))), ((gconst41)*(((IkReal(-0.000900000000000000))+(((IkReal(-0.000900000000000000))*(x935)))+((npz)*(npz))+(((IkReal(-0.0904204900000000))*(x936)))+(((IkReal(0.00180000000000000))*(cj22)))+(((IkReal(0.0180420000000000))*(sj22)))+(((IkReal(-0.0180420000000000))*(x937)))))));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[5];
IkReal x938=IKsin(j24);
IkReal x939=IKcos(j24);
IkReal x940=((cj25)*(npx));
IkReal x941=((IkReal(0.0300000000000000))*(cj22));
IkReal x942=((IkReal(0.300700000000000))*(sj22));
IkReal x943=((npy)*(sj25));
IkReal x944=((IkReal(0.300700000000000))*(cj22));
IkReal x945=((IkReal(1.00000000000000))*(npz));
IkReal x946=((IkReal(0.0300000000000000))*(x939));
IkReal x947=((IkReal(1.00000000000000))*(x943));
IkReal x948=((sj22)*(x938));
IkReal x949=((IkReal(0.0600000000000000))*(x939));
IkReal x950=((IkReal(0.601420000000000))*(x938));
IkReal x951=((npz)*(x938));
evalcond[0]=((IkReal(-0.300710000000000))+(((IkReal(-1.00000000000000))*(x939)*(x945)))+(((IkReal(0.0300000000000000))*(sj22)))+(((x938)*(x940)))+(((IkReal(-1.00000000000000))*(x944)))+(((IkReal(-1.00000000000000))*(x938)*(x947))));
evalcond[1]=((((x938)*(x941)))+(((IkReal(-1.00000000000000))*(x945)))+(((IkReal(-0.300710000000000))*(x939)))+(((IkReal(-0.0300000000000000))*(x938)))+(((sj22)*(x946)))+(((x938)*(x942)))+(((IkReal(-1.00000000000000))*(x939)*(x944))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x941)))+(((x939)*(x940)))+(((IkReal(-1.00000000000000))*(x942)))+(x951)+(((IkReal(-1.00000000000000))*(x939)*(x947))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x947)))+(((IkReal(-0.300710000000000))*(x938)))+(((IkReal(-1.00000000000000))*(x939)*(x941)))+(x940)+(x946)+(((IkReal(-1.00000000000000))*(x939)*(x942)))+(((IkReal(-1.00000000000000))*(x938)*(x944)))+(((IkReal(0.0300000000000000))*(x948))));
evalcond[4]=((IkReal(-6.01410000000000e-6))+(((x940)*(x950)))+(((IkReal(-0.0600000000000000))*(x951)))+(((IkReal(-1.00000000000000))*(x943)*(x950)))+(((x943)*(x949)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.601420000000000))*(npz)*(x939)))+(((IkReal(-1.00000000000000))*(x940)*(x949))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x952=((npx)*(sj25));
IkReal x953=((cj25)*(npy));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j23, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.182646994100000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.179046994000000))*(cj22)))+(((IkReal(-0.0360846000000000))*(sj22))));
evalcond[2]=((x953)+(x952));
evalcond[3]=((((IkReal(-1.00000000000000))*(x953)))+(((IkReal(-1.00000000000000))*(x952))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst43;
IkReal x954=((IkReal(0.0300000000000000))*(npz));
IkReal x955=((cj25)*(npx));
IkReal x956=((npy)*(sj25));
IkReal x957=((IkReal(0.0300000000000000))*(sj22));
IkReal x958=((IkReal(0.300700000000000))*(cj22));
gconst43=IKsign(((((IkReal(-1.00000000000000))*(x956)*(x957)))+(((IkReal(-0.300700000000000))*(npz)*(sj22)))+(((x956)*(x958)))+(((IkReal(-0.300710000000000))*(x955)))+(((IkReal(-1.00000000000000))*(x955)*(x958)))+(x954)+(((IkReal(0.300710000000000))*(x956)))+(((x955)*(x957)))+(((IkReal(-1.00000000000000))*(cj22)*(x954)))));
IkReal x959=((cj25)*(npx));
IkReal x960=((npy)*(sj25));
IkReal x961=((IkReal(10.0233333333333))*(cj22));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x959)*(x961)))+(((x960)*(x961)))+(((IkReal(10.0236666666667))*(x960)))+(((IkReal(-1.00000000000000))*(sj22)*(x960)))+(((IkReal(-1.00000000000000))*(cj22)*(npz)))+(((IkReal(-10.0236666666667))*(x959)))+(npz)+(((IkReal(-10.0233333333333))*(npz)*(sj22)))+(((sj22)*(x959))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst42;
gconst42=IKsign(((((IkReal(2.00000000000000))*(cj25)*(npx)*(npy)*(sj25)))+(((IkReal(-1.00000000000000))*((npz)*(npz))))+(((IkReal(-1.00000000000000))*((npy)*(npy))*((sj25)*(sj25))))+(((IkReal(-1.00000000000000))*((cj25)*(cj25))*((npx)*(npx))))));
dummyeval[0]=((((IkReal(2.00000000000000))*(cj25)*(npx)*(npy)*(sj25)))+(((IkReal(-1.00000000000000))*((npz)*(npz))))+(((IkReal(-1.00000000000000))*((npy)*(npy))*((sj25)*(sj25))))+(((IkReal(-1.00000000000000))*((cj25)*(cj25))*((npx)*(npx)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
IkReal x962=((IkReal(0.0300000000000000))*(cj22));
IkReal x963=((cj25)*(npx));
IkReal x964=((IkReal(0.300700000000000))*(sj22));
IkReal x965=((IkReal(0.300700000000000))*(cj22));
IkReal x966=((npy)*(sj25));
IkReal x967=((IkReal(0.0300000000000000))*(npz));
IkReal x968=((IkReal(0.0300000000000000))*(x966));
if( IKabs(((gconst42)*(((((IkReal(-1.00000000000000))*(x967)))+(((x965)*(x966)))+(((IkReal(-1.00000000000000))*(x963)*(x965)))+(((IkReal(0.0300000000000000))*(sj22)*(x963)))+(((IkReal(-1.00000000000000))*(sj22)*(x968)))+(((npz)*(x964)))+(((npz)*(x962)))+(((IkReal(0.300710000000000))*(x966)))+(((IkReal(-0.300710000000000))*(x963))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst42)*(((((x962)*(x963)))+(((IkReal(-0.0300000000000000))*(x963)))+(((IkReal(-1.00000000000000))*(sj22)*(x967)))+(((IkReal(-1.00000000000000))*(x964)*(x966)))+(((IkReal(0.300710000000000))*(npz)))+(((IkReal(-1.00000000000000))*(x962)*(x966)))+(((npz)*(x965)))+(((x963)*(x964)))+(x968))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j24array[0]=IKatan2(((gconst42)*(((((IkReal(-1.00000000000000))*(x967)))+(((x965)*(x966)))+(((IkReal(-1.00000000000000))*(x963)*(x965)))+(((IkReal(0.0300000000000000))*(sj22)*(x963)))+(((IkReal(-1.00000000000000))*(sj22)*(x968)))+(((npz)*(x964)))+(((npz)*(x962)))+(((IkReal(0.300710000000000))*(x966)))+(((IkReal(-0.300710000000000))*(x963)))))), ((gconst42)*(((((x962)*(x963)))+(((IkReal(-0.0300000000000000))*(x963)))+(((IkReal(-1.00000000000000))*(sj22)*(x967)))+(((IkReal(-1.00000000000000))*(x964)*(x966)))+(((IkReal(0.300710000000000))*(npz)))+(((IkReal(-1.00000000000000))*(x962)*(x966)))+(((npz)*(x965)))+(((x963)*(x964)))+(x968)))));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[5];
IkReal x969=IKsin(j24);
IkReal x970=IKcos(j24);
IkReal x971=((cj25)*(npx));
IkReal x972=((IkReal(0.0300000000000000))*(cj22));
IkReal x973=((npy)*(sj25));
IkReal x974=((IkReal(0.300700000000000))*(sj22));
IkReal x975=((IkReal(0.300700000000000))*(cj22));
IkReal x976=((IkReal(0.0300000000000000))*(x970));
IkReal x977=((IkReal(1.00000000000000))*(x969));
IkReal x978=((sj22)*(x969));
IkReal x979=((IkReal(1.00000000000000))*(x970));
IkReal x980=((IkReal(0.0600000000000000))*(x970));
IkReal x981=((IkReal(0.601420000000000))*(x969));
evalcond[0]=((IkReal(-0.300710000000000))+(((IkReal(0.0300000000000000))*(sj22)))+(((x969)*(x971)))+(((IkReal(-1.00000000000000))*(npz)*(x979)))+(((IkReal(-1.00000000000000))*(x975)))+(((IkReal(-1.00000000000000))*(x973)*(x977))));
evalcond[1]=((((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-1.00000000000000))*(x970)*(x975)))+(((IkReal(-1.00000000000000))*(x969)*(x974)))+(((sj22)*(x976)))+(((IkReal(-0.300710000000000))*(x970)))+(((IkReal(-1.00000000000000))*(x969)*(x972)))+(((IkReal(0.0300000000000000))*(x969))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x971)*(x979)))+(((IkReal(-1.00000000000000))*(x972)))+(((IkReal(-1.00000000000000))*(npz)*(x977)))+(((x970)*(x973)))+(((IkReal(-1.00000000000000))*(x974))));
evalcond[3]=((((x970)*(x972)))+(((IkReal(-1.00000000000000))*(x969)*(x975)))+(x971)+(((IkReal(0.0300000000000000))*(x978)))+(((IkReal(-0.300710000000000))*(x969)))+(((IkReal(-1.00000000000000))*(x976)))+(((x970)*(x974)))+(((IkReal(-1.00000000000000))*(x973))));
evalcond[4]=((IkReal(-6.01410000000000e-6))+(((x971)*(x980)))+(((IkReal(-1.00000000000000))*(x973)*(x980)))+(((IkReal(-1.00000000000000))*(x973)*(x981)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.601420000000000))*(npz)*(x970)))+(((IkReal(0.0600000000000000))*(npz)*(x969)))+(((x971)*(x981))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
IkReal x982=(cj22)*(cj22);
IkReal x983=(sj22)*(sj22);
IkReal x984=((cj22)*(sj22));
if( IKabs(((gconst43)*(((IkReal(-0.0904265041000000))+(((IkReal(0.0180420000000000))*(x984)))+(((IkReal(0.0180426000000000))*(sj22)))+(((IkReal(-0.180846994000000))*(cj22)))+((npz)*(npz))+(((IkReal(-0.0904204900000000))*(x982)))+(((IkReal(-0.000900000000000000))*(x983))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst43)*(((IkReal(-0.00902130000000000))+(((IkReal(3.00000000000000e-7))*(cj22)))+(((IkReal(0.0913234970000000))*(sj22)))+(((cj25)*(npx)*(npz)))+(((IkReal(0.00902100000000000))*(x982)))+(((IkReal(-1.00000000000000))*(npy)*(npz)*(sj25)))+(((IkReal(0.0895204900000000))*(x984)))+(((IkReal(-0.00902100000000000))*(x983))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j24array[0]=IKatan2(((gconst43)*(((IkReal(-0.0904265041000000))+(((IkReal(0.0180420000000000))*(x984)))+(((IkReal(0.0180426000000000))*(sj22)))+(((IkReal(-0.180846994000000))*(cj22)))+((npz)*(npz))+(((IkReal(-0.0904204900000000))*(x982)))+(((IkReal(-0.000900000000000000))*(x983)))))), ((gconst43)*(((IkReal(-0.00902130000000000))+(((IkReal(3.00000000000000e-7))*(cj22)))+(((IkReal(0.0913234970000000))*(sj22)))+(((cj25)*(npx)*(npz)))+(((IkReal(0.00902100000000000))*(x982)))+(((IkReal(-1.00000000000000))*(npy)*(npz)*(sj25)))+(((IkReal(0.0895204900000000))*(x984)))+(((IkReal(-0.00902100000000000))*(x983)))))));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[5];
IkReal x985=IKsin(j24);
IkReal x986=IKcos(j24);
IkReal x987=((cj25)*(npx));
IkReal x988=((IkReal(0.0300000000000000))*(cj22));
IkReal x989=((npy)*(sj25));
IkReal x990=((IkReal(0.300700000000000))*(sj22));
IkReal x991=((IkReal(0.300700000000000))*(cj22));
IkReal x992=((IkReal(0.0300000000000000))*(x986));
IkReal x993=((IkReal(1.00000000000000))*(x985));
IkReal x994=((sj22)*(x985));
IkReal x995=((IkReal(1.00000000000000))*(x986));
IkReal x996=((IkReal(0.0600000000000000))*(x986));
IkReal x997=((IkReal(0.601420000000000))*(x985));
evalcond[0]=((IkReal(-0.300710000000000))+(((IkReal(-1.00000000000000))*(npz)*(x995)))+(((IkReal(0.0300000000000000))*(sj22)))+(((x985)*(x987)))+(((IkReal(-1.00000000000000))*(x991)))+(((IkReal(-1.00000000000000))*(x989)*(x993))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x986)*(x991)))+(((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-1.00000000000000))*(x985)*(x988)))+(((IkReal(0.0300000000000000))*(x985)))+(((IkReal(-0.300710000000000))*(x986)))+(((sj22)*(x992)))+(((IkReal(-1.00000000000000))*(x985)*(x990))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(npz)*(x993)))+(((x986)*(x989)))+(((IkReal(-1.00000000000000))*(x988)))+(((IkReal(-1.00000000000000))*(x990)))+(((IkReal(-1.00000000000000))*(x987)*(x995))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x985)*(x991)))+(x987)+(((IkReal(0.0300000000000000))*(x994)))+(((IkReal(-1.00000000000000))*(x989)))+(((IkReal(-1.00000000000000))*(x992)))+(((IkReal(-0.300710000000000))*(x985)))+(((x986)*(x990)))+(((x986)*(x988))));
evalcond[4]=((IkReal(-6.01410000000000e-6))+(((x987)*(x996)))+(((IkReal(-0.601420000000000))*(npz)*(x986)))+(((x987)*(x997)))+(((IkReal(0.0600000000000000))*(npz)*(x985)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x989)*(x996)))+(((IkReal(-1.00000000000000))*(x989)*(x997))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
IkReal x998=((cj23)*(npy));
IkReal x999=((IkReal(0.0300000000000000))*(sj22));
IkReal x1000=((IkReal(0.300700000000000))*(cj22));
IkReal x1001=((npz)*(sj23));
IkReal x1002=((npy)*(sj23)*(sj25));
IkReal x1003=((cj25)*(npx)*(sj23));
IkReal x1004=((cj23)*(cj25)*(sj25));
if( IKabs(((gconst38)*(((((IkReal(-1.00000000000000))*(x1002)*(x999)))+(((cj25)*(npz)*(x998)))+(((IkReal(-0.300710000000000))*(x1003)))+(((IkReal(0.300710000000000))*(x1002)))+(((x1003)*(x999)))+(((IkReal(-1.00000000000000))*(x1000)*(x1003)))+(((cj23)*(npx)*(npz)*(sj25)))+(((x1000)*(x1002))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst38)*(((((IkReal(-1.00000000000000))*(npx)*(x998)*((sj25)*(sj25))))+(((IkReal(-1.00000000000000))*(cj25)*(npy)*(sj25)*(x998)))+(((x1004)*((npx)*(npx))))+(((IkReal(-1.00000000000000))*(x1001)*(x999)))+(((IkReal(0.300710000000000))*(x1001)))+(((x1000)*(x1001)))+(((npx)*(x998)*((cj25)*(cj25)))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j24array[0]=IKatan2(((gconst38)*(((((IkReal(-1.00000000000000))*(x1002)*(x999)))+(((cj25)*(npz)*(x998)))+(((IkReal(-0.300710000000000))*(x1003)))+(((IkReal(0.300710000000000))*(x1002)))+(((x1003)*(x999)))+(((IkReal(-1.00000000000000))*(x1000)*(x1003)))+(((cj23)*(npx)*(npz)*(sj25)))+(((x1000)*(x1002)))))), ((gconst38)*(((((IkReal(-1.00000000000000))*(npx)*(x998)*((sj25)*(sj25))))+(((IkReal(-1.00000000000000))*(cj25)*(npy)*(sj25)*(x998)))+(((x1004)*((npx)*(npx))))+(((IkReal(-1.00000000000000))*(x1001)*(x999)))+(((IkReal(0.300710000000000))*(x1001)))+(((x1000)*(x1001)))+(((npx)*(x998)*((cj25)*(cj25))))))));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[6];
IkReal x1005=IKsin(j24);
IkReal x1006=IKcos(j24);
IkReal x1007=((cj25)*(npx));
IkReal x1008=((IkReal(0.0300000000000000))*(cj22));
IkReal x1009=((npy)*(sj25));
IkReal x1010=((IkReal(0.300700000000000))*(sj22));
IkReal x1011=((IkReal(0.0300000000000000))*(sj22));
IkReal x1012=((npx)*(sj25));
IkReal x1013=((IkReal(0.300700000000000))*(cj22));
IkReal x1014=((cj23)*(x1006));
IkReal x1015=((npz)*(x1005));
IkReal x1016=((IkReal(0.601420000000000))*(x1005));
IkReal x1017=((cj25)*(npy)*(sj23));
IkReal x1018=((cj23)*(x1005));
IkReal x1019=((IkReal(1.00000000000000))*(x1006));
evalcond[0]=((IkReal(-0.300710000000000))+(((IkReal(-1.00000000000000))*(npz)*(x1019)))+(((IkReal(-1.00000000000000))*(x1013)))+(((IkReal(-1.00000000000000))*(x1005)*(x1009)))+(x1011)+(((x1005)*(x1007))));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj23)*(x1009)*(x1019)))+(((sj23)*(x1015)))+(((cj23)*(cj25)*(npy)))+(((cj23)*(x1012)))+(((sj23)*(x1006)*(x1007))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x1006)*(x1013)))+(((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-0.0300000000000000))*(x1018)))+(((x1006)*(x1011)))+(((IkReal(-0.300710000000000))*(x1006)))+(((x1010)*(x1018)))+(((x1008)*(x1018))));
evalcond[3]=((IkReal(0.0300000000000000))+(((cj23)*(x1015)))+(((IkReal(-1.00000000000000))*(x1010)))+(((IkReal(-1.00000000000000))*(x1017)))+(((IkReal(-1.00000000000000))*(x1009)*(x1014)))+(((IkReal(-1.00000000000000))*(sj23)*(x1012)))+(((x1007)*(x1014)))+(((IkReal(-1.00000000000000))*(x1008))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x1008)*(x1014)))+(((x1005)*(x1011)))+(x1007)+(((IkReal(-1.00000000000000))*(x1010)*(x1014)))+(((IkReal(-1.00000000000000))*(x1005)*(x1013)))+(((IkReal(-1.00000000000000))*(x1009)))+(((IkReal(0.0300000000000000))*(x1014)))+(((IkReal(-0.300710000000000))*(x1005))));
evalcond[5]=((IkReal(-6.01410000000000e-6))+(((x1007)*(x1016)))+(((IkReal(-1.00000000000000))*(x1009)*(x1016)))+(((IkReal(-0.601420000000000))*(npz)*(x1006)))+(((IkReal(-0.0600000000000000))*(cj23)*(x1015)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x1007)*(x1014)))+(((IkReal(0.0600000000000000))*(x1009)*(x1014)))+(((IkReal(0.0600000000000000))*(x1017)))+(((IkReal(0.0600000000000000))*(sj23)*(x1012))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
IkReal x1020=(sj22)*(sj22);
IkReal x1021=(cj22)*(cj22);
IkReal x1022=((cj22)*(sj22));
IkReal x1023=((IkReal(0.00902100000000000))*(cj23));
if( IKabs(((gconst39)*(((IkReal(-0.0904265041000000))+(((IkReal(0.0180426000000000))*(sj22)))+(((IkReal(-0.180846994000000))*(cj22)))+(((IkReal(-0.000900000000000000))*(x1020)))+((npz)*(npz))+(((IkReal(-0.0904204900000000))*(x1021)))+(((IkReal(0.0180420000000000))*(x1022))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst39)*(((((IkReal(-3.00000000000000e-7))*(cj22)*(cj23)))+(((IkReal(-1.00000000000000))*(x1021)*(x1023)))+(((cj25)*(npx)*(npz)))+(((IkReal(-0.0895204900000000))*(cj23)*(x1022)))+(((IkReal(0.00902130000000000))*(cj23)))+(((IkReal(-0.0913234970000000))*(cj23)*(sj22)))+(((IkReal(-1.00000000000000))*(npy)*(npz)*(sj25)))+(((x1020)*(x1023))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j24array[0]=IKatan2(((gconst39)*(((IkReal(-0.0904265041000000))+(((IkReal(0.0180426000000000))*(sj22)))+(((IkReal(-0.180846994000000))*(cj22)))+(((IkReal(-0.000900000000000000))*(x1020)))+((npz)*(npz))+(((IkReal(-0.0904204900000000))*(x1021)))+(((IkReal(0.0180420000000000))*(x1022)))))), ((gconst39)*(((((IkReal(-3.00000000000000e-7))*(cj22)*(cj23)))+(((IkReal(-1.00000000000000))*(x1021)*(x1023)))+(((cj25)*(npx)*(npz)))+(((IkReal(-0.0895204900000000))*(cj23)*(x1022)))+(((IkReal(0.00902130000000000))*(cj23)))+(((IkReal(-0.0913234970000000))*(cj23)*(sj22)))+(((IkReal(-1.00000000000000))*(npy)*(npz)*(sj25)))+(((x1020)*(x1023)))))));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[6];
IkReal x1024=IKsin(j24);
IkReal x1025=IKcos(j24);
IkReal x1026=((cj25)*(npx));
IkReal x1027=((IkReal(0.0300000000000000))*(cj22));
IkReal x1028=((npy)*(sj25));
IkReal x1029=((IkReal(0.300700000000000))*(sj22));
IkReal x1030=((IkReal(0.0300000000000000))*(sj22));
IkReal x1031=((npx)*(sj25));
IkReal x1032=((IkReal(0.300700000000000))*(cj22));
IkReal x1033=((cj23)*(x1025));
IkReal x1034=((npz)*(x1024));
IkReal x1035=((IkReal(0.601420000000000))*(x1024));
IkReal x1036=((cj25)*(npy)*(sj23));
IkReal x1037=((cj23)*(x1024));
IkReal x1038=((IkReal(1.00000000000000))*(x1025));
evalcond[0]=((IkReal(-0.300710000000000))+(((IkReal(-1.00000000000000))*(x1024)*(x1028)))+(((IkReal(-1.00000000000000))*(x1032)))+(x1030)+(((x1024)*(x1026)))+(((IkReal(-1.00000000000000))*(npz)*(x1038))));
evalcond[1]=((((sj23)*(x1025)*(x1026)))+(((sj23)*(x1034)))+(((cj23)*(cj25)*(npy)))+(((IkReal(-1.00000000000000))*(sj23)*(x1028)*(x1038)))+(((cj23)*(x1031))));
evalcond[2]=((((IkReal(-1.00000000000000))*(npz)))+(((x1029)*(x1037)))+(((IkReal(-0.0300000000000000))*(x1037)))+(((IkReal(-0.300710000000000))*(x1025)))+(((x1025)*(x1030)))+(((x1027)*(x1037)))+(((IkReal(-1.00000000000000))*(x1025)*(x1032))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x1036)))+(((IkReal(-1.00000000000000))*(x1028)*(x1033)))+(((cj23)*(x1034)))+(((IkReal(-1.00000000000000))*(sj23)*(x1031)))+(((IkReal(-1.00000000000000))*(x1029)))+(((IkReal(-1.00000000000000))*(x1027)))+(((x1026)*(x1033))));
evalcond[4]=((((IkReal(-0.300710000000000))*(x1024)))+(((IkReal(-1.00000000000000))*(x1027)*(x1033)))+(((x1024)*(x1030)))+(x1026)+(((IkReal(-1.00000000000000))*(x1024)*(x1032)))+(((IkReal(0.0300000000000000))*(x1033)))+(((IkReal(-1.00000000000000))*(x1029)*(x1033)))+(((IkReal(-1.00000000000000))*(x1028))));
evalcond[5]=((IkReal(-6.01410000000000e-6))+(((IkReal(-1.00000000000000))*(x1028)*(x1035)))+(((IkReal(0.0600000000000000))*(sj23)*(x1031)))+(((IkReal(0.0600000000000000))*(x1036)))+(((IkReal(-1.00000000000000))*(pp)))+(((x1026)*(x1035)))+(((IkReal(-0.601420000000000))*(npz)*(x1025)))+(((IkReal(-0.0600000000000000))*(cj23)*(x1034)))+(((IkReal(-0.0600000000000000))*(x1026)*(x1033)))+(((IkReal(0.0600000000000000))*(x1028)*(x1033))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x91=((sj23)*(sj25));
IkReal x92=((IkReal(1.00000000000000))*(cj22));
IkReal x93=((sj23)*(sj24));
IkReal x94=((cj22)*(cj24));
IkReal x95=((cj25)*(sj23));
IkReal x96=((sj22)*(x95));
IkReal x97=((IkReal(1.00000000000000))*(cj23)*(sj22));
IkReal x98=((IkReal(-1.00000000000000))*(sj25));
IkReal x99=((((IkReal(-1.00000000000000))*(sj22)*(sj24)))+(((cj23)*(x94))));
IkReal x100=((((cj22)*(cj23)*(sj24)))+(((cj24)*(sj22))));
IkReal x101=((((cj24)*(x95)))+(((cj23)*(sj25))));
IkReal x102=((((IkReal(-1.00000000000000))*(cj24)*(x91)))+(((cj23)*(cj25))));
IkReal x103=((((IkReal(-1.00000000000000))*(sj24)*(x97)))+(x94));
IkReal x104=((((IkReal(-1.00000000000000))*(sj24)*(x92)))+(((IkReal(-1.00000000000000))*(cj24)*(x97))));
IkReal x105=((sj25)*(x104));
IkReal x106=((((IkReal(-1.00000000000000))*(x91)*(x92)))+(((cj25)*(x99))));
IkReal x107=((((cj25)*(x104)))+(((sj22)*(x91))));
IkReal x108=((((x98)*(x99)))+(((IkReal(-1.00000000000000))*(cj22)*(x95))));
IkReal x109=((((x104)*(x98)))+(x96));
new_r00=((((r01)*(x108)))+(((r00)*(x106)))+(((r02)*(x100))));
new_r01=((((r10)*(x106)))+(((r12)*(x100)))+(((r11)*(x108))));
new_r02=((((r21)*(x108)))+(((r22)*(x100)))+(((r20)*(x106))));
new_r10=((((r00)*(x101)))+(((r01)*(x102)))+(((r02)*(x93))));
new_r11=((((r10)*(x101)))+(((r11)*(x102)))+(((r12)*(x93))));
new_r12=((((r22)*(x93)))+(((r21)*(x102)))+(((r20)*(x101))));
new_r20=((((r01)*(x109)))+(((r02)*(x103)))+(((r00)*(x107))));
new_r21=((((r11)*(((((IkReal(-1.00000000000000))*(x105)))+(x96)))))+(((r10)*(x107)))+(((r12)*(x103))));
new_r22=((((r22)*(x103)))+(((r20)*(x107)))+(((r21)*(x109))));
{
IkReal j20array[2], cj20array[2], sj20array[2];
bool j20valid[2]={false};
_nj20 = 2;
sj20array[0]=((IkReal(-1.00000000000000))*(new_r22));
if( sj20array[0] >= -1-IKFAST_SINCOS_THRESH && sj20array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j20valid[0] = j20valid[1] = true;
    j20array[0] = IKasin(sj20array[0]);
    cj20array[0] = IKcos(j20array[0]);
    sj20array[1] = sj20array[0];
    j20array[1] = j20array[0] > 0 ? (IKPI-j20array[0]) : (-IKPI-j20array[0]);
    cj20array[1] = -cj20array[0];
}
else if( isnan(sj20array[0]) )
{
    // probably any value will work
    j20valid[0] = true;
    cj20array[0] = 1; sj20array[0] = 0; j20array[0] = 0;
}
for(int ij20 = 0; ij20 < 2; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 2; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];

{
IkReal dummyeval[1];
IkReal gconst44;
gconst44=IKsign(cj20);
dummyeval[0]=cj20;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst45;
gconst45=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst46;
gconst46=IKsign(((((cj20)*(new_r00)*(new_r02)))+(((cj20)*(new_r10)*(new_r12)))));
dummyeval[0]=((((cj20)*(new_r00)*(new_r02)))+(((cj20)*(new_r10)*(new_r12))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j20)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(1.00000000000000))+(new_r22));
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[5]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[6]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j21array[2], cj21array[2], sj21array[2];
bool j21valid[2]={false};
_nj21 = 2;
if( IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x110=IKatan2(new_r12, new_r02);
j21array[0]=((IkReal(-1.00000000000000))*(x110));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
j21array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x110))));
sj21array[1]=IKsin(j21array[1]);
cj21array[1]=IKcos(j21array[1]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
if( j21array[1] > IKPI )
{
    j21array[1]-=IK2PI;
}
else if( j21array[1] < -IKPI )
{    j21array[1]+=IK2PI;
}
j21valid[1] = true;
for(int ij21 = 0; ij21 < 2; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 2; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[1];
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r12)*(IKsin(j21))))+(((new_r02)*(IKcos(j21)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
if( IKabs(((((new_r00)*(sj21)))+(((cj21)*(new_r10))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(new_r01)*(sj21)))+(((IkReal(-1.00000000000000))*(cj21)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((new_r00)*(sj21)))+(((cj21)*(new_r10)))))+IKsqr(((((IkReal(-1.00000000000000))*(new_r01)*(sj21)))+(((IkReal(-1.00000000000000))*(cj21)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j19array[0]=IKatan2(((((new_r00)*(sj21)))+(((cj21)*(new_r10)))), ((((IkReal(-1.00000000000000))*(new_r01)*(sj21)))+(((IkReal(-1.00000000000000))*(cj21)*(new_r11)))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[4];
IkReal x111=IKcos(j19);
IkReal x112=((IkReal(1.00000000000000))*(sj21));
IkReal x113=((IkReal(1.00000000000000))*(IKsin(j19)));
evalcond[0]=((((cj21)*(new_r00)))+(((IkReal(-1.00000000000000))*(x111)))+(((IkReal(-1.00000000000000))*(new_r10)*(x112))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r11)*(x112)))+(((cj21)*(new_r01)))+(((IkReal(-1.00000000000000))*(x113))));
evalcond[2]=((((cj21)*(new_r11)))+(x111)+(((new_r01)*(sj21))));
evalcond[3]=((((new_r00)*(sj21)))+(((cj21)*(new_r10)))+(((IkReal(-1.00000000000000))*(x113))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j19;
vinfos[0].indices[0] = _ij19[0];
vinfos[0].indices[1] = _ij19[1];
vinfos[0].maxsolutions = _nj19;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j20;
vinfos[1].indices[0] = _ij20[0];
vinfos[1].indices[1] = _ij20[1];
vinfos[1].maxsolutions = _nj20;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j21;
vinfos[2].indices[0] = _ij21[0];
vinfos[2].indices[1] = _ij21[1];
vinfos[2].maxsolutions = _nj21;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j22;
vinfos[3].indices[0] = _ij22[0];
vinfos[3].indices[1] = _ij22[1];
vinfos[3].maxsolutions = _nj22;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j23;
vinfos[4].indices[0] = _ij23[0];
vinfos[4].indices[1] = _ij23[1];
vinfos[4].maxsolutions = _nj23;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j24;
vinfos[5].indices[0] = _ij24[0];
vinfos[5].indices[1] = _ij24[1];
vinfos[5].maxsolutions = _nj24;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j25;
vinfos[6].indices[0] = _ij25[0];
vinfos[6].indices[1] = _ij25[1];
vinfos[6].maxsolutions = _nj25;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
IkReal x114=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j20)), IkReal(6.28318530717959))));
evalcond[1]=x114;
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x114;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j21array[2], cj21array[2], sj21array[2];
bool j21valid[2]={false};
_nj21 = 2;
if( IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x115=IKatan2(new_r12, new_r02);
j21array[0]=((IkReal(-1.00000000000000))*(x115));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
j21array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x115))));
sj21array[1]=IKsin(j21array[1]);
cj21array[1]=IKcos(j21array[1]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
if( j21array[1] > IKPI )
{
    j21array[1]-=IK2PI;
}
else if( j21array[1] < -IKPI )
{    j21array[1]+=IK2PI;
}
j21valid[1] = true;
for(int ij21 = 0; ij21 < 2; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 2; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[1];
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r12)*(IKsin(j21))))+(((new_r02)*(IKcos(j21)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(new_r00)*(sj21)))+(((IkReal(-1.00000000000000))*(cj21)*(new_r10))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj21)*(new_r11)))+(((new_r01)*(sj21))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r00)*(sj21)))+(((IkReal(-1.00000000000000))*(cj21)*(new_r10)))))+IKsqr(((((cj21)*(new_r11)))+(((new_r01)*(sj21)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j19array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r00)*(sj21)))+(((IkReal(-1.00000000000000))*(cj21)*(new_r10)))), ((((cj21)*(new_r11)))+(((new_r01)*(sj21)))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[4];
IkReal x116=IKsin(j19);
IkReal x117=((IkReal(1.00000000000000))*(sj21));
IkReal x118=((IkReal(1.00000000000000))*(IKcos(j19)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x118)))+(((cj21)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(x117))));
evalcond[1]=((((cj21)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(x117)))+(((IkReal(-1.00000000000000))*(x116))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x118)))+(((cj21)*(new_r11)))+(((new_r01)*(sj21))));
evalcond[3]=((((new_r00)*(sj21)))+(((cj21)*(new_r10)))+(x116));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j19;
vinfos[0].indices[0] = _ij19[0];
vinfos[0].indices[1] = _ij19[1];
vinfos[0].maxsolutions = _nj19;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j20;
vinfos[1].indices[0] = _ij20[0];
vinfos[1].indices[1] = _ij20[1];
vinfos[1].maxsolutions = _nj20;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j21;
vinfos[2].indices[0] = _ij21[0];
vinfos[2].indices[1] = _ij21[1];
vinfos[2].maxsolutions = _nj21;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j22;
vinfos[3].indices[0] = _ij22[0];
vinfos[3].indices[1] = _ij22[1];
vinfos[3].maxsolutions = _nj22;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j23;
vinfos[4].indices[0] = _ij23[0];
vinfos[4].indices[1] = _ij23[1];
vinfos[4].maxsolutions = _nj23;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j24;
vinfos[5].indices[0] = _ij24[0];
vinfos[5].indices[1] = _ij24[1];
vinfos[5].maxsolutions = _nj24;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j25;
vinfos[6].indices[0] = _ij25[0];
vinfos[6].indices[1] = _ij25[1];
vinfos[6].maxsolutions = _nj25;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
IkReal x119=((gconst46)*(new_r20)*(sj20));
if( IKabs(((new_r02)*(x119))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r12)*(x119))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j21array[0]=IKatan2(((new_r02)*(x119)), ((new_r12)*(x119)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[6];
IkReal x120=IKcos(j21);
IkReal x121=IKsin(j21);
IkReal x122=((IkReal(1.00000000000000))*(cj20));
IkReal x123=((IkReal(1.00000000000000))*(sj20));
IkReal x124=((IkReal(1.00000000000000))*(x121));
IkReal x125=((new_r02)*(x121));
IkReal x126=((cj20)*(x121));
IkReal x127=((new_r12)*(x120));
IkReal x128=((cj20)*(x120));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r12)*(x124)))+(((new_r02)*(x120))));
evalcond[1]=((x127)+(x125)+(((IkReal(-1.00000000000000))*(x122))));
evalcond[2]=((((new_r10)*(x128)))+(((new_r00)*(x126)))+(((IkReal(-1.00000000000000))*(new_r20)*(x123))));
evalcond[3]=((((new_r11)*(x128)))+(((new_r01)*(x126)))+(((IkReal(-1.00000000000000))*(new_r21)*(x123))));
evalcond[4]=((IkReal(-1.00000000000000))+(((cj20)*(x125)))+(((cj20)*(x127)))+(((IkReal(-1.00000000000000))*(new_r22)*(x123))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x123)*(x125)))+(((IkReal(-1.00000000000000))*(new_r22)*(x122)))+(((IkReal(-1.00000000000000))*(x123)*(x127))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst47;
gconst47=IKsign(cj20);
dummyeval[0]=cj20;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj20;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=sj20;
dummyeval[1]=cj20;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x129=((((cj21)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r12)*(sj21))));
IkReal x130=((((new_r00)*(sj21)))+(((cj21)*(new_r10))));
IkReal x131=((((cj21)*(new_r11)))+(((new_r01)*(sj21))));
IkReal x132=((IkReal(-1.00000000000000))+(((cj21)*(new_r12)))+(((new_r02)*(sj21))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j20)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=x129;
evalcond[3]=x129;
evalcond[4]=x132;
evalcond[5]=x131;
evalcond[6]=x130;
evalcond[7]=x130;
evalcond[8]=x131;
evalcond[9]=x132;
evalcond[10]=((IkReal(-1.00000000000000))*(new_r22));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(((IkReal(-1.00000000000000))*(new_r21)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j19array[0]=IKatan2(new_r20, ((IkReal(-1.00000000000000))*(new_r21)));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[4];
IkReal x133=IKcos(j19);
IkReal x134=((IkReal(1.00000000000000))*(sj21));
IkReal x135=((IkReal(1.00000000000000))*(IKsin(j19)));
evalcond[0]=((new_r21)+(x133));
evalcond[1]=((((IkReal(-1.00000000000000))*(x135)))+(new_r20));
evalcond[2]=((((cj21)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(x134)))+(((IkReal(-1.00000000000000))*(x133))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x135)))+(((IkReal(-1.00000000000000))*(new_r11)*(x134)))+(((cj21)*(new_r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j19;
vinfos[0].indices[0] = _ij19[0];
vinfos[0].indices[1] = _ij19[1];
vinfos[0].maxsolutions = _nj19;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j20;
vinfos[1].indices[0] = _ij20[0];
vinfos[1].indices[1] = _ij20[1];
vinfos[1].maxsolutions = _nj20;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j21;
vinfos[2].indices[0] = _ij21[0];
vinfos[2].indices[1] = _ij21[1];
vinfos[2].maxsolutions = _nj21;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j22;
vinfos[3].indices[0] = _ij22[0];
vinfos[3].indices[1] = _ij22[1];
vinfos[3].maxsolutions = _nj22;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j23;
vinfos[4].indices[0] = _ij23[0];
vinfos[4].indices[1] = _ij23[1];
vinfos[4].maxsolutions = _nj23;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j24;
vinfos[5].indices[0] = _ij24[0];
vinfos[5].indices[1] = _ij24[1];
vinfos[5].maxsolutions = _nj24;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j25;
vinfos[6].indices[0] = _ij25[0];
vinfos[6].indices[1] = _ij25[1];
vinfos[6].maxsolutions = _nj25;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x136=((cj21)*(new_r12));
IkReal x137=((cj21)*(new_r10));
IkReal x138=((new_r02)*(sj21));
IkReal x139=((new_r01)*(sj21));
IkReal x140=((new_r00)*(sj21));
IkReal x141=((cj21)*(new_r11));
IkReal x142=((((cj21)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r12)*(sj21))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j20, IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=x142;
evalcond[3]=x142;
evalcond[4]=((IkReal(1.00000000000000))+(x136)+(x138));
evalcond[5]=((x139)+(x141));
evalcond[6]=((x137)+(x140));
evalcond[7]=((((IkReal(-1.00000000000000))*(x137)))+(((IkReal(-1.00000000000000))*(x140))));
evalcond[8]=((((IkReal(-1.00000000000000))*(x141)))+(((IkReal(-1.00000000000000))*(x139))));
evalcond[9]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(x138)))+(((IkReal(-1.00000000000000))*(x136))));
evalcond[10]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r20)))+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j19array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r20)), new_r21);
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[4];
IkReal x143=IKsin(j19);
IkReal x144=((IkReal(1.00000000000000))*(sj21));
IkReal x145=((IkReal(1.00000000000000))*(IKcos(j19)));
evalcond[0]=((new_r21)+(((IkReal(-1.00000000000000))*(x145))));
evalcond[1]=((new_r20)+(x143));
evalcond[2]=((((cj21)*(new_r00)))+(((IkReal(-1.00000000000000))*(x145)))+(((IkReal(-1.00000000000000))*(new_r10)*(x144))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r11)*(x144)))+(((cj21)*(new_r01)))+(((IkReal(-1.00000000000000))*(x143))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j19;
vinfos[0].indices[0] = _ij19[0];
vinfos[0].indices[1] = _ij19[1];
vinfos[0].maxsolutions = _nj19;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j20;
vinfos[1].indices[0] = _ij20[0];
vinfos[1].indices[1] = _ij20[1];
vinfos[1].maxsolutions = _nj20;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j21;
vinfos[2].indices[0] = _ij21[0];
vinfos[2].indices[1] = _ij21[1];
vinfos[2].maxsolutions = _nj21;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j22;
vinfos[3].indices[0] = _ij22[0];
vinfos[3].indices[1] = _ij22[1];
vinfos[3].maxsolutions = _nj22;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j23;
vinfos[4].indices[0] = _ij23[0];
vinfos[4].indices[1] = _ij23[1];
vinfos[4].maxsolutions = _nj23;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j24;
vinfos[5].indices[0] = _ij24[0];
vinfos[5].indices[1] = _ij24[1];
vinfos[5].maxsolutions = _nj24;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j25;
vinfos[6].indices[0] = _ij25[0];
vinfos[6].indices[1] = _ij25[1];
vinfos[6].maxsolutions = _nj25;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x146=((cj21)*(new_r12));
IkReal x147=((new_r02)*(sj21));
IkReal x148=((((cj21)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r12)*(sj21))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j20)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(1.00000000000000))+(new_r22));
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=x148;
evalcond[5]=x148;
evalcond[6]=((x146)+(x147));
evalcond[7]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[8]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[9]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
evalcond[10]=((((IkReal(-1.00000000000000))*(x147)))+(((IkReal(-1.00000000000000))*(x146))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
if( IKabs(((((new_r00)*(sj21)))+(((cj21)*(new_r10))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(new_r01)*(sj21)))+(((IkReal(-1.00000000000000))*(cj21)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((new_r00)*(sj21)))+(((cj21)*(new_r10)))))+IKsqr(((((IkReal(-1.00000000000000))*(new_r01)*(sj21)))+(((IkReal(-1.00000000000000))*(cj21)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j19array[0]=IKatan2(((((new_r00)*(sj21)))+(((cj21)*(new_r10)))), ((((IkReal(-1.00000000000000))*(new_r01)*(sj21)))+(((IkReal(-1.00000000000000))*(cj21)*(new_r11)))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[4];
IkReal x149=IKcos(j19);
IkReal x150=((IkReal(1.00000000000000))*(sj21));
IkReal x151=((IkReal(1.00000000000000))*(IKsin(j19)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r10)*(x150)))+(((cj21)*(new_r00)))+(((IkReal(-1.00000000000000))*(x149))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r11)*(x150)))+(((cj21)*(new_r01)))+(((IkReal(-1.00000000000000))*(x151))));
evalcond[2]=((((cj21)*(new_r11)))+(x149)+(((new_r01)*(sj21))));
evalcond[3]=((((new_r00)*(sj21)))+(((IkReal(-1.00000000000000))*(x151)))+(((cj21)*(new_r10))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j19;
vinfos[0].indices[0] = _ij19[0];
vinfos[0].indices[1] = _ij19[1];
vinfos[0].maxsolutions = _nj19;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j20;
vinfos[1].indices[0] = _ij20[0];
vinfos[1].indices[1] = _ij20[1];
vinfos[1].maxsolutions = _nj20;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j21;
vinfos[2].indices[0] = _ij21[0];
vinfos[2].indices[1] = _ij21[1];
vinfos[2].maxsolutions = _nj21;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j22;
vinfos[3].indices[0] = _ij22[0];
vinfos[3].indices[1] = _ij22[1];
vinfos[3].maxsolutions = _nj22;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j23;
vinfos[4].indices[0] = _ij23[0];
vinfos[4].indices[1] = _ij23[1];
vinfos[4].maxsolutions = _nj23;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j24;
vinfos[5].indices[0] = _ij24[0];
vinfos[5].indices[1] = _ij24[1];
vinfos[5].maxsolutions = _nj24;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j25;
vinfos[6].indices[0] = _ij25[0];
vinfos[6].indices[1] = _ij25[1];
vinfos[6].maxsolutions = _nj25;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x152=((IkReal(-1.00000000000000))+(new_r22));
IkReal x153=((((cj21)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r12)*(sj21))));
IkReal x154=((((cj21)*(new_r12)))+(((new_r02)*(sj21))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j20)), IkReal(6.28318530717959))));
evalcond[1]=x152;
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=x153;
evalcond[5]=x153;
evalcond[6]=x154;
evalcond[7]=new_r20;
evalcond[8]=new_r21;
evalcond[9]=x152;
evalcond[10]=x154;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(new_r00)*(sj21)))+(((IkReal(-1.00000000000000))*(cj21)*(new_r10))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj21)*(new_r11)))+(((new_r01)*(sj21))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r00)*(sj21)))+(((IkReal(-1.00000000000000))*(cj21)*(new_r10)))))+IKsqr(((((cj21)*(new_r11)))+(((new_r01)*(sj21)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j19array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r00)*(sj21)))+(((IkReal(-1.00000000000000))*(cj21)*(new_r10)))), ((((cj21)*(new_r11)))+(((new_r01)*(sj21)))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[4];
IkReal x155=IKsin(j19);
IkReal x156=((IkReal(1.00000000000000))*(sj21));
IkReal x157=((IkReal(1.00000000000000))*(IKcos(j19)));
evalcond[0]=((((cj21)*(new_r00)))+(((IkReal(-1.00000000000000))*(x157)))+(((IkReal(-1.00000000000000))*(new_r10)*(x156))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r11)*(x156)))+(((cj21)*(new_r01)))+(((IkReal(-1.00000000000000))*(x155))));
evalcond[2]=((((cj21)*(new_r11)))+(((IkReal(-1.00000000000000))*(x157)))+(((new_r01)*(sj21))));
evalcond[3]=((x155)+(((new_r00)*(sj21)))+(((cj21)*(new_r10))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j19;
vinfos[0].indices[0] = _ij19[0];
vinfos[0].indices[1] = _ij19[1];
vinfos[0].maxsolutions = _nj19;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j20;
vinfos[1].indices[0] = _ij20[0];
vinfos[1].indices[1] = _ij20[1];
vinfos[1].maxsolutions = _nj20;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j21;
vinfos[2].indices[0] = _ij21[0];
vinfos[2].indices[1] = _ij21[1];
vinfos[2].maxsolutions = _nj21;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j22;
vinfos[3].indices[0] = _ij22[0];
vinfos[3].indices[1] = _ij22[1];
vinfos[3].maxsolutions = _nj22;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j23;
vinfos[4].indices[0] = _ij23[0];
vinfos[4].indices[1] = _ij23[1];
vinfos[4].maxsolutions = _nj23;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j24;
vinfos[5].indices[0] = _ij24[0];
vinfos[5].indices[1] = _ij24[1];
vinfos[5].maxsolutions = _nj24;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j25;
vinfos[6].indices[0] = _ij25[0];
vinfos[6].indices[1] = _ij25[1];
vinfos[6].maxsolutions = _nj25;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
if( IKabs(((((IKabs(sj20) != 0)?((IkReal)1/(sj20)):(IkReal)1.0e30))*(((((new_r00)*(sj21)))+(((cj21)*(new_r10))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj20) != 0)?((IkReal)1/(cj20)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(sj20) != 0)?((IkReal)1/(sj20)):(IkReal)1.0e30))*(((((new_r00)*(sj21)))+(((cj21)*(new_r10)))))))+IKsqr(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj20) != 0)?((IkReal)1/(cj20)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j19array[0]=IKatan2(((((IKabs(sj20) != 0)?((IkReal)1/(sj20)):(IkReal)1.0e30))*(((((new_r00)*(sj21)))+(((cj21)*(new_r10)))))), ((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj20) != 0)?((IkReal)1/(cj20)):(IkReal)1.0e30))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[8];
IkReal x158=IKcos(j19);
IkReal x159=IKsin(j19);
IkReal x160=((cj21)*(new_r10));
IkReal x161=((IkReal(1.00000000000000))*(sj20));
IkReal x162=((IkReal(1.00000000000000))*(sj21));
IkReal x163=((new_r00)*(sj21));
IkReal x164=((IkReal(1.00000000000000))*(cj20));
IkReal x165=((cj21)*(new_r11));
IkReal x166=((new_r01)*(sj21));
IkReal x167=((IkReal(1.00000000000000))*(x158));
IkReal x168=((IkReal(1.00000000000000))*(x159));
evalcond[0]=((new_r21)+(((cj20)*(x158))));
evalcond[1]=((new_r20)+(((IkReal(-1.00000000000000))*(x159)*(x164))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r10)*(x162)))+(((IkReal(-1.00000000000000))*(x167)))+(((cj21)*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x168)))+(((cj21)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(x162))));
evalcond[4]=((x166)+(x165)+(((sj20)*(x158))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x159)*(x161)))+(x163)+(x160));
evalcond[6]=((((IkReal(-1.00000000000000))*(x161)*(x163)))+(((IkReal(-1.00000000000000))*(x160)*(x161)))+(x159)+(((IkReal(-1.00000000000000))*(new_r20)*(x164))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r21)*(x164)))+(((IkReal(-1.00000000000000))*(x167)))+(((IkReal(-1.00000000000000))*(x161)*(x165)))+(((IkReal(-1.00000000000000))*(x161)*(x166))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j19;
vinfos[0].indices[0] = _ij19[0];
vinfos[0].indices[1] = _ij19[1];
vinfos[0].maxsolutions = _nj19;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j20;
vinfos[1].indices[0] = _ij20[0];
vinfos[1].indices[1] = _ij20[1];
vinfos[1].maxsolutions = _nj20;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j21;
vinfos[2].indices[0] = _ij21[0];
vinfos[2].indices[1] = _ij21[1];
vinfos[2].maxsolutions = _nj21;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j22;
vinfos[3].indices[0] = _ij22[0];
vinfos[3].indices[1] = _ij22[1];
vinfos[3].maxsolutions = _nj22;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j23;
vinfos[4].indices[0] = _ij23[0];
vinfos[4].indices[1] = _ij23[1];
vinfos[4].maxsolutions = _nj23;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j24;
vinfos[5].indices[0] = _ij24[0];
vinfos[5].indices[1] = _ij24[1];
vinfos[5].maxsolutions = _nj24;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j25;
vinfos[6].indices[0] = _ij25[0];
vinfos[6].indices[1] = _ij25[1];
vinfos[6].maxsolutions = _nj25;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
if( IKabs(((((cj21)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj21))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj20) != 0)?((IkReal)1/(cj20)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj21)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj21)))))+IKsqr(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj20) != 0)?((IkReal)1/(cj20)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j19array[0]=IKatan2(((((cj21)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj21)))), ((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj20) != 0)?((IkReal)1/(cj20)):(IkReal)1.0e30))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[8];
IkReal x169=IKcos(j19);
IkReal x170=IKsin(j19);
IkReal x171=((cj21)*(new_r10));
IkReal x172=((IkReal(1.00000000000000))*(sj20));
IkReal x173=((IkReal(1.00000000000000))*(sj21));
IkReal x174=((new_r00)*(sj21));
IkReal x175=((IkReal(1.00000000000000))*(cj20));
IkReal x176=((cj21)*(new_r11));
IkReal x177=((new_r01)*(sj21));
IkReal x178=((IkReal(1.00000000000000))*(x169));
IkReal x179=((IkReal(1.00000000000000))*(x170));
evalcond[0]=((new_r21)+(((cj20)*(x169))));
evalcond[1]=((new_r20)+(((IkReal(-1.00000000000000))*(x170)*(x175))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r10)*(x173)))+(((IkReal(-1.00000000000000))*(x178)))+(((cj21)*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x179)))+(((cj21)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(x173))));
evalcond[4]=((x177)+(x176)+(((sj20)*(x169))));
evalcond[5]=((x171)+(x174)+(((IkReal(-1.00000000000000))*(x170)*(x172))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x172)*(x174)))+(((IkReal(-1.00000000000000))*(x171)*(x172)))+(x170)+(((IkReal(-1.00000000000000))*(new_r20)*(x175))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x172)*(x177)))+(((IkReal(-1.00000000000000))*(x172)*(x176)))+(((IkReal(-1.00000000000000))*(x178)))+(((IkReal(-1.00000000000000))*(new_r21)*(x175))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j19;
vinfos[0].indices[0] = _ij19[0];
vinfos[0].indices[1] = _ij19[1];
vinfos[0].maxsolutions = _nj19;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j20;
vinfos[1].indices[0] = _ij20[0];
vinfos[1].indices[1] = _ij20[1];
vinfos[1].maxsolutions = _nj20;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j21;
vinfos[2].indices[0] = _ij21[0];
vinfos[2].indices[1] = _ij21[1];
vinfos[2].maxsolutions = _nj21;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j22;
vinfos[3].indices[0] = _ij22[0];
vinfos[3].indices[1] = _ij22[1];
vinfos[3].maxsolutions = _nj22;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j23;
vinfos[4].indices[0] = _ij23[0];
vinfos[4].indices[1] = _ij23[1];
vinfos[4].maxsolutions = _nj23;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j24;
vinfos[5].indices[0] = _ij24[0];
vinfos[5].indices[1] = _ij24[1];
vinfos[5].maxsolutions = _nj24;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j25;
vinfos[6].indices[0] = _ij25[0];
vinfos[6].indices[1] = _ij25[1];
vinfos[6].maxsolutions = _nj25;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
if( IKabs(((gconst47)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst47)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j19array[0]=IKatan2(((gconst47)*(new_r20)), ((IkReal(-1.00000000000000))*(gconst47)*(new_r21)));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[8];
IkReal x180=IKcos(j19);
IkReal x181=IKsin(j19);
IkReal x182=((cj21)*(new_r10));
IkReal x183=((IkReal(1.00000000000000))*(sj20));
IkReal x184=((IkReal(1.00000000000000))*(sj21));
IkReal x185=((new_r00)*(sj21));
IkReal x186=((IkReal(1.00000000000000))*(cj20));
IkReal x187=((cj21)*(new_r11));
IkReal x188=((new_r01)*(sj21));
IkReal x189=((IkReal(1.00000000000000))*(x180));
IkReal x190=((IkReal(1.00000000000000))*(x181));
evalcond[0]=((new_r21)+(((cj20)*(x180))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x181)*(x186)))+(new_r20));
evalcond[2]=((((IkReal(-1.00000000000000))*(x189)))+(((IkReal(-1.00000000000000))*(new_r10)*(x184)))+(((cj21)*(new_r00))));
evalcond[3]=((((cj21)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(x184)))+(((IkReal(-1.00000000000000))*(x190))));
evalcond[4]=((((sj20)*(x180)))+(x187)+(x188));
evalcond[5]=((x185)+(x182)+(((IkReal(-1.00000000000000))*(x181)*(x183))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x183)*(x185)))+(((IkReal(-1.00000000000000))*(x182)*(x183)))+(x181)+(((IkReal(-1.00000000000000))*(new_r20)*(x186))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r21)*(x186)))+(((IkReal(-1.00000000000000))*(x189)))+(((IkReal(-1.00000000000000))*(x183)*(x187)))+(((IkReal(-1.00000000000000))*(x183)*(x188))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j19;
vinfos[0].indices[0] = _ij19[0];
vinfos[0].indices[1] = _ij19[1];
vinfos[0].maxsolutions = _nj19;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j20;
vinfos[1].indices[0] = _ij20[0];
vinfos[1].indices[1] = _ij20[1];
vinfos[1].maxsolutions = _nj20;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j21;
vinfos[2].indices[0] = _ij21[0];
vinfos[2].indices[1] = _ij21[1];
vinfos[2].maxsolutions = _nj21;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j22;
vinfos[3].indices[0] = _ij22[0];
vinfos[3].indices[1] = _ij22[1];
vinfos[3].maxsolutions = _nj22;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j23;
vinfos[4].indices[0] = _ij23[0];
vinfos[4].indices[1] = _ij23[1];
vinfos[4].maxsolutions = _nj23;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j24;
vinfos[5].indices[0] = _ij24[0];
vinfos[5].indices[1] = _ij24[1];
vinfos[5].maxsolutions = _nj24;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j25;
vinfos[6].indices[0] = _ij25[0];
vinfos[6].indices[1] = _ij25[1];
vinfos[6].maxsolutions = _nj25;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
IkReal x191=((cj20)*(gconst45));
if( IKabs(((new_r02)*(x191))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r12)*(x191))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j21array[0]=IKatan2(((new_r02)*(x191)), ((new_r12)*(x191)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[6];
IkReal x192=IKcos(j21);
IkReal x193=IKsin(j21);
IkReal x194=((IkReal(1.00000000000000))*(cj20));
IkReal x195=((IkReal(1.00000000000000))*(sj20));
IkReal x196=((IkReal(1.00000000000000))*(x193));
IkReal x197=((new_r02)*(x193));
IkReal x198=((cj20)*(x193));
IkReal x199=((new_r12)*(x192));
IkReal x200=((cj20)*(x192));
evalcond[0]=((((new_r02)*(x192)))+(((IkReal(-1.00000000000000))*(new_r12)*(x196))));
evalcond[1]=((x199)+(x197)+(((IkReal(-1.00000000000000))*(x194))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r20)*(x195)))+(((new_r00)*(x198)))+(((new_r10)*(x200))));
evalcond[3]=((((new_r01)*(x198)))+(((new_r11)*(x200)))+(((IkReal(-1.00000000000000))*(new_r21)*(x195))));
evalcond[4]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22)*(x195)))+(((cj20)*(x197)))+(((cj20)*(x199))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x195)*(x199)))+(((IkReal(-1.00000000000000))*(x195)*(x197)))+(((IkReal(-1.00000000000000))*(new_r22)*(x194))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst47;
gconst47=IKsign(cj20);
dummyeval[0]=cj20;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj20;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=sj20;
dummyeval[1]=cj20;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x201=((((cj21)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r12)*(sj21))));
IkReal x202=((((new_r00)*(sj21)))+(((cj21)*(new_r10))));
IkReal x203=((((cj21)*(new_r11)))+(((new_r01)*(sj21))));
IkReal x204=((IkReal(-1.00000000000000))+(((cj21)*(new_r12)))+(((new_r02)*(sj21))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j20)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=x201;
evalcond[3]=x201;
evalcond[4]=x204;
evalcond[5]=x203;
evalcond[6]=x202;
evalcond[7]=x202;
evalcond[8]=x203;
evalcond[9]=x204;
evalcond[10]=((IkReal(-1.00000000000000))*(new_r22));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(((IkReal(-1.00000000000000))*(new_r21)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j19array[0]=IKatan2(new_r20, ((IkReal(-1.00000000000000))*(new_r21)));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[4];
IkReal x205=IKcos(j19);
IkReal x206=((IkReal(1.00000000000000))*(sj21));
IkReal x207=((IkReal(1.00000000000000))*(IKsin(j19)));
evalcond[0]=((new_r21)+(x205));
evalcond[1]=((new_r20)+(((IkReal(-1.00000000000000))*(x207))));
evalcond[2]=((((cj21)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(x206)))+(((IkReal(-1.00000000000000))*(x205))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r11)*(x206)))+(((cj21)*(new_r01)))+(((IkReal(-1.00000000000000))*(x207))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j19;
vinfos[0].indices[0] = _ij19[0];
vinfos[0].indices[1] = _ij19[1];
vinfos[0].maxsolutions = _nj19;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j20;
vinfos[1].indices[0] = _ij20[0];
vinfos[1].indices[1] = _ij20[1];
vinfos[1].maxsolutions = _nj20;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j21;
vinfos[2].indices[0] = _ij21[0];
vinfos[2].indices[1] = _ij21[1];
vinfos[2].maxsolutions = _nj21;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j22;
vinfos[3].indices[0] = _ij22[0];
vinfos[3].indices[1] = _ij22[1];
vinfos[3].maxsolutions = _nj22;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j23;
vinfos[4].indices[0] = _ij23[0];
vinfos[4].indices[1] = _ij23[1];
vinfos[4].maxsolutions = _nj23;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j24;
vinfos[5].indices[0] = _ij24[0];
vinfos[5].indices[1] = _ij24[1];
vinfos[5].maxsolutions = _nj24;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j25;
vinfos[6].indices[0] = _ij25[0];
vinfos[6].indices[1] = _ij25[1];
vinfos[6].maxsolutions = _nj25;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x208=((cj21)*(new_r12));
IkReal x209=((cj21)*(new_r10));
IkReal x210=((new_r02)*(sj21));
IkReal x211=((new_r01)*(sj21));
IkReal x212=((new_r00)*(sj21));
IkReal x213=((cj21)*(new_r11));
IkReal x214=((((cj21)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r12)*(sj21))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j20, IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=x214;
evalcond[3]=x214;
evalcond[4]=((IkReal(1.00000000000000))+(x210)+(x208));
evalcond[5]=((x211)+(x213));
evalcond[6]=((x212)+(x209));
evalcond[7]=((((IkReal(-1.00000000000000))*(x209)))+(((IkReal(-1.00000000000000))*(x212))));
evalcond[8]=((((IkReal(-1.00000000000000))*(x213)))+(((IkReal(-1.00000000000000))*(x211))));
evalcond[9]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(x210)))+(((IkReal(-1.00000000000000))*(x208))));
evalcond[10]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r20)))+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j19array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r20)), new_r21);
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[4];
IkReal x215=IKsin(j19);
IkReal x216=((IkReal(1.00000000000000))*(sj21));
IkReal x217=((IkReal(1.00000000000000))*(IKcos(j19)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x217)))+(new_r21));
evalcond[1]=((new_r20)+(x215));
evalcond[2]=((((IkReal(-1.00000000000000))*(x217)))+(((IkReal(-1.00000000000000))*(new_r10)*(x216)))+(((cj21)*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r11)*(x216)))+(((IkReal(-1.00000000000000))*(x215)))+(((cj21)*(new_r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j19;
vinfos[0].indices[0] = _ij19[0];
vinfos[0].indices[1] = _ij19[1];
vinfos[0].maxsolutions = _nj19;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j20;
vinfos[1].indices[0] = _ij20[0];
vinfos[1].indices[1] = _ij20[1];
vinfos[1].maxsolutions = _nj20;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j21;
vinfos[2].indices[0] = _ij21[0];
vinfos[2].indices[1] = _ij21[1];
vinfos[2].maxsolutions = _nj21;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j22;
vinfos[3].indices[0] = _ij22[0];
vinfos[3].indices[1] = _ij22[1];
vinfos[3].maxsolutions = _nj22;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j23;
vinfos[4].indices[0] = _ij23[0];
vinfos[4].indices[1] = _ij23[1];
vinfos[4].maxsolutions = _nj23;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j24;
vinfos[5].indices[0] = _ij24[0];
vinfos[5].indices[1] = _ij24[1];
vinfos[5].maxsolutions = _nj24;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j25;
vinfos[6].indices[0] = _ij25[0];
vinfos[6].indices[1] = _ij25[1];
vinfos[6].maxsolutions = _nj25;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x218=((cj21)*(new_r12));
IkReal x219=((new_r02)*(sj21));
IkReal x220=((((cj21)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r12)*(sj21))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j20)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(1.00000000000000))+(new_r22));
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=x220;
evalcond[5]=x220;
evalcond[6]=((x218)+(x219));
evalcond[7]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[8]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[9]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
evalcond[10]=((((IkReal(-1.00000000000000))*(x219)))+(((IkReal(-1.00000000000000))*(x218))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
if( IKabs(((((new_r00)*(sj21)))+(((cj21)*(new_r10))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(new_r01)*(sj21)))+(((IkReal(-1.00000000000000))*(cj21)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((new_r00)*(sj21)))+(((cj21)*(new_r10)))))+IKsqr(((((IkReal(-1.00000000000000))*(new_r01)*(sj21)))+(((IkReal(-1.00000000000000))*(cj21)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j19array[0]=IKatan2(((((new_r00)*(sj21)))+(((cj21)*(new_r10)))), ((((IkReal(-1.00000000000000))*(new_r01)*(sj21)))+(((IkReal(-1.00000000000000))*(cj21)*(new_r11)))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[4];
IkReal x221=IKcos(j19);
IkReal x222=((IkReal(1.00000000000000))*(sj21));
IkReal x223=((IkReal(1.00000000000000))*(IKsin(j19)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x221)))+(((cj21)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(x222))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x223)))+(((cj21)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(x222))));
evalcond[2]=((((cj21)*(new_r11)))+(x221)+(((new_r01)*(sj21))));
evalcond[3]=((((new_r00)*(sj21)))+(((IkReal(-1.00000000000000))*(x223)))+(((cj21)*(new_r10))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j19;
vinfos[0].indices[0] = _ij19[0];
vinfos[0].indices[1] = _ij19[1];
vinfos[0].maxsolutions = _nj19;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j20;
vinfos[1].indices[0] = _ij20[0];
vinfos[1].indices[1] = _ij20[1];
vinfos[1].maxsolutions = _nj20;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j21;
vinfos[2].indices[0] = _ij21[0];
vinfos[2].indices[1] = _ij21[1];
vinfos[2].maxsolutions = _nj21;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j22;
vinfos[3].indices[0] = _ij22[0];
vinfos[3].indices[1] = _ij22[1];
vinfos[3].maxsolutions = _nj22;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j23;
vinfos[4].indices[0] = _ij23[0];
vinfos[4].indices[1] = _ij23[1];
vinfos[4].maxsolutions = _nj23;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j24;
vinfos[5].indices[0] = _ij24[0];
vinfos[5].indices[1] = _ij24[1];
vinfos[5].maxsolutions = _nj24;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j25;
vinfos[6].indices[0] = _ij25[0];
vinfos[6].indices[1] = _ij25[1];
vinfos[6].maxsolutions = _nj25;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x224=((IkReal(-1.00000000000000))+(new_r22));
IkReal x225=((((cj21)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r12)*(sj21))));
IkReal x226=((((cj21)*(new_r12)))+(((new_r02)*(sj21))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j20)), IkReal(6.28318530717959))));
evalcond[1]=x224;
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=x225;
evalcond[5]=x225;
evalcond[6]=x226;
evalcond[7]=new_r20;
evalcond[8]=new_r21;
evalcond[9]=x224;
evalcond[10]=x226;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(new_r00)*(sj21)))+(((IkReal(-1.00000000000000))*(cj21)*(new_r10))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj21)*(new_r11)))+(((new_r01)*(sj21))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r00)*(sj21)))+(((IkReal(-1.00000000000000))*(cj21)*(new_r10)))))+IKsqr(((((cj21)*(new_r11)))+(((new_r01)*(sj21)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j19array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r00)*(sj21)))+(((IkReal(-1.00000000000000))*(cj21)*(new_r10)))), ((((cj21)*(new_r11)))+(((new_r01)*(sj21)))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[4];
IkReal x227=IKsin(j19);
IkReal x228=((IkReal(1.00000000000000))*(sj21));
IkReal x229=((IkReal(1.00000000000000))*(IKcos(j19)));
evalcond[0]=((((cj21)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(x228)))+(((IkReal(-1.00000000000000))*(x229))));
evalcond[1]=((((cj21)*(new_r01)))+(((IkReal(-1.00000000000000))*(x227)))+(((IkReal(-1.00000000000000))*(new_r11)*(x228))));
evalcond[2]=((((cj21)*(new_r11)))+(((IkReal(-1.00000000000000))*(x229)))+(((new_r01)*(sj21))));
evalcond[3]=((((new_r00)*(sj21)))+(x227)+(((cj21)*(new_r10))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j19;
vinfos[0].indices[0] = _ij19[0];
vinfos[0].indices[1] = _ij19[1];
vinfos[0].maxsolutions = _nj19;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j20;
vinfos[1].indices[0] = _ij20[0];
vinfos[1].indices[1] = _ij20[1];
vinfos[1].maxsolutions = _nj20;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j21;
vinfos[2].indices[0] = _ij21[0];
vinfos[2].indices[1] = _ij21[1];
vinfos[2].maxsolutions = _nj21;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j22;
vinfos[3].indices[0] = _ij22[0];
vinfos[3].indices[1] = _ij22[1];
vinfos[3].maxsolutions = _nj22;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j23;
vinfos[4].indices[0] = _ij23[0];
vinfos[4].indices[1] = _ij23[1];
vinfos[4].maxsolutions = _nj23;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j24;
vinfos[5].indices[0] = _ij24[0];
vinfos[5].indices[1] = _ij24[1];
vinfos[5].maxsolutions = _nj24;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j25;
vinfos[6].indices[0] = _ij25[0];
vinfos[6].indices[1] = _ij25[1];
vinfos[6].maxsolutions = _nj25;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
if( IKabs(((((IKabs(sj20) != 0)?((IkReal)1/(sj20)):(IkReal)1.0e30))*(((((new_r00)*(sj21)))+(((cj21)*(new_r10))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj20) != 0)?((IkReal)1/(cj20)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(sj20) != 0)?((IkReal)1/(sj20)):(IkReal)1.0e30))*(((((new_r00)*(sj21)))+(((cj21)*(new_r10)))))))+IKsqr(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj20) != 0)?((IkReal)1/(cj20)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j19array[0]=IKatan2(((((IKabs(sj20) != 0)?((IkReal)1/(sj20)):(IkReal)1.0e30))*(((((new_r00)*(sj21)))+(((cj21)*(new_r10)))))), ((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj20) != 0)?((IkReal)1/(cj20)):(IkReal)1.0e30))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[8];
IkReal x230=IKcos(j19);
IkReal x231=IKsin(j19);
IkReal x232=((cj21)*(new_r10));
IkReal x233=((IkReal(1.00000000000000))*(sj20));
IkReal x234=((IkReal(1.00000000000000))*(sj21));
IkReal x235=((new_r00)*(sj21));
IkReal x236=((IkReal(1.00000000000000))*(cj20));
IkReal x237=((cj21)*(new_r11));
IkReal x238=((new_r01)*(sj21));
IkReal x239=((IkReal(1.00000000000000))*(x230));
IkReal x240=((IkReal(1.00000000000000))*(x231));
evalcond[0]=((new_r21)+(((cj20)*(x230))));
evalcond[1]=((new_r20)+(((IkReal(-1.00000000000000))*(x231)*(x236))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r10)*(x234)))+(((cj21)*(new_r00)))+(((IkReal(-1.00000000000000))*(x239))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x240)))+(((cj21)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(x234))));
evalcond[4]=((((sj20)*(x230)))+(x238)+(x237));
evalcond[5]=((((IkReal(-1.00000000000000))*(x231)*(x233)))+(x232)+(x235));
evalcond[6]=((x231)+(((IkReal(-1.00000000000000))*(new_r20)*(x236)))+(((IkReal(-1.00000000000000))*(x232)*(x233)))+(((IkReal(-1.00000000000000))*(x233)*(x235))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r21)*(x236)))+(((IkReal(-1.00000000000000))*(x233)*(x237)))+(((IkReal(-1.00000000000000))*(x233)*(x238)))+(((IkReal(-1.00000000000000))*(x239))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j19;
vinfos[0].indices[0] = _ij19[0];
vinfos[0].indices[1] = _ij19[1];
vinfos[0].maxsolutions = _nj19;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j20;
vinfos[1].indices[0] = _ij20[0];
vinfos[1].indices[1] = _ij20[1];
vinfos[1].maxsolutions = _nj20;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j21;
vinfos[2].indices[0] = _ij21[0];
vinfos[2].indices[1] = _ij21[1];
vinfos[2].maxsolutions = _nj21;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j22;
vinfos[3].indices[0] = _ij22[0];
vinfos[3].indices[1] = _ij22[1];
vinfos[3].maxsolutions = _nj22;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j23;
vinfos[4].indices[0] = _ij23[0];
vinfos[4].indices[1] = _ij23[1];
vinfos[4].maxsolutions = _nj23;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j24;
vinfos[5].indices[0] = _ij24[0];
vinfos[5].indices[1] = _ij24[1];
vinfos[5].maxsolutions = _nj24;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j25;
vinfos[6].indices[0] = _ij25[0];
vinfos[6].indices[1] = _ij25[1];
vinfos[6].maxsolutions = _nj25;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
if( IKabs(((((cj21)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj21))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj20) != 0)?((IkReal)1/(cj20)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj21)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj21)))))+IKsqr(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj20) != 0)?((IkReal)1/(cj20)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j19array[0]=IKatan2(((((cj21)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj21)))), ((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj20) != 0)?((IkReal)1/(cj20)):(IkReal)1.0e30))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[8];
IkReal x241=IKcos(j19);
IkReal x242=IKsin(j19);
IkReal x243=((cj21)*(new_r10));
IkReal x244=((IkReal(1.00000000000000))*(sj20));
IkReal x245=((IkReal(1.00000000000000))*(sj21));
IkReal x246=((new_r00)*(sj21));
IkReal x247=((IkReal(1.00000000000000))*(cj20));
IkReal x248=((cj21)*(new_r11));
IkReal x249=((new_r01)*(sj21));
IkReal x250=((IkReal(1.00000000000000))*(x241));
IkReal x251=((IkReal(1.00000000000000))*(x242));
evalcond[0]=((((cj20)*(x241)))+(new_r21));
evalcond[1]=((((IkReal(-1.00000000000000))*(x242)*(x247)))+(new_r20));
evalcond[2]=((((cj21)*(new_r00)))+(((IkReal(-1.00000000000000))*(x250)))+(((IkReal(-1.00000000000000))*(new_r10)*(x245))));
evalcond[3]=((((cj21)*(new_r01)))+(((IkReal(-1.00000000000000))*(x251)))+(((IkReal(-1.00000000000000))*(new_r11)*(x245))));
evalcond[4]=((x249)+(x248)+(((sj20)*(x241))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x242)*(x244)))+(x243)+(x246));
evalcond[6]=((((IkReal(-1.00000000000000))*(x244)*(x246)))+(((IkReal(-1.00000000000000))*(new_r20)*(x247)))+(((IkReal(-1.00000000000000))*(x243)*(x244)))+(x242));
evalcond[7]=((((IkReal(-1.00000000000000))*(x244)*(x248)))+(((IkReal(-1.00000000000000))*(x244)*(x249)))+(((IkReal(-1.00000000000000))*(x250)))+(((IkReal(-1.00000000000000))*(new_r21)*(x247))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j19;
vinfos[0].indices[0] = _ij19[0];
vinfos[0].indices[1] = _ij19[1];
vinfos[0].maxsolutions = _nj19;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j20;
vinfos[1].indices[0] = _ij20[0];
vinfos[1].indices[1] = _ij20[1];
vinfos[1].maxsolutions = _nj20;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j21;
vinfos[2].indices[0] = _ij21[0];
vinfos[2].indices[1] = _ij21[1];
vinfos[2].maxsolutions = _nj21;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j22;
vinfos[3].indices[0] = _ij22[0];
vinfos[3].indices[1] = _ij22[1];
vinfos[3].maxsolutions = _nj22;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j23;
vinfos[4].indices[0] = _ij23[0];
vinfos[4].indices[1] = _ij23[1];
vinfos[4].maxsolutions = _nj23;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j24;
vinfos[5].indices[0] = _ij24[0];
vinfos[5].indices[1] = _ij24[1];
vinfos[5].maxsolutions = _nj24;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j25;
vinfos[6].indices[0] = _ij25[0];
vinfos[6].indices[1] = _ij25[1];
vinfos[6].maxsolutions = _nj25;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
if( IKabs(((gconst47)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst47)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j19array[0]=IKatan2(((gconst47)*(new_r20)), ((IkReal(-1.00000000000000))*(gconst47)*(new_r21)));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[8];
IkReal x252=IKcos(j19);
IkReal x253=IKsin(j19);
IkReal x254=((cj21)*(new_r10));
IkReal x255=((IkReal(1.00000000000000))*(sj20));
IkReal x256=((IkReal(1.00000000000000))*(sj21));
IkReal x257=((new_r00)*(sj21));
IkReal x258=((IkReal(1.00000000000000))*(cj20));
IkReal x259=((cj21)*(new_r11));
IkReal x260=((new_r01)*(sj21));
IkReal x261=((IkReal(1.00000000000000))*(x252));
IkReal x262=((IkReal(1.00000000000000))*(x253));
evalcond[0]=((new_r21)+(((cj20)*(x252))));
evalcond[1]=((new_r20)+(((IkReal(-1.00000000000000))*(x253)*(x258))));
evalcond[2]=((((cj21)*(new_r00)))+(((IkReal(-1.00000000000000))*(x261)))+(((IkReal(-1.00000000000000))*(new_r10)*(x256))));
evalcond[3]=((((cj21)*(new_r01)))+(((IkReal(-1.00000000000000))*(x262)))+(((IkReal(-1.00000000000000))*(new_r11)*(x256))));
evalcond[4]=((((sj20)*(x252)))+(x259)+(x260));
evalcond[5]=((((IkReal(-1.00000000000000))*(x253)*(x255)))+(x254)+(x257));
evalcond[6]=((((IkReal(-1.00000000000000))*(x255)*(x257)))+(x253)+(((IkReal(-1.00000000000000))*(new_r20)*(x258)))+(((IkReal(-1.00000000000000))*(x254)*(x255))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x255)*(x260)))+(((IkReal(-1.00000000000000))*(x255)*(x259)))+(((IkReal(-1.00000000000000))*(x261)))+(((IkReal(-1.00000000000000))*(new_r21)*(x258))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j19;
vinfos[0].indices[0] = _ij19[0];
vinfos[0].indices[1] = _ij19[1];
vinfos[0].maxsolutions = _nj19;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j20;
vinfos[1].indices[0] = _ij20[0];
vinfos[1].indices[1] = _ij20[1];
vinfos[1].maxsolutions = _nj20;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j21;
vinfos[2].indices[0] = _ij21[0];
vinfos[2].indices[1] = _ij21[1];
vinfos[2].maxsolutions = _nj21;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j22;
vinfos[3].indices[0] = _ij22[0];
vinfos[3].indices[1] = _ij22[1];
vinfos[3].maxsolutions = _nj22;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j23;
vinfos[4].indices[0] = _ij23[0];
vinfos[4].indices[1] = _ij23[1];
vinfos[4].maxsolutions = _nj23;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j24;
vinfos[5].indices[0] = _ij24[0];
vinfos[5].indices[1] = _ij24[1];
vinfos[5].maxsolutions = _nj24;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j25;
vinfos[6].indices[0] = _ij25[0];
vinfos[6].indices[1] = _ij25[1];
vinfos[6].maxsolutions = _nj25;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
if( IKabs(((gconst44)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst44)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j19array[0]=IKatan2(((gconst44)*(new_r20)), ((IkReal(-1.00000000000000))*(gconst44)*(new_r21)));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[2];
evalcond[0]=((((cj20)*(IKcos(j19))))+(new_r21));
evalcond[1]=((new_r20)+(((IkReal(-1.00000000000000))*(cj20)*(IKsin(j19)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst48;
gconst48=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst49;
gconst49=IKsign(((((IkReal(-1.00000000000000))*(new_r01)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r11)*(new_r12)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r01)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r11)*(new_r12))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
IkReal x263=((cj19)*(gconst49)*(sj20));
if( IKabs(((new_r02)*(x263))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r12)*(x263))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j21array[0]=IKatan2(((new_r02)*(x263)), ((new_r12)*(x263)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[12];
IkReal x264=IKcos(j21);
IkReal x265=IKsin(j21);
IkReal x266=((IkReal(1.00000000000000))*(cj19));
IkReal x267=((IkReal(1.00000000000000))*(sj20));
IkReal x268=((IkReal(1.00000000000000))*(cj20));
IkReal x269=((new_r11)*(x264));
IkReal x270=((new_r00)*(x265));
IkReal x271=((new_r12)*(x264));
IkReal x272=((IkReal(1.00000000000000))*(x265));
IkReal x273=((new_r10)*(x264));
IkReal x274=((cj20)*(x265));
IkReal x275=((new_r01)*(x265));
IkReal x276=((new_r02)*(x265));
evalcond[0]=((((new_r02)*(x264)))+(((IkReal(-1.00000000000000))*(new_r12)*(x272))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x268)))+(x276)+(x271));
evalcond[2]=((((IkReal(-1.00000000000000))*(x266)))+(((IkReal(-1.00000000000000))*(new_r10)*(x272)))+(((new_r00)*(x264))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r11)*(x272)))+(((new_r01)*(x264)))+(((IkReal(-1.00000000000000))*(sj19))));
evalcond[4]=((x275)+(x269)+(((cj19)*(sj20))));
evalcond[5]=((((IkReal(-1.00000000000000))*(sj19)*(x267)))+(x273)+(x270));
evalcond[6]=((((cj20)*(x273)))+(((IkReal(-1.00000000000000))*(new_r20)*(x267)))+(((cj20)*(x270))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r21)*(x267)))+(((new_r01)*(x274)))+(((cj20)*(x269))));
evalcond[8]=((IkReal(-1.00000000000000))+(((new_r02)*(x274)))+(((IkReal(-1.00000000000000))*(new_r22)*(x267)))+(((cj20)*(x271))));
evalcond[9]=((((IkReal(-1.00000000000000))*(x267)*(x276)))+(((IkReal(-1.00000000000000))*(x267)*(x271)))+(((IkReal(-1.00000000000000))*(new_r22)*(x268))));
evalcond[10]=((((IkReal(-1.00000000000000))*(new_r20)*(x268)))+(sj19)+(((IkReal(-1.00000000000000))*(x267)*(x273)))+(((IkReal(-1.00000000000000))*(x267)*(x270))));
evalcond[11]=((((IkReal(-1.00000000000000))*(new_r21)*(x268)))+(((IkReal(-1.00000000000000))*(x267)*(x269)))+(((IkReal(-1.00000000000000))*(x266)))+(((IkReal(-1.00000000000000))*(x267)*(x275))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j19;
vinfos[0].indices[0] = _ij19[0];
vinfos[0].indices[1] = _ij19[1];
vinfos[0].maxsolutions = _nj19;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j20;
vinfos[1].indices[0] = _ij20[0];
vinfos[1].indices[1] = _ij20[1];
vinfos[1].maxsolutions = _nj20;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j21;
vinfos[2].indices[0] = _ij21[0];
vinfos[2].indices[1] = _ij21[1];
vinfos[2].maxsolutions = _nj21;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j22;
vinfos[3].indices[0] = _ij22[0];
vinfos[3].indices[1] = _ij22[1];
vinfos[3].maxsolutions = _nj22;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j23;
vinfos[4].indices[0] = _ij23[0];
vinfos[4].indices[1] = _ij23[1];
vinfos[4].maxsolutions = _nj23;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j24;
vinfos[5].indices[0] = _ij24[0];
vinfos[5].indices[1] = _ij24[1];
vinfos[5].maxsolutions = _nj24;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j25;
vinfos[6].indices[0] = _ij25[0];
vinfos[6].indices[1] = _ij25[1];
vinfos[6].maxsolutions = _nj25;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
IkReal x277=((cj20)*(gconst48));
if( IKabs(((new_r02)*(x277))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r12)*(x277))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j21array[0]=IKatan2(((new_r02)*(x277)), ((new_r12)*(x277)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[12];
IkReal x278=IKcos(j21);
IkReal x279=IKsin(j21);
IkReal x280=((IkReal(1.00000000000000))*(cj19));
IkReal x281=((IkReal(1.00000000000000))*(sj20));
IkReal x282=((IkReal(1.00000000000000))*(cj20));
IkReal x283=((new_r11)*(x278));
IkReal x284=((new_r00)*(x279));
IkReal x285=((new_r12)*(x278));
IkReal x286=((IkReal(1.00000000000000))*(x279));
IkReal x287=((new_r10)*(x278));
IkReal x288=((cj20)*(x279));
IkReal x289=((new_r01)*(x279));
IkReal x290=((new_r02)*(x279));
evalcond[0]=((((new_r02)*(x278)))+(((IkReal(-1.00000000000000))*(new_r12)*(x286))));
evalcond[1]=((x285)+(x290)+(((IkReal(-1.00000000000000))*(x282))));
evalcond[2]=((((new_r00)*(x278)))+(((IkReal(-1.00000000000000))*(new_r10)*(x286)))+(((IkReal(-1.00000000000000))*(x280))));
evalcond[3]=((((new_r01)*(x278)))+(((IkReal(-1.00000000000000))*(new_r11)*(x286)))+(((IkReal(-1.00000000000000))*(sj19))));
evalcond[4]=((x289)+(x283)+(((cj19)*(sj20))));
evalcond[5]=((((IkReal(-1.00000000000000))*(sj19)*(x281)))+(x287)+(x284));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r20)*(x281)))+(((cj20)*(x287)))+(((cj20)*(x284))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r21)*(x281)))+(((new_r01)*(x288)))+(((cj20)*(x283))));
evalcond[8]=((IkReal(-1.00000000000000))+(((cj20)*(x285)))+(((new_r02)*(x288)))+(((IkReal(-1.00000000000000))*(new_r22)*(x281))));
evalcond[9]=((((IkReal(-1.00000000000000))*(x281)*(x285)))+(((IkReal(-1.00000000000000))*(new_r22)*(x282)))+(((IkReal(-1.00000000000000))*(x281)*(x290))));
evalcond[10]=((((IkReal(-1.00000000000000))*(new_r20)*(x282)))+(((IkReal(-1.00000000000000))*(x281)*(x287)))+(sj19)+(((IkReal(-1.00000000000000))*(x281)*(x284))));
evalcond[11]=((((IkReal(-1.00000000000000))*(x281)*(x283)))+(((IkReal(-1.00000000000000))*(new_r21)*(x282)))+(((IkReal(-1.00000000000000))*(x280)))+(((IkReal(-1.00000000000000))*(x281)*(x289))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j19;
vinfos[0].indices[0] = _ij19[0];
vinfos[0].indices[1] = _ij19[1];
vinfos[0].maxsolutions = _nj19;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j20;
vinfos[1].indices[0] = _ij20[0];
vinfos[1].indices[1] = _ij20[1];
vinfos[1].maxsolutions = _nj20;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j21;
vinfos[2].indices[0] = _ij21[0];
vinfos[2].indices[1] = _ij21[1];
vinfos[2].maxsolutions = _nj21;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j22;
vinfos[3].indices[0] = _ij22[0];
vinfos[3].indices[1] = _ij22[1];
vinfos[3].maxsolutions = _nj22;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j23;
vinfos[4].indices[0] = _ij23[0];
vinfos[4].indices[1] = _ij23[1];
vinfos[4].maxsolutions = _nj23;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j24;
vinfos[5].indices[0] = _ij24[0];
vinfos[5].indices[1] = _ij24[1];
vinfos[5].maxsolutions = _nj24;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j25;
vinfos[6].indices[0] = _ij25[0];
vinfos[6].indices[1] = _ij25[1];
vinfos[6].maxsolutions = _nj25;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "236f205adb60e87ce7477204de25b0a9"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
