/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 61 generated on 2013-04-04 13:03:26.581518
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==61);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72,x73,x74,x75,x76,x77,x78,x79,x80,x81,x82,x83,x84,x85,x86,x87,x88,x89,x90,x91;
x0=IKsin(j[0]);
x1=IKcos(j[0]);
x2=IKcos(j[2]);
x3=IKsin(j[1]);
x4=IKsin(j[2]);
x5=IKcos(j[3]);
x6=IKcos(j[1]);
x7=IKsin(j[3]);
x8=IKsin(j[4]);
x9=IKcos(j[4]);
x10=IKsin(j[5]);
x11=IKcos(j[5]);
x12=((IkReal(0.163958060000000))*(x4));
x13=((IkReal(0.707106781186548))*(x11));
x14=((IkReal(0.707106781186548))*(x8));
x15=((IkReal(1.72792099421454e-6))*(x2));
x16=((IkReal(0.0534945068711929))*(x9));
x17=((IkReal(0.0199990000000000))*(x5));
x18=((IkReal(0.0219906200000000))*(x7));
x19=((IkReal(0.0534945068711929))*(x8));
x20=((IkReal(1.00000000000000))*(x5));
x21=((IkReal(0.0199990000000000))*(x7));
x22=((IkReal(1.00000000000000))*(x7));
x23=((IkReal(0.707106781186548))*(x10));
x24=((IkReal(1.00000000000000))*(x8));
x25=((IkReal(1.00000000000000))*(x2));
x26=((IkReal(0.707106781186548))*(x9));
x27=((IkReal(1.72792099421454e-6))*(x5));
x28=((IkReal(0.0199990000000000))*(x8));
x29=((IkReal(0.0199990000000000))*(x9));
x30=((IkReal(0.120163506871193))*(x10));
x31=((IkReal(0.163958060000000))*(x5));
x32=((IkReal(0.120163506871193))*(x11));
x33=((IkReal(1.00000000000000))*(x9));
x34=((IkReal(-1.00000000000000))*(x8));
x35=((x0)*(x3));
x36=((x0)*(x2));
x37=((x3)*(x5));
x38=((x1)*(x4));
x39=((x6)*(x8));
x40=((x0)*(x6));
x41=((IkReal(-1.00000000000000))*(x9));
x42=((x4)*(x6));
x43=((x0)*(x4));
x44=((x1)*(x2));
x45=((x1)*(x6));
x46=((x1)*(x3));
x47=((IkReal(-1.00000000000000))*(x5));
x48=((x3)*(x7));
x49=((x2)*(x6));
x50=((x45)*(x7));
x51=((x22)*(x40));
x52=((x26)*(x49));
x53=((IkReal(1.00000000000000))*(x3)*(x38));
x54=((((x35)*(x4)))+(x44));
x55=((((IkReal(-1.00000000000000))*(x38)))+(((x2)*(x35))));
x56=((x48)+(((x42)*(x5))));
x57=((((IkReal(-1.00000000000000))*(x22)*(x42)))+(x37));
x58=((x36)+(((IkReal(-1.00000000000000))*(x53))));
x59=((x53)+(((IkReal(-1.00000000000000))*(x0)*(x25))));
x60=((((IkReal(-1.00000000000000))*(x35)*(x4)))+(((IkReal(-1.00000000000000))*(x1)*(x25))));
x61=((((IkReal(-1.00000000000000))*(x22)*(x3)))+(((IkReal(-1.00000000000000))*(x20)*(x42))));
x62=((((IkReal(-1.00000000000000))*(x43)))+(((IkReal(-1.00000000000000))*(x25)*(x46))));
x63=((x5)*(x58));
x64=((x56)*(x9));
x65=((x26)*(x55));
x66=((x13)*(x57));
x67=((x60)*(x7));
x68=((x62)*(x8));
x69=((x14)*(x61));
x70=((x26)*(x62));
x71=((((x5)*(x54)))+(((IkReal(-1.00000000000000))*(x51))));
x72=((x50)+(x63));
x73=((x51)+(((IkReal(-1.00000000000000))*(x20)*(x54))));
x74=((((x45)*(x5)))+(((x59)*(x7))));
x75=((x67)+(((IkReal(-1.00000000000000))*(x20)*(x40))));
x76=((((IkReal(-1.00000000000000))*(x33)*(x56)))+(((IkReal(-1.00000000000000))*(x24)*(x49))));
x77=((x71)*(x9));
x78=((((x47)*(x58)))+(((IkReal(-1.00000000000000))*(x50))));
x79=((x14)*(x73));
x80=((x13)*(x74));
x81=((x52)+(x69));
x82=((x13)*(x75));
x83=((x23)*(x76));
x84=((x78)*(x8));
x85=((x14)*(x78));
x86=((((x34)*(x55)))+(((x41)*(x71))));
x87=((x65)+(x79));
x88=((((IkReal(-1.00000000000000))*(x24)*(x62)))+(((IkReal(-1.00000000000000))*(x33)*(x72))));
x89=((x66)+(x83));
x90=((((x41)*(x72)))+(((x34)*(x62))));
x91=((x70)+(x85));
eerot[0]=((((x23)*(x86)))+(((IkReal(-1.00000000000000))*(x87)))+(x82));
eerot[1]=((((x23)*(((((IkReal(-1.00000000000000))*(x33)*(x71)))+(((IkReal(-1.00000000000000))*(x24)*(x55)))))))+(x82)+(x87));
eerot[2]=((((x10)*(x75)))+(((x11)*(((((x55)*(x8)))+(x77))))));
IkReal x92=((IkReal(1.00000000000000))*(x40));
IkReal x93=((x35)*(x4));
eetrans[0]=((IkReal(0.0122581200000000))+(((x8)*(((((IkReal(-1.72792099421454e-6))*(x38)))+(((x15)*(x35)))))))+(((x18)*(x40)))+(((IkReal(-0.182004560000000))*(x40)))+(((x11)*(((((x29)*(x71)))+(((x28)*(x55)))))))+(((x16)*(x55)))+(((IkReal(-1.00000000000000))*(x31)*(x92)))+(((x5)*(((((IkReal(-0.0219906200000000))*(x44)))+(((IkReal(-0.0219906200000000))*(x93)))))))+(((x32)*(((x67)+(((x40)*(x47)))))))+(((x19)*(x73)))+(((IkReal(0.0219935900000000))*(x93)))+(((x10)*(((((x21)*(x60)))+(((IkReal(-1.00000000000000))*(x17)*(x92)))))))+(((x7)*(((((IkReal(-0.163958060000000))*(x44)))+(((IkReal(-1.00000000000000))*(x12)*(x35)))))))+(((x9)*(((((IkReal(-1.72792099421454e-6))*(x40)*(x7)))+(((x27)*(x54)))))))+(((x30)*(x86)))+(((IkReal(0.0219935900000000))*(x44))));
eerot[3]=((((IkReal(-1.00000000000000))*(x81)))+(x89));
eerot[4]=((x89)+(x81));
eerot[5]=((((x10)*(x57)))+(((x11)*(((x64)+(((x2)*(x39))))))));
eetrans[1]=((IkReal(-0.211026872287262))+(((x15)*(x39)))+(((x10)*(((((x17)*(x3)))+(((IkReal(-1.00000000000000))*(x21)*(x42)))))))+(((x11)*(((((x28)*(x49)))+(((x29)*(x56)))))))+(((IkReal(0.0219935900000000))*(x42)))+(((IkReal(-0.0219906200000000))*(x42)*(x5)))+(((x32)*(x57)))+(((x9)*(((((IkReal(1.72792099421454e-6))*(x48)))+(((x27)*(x42)))))))+(((IkReal(-1.00000000000000))*(x12)*(x6)*(x7)))+(((IkReal(-1.00000000000000))*(x18)*(x3)))+(((x16)*(x49)))+(((x19)*(x61)))+(((x30)*(x76)))+(((IkReal(0.182004560000000))*(x3)))+(((x3)*(x31))));
eerot[6]=((((IkReal(-1.00000000000000))*(x23)*(x90)))+(((IkReal(-1.00000000000000))*(x80)))+(x91));
eerot[7]=((((IkReal(-1.00000000000000))*(x80)))+(((IkReal(-1.00000000000000))*(x91)))+(((IkReal(-1.00000000000000))*(x23)*(x88))));
eerot[8]=((((x10)*(((((IkReal(-1.00000000000000))*(x22)*(x59)))+(((IkReal(-1.00000000000000))*(x20)*(x45)))))))+(((x11)*(x88))));
IkReal x94=((IkReal(1.00000000000000))*(x62));
IkReal x95=((x3)*(x38));
IkReal x96=((IkReal(1.00000000000000))*(x45));
eetrans[2]=((IkReal(0.0486356000000000))+(((IkReal(-1.00000000000000))*(x30)*(x90)))+(((x7)*(((((IkReal(0.163958060000000))*(x36)))+(((IkReal(-1.00000000000000))*(x12)*(x46)))))))+(((IkReal(0.0219935900000000))*(x95)))+(((IkReal(-1.00000000000000))*(x19)*(x78)))+(((x5)*(((((IkReal(-0.0219906200000000))*(x95)))+(((IkReal(0.0219906200000000))*(x36)))))))+(((IkReal(-1.00000000000000))*(x32)*(x74)))+(((IkReal(-1.00000000000000))*(x31)*(x96)))+(((IkReal(-0.0219935900000000))*(x36)))+(((x10)*(((((IkReal(-1.00000000000000))*(x17)*(x96)))+(((IkReal(-1.00000000000000))*(x21)*(x59)))))))+(((IkReal(-0.182004560000000))*(x45)))+(((x9)*(((((IkReal(-1.72792099421454e-6))*(x50)))+(((IkReal(-1.72792099421454e-6))*(x63)))))))+(((IkReal(-1.00000000000000))*(x16)*(x94)))+(((x18)*(x45)))+(((x11)*(((((IkReal(-1.00000000000000))*(x28)*(x94)))+(((IkReal(-1.00000000000000))*(x29)*(x72)))))))+(((x8)*(((((x15)*(x46)))+(((IkReal(1.72792099421454e-6))*(x43))))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j13,cj13,sj13,htj13,j15,cj15,sj15,htj15,j17,cj17,sj17,htj17,j19,cj19,sj19,htj19,j21,cj21,sj21,htj21,j23,cj23,sj23,htj23,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij13[2], _nj13,_ij15[2], _nj15,_ij17[2], _nj17,_ij19[2], _nj19,_ij21[2], _nj21,_ij23[2], _nj23;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j13=numeric_limits<IkReal>::quiet_NaN(); _ij13[0] = -1; _ij13[1] = -1; _nj13 = -1; j15=numeric_limits<IkReal>::quiet_NaN(); _ij15[0] = -1; _ij15[1] = -1; _nj15 = -1; j17=numeric_limits<IkReal>::quiet_NaN(); _ij17[0] = -1; _ij17[1] = -1; _nj17 = -1; j19=numeric_limits<IkReal>::quiet_NaN(); _ij19[0] = -1; _ij19[1] = -1; _nj19 = -1; j21=numeric_limits<IkReal>::quiet_NaN(); _ij21[0] = -1; _ij21[1] = -1; _nj21 = -1; j23=numeric_limits<IkReal>::quiet_NaN(); _ij23[0] = -1; _ij23[1] = -1; _nj23 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r02;
new_r01=((((IkReal(0.707106781186548))*(r01)))+(((IkReal(0.707106781186548))*(r00))));
new_r02=((((IkReal(-0.707106781186548))*(r00)))+(((IkReal(0.707106781186548))*(r01))));
new_px=((IkReal(-0.0122581200000000))+(((IkReal(-0.122794759124628))*(r01)))+(px)+(((IkReal(-0.0471421019949259))*(r00)))+(((IkReal(-0.0199990000000000))*(r02))));
new_r10=((IkReal(-1.00000000000000))*(r22));
new_r11=((((IkReal(-0.707106781186548))*(r20)))+(((IkReal(-0.707106781186548))*(r21))));
new_r12=((((IkReal(0.707106781186548))*(r20)))+(((IkReal(-0.707106781186548))*(r21))));
new_py=((IkReal(0.0486356000000000))+(((IkReal(0.0199990000000000))*(r22)))+(((IkReal(0.122794759124628))*(r21)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(0.0471421019949259))*(r20))));
new_r20=r12;
new_r21=((((IkReal(0.707106781186548))*(r10)))+(((IkReal(0.707106781186548))*(r11))));
new_r22=((((IkReal(-0.707106781186548))*(r10)))+(((IkReal(0.707106781186548))*(r11))));
new_pz=((IkReal(0.211026872287262))+(((IkReal(-0.122794759124628))*(r11)))+(((IkReal(-0.0471421019949259))*(r10)))+(py)+(((IkReal(-0.0199990000000000))*(r12))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((pz)*(pz))+((py)*(py)));
npx=((((py)*(r10)))+(((pz)*(r20)))+(((px)*(r00))));
npy=((((px)*(r01)))+(((pz)*(r21)))+(((py)*(r11))));
npz=((((py)*(r12)))+(((pz)*(r22)))+(((px)*(r02))));
rxp0_0=((((IkReal(-1.00000000000000))*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((IkReal(-1.00000000000000))*(pz)*(r00))));
rxp0_2=((((py)*(r00)))+(((IkReal(-1.00000000000000))*(px)*(r10))));
rxp1_0=((((pz)*(r11)))+(((IkReal(-1.00000000000000))*(py)*(r21))));
rxp1_1=((((IkReal(-1.00000000000000))*(pz)*(r01)))+(((px)*(r21))));
rxp1_2=((((py)*(r01)))+(((IkReal(-1.00000000000000))*(px)*(r11))));
rxp2_0=((((IkReal(-1.00000000000000))*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((IkReal(-1.00000000000000))*(pz)*(r02))));
rxp2_2=((((py)*(r02)))+(((IkReal(-1.00000000000000))*(px)*(r12))));
{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=((IkReal(-0.345962620000000))+(npy));
IkReal gconst1;
gconst1=((IkReal(2.00000000000000))*(npx));
IkReal gconst2;
gconst2=((IkReal(-0.345962620000000))+(((IkReal(-1.00000000000000))*(npy))));
IkReal gconst3;
gconst3=((IkReal(0.119690134443100))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(3.45584198842907e-6))*(npx))));
IkReal gconst4;
gconst4=((IkReal(-6.91168397685815e-6))*(npy));
IkReal gconst5;
gconst5=((IkReal(0.119690134443100))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-3.45584198842907e-6))*(npx))));
IkReal gconst6;
gconst6=((IkReal(-0.345962620000000))+(npy));
IkReal gconst7;
gconst7=((IkReal(2.00000000000000))*(npx));
IkReal gconst8;
gconst8=((IkReal(-0.345962620000000))+(((IkReal(-1.00000000000000))*(npy))));
IkReal gconst9;
gconst9=((IkReal(0.119690134443100))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(3.45584198842907e-6))*(npx))));
IkReal gconst10;
gconst10=((IkReal(-6.91168397685815e-6))*(npy));
IkReal gconst11;
gconst11=((IkReal(0.119690134443100))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-3.45584198842907e-6))*(npx))));
IkReal gconst12;
gconst12=IkReal(0.0439871800000000);
IkReal gconst13;
gconst13=IkReal(0.0439871800000000);
IkReal gconst14;
gconst14=IkReal(-0.0304336778642504);
IkReal gconst15;
gconst15=IkReal(-0.0304336778642504);
IkReal gconst16;
gconst16=IkReal(0.0439871800000000);
IkReal gconst17;
gconst17=IkReal(0.0439871800000000);
IkReal gconst18;
gconst18=IkReal(-0.0304336778642504);
IkReal gconst19;
gconst19=IkReal(-0.0304336778642504);
IkReal gconst20;
gconst20=((IkReal(0.0180465000000000))+(npy));
IkReal gconst21;
gconst21=((IkReal(2.00000000000000))*(npx));
IkReal gconst22;
gconst22=((IkReal(0.0180465000000000))+(((IkReal(-1.00000000000000))*(npy))));
IkReal gconst23;
gconst23=((IkReal(0.00226028688858839))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(3.45584198842907e-6))*(npx))));
IkReal gconst24;
gconst24=((IkReal(-6.91168397685815e-6))*(npy));
IkReal gconst25;
gconst25=((IkReal(0.00226028688858839))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-3.45584198842907e-6))*(npx))));
IkReal gconst26;
gconst26=((IkReal(0.0180465000000000))+(npy));
IkReal gconst27;
gconst27=((IkReal(2.00000000000000))*(npx));
IkReal gconst28;
gconst28=((IkReal(0.0180465000000000))+(((IkReal(-1.00000000000000))*(npy))));
IkReal gconst29;
gconst29=((IkReal(0.00226028688858839))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(3.45584198842907e-6))*(npx))));
IkReal gconst30;
gconst30=((IkReal(-6.91168397685815e-6))*(npy));
IkReal gconst31;
gconst31=((IkReal(0.00226028688858839))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-3.45584198842907e-6))*(npx))));
IkReal x97=((gconst22)*(gconst29));
IkReal x98=((gconst21)*(gconst25));
IkReal x99=((gconst26)*(gconst30));
IkReal x100=((gconst20)*(gconst25));
IkReal x101=((gconst26)*(gconst31));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x100)*(x101)))+(((IkReal(-1.00000000000000))*(gconst27)*(gconst29)*(x98)))+(((gconst22)*(gconst23)*(x101)))+(((x98)*(x99)))+(((gconst28)*(gconst29)*(x100)))+(((IkReal(-1.00000000000000))*(gconst22)*(gconst24)*(x99)))+(((IkReal(-1.00000000000000))*(gconst23)*(gconst28)*(x97)))+(((gconst24)*(gconst27)*(x97))));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[8+1], zeror[8];
int numroots;
IkReal x102=((gconst27)*(gconst29));
IkReal x103=((gconst22)*(gconst4));
IkReal x104=((IkReal(1.00000000000000))*(gconst25));
IkReal x105=((gconst19)*(gconst26));
IkReal x106=((IkReal(1.00000000000000))*(gconst3));
IkReal x107=((gconst8)*(gconst9));
IkReal x108=((gconst17)*(gconst18));
IkReal x109=((gconst20)*(gconst25));
IkReal x110=((gconst0)*(gconst5));
IkReal x111=((IkReal(1.00000000000000))*(gconst11));
IkReal x112=((gconst22)*(gconst23));
IkReal x113=((gconst16)*(gconst19));
IkReal x114=((gconst27)*(gconst9));
IkReal x115=((gconst11)*(gconst6));
IkReal x116=((gconst13)*(gconst3));
IkReal x117=((gconst2)*(gconst8));
IkReal x118=((gconst14)*(gconst2));
IkReal x119=((gconst11)*(gconst16));
IkReal x120=((gconst7)*(gconst9));
IkReal x121=((gconst13)*(gconst4));
IkReal x122=((gconst15)*(gconst20));
IkReal x123=((gconst2)*(gconst23));
IkReal x124=((gconst28)*(gconst29));
IkReal x125=((gconst17)*(gconst9));
IkReal x126=((IkReal(1.00000000000000))*(gconst21));
IkReal x127=((gconst26)*(gconst31));
IkReal x128=((gconst22)*(gconst3));
IkReal x129=((gconst17)*(gconst29));
IkReal x130=((gconst12)*(gconst25));
IkReal x131=((IkReal(1.00000000000000))*(gconst5));
IkReal x132=((gconst19)*(gconst6));
IkReal x133=((gconst18)*(gconst28));
IkReal x134=((gconst29)*(gconst8));
IkReal x135=((gconst13)*(gconst23));
IkReal x136=((gconst10)*(gconst6));
IkReal x137=((gconst2)*(gconst24));
IkReal x138=((IkReal(1.00000000000000))*(gconst15));
IkReal x139=((gconst1)*(gconst25));
IkReal x140=((gconst22)*(gconst24));
IkReal x141=((IkReal(1.00000000000000))*(gconst14));
IkReal x142=((gconst0)*(gconst25));
IkReal x143=((gconst1)*(gconst7));
IkReal x144=((gconst2)*(gconst3));
IkReal x145=((gconst26)*(gconst30));
IkReal x146=((gconst31)*(gconst6));
IkReal x147=((IkReal(1.00000000000000))*(gconst10));
IkReal x148=((gconst15)*(gconst6));
IkReal x149=((gconst2)*(gconst4));
IkReal x150=((gconst1)*(gconst15));
IkReal x151=((gconst18)*(gconst7));
IkReal x152=((gconst12)*(gconst16));
IkReal x153=((gconst18)*(gconst27));
IkReal x154=((gconst12)*(gconst5));
IkReal x155=((gconst28)*(gconst9));
IkReal x156=((gconst21)*(gconst5));
IkReal x157=((gconst1)*(gconst5));
IkReal x158=((gconst10)*(gconst26));
IkReal x159=((gconst16)*(gconst31));
IkReal x160=((gconst14)*(gconst22));
IkReal x161=((gconst13)*(gconst14));
IkReal x162=((gconst11)*(gconst26));
IkReal x163=((gconst12)*(gconst15));
IkReal x164=((gconst20)*(gconst5));
IkReal x165=((gconst0)*(gconst15));
IkReal x166=((gconst13)*(gconst24));
IkReal x167=((gconst18)*(gconst8));
IkReal x168=((gconst21)*(gconst25));
IkReal x169=((gconst29)*(gconst7));
IkReal x170=((gconst10)*(gconst16));
IkReal x171=((gconst20)*(x159));
IkReal x172=((gconst0)*(x167));
IkReal x173=((gconst15)*(gconst21)*(gconst30));
IkReal x174=((gconst18)*(x141));
IkReal x175=((IkReal(1.00000000000000))*(gconst30)*(gconst6));
IkReal x176=((gconst30)*(x168));
IkReal x177=((IkReal(1.00000000000000))*(gconst16)*(gconst30));
op[0]=((((x109)*(x124)))+(((IkReal(-1.00000000000000))*(x140)*(x145)))+(((IkReal(-1.00000000000000))*(x112)*(x124)))+(((x145)*(x168)))+(((x112)*(x127)))+(((IkReal(-1.00000000000000))*(gconst20)*(x104)*(x127)))+(((x102)*(x140)))+(((IkReal(-1.00000000000000))*(gconst21)*(x102)*(x104))));
op[1]=((((IkReal(-1.00000000000000))*(x104)*(x171)))+(((IkReal(-1.00000000000000))*(gconst22)*(x124)*(x141)))+(((x124)*(x130)))+(((IkReal(-1.00000000000000))*(gconst12)*(x104)*(x127)))+(((IkReal(-1.00000000000000))*(x140)*(x177)))+(((IkReal(-1.00000000000000))*(x145)*(x166)))+(((IkReal(-1.00000000000000))*(x122)*(x127)))+(((gconst15)*(gconst21)*(x145)))+(((x112)*(x159)))+(((IkReal(-1.00000000000000))*(gconst15)*(x102)*(x126)))+(((x140)*(x153)))+(((IkReal(-1.00000000000000))*(x124)*(x135)))+(((IkReal(-1.00000000000000))*(gconst21)*(x104)*(x153)))+(((x127)*(x160)))+(((x109)*(x129)))+(((gconst16)*(x176)))+(((IkReal(-1.00000000000000))*(x112)*(x129)))+(((x105)*(x112)))+(((x102)*(x166)))+(((IkReal(-1.00000000000000))*(gconst20)*(x104)*(x105)))+(((x122)*(x124)))+(((x127)*(x135)))+(((x109)*(x133)))+(((IkReal(-1.00000000000000))*(x112)*(x133))));
op[2]=((((IkReal(-1.00000000000000))*(gconst20)*(x127)*(x131)))+(((IkReal(-1.00000000000000))*(x137)*(x145)))+(((IkReal(-1.00000000000000))*(gconst12)*(x104)*(x105)))+(((IkReal(-1.00000000000000))*(gconst12)*(x127)*(x138)))+(((IkReal(-1.00000000000000))*(x103)*(x145)))+(((IkReal(-1.00000000000000))*(gconst22)*(x133)*(x141)))+(((x139)*(x145)))+(((x153)*(x166)))+(((x130)*(x133)))+(((x123)*(x127)))+(((x112)*(x113)))+(((x129)*(x130)))+(((x102)*(x137)))+(((IkReal(-1.00000000000000))*(gconst22)*(x129)*(x141)))+(((IkReal(-1.00000000000000))*(x108)*(x112)))+(((IkReal(-1.00000000000000))*(gconst26)*(x140)*(x147)))+(((x124)*(x163)))+(((IkReal(-1.00000000000000))*(gconst20)*(x104)*(x113)))+(((x124)*(x142)))+(((IkReal(-1.00000000000000))*(x123)*(x124)))+(((x102)*(x103)))+(((x135)*(x159)))+(((gconst16)*(x173)))+(((x105)*(x160)))+(((IkReal(-1.00000000000000))*(gconst5)*(x102)*(x126)))+(((x127)*(x161)))+(((x140)*(x169)))+(((x124)*(x164)))+(((x108)*(x109)))+(((IkReal(-1.00000000000000))*(gconst22)*(x106)*(x124)))+(((IkReal(-1.00000000000000))*(x140)*(x175)))+(((x145)*(x156)))+(((IkReal(-1.00000000000000))*(x122)*(x159)))+(((IkReal(-1.00000000000000))*(gconst15)*(x126)*(x153)))+(((IkReal(-1.00000000000000))*(x112)*(x155)))+(((IkReal(-1.00000000000000))*(gconst31)*(x104)*(x152)))+(((IkReal(-1.00000000000000))*(gconst21)*(x104)*(x114)))+(((gconst6)*(x176)))+(((IkReal(-1.00000000000000))*(x166)*(x177)))+(((x127)*(x128)))+(((IkReal(-1.00000000000000))*(gconst21)*(x104)*(x169)))+(((IkReal(-1.00000000000000))*(gconst1)*(x102)*(x104)))+(((IkReal(-1.00000000000000))*(gconst0)*(x104)*(x127)))+(((IkReal(-1.00000000000000))*(x133)*(x135)))+(((IkReal(-1.00000000000000))*(gconst20)*(x104)*(x146)))+(((IkReal(-1.00000000000000))*(gconst20)*(x104)*(x162)))+(((x112)*(x146)))+(((IkReal(-1.00000000000000))*(x112)*(x134)))+(((x105)*(x135)))+(((IkReal(-1.00000000000000))*(gconst13)*(x124)*(x141)))+(((x109)*(x134)))+(((IkReal(-1.00000000000000))*(x105)*(x122)))+(((IkReal(-1.00000000000000))*(x129)*(x135)))+(((x122)*(x129)))+(((x114)*(x140)))+(((x122)*(x133)))+(((x109)*(x155)))+(((x159)*(x160)))+(((x158)*(x168)))+(((x112)*(x162))));
op[3]=((((gconst11)*(gconst13)*(gconst23)*(gconst26)))+(((gconst18)*(gconst22)*(gconst24)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst15)*(gconst19)*(gconst26)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst16)*(gconst19)*(gconst20)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst24)*(gconst30)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst21)*(gconst27)*(gconst9)))+(((gconst16)*(gconst21)*(gconst30)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst20)*(gconst31)*(gconst5)))+(((gconst0)*(gconst17)*(gconst25)*(gconst29)))+(((gconst18)*(gconst20)*(gconst28)*(gconst5)))+(((gconst15)*(gconst17)*(gconst18)*(gconst20)))+(((IkReal(-1.00000000000000))*(gconst19)*(gconst20)*(gconst25)*(gconst6)))+(((gconst10)*(gconst16)*(gconst21)*(gconst25)))+(((gconst18)*(gconst20)*(gconst25)*(gconst8)))+(((gconst17)*(gconst20)*(gconst29)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst23)*(gconst28)*(gconst9)))+(((gconst15)*(gconst20)*(gconst29)*(gconst8)))+(((gconst13)*(gconst23)*(gconst31)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst19)*(gconst20)*(gconst26)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst22)*(gconst30)*(gconst4)))+(((gconst15)*(gconst20)*(gconst28)*(gconst9)))+(((gconst17)*(gconst20)*(gconst25)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst16)*(gconst25)*(gconst31)))+(((gconst0)*(gconst18)*(gconst25)*(gconst28)))+(((gconst12)*(gconst25)*(gconst29)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst2)*(gconst28)*(gconst29)))+(((gconst15)*(gconst21)*(gconst30)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst22)*(gconst28)*(gconst9)))+(((gconst19)*(gconst22)*(gconst23)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst17)*(gconst2)*(gconst23)*(gconst29)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst14)*(gconst18)*(gconst28)))+(((gconst14)*(gconst2)*(gconst26)*(gconst31)))+(((gconst11)*(gconst14)*(gconst22)*(gconst26)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst15)*(gconst26)*(gconst31)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst16)*(gconst19)*(gconst25)))+(((gconst12)*(gconst15)*(gconst17)*(gconst29)))+(((gconst16)*(gconst22)*(gconst3)*(gconst31)))+(((gconst13)*(gconst14)*(gconst16)*(gconst31)))+(((gconst13)*(gconst27)*(gconst29)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst21)*(gconst29)*(gconst7)))+(((gconst19)*(gconst2)*(gconst23)*(gconst26)))+(((gconst13)*(gconst16)*(gconst19)*(gconst23)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst13)*(gconst24)*(gconst26)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst26)*(gconst31)*(gconst5)))+(((gconst13)*(gconst24)*(gconst29)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst28)*(gconst29)*(gconst3)))+(((gconst12)*(gconst15)*(gconst18)*(gconst28)))+(((IkReal(-1.00000000000000))*(gconst18)*(gconst21)*(gconst27)*(gconst5)))+(((gconst13)*(gconst24)*(gconst27)*(gconst9)))+(((gconst12)*(gconst28)*(gconst29)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst17)*(gconst22)*(gconst29)*(gconst3)))+(((gconst18)*(gconst2)*(gconst24)*(gconst27)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst16)*(gconst22)*(gconst24)))+(((gconst1)*(gconst16)*(gconst25)*(gconst30)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst19)*(gconst25)*(gconst26)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst15)*(gconst16)*(gconst31)))+(((IkReal(-1.00000000000000))*(gconst18)*(gconst22)*(gconst23)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst14)*(gconst17)*(gconst29)))+(((gconst12)*(gconst17)*(gconst18)*(gconst25)))+(((gconst18)*(gconst22)*(gconst27)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst17)*(gconst18)*(gconst23)))+(((gconst1)*(gconst15)*(gconst26)*(gconst30)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst17)*(gconst18)*(gconst22)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst15)*(gconst20)*(gconst26)))+(((gconst11)*(gconst16)*(gconst22)*(gconst23)))+(((gconst13)*(gconst14)*(gconst19)*(gconst26)))+(((gconst0)*(gconst15)*(gconst28)*(gconst29)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst18)*(gconst25)*(gconst27)))+(((IkReal(-1.00000000000000))*(gconst18)*(gconst22)*(gconst28)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst18)*(gconst2)*(gconst23)*(gconst28)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst25)*(gconst31)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst12)*(gconst25)*(gconst26)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst22)*(gconst29)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst18)*(gconst21)*(gconst25)*(gconst7)))+(((gconst13)*(gconst26)*(gconst3)*(gconst31)))+(((gconst12)*(gconst25)*(gconst28)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst15)*(gconst27)*(gconst29)))+(((IkReal(-1.00000000000000))*(gconst17)*(gconst22)*(gconst23)*(gconst9)))+(((gconst14)*(gconst16)*(gconst19)*(gconst22)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst26)*(gconst30)*(gconst4)))+(((gconst14)*(gconst22)*(gconst31)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst23)*(gconst29)*(gconst8)))+(((gconst16)*(gconst2)*(gconst23)*(gconst31)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst20)*(gconst31)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst16)*(gconst20)*(gconst25)))+(((gconst19)*(gconst22)*(gconst26)*(gconst3)))+(((gconst10)*(gconst15)*(gconst21)*(gconst26)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst2)*(gconst24)*(gconst30))));
op[4]=((((gconst2)*(gconst26)*(gconst3)*(gconst31)))+(((IkReal(-1.00000000000000))*(gconst22)*(gconst23)*(gconst8)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst20)*(gconst26)*(gconst5)))+(((gconst11)*(gconst2)*(gconst23)*(gconst26)))+(((gconst15)*(gconst17)*(gconst20)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst21)*(gconst27)*(gconst5)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst17)*(gconst18)*(gconst2)*(gconst23)))+(((gconst1)*(gconst15)*(gconst16)*(gconst30)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst26)*(gconst31)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst15)*(gconst16)*(gconst20)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst14)*(gconst28)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst12)*(gconst16)*(gconst25)))+(((IkReal(-1.00000000000000))*(gconst21)*(gconst29)*(gconst5)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst25)*(gconst27)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst15)*(gconst18)*(gconst27)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst16)*(gconst31)*(gconst5)))+(((gconst0)*(gconst15)*(gconst17)*(gconst29)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst20)*(gconst25)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst25)*(gconst31)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst2)*(gconst24)*(gconst26)))+(((gconst1)*(gconst10)*(gconst25)*(gconst26)))+(((gconst12)*(gconst17)*(gconst25)*(gconst9)))+(((gconst0)*(gconst25)*(gconst28)*(gconst9)))+(((gconst16)*(gconst19)*(gconst2)*(gconst23)))+(((gconst13)*(gconst18)*(gconst27)*(gconst4)))+(((gconst2)*(gconst24)*(gconst27)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst11)*(gconst25)*(gconst26)))+(((IkReal(-1.00000000000000))*(gconst2)*(gconst23)*(gconst29)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst14)*(gconst17)*(gconst18)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst15)*(gconst19)*(gconst26)))+(((gconst0)*(gconst17)*(gconst18)*(gconst25)))+(((gconst11)*(gconst13)*(gconst16)*(gconst23)))+(((gconst20)*(gconst25)*(gconst8)*(gconst9)))+(((gconst2)*(gconst23)*(gconst31)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst18)*(gconst2)*(gconst28)))+(((IkReal(-1.00000000000000))*(gconst22)*(gconst28)*(gconst3)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst18)*(gconst28)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst19)*(gconst25)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst12)*(gconst15)*(gconst26)))+(((gconst0)*(gconst28)*(gconst29)*(gconst5)))+(((gconst1)*(gconst26)*(gconst30)*(gconst5)))+(((gconst22)*(gconst3)*(gconst31)*(gconst6)))+(((gconst14)*(gconst19)*(gconst2)*(gconst26)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst17)*(gconst22)*(gconst9)))+(((gconst10)*(gconst15)*(gconst16)*(gconst21)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst15)*(gconst16)*(gconst31)))+(((gconst16)*(gconst19)*(gconst22)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst18)*(gconst22)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst22)*(gconst29)*(gconst3)*(gconst8)))+(((gconst11)*(gconst22)*(gconst26)*(gconst3)))+(((gconst22)*(gconst27)*(gconst4)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst18)*(gconst21)*(gconst7)))+(((gconst14)*(gconst16)*(gconst2)*(gconst31)))+(((IkReal(-1.00000000000000))*(gconst17)*(gconst18)*(gconst22)*(gconst3)))+(((gconst13)*(gconst19)*(gconst23)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst20)*(gconst31)*(gconst5)*(gconst6)))+(((gconst22)*(gconst24)*(gconst7)*(gconst9)))+(((gconst12)*(gconst18)*(gconst28)*(gconst5)))+(((gconst12)*(gconst15)*(gconst29)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst15)*(gconst31)*(gconst6)))+(((gconst12)*(gconst15)*(gconst28)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst19)*(gconst20)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst13)*(gconst16)*(gconst24)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst19)*(gconst26)*(gconst5)))+(((gconst15)*(gconst18)*(gconst20)*(gconst8)))+(((gconst12)*(gconst15)*(gconst17)*(gconst18)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst16)*(gconst19)*(gconst25)))+(((gconst0)*(gconst25)*(gconst29)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst16)*(gconst30)*(gconst4)))+(((gconst13)*(gconst18)*(gconst24)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst25)*(gconst29)*(gconst7)))+(((gconst11)*(gconst13)*(gconst14)*(gconst26)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst27)*(gconst29)*(gconst5)))+(((gconst2)*(gconst27)*(gconst29)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst21)*(gconst25)*(gconst7)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst2)*(gconst24)*(gconst30)*(gconst6)))+(((gconst20)*(gconst29)*(gconst5)*(gconst8)))+(((gconst13)*(gconst14)*(gconst16)*(gconst19)))+(((gconst13)*(gconst14)*(gconst31)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst22)*(gconst26)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst17)*(gconst23)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst22)*(gconst24)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst2)*(gconst26)*(gconst30)*(gconst4)))+(((gconst0)*(gconst15)*(gconst18)*(gconst28)))+(((gconst14)*(gconst19)*(gconst22)*(gconst6)))+(((gconst22)*(gconst29)*(gconst4)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst17)*(gconst29)*(gconst3)))+(((gconst11)*(gconst22)*(gconst23)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst2)*(gconst23)*(gconst28)*(gconst9)))+(((gconst10)*(gconst21)*(gconst26)*(gconst5)))+(((gconst11)*(gconst14)*(gconst16)*(gconst22)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst17)*(gconst2)*(gconst29)))+(((gconst12)*(gconst18)*(gconst25)*(gconst8)))+(((gconst13)*(gconst19)*(gconst26)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst19)*(gconst20)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst18)*(gconst23)*(gconst8)))+(((gconst21)*(gconst30)*(gconst5)*(gconst6)))+(((gconst20)*(gconst28)*(gconst5)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst15)*(gconst16)*(gconst19)))+(((gconst12)*(gconst17)*(gconst29)*(gconst5)))+(((gconst13)*(gconst16)*(gconst3)*(gconst31)))+(((gconst2)*(gconst24)*(gconst29)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst2)*(gconst28)*(gconst29)*(gconst3)))+(((gconst17)*(gconst18)*(gconst20)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst22)*(gconst30)*(gconst4)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst14)*(gconst29)*(gconst8)))+(((gconst10)*(gconst21)*(gconst25)*(gconst6)))+(((gconst1)*(gconst25)*(gconst30)*(gconst6))));
op[5]=((((IkReal(-1.00000000000000))*(gconst10)*(gconst13)*(gconst24)*(gconst6)))+(((gconst13)*(gconst16)*(gconst19)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst31)*(gconst5)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst15)*(gconst20)*(gconst6)))+(((gconst11)*(gconst13)*(gconst26)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst12)*(gconst26)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst16)*(gconst31)*(gconst5)))+(((gconst19)*(gconst2)*(gconst26)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst18)*(gconst25)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst22)*(gconst8)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst17)*(gconst18)*(gconst2)))+(((gconst11)*(gconst13)*(gconst23)*(gconst6)))+(((gconst18)*(gconst2)*(gconst24)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst28)*(gconst3)*(gconst9)))+(((gconst19)*(gconst22)*(gconst3)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst12)*(gconst25)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst19)*(gconst26)*(gconst5)))+(((gconst18)*(gconst22)*(gconst4)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst2)*(gconst29)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst17)*(gconst2)*(gconst29)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst21)*(gconst7)*(gconst9)))+(((gconst0)*(gconst15)*(gconst17)*(gconst18)))+(((IkReal(-1.00000000000000))*(gconst18)*(gconst2)*(gconst28)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst2)*(gconst30)*(gconst4)))+(((gconst0)*(gconst18)*(gconst28)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst18)*(gconst21)*(gconst5)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst19)*(gconst20)*(gconst5)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst19)*(gconst25)*(gconst6)))+(((gconst11)*(gconst16)*(gconst2)*(gconst23)))+(((gconst12)*(gconst29)*(gconst5)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst15)*(gconst16)*(gconst19)))+(((gconst10)*(gconst15)*(gconst21)*(gconst6)))+(((gconst1)*(gconst15)*(gconst30)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst11)*(gconst15)*(gconst26)))+(((gconst0)*(gconst17)*(gconst25)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst16)*(gconst19)*(gconst5)))+(((gconst12)*(gconst15)*(gconst18)*(gconst8)))+(((gconst13)*(gconst29)*(gconst4)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst23)*(gconst8)*(gconst9)))+(((gconst12)*(gconst25)*(gconst8)*(gconst9)))+(((gconst12)*(gconst15)*(gconst17)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst14)*(gconst17)*(gconst9)))+(((gconst11)*(gconst16)*(gconst22)*(gconst3)))+(((gconst13)*(gconst14)*(gconst19)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst17)*(gconst22)*(gconst3)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst15)*(gconst31)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst30)*(gconst4)*(gconst6)))+(((gconst13)*(gconst27)*(gconst4)*(gconst9)))+(((gconst13)*(gconst24)*(gconst7)*(gconst9)))+(((gconst1)*(gconst16)*(gconst30)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst18)*(gconst22)*(gconst3)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst2)*(gconst28)*(gconst9)))+(((gconst0)*(gconst17)*(gconst29)*(gconst5)))+(((gconst11)*(gconst14)*(gconst2)*(gconst26)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst14)*(gconst18)*(gconst8)))+(((gconst12)*(gconst28)*(gconst5)*(gconst9)))+(((gconst0)*(gconst15)*(gconst29)*(gconst8)))+(((gconst0)*(gconst15)*(gconst28)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst29)*(gconst3)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst16)*(gconst20)*(gconst5)))+(((gconst15)*(gconst20)*(gconst8)*(gconst9)))+(((gconst1)*(gconst10)*(gconst16)*(gconst25)))+(((gconst19)*(gconst2)*(gconst23)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst13)*(gconst26)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst15)*(gconst27)*(gconst9)))+(((gconst16)*(gconst2)*(gconst3)*(gconst31)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst12)*(gconst15)*(gconst16)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst17)*(gconst18)*(gconst3)))+(((gconst11)*(gconst13)*(gconst14)*(gconst16)))+(((IkReal(-1.00000000000000))*(gconst18)*(gconst2)*(gconst23)*(gconst8)))+(((gconst12)*(gconst17)*(gconst18)*(gconst5)))+(((gconst11)*(gconst14)*(gconst22)*(gconst6)))+(((gconst0)*(gconst18)*(gconst25)*(gconst8)))+(((gconst14)*(gconst16)*(gconst19)*(gconst2)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst18)*(gconst27)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst15)*(gconst19)*(gconst6)))+(((gconst13)*(gconst3)*(gconst31)*(gconst6)))+(((gconst10)*(gconst16)*(gconst21)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst16)*(gconst2)*(gconst24)))+(((IkReal(-1.00000000000000))*(gconst17)*(gconst2)*(gconst23)*(gconst9)))+(((gconst18)*(gconst20)*(gconst5)*(gconst8)))+(((gconst1)*(gconst10)*(gconst15)*(gconst26)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst11)*(gconst16)*(gconst25)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst15)*(gconst29)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst16)*(gconst22)*(gconst4)))+(((gconst18)*(gconst2)*(gconst27)*(gconst4)))+(((gconst17)*(gconst20)*(gconst5)*(gconst9)))+(((gconst14)*(gconst2)*(gconst31)*(gconst6))));
op[6]=((((x116)*(x119)))+(((IkReal(-1.00000000000000))*(gconst16)*(x111)*(x165)))+(((gconst30)*(gconst6)*(x157)))+(((IkReal(-1.00000000000000))*(gconst1)*(x114)*(x131)))+(((IkReal(-1.00000000000000))*(x103)*(x136)))+(((x107)*(x163)))+(((IkReal(-1.00000000000000))*(gconst0)*(x132)*(x138)))+(((x108)*(x110)))+(((x116)*(x132)))+(((IkReal(-1.00000000000000))*(gconst1)*(x104)*(x120)))+(((IkReal(-1.00000000000000))*(gconst6)*(x111)*(x164)))+(((x125)*(x165)))+(((x150)*(x170)))+(((IkReal(-1.00000000000000))*(gconst5)*(x120)*(x126)))+(((x110)*(x155)))+(((IkReal(-1.00000000000000))*(gconst16)*(x121)*(x147)))+(((IkReal(-1.00000000000000))*(x118)*(x125)))+(((IkReal(-1.00000000000000))*(x110)*(x113)))+(((IkReal(-1.00000000000000))*(x136)*(x137)))+(((x118)*(x119)))+(((x120)*(x137)))+(((IkReal(-1.00000000000000))*(gconst12)*(x111)*(x148)))+(((x113)*(x144)))+(((x157)*(x158)))+(((x107)*(x142)))+(((IkReal(-1.00000000000000))*(x149)*(x175)))+(((x114)*(x149)))+(((x121)*(x151)))+(((x144)*(x146)))+(((IkReal(-1.00000000000000))*(gconst18)*(x138)*(x143)))+(((IkReal(-1.00000000000000))*(gconst26)*(x110)*(x111)))+(((IkReal(-1.00000000000000))*(x117)*(x174)))+(((x115)*(x128)))+(((x165)*(x167)))+(((IkReal(-1.00000000000000))*(gconst13)*(x106)*(x125)))+(((IkReal(-1.00000000000000))*(gconst0)*(x104)*(x115)))+(((IkReal(-1.00000000000000))*(gconst29)*(x131)*(x143)))+(((IkReal(-1.00000000000000))*(x110)*(x146)))+(((x125)*(x154)))+(((x107)*(x164)))+(((IkReal(-1.00000000000000))*(gconst12)*(x131)*(x132)))+(((IkReal(-1.00000000000000))*(gconst2)*(x106)*(x108)))+(((IkReal(-1.00000000000000))*(gconst13)*(x107)*(x141)))+(((x115)*(x161)))+(((x103)*(x120)))+(((x144)*(x162)))+(((x110)*(x134)))+(((x115)*(x123)))+(((x154)*(x167)))+(((x149)*(x169)))+(((IkReal(-1.00000000000000))*(gconst26)*(x147)*(x149)))+(((x136)*(x156)))+(((IkReal(-1.00000000000000))*(gconst29)*(x106)*(x117)))+(((x118)*(x132)))+(((IkReal(-1.00000000000000))*(gconst5)*(x111)*(x152)))+(((IkReal(-1.00000000000000))*(gconst22)*(x106)*(x107)))+(((x136)*(x139)))+(((IkReal(-1.00000000000000))*(gconst13)*(x106)*(x167)))+(((IkReal(-1.00000000000000))*(gconst2)*(x106)*(x155)))+(((IkReal(-1.00000000000000))*(x107)*(x123))));
op[7]=((((IkReal(-1.00000000000000))*(gconst1)*(x120)*(x138)))+(((x115)*(x118)))+(((x136)*(x150)))+(((x132)*(x144)))+(((IkReal(-1.00000000000000))*(gconst18)*(x106)*(x117)))+(((x107)*(x165)))+(((IkReal(-1.00000000000000))*(gconst16)*(x110)*(x111)))+(((x110)*(x125)))+(((x115)*(x116)))+(((x157)*(x170)))+(((x107)*(x154)))+(((IkReal(-1.00000000000000))*(gconst18)*(x131)*(x143)))+(((x120)*(x121)))+(((IkReal(-1.00000000000000))*(gconst6)*(x111)*(x154)))+(((IkReal(-1.00000000000000))*(x121)*(x136)))+(((x119)*(x144)))+(((IkReal(-1.00000000000000))*(gconst16)*(x147)*(x149)))+(((IkReal(-1.00000000000000))*(x107)*(x118)))+(((x149)*(x151)))+(((IkReal(-1.00000000000000))*(x110)*(x132)))+(((x110)*(x167)))+(((IkReal(-1.00000000000000))*(gconst13)*(x106)*(x107)))+(((IkReal(-1.00000000000000))*(gconst2)*(x106)*(x125)))+(((IkReal(-1.00000000000000))*(gconst0)*(x111)*(x148))));
op[8]=((((x120)*(x149)))+(((x107)*(x110)))+(((IkReal(-1.00000000000000))*(x136)*(x149)))+(((IkReal(-1.00000000000000))*(gconst6)*(x110)*(x111)))+(((x115)*(x144)))+(((IkReal(-1.00000000000000))*(gconst2)*(x106)*(x107)))+(((x136)*(x157)))+(((IkReal(-1.00000000000000))*(gconst1)*(x120)*(x131))));
polyroots8(op,zeror,numroots);
IkReal j19array[8], cj19array[8], sj19array[8], tempj19array[1];
int numsolutions = 0;
for(int ij19 = 0; ij19 < numroots; ++ij19)
{
IkReal htj19 = zeror[ij19];
tempj19array[0]=((IkReal(2.00000000000000))*(atan(htj19)));
for(int kj19 = 0; kj19 < 1; ++kj19)
{
j19array[numsolutions] = tempj19array[kj19];
if( j19array[numsolutions] > IKPI )
{
    j19array[numsolutions]-=IK2PI;
}
else if( j19array[numsolutions] < -IKPI )
{
    j19array[numsolutions]+=IK2PI;
}
sj19array[numsolutions] = IKsin(j19array[numsolutions]);
cj19array[numsolutions] = IKcos(j19array[numsolutions]);
numsolutions++;
}
}
bool j19valid[8]={true,true,true,true,true,true,true,true};
_nj19 = 8;
for(int ij19 = 0; ij19 < numsolutions; ++ij19)
    {
if( !j19valid[ij19] )
{
    continue;
}
    j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
htj19 = IKtan(j19/2);

_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < numsolutions; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
{
IkReal dummyeval[1];
IkReal gconst48;
gconst48=IKsign(((((IkReal(2765831503.00000))*((npy)*(npy))))+(((IkReal(2765831503.00000))*((npx)*(npx))))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(1.00013505758364))*(cj19)))+(((IkReal(8.27646332845550))*(sj19))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14160897184617))+(j19)), IkReal(6.28318530717959))));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst57;
gconst57=IKsign(((((IkReal(8.64322344687500e+23))*((npx)*(npx))))+(((IkReal(8.64322344687500e+23))*((npy)*(npy))))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal j21array[2], cj21array[2], sj21array[2];
bool j21valid[2]={false};
_nj21 = 2;
sj21array[0]=((IkReal(3180467350.59437))*(npz));
if( sj21array[0] >= -1-IKFAST_SINCOS_THRESH && sj21array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j21valid[0] = j21valid[1] = true;
    j21array[0] = IKasin(sj21array[0]);
    cj21array[0] = IKcos(j21array[0]);
    sj21array[1] = sj21array[0];
    j21array[1] = j21array[0] > 0 ? (IKPI-j21array[0]) : (-IKPI-j21array[0]);
    cj21array[1] = -cj21array[0];
}
else if( isnan(sj21array[0]) )
{
    // probably any value will work
    j21valid[0] = true;
    cj21array[0] = 1; sj21array[0] = 0; j21array[0] = 0;
}
for(int ij21 = 0; ij21 < 2; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 2; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];

{
IkReal dummyeval[1];
IkReal gconst58;
gconst58=IKsign(((((IkReal(312500000000000.))*((npx)*(npx))))+(((IkReal(312500000000000.))*((npy)*(npy))))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst59;
gconst59=IKsign(((((IkReal(8.64322344687500e+23))*((npx)*(npx))))+(((IkReal(8.64322344687500e+23))*((npy)*(npy))))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j23array[1], cj23array[1], sj23array[1];
bool j23valid[1]={false};
_nj23 = 1;
IkReal x178=((IkReal(2.50104706054688e+29))*(pp));
if( IKabs(((gconst59)*(((((IkReal(2.99351280032429e+28))*(npy)))+(((IkReal(-1.00000000000000))*(npy)*(x178)))+(((IkReal(2.99023533128507e+23))*(npx))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst59)*(((((npx)*(x178)))+(((IkReal(2.99023533128507e+23))*(npy)))+(((IkReal(-2.99351280032429e+28))*(npx))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j23array[0]=IKatan2(((gconst59)*(((((IkReal(2.99351280032429e+28))*(npy)))+(((IkReal(-1.00000000000000))*(npy)*(x178)))+(((IkReal(2.99023533128507e+23))*(npx)))))), ((gconst59)*(((((npx)*(x178)))+(((IkReal(2.99023533128507e+23))*(npy)))+(((IkReal(-2.99351280032429e+28))*(npx)))))));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
for(int ij23 = 0; ij23 < 1; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 1; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[6];
IkReal x179=IKcos(j23);
IkReal x180=IKsin(j23);
IkReal x181=((IkReal(1.00000000000000))*(pp));
IkReal x182=((npz)*(sj21));
IkReal x183=((IkReal(0.0439812400000000))*(cj21));
IkReal x184=((npx)*(x179));
IkReal x185=((npy)*(x180));
IkReal x186=((npy)*(x179));
IkReal x187=((npx)*(x180));
IkReal x188=((IkReal(3.45584198842907e-6))*(x184));
IkReal x189=((IkReal(3.45584198842907e-6))*(x185));
IkReal x190=((x181)+(x189));
evalcond[0]=((IkReal(-0.345962978935389))+(x186)+(x187));
evalcond[1]=((IkReal(0.119690382781911))+(x188)+(((IkReal(-1.00000000000000))*(x190))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj21)*(x185)))+(((cj21)*(npz)))+(((sj21)*(x184)))+(((IkReal(-1.72792099421454e-6))*(sj21))));
evalcond[3]=((IkReal(-1.72792099421454e-6))+(((IkReal(3.14419200000000e-10))*(cj21)))+(x184)+(((IkReal(-1.00000000000000))*(x185))));
evalcond[4]=((IkReal(3.14419200000000e-10))+(((IkReal(-1.72792099421454e-6))*(cj21)))+(((cj21)*(x184)))+(((IkReal(-1.00000000000000))*(cj21)*(x185)))+(((IkReal(-1.00000000000000))*(x182))));
evalcond[5]=((IkReal(0.00624354505194799))+(((IkReal(0.327916120000000))*(x186)))+(x188)+(((IkReal(-1.00000000000000))*(x183)*(x184)))+(((x183)*(x185)))+(((IkReal(0.327916120000000))*(x187)))+(((IkReal(7.59961079475881e-8))*(cj21)))+(((IkReal(-1.00000000000000))*(x190)))+(((IkReal(0.0439812400000000))*(x182))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j23array[1], cj23array[1], sj23array[1];
bool j23valid[1]={false};
_nj23 = 1;
IkReal x379=((IkReal(98256.0000000000))*(cj21));
if( IKabs(((gconst58)*(((((npy)*(x379)))+(((IkReal(-539975310.692043))*(npy)))+(((IkReal(108113430917309.))*(npx))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst58)*(((((IkReal(108113430917309.))*(npy)))+(((IkReal(539975310.692043))*(npx)))+(((IkReal(-1.00000000000000))*(npx)*(x379))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j23array[0]=IKatan2(((gconst58)*(((((npy)*(x379)))+(((IkReal(-539975310.692043))*(npy)))+(((IkReal(108113430917309.))*(npx)))))), ((gconst58)*(((((IkReal(108113430917309.))*(npy)))+(((IkReal(539975310.692043))*(npx)))+(((IkReal(-1.00000000000000))*(npx)*(x379)))))));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
for(int ij23 = 0; ij23 < 1; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 1; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[6];
IkReal x380=IKcos(j23);
IkReal x381=IKsin(j23);
IkReal x382=((IkReal(1.00000000000000))*(pp));
IkReal x383=((npz)*(sj21));
IkReal x384=((IkReal(0.0439812400000000))*(cj21));
IkReal x385=((npx)*(x380));
IkReal x386=((npy)*(x381));
IkReal x387=((npy)*(x380));
IkReal x388=((npx)*(x381));
IkReal x389=((IkReal(3.45584198842907e-6))*(x385));
IkReal x390=((IkReal(3.45584198842907e-6))*(x386));
IkReal x391=((x382)+(x390));
evalcond[0]=((IkReal(-0.345962978935389))+(x387)+(x388));
evalcond[1]=((IkReal(0.119690382781911))+(x389)+(((IkReal(-1.00000000000000))*(x391))));
evalcond[2]=((((cj21)*(npz)))+(((sj21)*(x385)))+(((IkReal(-1.00000000000000))*(sj21)*(x386)))+(((IkReal(-1.72792099421454e-6))*(sj21))));
evalcond[3]=((IkReal(-1.72792099421454e-6))+(((IkReal(3.14419200000000e-10))*(cj21)))+(x385)+(((IkReal(-1.00000000000000))*(x386))));
evalcond[4]=((IkReal(3.14419200000000e-10))+(((IkReal(-1.72792099421454e-6))*(cj21)))+(((IkReal(-1.00000000000000))*(cj21)*(x386)))+(((cj21)*(x385)))+(((IkReal(-1.00000000000000))*(x383))));
evalcond[5]=((IkReal(0.00624354505194799))+(((IkReal(0.327916120000000))*(x387)))+(x389)+(((IkReal(0.0439812400000000))*(x383)))+(((x384)*(x386)))+(((IkReal(0.327916120000000))*(x388)))+(((IkReal(-1.00000000000000))*(x384)*(x385)))+(((IkReal(7.59961079475881e-8))*(cj21)))+(((IkReal(-1.00000000000000))*(x391))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

} else
{
{
IkReal j23array[1], cj23array[1], sj23array[1];
bool j23valid[1]={false};
_nj23 = 1;
IkReal x392=((IkReal(2.50104706054688e+29))*(pp));
if( IKabs(((gconst57)*(((((IkReal(2.99351280032429e+28))*(npy)))+(((IkReal(2.99023533128507e+23))*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(x392))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst57)*(((((IkReal(2.99023533128507e+23))*(npy)))+(((npx)*(x392)))+(((IkReal(-2.99351280032429e+28))*(npx))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j23array[0]=IKatan2(((gconst57)*(((((IkReal(2.99351280032429e+28))*(npy)))+(((IkReal(2.99023533128507e+23))*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(x392)))))), ((gconst57)*(((((IkReal(2.99023533128507e+23))*(npy)))+(((npx)*(x392)))+(((IkReal(-2.99351280032429e+28))*(npx)))))));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
for(int ij23 = 0; ij23 < 1; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 1; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[2];
IkReal x393=IKcos(j23);
IkReal x394=IKsin(j23);
evalcond[0]=((IkReal(-0.345962978935389))+(((npy)*(x393)))+(((npx)*(x394))));
evalcond[1]=((IkReal(0.119690382781911))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(3.45584198842907e-6))*(npx)*(x393)))+(((IkReal(-3.45584198842907e-6))*(npy)*(x394))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((IkReal(3180467350.59437))*(npz))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(5495.59630650589))+(((IkReal(-3180467350.59437))*(cj23)*(npx)))+(((IkReal(3180467350.59437))*(npy)*(sj23))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(3180467350.59437))*(npz)))+IKsqr(((IkReal(5495.59630650589))+(((IkReal(-3180467350.59437))*(cj23)*(npx)))+(((IkReal(3180467350.59437))*(npy)*(sj23)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((IkReal(3180467350.59437))*(npz)), ((IkReal(5495.59630650589))+(((IkReal(-3180467350.59437))*(cj23)*(npx)))+(((IkReal(3180467350.59437))*(npy)*(sj23)))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[5];
IkReal x395=IKsin(j21);
IkReal x396=IKcos(j21);
IkReal x397=((npy)*(sj23));
IkReal x398=((cj23)*(npx));
IkReal x399=((IkReal(1.00000000000000))*(x395));
IkReal x400=((IkReal(0.0439812400000000))*(x396));
evalcond[0]=((npz)+(((IkReal(-3.14419200000000e-10))*(x395))));
evalcond[1]=((((x395)*(x398)))+(((IkReal(-1.00000000000000))*(x397)*(x399)))+(((npz)*(x396)))+(((IkReal(-1.72792099421454e-6))*(x395))));
evalcond[2]=((IkReal(-1.72792099421454e-6))+(((IkReal(3.14419200000000e-10))*(x396)))+(x398)+(((IkReal(-1.00000000000000))*(x397))));
evalcond[3]=((IkReal(3.14419200000000e-10))+(((x396)*(x398)))+(((IkReal(-1.72792099421454e-6))*(x396)))+(((IkReal(-1.00000000000000))*(npz)*(x399)))+(((IkReal(-1.00000000000000))*(x396)*(x397))));
evalcond[4]=((IkReal(0.00624354505194799))+(((IkReal(0.327916120000000))*(cj23)*(npy)))+(((IkReal(-3.45584198842907e-6))*(x397)))+(((IkReal(0.327916120000000))*(npx)*(sj23)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0439812400000000))*(npz)*(x395)))+(((x397)*(x400)))+(((IkReal(7.59961079475881e-8))*(x396)))+(((IkReal(-1.00000000000000))*(x398)*(x400)))+(((IkReal(3.45584198842907e-6))*(x398))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}
}
}

}

}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(0.240499242000979))+(j19)), IkReal(6.28318530717959))));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst60;
gconst60=IKsign(((((IkReal(2765831503.00000))*((npy)*(npy))))+(((IkReal(2765831503.00000))*((npx)*(npx))))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal j21array[2], cj21array[2], sj21array[2];
bool j21valid[2]={false};
_nj21 = 2;
sj21array[0]=((IkReal(-9671726696.86802))*(npz));
if( sj21array[0] >= -1-IKFAST_SINCOS_THRESH && sj21array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j21valid[0] = j21valid[1] = true;
    j21array[0] = IKasin(sj21array[0]);
    cj21array[0] = IKcos(j21array[0]);
    sj21array[1] = sj21array[0];
    j21array[1] = j21array[0] > 0 ? (IKPI-j21array[0]) : (-IKPI-j21array[0]);
    cj21array[1] = -cj21array[0];
}
else if( isnan(sj21array[0]) )
{
    // probably any value will work
    j21valid[0] = true;
    cj21array[0] = 1; sj21array[0] = 0; j21array[0] = 0;
}
for(int ij21 = 0; ij21 < 2; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 2; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];

{
IkReal dummyeval[1];
IkReal gconst61;
gconst61=IKsign((((npy)*(npy))+((npx)*(npx))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst62;
gconst62=IKsign(((((IkReal(2765831503.00000))*((npy)*(npy))))+(((IkReal(2765831503.00000))*((npx)*(npx))))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j23array[1], cj23array[1], sj23array[1];
bool j23valid[1]={false};
_nj23 = 1;
IkReal x401=((IkReal(800335059375000.))*(pp));
if( IKabs(((gconst62)*(((((IkReal(-49914570.5542603))*(npx)))+(((IkReal(260660434677.559))*(npy)))+(((IkReal(-1.00000000000000))*(npy)*(x401))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst62)*(((((IkReal(-260660434677.559))*(npx)))+(((npx)*(x401)))+(((IkReal(-49914570.5542603))*(npy))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j23array[0]=IKatan2(((gconst62)*(((((IkReal(-49914570.5542603))*(npx)))+(((IkReal(260660434677.559))*(npy)))+(((IkReal(-1.00000000000000))*(npy)*(x401)))))), ((gconst62)*(((((IkReal(-260660434677.559))*(npx)))+(((npx)*(x401)))+(((IkReal(-49914570.5542603))*(npy)))))));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
for(int ij23 = 0; ij23 < 1; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 1; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[6];
IkReal x402=IKcos(j23);
IkReal x403=IKsin(j23);
IkReal x404=((IkReal(1.00000000000000))*(pp));
IkReal x405=((npz)*(sj21));
IkReal x406=((IkReal(0.0439812400000000))*(cj21));
IkReal x407=((npx)*(x402));
IkReal x408=((npy)*(x403));
IkReal x409=((npy)*(x402));
IkReal x410=((npx)*(x403));
IkReal x411=((IkReal(3.45584198842907e-6))*(x407));
IkReal x412=((IkReal(3.45584198842907e-6))*(x408));
IkReal x413=((x404)+(x412));
evalcond[0]=((IkReal(0.0180468587837400))+(x409)+(x410));
evalcond[1]=((IkReal(0.000325689136848653))+(((IkReal(-1.00000000000000))*(x413)))+(x411));
evalcond[2]=((((cj21)*(npz)))+(((IkReal(-1.72792099421454e-6))*(sj21)))+(((sj21)*(x407)))+(((IkReal(-1.00000000000000))*(sj21)*(x408))));
evalcond[3]=((IkReal(-1.72792099421454e-6))+(((IkReal(-1.03394154047367e-10))*(cj21)))+(x407)+(((IkReal(-1.00000000000000))*(x408))));
evalcond[4]=((IkReal(-1.03394154047367e-10))+(((IkReal(-1.72792099421454e-6))*(cj21)))+(((IkReal(-1.00000000000000))*(cj21)*(x408)))+(((cj21)*(x407)))+(((IkReal(-1.00000000000000))*(x405))));
evalcond[5]=((IkReal(0.00624354505194799))+(((IkReal(0.327916120000000))*(x409)))+(((IkReal(-1.00000000000000))*(x406)*(x407)))+(((IkReal(0.0439812400000000))*(x405)))+(((IkReal(-1.00000000000000))*(x413)))+(((IkReal(7.59961079475881e-8))*(cj21)))+(((x406)*(x408)))+(x411)+(((IkReal(0.327916120000000))*(x410))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j23array[1], cj23array[1], sj23array[1];
bool j23valid[1]={false};
_nj23 = 1;
IkReal x414=((IkReal(1.03394154047367e-10))*(cj21));
if( IKabs(((gconst61)*(((((IkReal(-1.72792099421454e-6))*(npy)))+(((IkReal(-0.0180468587837400))*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(x414))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst61)*(((((IkReal(-0.0180468587837400))*(npy)))+(((IkReal(1.72792099421454e-6))*(npx)))+(((npx)*(x414))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j23array[0]=IKatan2(((gconst61)*(((((IkReal(-1.72792099421454e-6))*(npy)))+(((IkReal(-0.0180468587837400))*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(x414)))))), ((gconst61)*(((((IkReal(-0.0180468587837400))*(npy)))+(((IkReal(1.72792099421454e-6))*(npx)))+(((npx)*(x414)))))));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
for(int ij23 = 0; ij23 < 1; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 1; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[6];
IkReal x415=IKcos(j23);
IkReal x416=IKsin(j23);
IkReal x417=((IkReal(1.00000000000000))*(pp));
IkReal x418=((npz)*(sj21));
IkReal x419=((IkReal(0.0439812400000000))*(cj21));
IkReal x420=((npx)*(x415));
IkReal x421=((npy)*(x416));
IkReal x422=((npy)*(x415));
IkReal x423=((npx)*(x416));
IkReal x424=((IkReal(3.45584198842907e-6))*(x420));
IkReal x425=((IkReal(3.45584198842907e-6))*(x421));
IkReal x426=((x425)+(x417));
evalcond[0]=((IkReal(0.0180468587837400))+(x423)+(x422));
evalcond[1]=((IkReal(0.000325689136848653))+(((IkReal(-1.00000000000000))*(x426)))+(x424));
evalcond[2]=((((sj21)*(x420)))+(((cj21)*(npz)))+(((IkReal(-1.00000000000000))*(sj21)*(x421)))+(((IkReal(-1.72792099421454e-6))*(sj21))));
evalcond[3]=((IkReal(-1.72792099421454e-6))+(((IkReal(-1.03394154047367e-10))*(cj21)))+(x420)+(((IkReal(-1.00000000000000))*(x421))));
evalcond[4]=((IkReal(-1.03394154047367e-10))+(((IkReal(-1.72792099421454e-6))*(cj21)))+(((IkReal(-1.00000000000000))*(x418)))+(((IkReal(-1.00000000000000))*(cj21)*(x421)))+(((cj21)*(x420))));
evalcond[5]=((IkReal(0.00624354505194799))+(((IkReal(-1.00000000000000))*(x426)))+(((x419)*(x421)))+(x424)+(((IkReal(0.327916120000000))*(x423)))+(((IkReal(0.327916120000000))*(x422)))+(((IkReal(0.0439812400000000))*(x418)))+(((IkReal(7.59961079475881e-8))*(cj21)))+(((IkReal(-1.00000000000000))*(x419)*(x420))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

} else
{
{
IkReal j23array[1], cj23array[1], sj23array[1];
bool j23valid[1]={false};
_nj23 = 1;
IkReal x427=((IkReal(800335059375000.))*(pp));
if( IKabs(((gconst60)*(((((IkReal(-49914570.5542603))*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(x427)))+(((IkReal(260660434677.559))*(npy))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst60)*(((((IkReal(-260660434677.559))*(npx)))+(((npx)*(x427)))+(((IkReal(-49914570.5542603))*(npy))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j23array[0]=IKatan2(((gconst60)*(((((IkReal(-49914570.5542603))*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(x427)))+(((IkReal(260660434677.559))*(npy)))))), ((gconst60)*(((((IkReal(-260660434677.559))*(npx)))+(((npx)*(x427)))+(((IkReal(-49914570.5542603))*(npy)))))));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
for(int ij23 = 0; ij23 < 1; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 1; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[2];
IkReal x428=IKcos(j23);
IkReal x429=IKsin(j23);
evalcond[0]=((IkReal(0.0180468587837400))+(((npy)*(x428)))+(((npx)*(x429))));
evalcond[1]=((IkReal(0.000325689136848653))+(((IkReal(3.45584198842907e-6))*(npx)*(x428)))+(((IkReal(-3.45584198842907e-6))*(npy)*(x429)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((IkReal(-9671726696.86802))*(npz))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-16711.9796098235))+(((IkReal(-9671726696.86802))*(npy)*(sj23)))+(((IkReal(9671726696.86802))*(cj23)*(npx))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-9671726696.86802))*(npz)))+IKsqr(((IkReal(-16711.9796098235))+(((IkReal(-9671726696.86802))*(npy)*(sj23)))+(((IkReal(9671726696.86802))*(cj23)*(npx)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((IkReal(-9671726696.86802))*(npz)), ((IkReal(-16711.9796098235))+(((IkReal(-9671726696.86802))*(npy)*(sj23)))+(((IkReal(9671726696.86802))*(cj23)*(npx)))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[5];
IkReal x430=IKsin(j21);
IkReal x431=IKcos(j21);
IkReal x432=((npy)*(sj23));
IkReal x433=((cj23)*(npx));
IkReal x434=((IkReal(1.00000000000000))*(x430));
IkReal x435=((IkReal(0.0439812400000000))*(x431));
evalcond[0]=((npz)+(((IkReal(1.03394154047367e-10))*(x430))));
evalcond[1]=((((npz)*(x431)))+(((IkReal(-1.72792099421454e-6))*(x430)))+(((x430)*(x433)))+(((IkReal(-1.00000000000000))*(x432)*(x434))));
evalcond[2]=((IkReal(-1.72792099421454e-6))+(x433)+(((IkReal(-1.03394154047367e-10))*(x431)))+(((IkReal(-1.00000000000000))*(x432))));
evalcond[3]=((IkReal(-1.03394154047367e-10))+(((x431)*(x433)))+(((IkReal(-1.00000000000000))*(x431)*(x432)))+(((IkReal(-1.72792099421454e-6))*(x431)))+(((IkReal(-1.00000000000000))*(npz)*(x434))));
evalcond[4]=((IkReal(0.00624354505194799))+(((IkReal(0.327916120000000))*(cj23)*(npy)))+(((IkReal(0.327916120000000))*(npx)*(sj23)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-3.45584198842907e-6))*(x432)))+(((IkReal(3.45584198842907e-6))*(x433)))+(((IkReal(-1.00000000000000))*(x433)*(x435)))+(((IkReal(7.59961079475881e-8))*(x431)))+(((IkReal(0.0439812400000000))*(npz)*(x430)))+(((x432)*(x435))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j21array[2], cj21array[2], sj21array[2];
bool j21valid[2]={false};
_nj21 = 2;
sj21array[0]=((IkReal(-1.00000000000000))*(npz)*(((IKabs(((IkReal(-0.0219906200000000))+(((IkReal(0.182004560000000))*(sj19)))+(((IkReal(0.0219935900000000))*(cj19))))) != 0)?((IkReal)1/(((IkReal(-0.0219906200000000))+(((IkReal(0.182004560000000))*(sj19)))+(((IkReal(0.0219935900000000))*(cj19)))))):(IkReal)1.0e30)));
if( sj21array[0] >= -1-IKFAST_SINCOS_THRESH && sj21array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j21valid[0] = j21valid[1] = true;
    j21array[0] = IKasin(sj21array[0]);
    cj21array[0] = IKcos(j21array[0]);
    sj21array[1] = sj21array[0];
    j21array[1] = j21array[0] > 0 ? (IKPI-j21array[0]) : (-IKPI-j21array[0]);
    cj21array[1] = -cj21array[0];
}
else if( isnan(sj21array[0]) )
{
    // probably any value will work
    j21valid[0] = true;
    cj21array[0] = 1; sj21array[0] = 0; j21array[0] = 0;
}
for(int ij21 = 0; ij21 < 2; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 2; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];

{
IkReal dummyeval[1];
IkReal gconst49;
gconst49=IKsign(((((sj21)*((npx)*(npx))))+(((sj21)*((npy)*(npy))))));
dummyeval[0]=((((sj21)*((npx)*(npx))))+(((sj21)*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst50;
gconst50=IKsign(((((IkReal(2765831503.00000))*((npy)*(npy))))+(((IkReal(2765831503.00000))*((npx)*(npx))))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j21)), IkReal(6.28318530717959))));
evalcond[1]=npz;
evalcond[2]=npz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst51;
gconst51=IKsign((((npy)*(npy))+((npx)*(npx))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst52;
gconst52=IKsign(((((IkReal(2765831503.00000))*((npy)*(npy))))+(((IkReal(2765831503.00000))*((npx)*(npx))))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j23array[1], cj23array[1], sj23array[1];
bool j23valid[1]={false};
_nj23 = 1;
IkReal x436=((IkReal(800335059375000.))*(pp));
IkReal x437=((IkReal(46991612007468.5))*(cj19));
IkReal x438=((IkReal(60830564.0860658))*(sj19));
IkReal x439=((IkReal(503393945.737654))*(cj19));
IkReal x440=((IkReal(12178569690242.2))*(sj19));
if( IKabs(((gconst52)*(((((IkReal(-1.00000000000000))*(npy)*(x440)))+(((npx)*(x439)))+(((IkReal(-1.00000000000000))*(npx)*(x438)))+(((IkReal(453480367.518764))*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(x436)))+(((npy)*(x437)))+(((IkReal(48800598848651.4))*(npy))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst52)*(((((IkReal(-48800598848651.4))*(npx)))+(((npx)*(x440)))+(((IkReal(-1.00000000000000))*(npy)*(x438)))+(((IkReal(-1.00000000000000))*(npx)*(x437)))+(((IkReal(453480367.518764))*(npy)))+(((npx)*(x436)))+(((npy)*(x439))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j23array[0]=IKatan2(((gconst52)*(((((IkReal(-1.00000000000000))*(npy)*(x440)))+(((npx)*(x439)))+(((IkReal(-1.00000000000000))*(npx)*(x438)))+(((IkReal(453480367.518764))*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(x436)))+(((npy)*(x437)))+(((IkReal(48800598848651.4))*(npy)))))), ((gconst52)*(((((IkReal(-48800598848651.4))*(npx)))+(((npx)*(x440)))+(((IkReal(-1.00000000000000))*(npy)*(x438)))+(((IkReal(-1.00000000000000))*(npx)*(x437)))+(((IkReal(453480367.518764))*(npy)))+(((npx)*(x436)))+(((npy)*(x439)))))));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
for(int ij23 = 0; ij23 < 1; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 1; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[4];
IkReal x441=IKcos(j23);
IkReal x442=IKsin(j23);
IkReal x443=((IkReal(1.00000000000000))*(pp));
IkReal x444=((npx)*(x441));
IkReal x445=((npy)*(x441));
IkReal x446=((npx)*(x442));
IkReal x447=((npy)*(x442));
evalcond[0]=((IkReal(-0.163958060000000))+(x445)+(x446)+(((IkReal(0.0219935900000000))*(sj19)))+(((IkReal(-0.182004560000000))*(cj19))));
evalcond[1]=((IkReal(0.0609752106658440))+(((IkReal(-0.0152168389321252))*(sj19)))+(((IkReal(3.45584198842907e-6))*(x444)))+(((IkReal(-3.45584198842907e-6))*(x447)))+(((IkReal(0.0587149237772556))*(cj19)))+(((IkReal(-1.00000000000000))*(x443))));
evalcond[2]=((IkReal(0.0219888920790058))+(((IkReal(-0.182004560000000))*(sj19)))+(((IkReal(-0.0219935900000000))*(cj19)))+(x444)+(((IkReal(-1.00000000000000))*(x447))));
evalcond[3]=((IkReal(0.00624362104805594))+(((IkReal(0.0439777841580116))*(x447)))+(((IkReal(-0.0439777841580116))*(x444)))+(((IkReal(0.327916120000000))*(x445)))+(((IkReal(0.327916120000000))*(x446)))+(((IkReal(-1.00000000000000))*(x443))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j23array[1], cj23array[1], sj23array[1];
bool j23valid[1]={false};
_nj23 = 1;
IkReal x448=((cj19)*(npy));
IkReal x449=((cj19)*(npx));
IkReal x450=((IkReal(0.182004560000000))*(sj19));
IkReal x451=((IkReal(0.0219935900000000))*(sj19));
if( IKabs(((gconst51)*(((((IkReal(-0.0219935900000000))*(x448)))+(((IkReal(0.182004560000000))*(x449)))+(((IkReal(0.0219888920790058))*(npy)))+(((IkReal(-1.00000000000000))*(npx)*(x451)))+(((IkReal(0.163958060000000))*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(x450))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst51)*(((((IkReal(-0.0219888920790058))*(npx)))+(((IkReal(0.0219935900000000))*(x449)))+(((npx)*(x450)))+(((IkReal(-1.00000000000000))*(npy)*(x451)))+(((IkReal(0.182004560000000))*(x448)))+(((IkReal(0.163958060000000))*(npy))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j23array[0]=IKatan2(((gconst51)*(((((IkReal(-0.0219935900000000))*(x448)))+(((IkReal(0.182004560000000))*(x449)))+(((IkReal(0.0219888920790058))*(npy)))+(((IkReal(-1.00000000000000))*(npx)*(x451)))+(((IkReal(0.163958060000000))*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(x450)))))), ((gconst51)*(((((IkReal(-0.0219888920790058))*(npx)))+(((IkReal(0.0219935900000000))*(x449)))+(((npx)*(x450)))+(((IkReal(-1.00000000000000))*(npy)*(x451)))+(((IkReal(0.182004560000000))*(x448)))+(((IkReal(0.163958060000000))*(npy)))))));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
for(int ij23 = 0; ij23 < 1; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 1; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[4];
IkReal x452=IKcos(j23);
IkReal x453=IKsin(j23);
IkReal x454=((IkReal(1.00000000000000))*(pp));
IkReal x455=((npx)*(x452));
IkReal x456=((npy)*(x452));
IkReal x457=((npx)*(x453));
IkReal x458=((npy)*(x453));
evalcond[0]=((IkReal(-0.163958060000000))+(x456)+(x457)+(((IkReal(0.0219935900000000))*(sj19)))+(((IkReal(-0.182004560000000))*(cj19))));
evalcond[1]=((IkReal(0.0609752106658440))+(((IkReal(3.45584198842907e-6))*(x455)))+(((IkReal(-1.00000000000000))*(x454)))+(((IkReal(-0.0152168389321252))*(sj19)))+(((IkReal(0.0587149237772556))*(cj19)))+(((IkReal(-3.45584198842907e-6))*(x458))));
evalcond[2]=((IkReal(0.0219888920790058))+(((IkReal(-0.182004560000000))*(sj19)))+(((IkReal(-0.0219935900000000))*(cj19)))+(x455)+(((IkReal(-1.00000000000000))*(x458))));
evalcond[3]=((IkReal(0.00624362104805594))+(((IkReal(-1.00000000000000))*(x454)))+(((IkReal(0.327916120000000))*(x456)))+(((IkReal(0.0439777841580116))*(x458)))+(((IkReal(0.327916120000000))*(x457)))+(((IkReal(-0.0439777841580116))*(x455))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j21, IkReal(6.28318530717959))));
evalcond[1]=npz;
evalcond[2]=((IkReal(-1.00000000000000))*(npz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst53;
gconst53=IKsign((((npy)*(npy))+((npx)*(npx))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst54;
gconst54=IKsign(((((IkReal(2765831503.00000))*((npy)*(npy))))+(((IkReal(2765831503.00000))*((npx)*(npx))))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j23array[1], cj23array[1], sj23array[1];
bool j23valid[1]={false};
_nj23 = 1;
IkReal x459=((IkReal(800335059375000.))*(pp));
IkReal x460=((IkReal(46991612007468.5))*(cj19));
IkReal x461=((IkReal(60830564.0860658))*(sj19));
IkReal x462=((IkReal(503393945.737654))*(cj19));
IkReal x463=((IkReal(12178569690242.2))*(sj19));
if( IKabs(((gconst54)*(((((IkReal(-1.00000000000000))*(npy)*(x463)))+(((npy)*(x460)))+(((IkReal(-1.00000000000000))*(npx)*(x461)))+(((IkReal(453480367.518764))*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(x459)))+(((npx)*(x462)))+(((IkReal(48800598848651.4))*(npy))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst54)*(((((IkReal(-48800598848651.4))*(npx)))+(((IkReal(-1.00000000000000))*(npx)*(x460)))+(((npx)*(x463)))+(((IkReal(-1.00000000000000))*(npy)*(x461)))+(((npx)*(x459)))+(((npy)*(x462)))+(((IkReal(453480367.518764))*(npy))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j23array[0]=IKatan2(((gconst54)*(((((IkReal(-1.00000000000000))*(npy)*(x463)))+(((npy)*(x460)))+(((IkReal(-1.00000000000000))*(npx)*(x461)))+(((IkReal(453480367.518764))*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(x459)))+(((npx)*(x462)))+(((IkReal(48800598848651.4))*(npy)))))), ((gconst54)*(((((IkReal(-48800598848651.4))*(npx)))+(((IkReal(-1.00000000000000))*(npx)*(x460)))+(((npx)*(x463)))+(((IkReal(-1.00000000000000))*(npy)*(x461)))+(((npx)*(x459)))+(((npy)*(x462)))+(((IkReal(453480367.518764))*(npy)))))));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
for(int ij23 = 0; ij23 < 1; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 1; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[4];
IkReal x464=IKcos(j23);
IkReal x465=IKsin(j23);
IkReal x466=((IkReal(1.00000000000000))*(pp));
IkReal x467=((npx)*(x464));
IkReal x468=((npy)*(x464));
IkReal x469=((npx)*(x465));
IkReal x470=((npy)*(x465));
evalcond[0]=((IkReal(-0.163958060000000))+(x469)+(x468)+(((IkReal(0.0219935900000000))*(sj19)))+(((IkReal(-0.182004560000000))*(cj19))));
evalcond[1]=((IkReal(0.0609752106658440))+(((IkReal(3.45584198842907e-6))*(x467)))+(((IkReal(-0.0152168389321252))*(sj19)))+(((IkReal(0.0587149237772556))*(cj19)))+(((IkReal(-1.00000000000000))*(x466)))+(((IkReal(-3.45584198842907e-6))*(x470))));
evalcond[2]=((IkReal(-0.0219923479209942))+(((IkReal(0.182004560000000))*(sj19)))+(((IkReal(-1.00000000000000))*(x470)))+(x467)+(((IkReal(0.0219935900000000))*(cj19))));
evalcond[3]=((IkReal(0.00624346905584004))+(((IkReal(0.0439846958419884))*(x467)))+(((IkReal(-0.0439846958419884))*(x470)))+(((IkReal(-1.00000000000000))*(x466)))+(((IkReal(0.327916120000000))*(x469)))+(((IkReal(0.327916120000000))*(x468))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j23array[1], cj23array[1], sj23array[1];
bool j23valid[1]={false};
_nj23 = 1;
IkReal x471=((cj19)*(npy));
IkReal x472=((cj19)*(npx));
IkReal x473=((npy)*(sj19));
IkReal x474=((npx)*(sj19));
if( IKabs(((gconst53)*(((((IkReal(0.163958060000000))*(npx)))+(((IkReal(0.182004560000000))*(x472)))+(((IkReal(-0.0219935900000000))*(x474)))+(((IkReal(0.182004560000000))*(x473)))+(((IkReal(-0.0219923479209942))*(npy)))+(((IkReal(0.0219935900000000))*(x471))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst53)*(((((IkReal(0.182004560000000))*(x471)))+(((IkReal(0.0219923479209942))*(npx)))+(((IkReal(-0.182004560000000))*(x474)))+(((IkReal(-0.0219935900000000))*(x473)))+(((IkReal(-0.0219935900000000))*(x472)))+(((IkReal(0.163958060000000))*(npy))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j23array[0]=IKatan2(((gconst53)*(((((IkReal(0.163958060000000))*(npx)))+(((IkReal(0.182004560000000))*(x472)))+(((IkReal(-0.0219935900000000))*(x474)))+(((IkReal(0.182004560000000))*(x473)))+(((IkReal(-0.0219923479209942))*(npy)))+(((IkReal(0.0219935900000000))*(x471)))))), ((gconst53)*(((((IkReal(0.182004560000000))*(x471)))+(((IkReal(0.0219923479209942))*(npx)))+(((IkReal(-0.182004560000000))*(x474)))+(((IkReal(-0.0219935900000000))*(x473)))+(((IkReal(-0.0219935900000000))*(x472)))+(((IkReal(0.163958060000000))*(npy)))))));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
for(int ij23 = 0; ij23 < 1; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 1; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[4];
IkReal x475=IKcos(j23);
IkReal x476=IKsin(j23);
IkReal x477=((IkReal(1.00000000000000))*(pp));
IkReal x478=((npx)*(x475));
IkReal x479=((npy)*(x475));
IkReal x480=((npx)*(x476));
IkReal x481=((npy)*(x476));
evalcond[0]=((IkReal(-0.163958060000000))+(x479)+(((IkReal(0.0219935900000000))*(sj19)))+(x480)+(((IkReal(-0.182004560000000))*(cj19))));
evalcond[1]=((IkReal(0.0609752106658440))+(((IkReal(-0.0152168389321252))*(sj19)))+(((IkReal(-3.45584198842907e-6))*(x481)))+(((IkReal(3.45584198842907e-6))*(x478)))+(((IkReal(0.0587149237772556))*(cj19)))+(((IkReal(-1.00000000000000))*(x477))));
evalcond[2]=((IkReal(-0.0219923479209942))+(x478)+(((IkReal(0.182004560000000))*(sj19)))+(((IkReal(-1.00000000000000))*(x481)))+(((IkReal(0.0219935900000000))*(cj19))));
evalcond[3]=((IkReal(0.00624346905584004))+(((IkReal(-0.0439846958419884))*(x481)))+(((IkReal(0.327916120000000))*(x479)))+(((IkReal(0.327916120000000))*(x480)))+(((IkReal(0.0439846958419884))*(x478)))+(((IkReal(-1.00000000000000))*(x477))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j23array[1], cj23array[1], sj23array[1];
bool j23valid[1]={false};
_nj23 = 1;
IkReal x482=((IkReal(800335059375000.))*(pp));
IkReal x483=((IkReal(46991612007468.5))*(cj19));
IkReal x484=((IkReal(60830564.0860658))*(sj19));
IkReal x485=((IkReal(503393945.737654))*(cj19));
IkReal x486=((IkReal(12178569690242.2))*(sj19));
if( IKabs(((gconst50)*(((((npx)*(x485)))+(((IkReal(453480367.518764))*(npx)))+(((npy)*(x483)))+(((IkReal(-1.00000000000000))*(npy)*(x486)))+(((IkReal(-1.00000000000000))*(npy)*(x482)))+(((IkReal(-1.00000000000000))*(npx)*(x484)))+(((IkReal(48800598848651.4))*(npy))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst50)*(((((IkReal(-48800598848651.4))*(npx)))+(((IkReal(-1.00000000000000))*(npx)*(x483)))+(((IkReal(-1.00000000000000))*(npy)*(x484)))+(((npy)*(x485)))+(((npx)*(x486)))+(((npx)*(x482)))+(((IkReal(453480367.518764))*(npy))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j23array[0]=IKatan2(((gconst50)*(((((npx)*(x485)))+(((IkReal(453480367.518764))*(npx)))+(((npy)*(x483)))+(((IkReal(-1.00000000000000))*(npy)*(x486)))+(((IkReal(-1.00000000000000))*(npy)*(x482)))+(((IkReal(-1.00000000000000))*(npx)*(x484)))+(((IkReal(48800598848651.4))*(npy)))))), ((gconst50)*(((((IkReal(-48800598848651.4))*(npx)))+(((IkReal(-1.00000000000000))*(npx)*(x483)))+(((IkReal(-1.00000000000000))*(npy)*(x484)))+(((npy)*(x485)))+(((npx)*(x486)))+(((npx)*(x482)))+(((IkReal(453480367.518764))*(npy)))))));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
for(int ij23 = 0; ij23 < 1; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 1; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[6];
IkReal x487=IKcos(j23);
IkReal x488=IKsin(j23);
IkReal x489=((IkReal(1.00000000000000))*(pp));
IkReal x490=((npz)*(sj21));
IkReal x491=((IkReal(0.0219935900000000))*(cj19));
IkReal x492=((IkReal(0.182004560000000))*(sj19));
IkReal x493=((IkReal(0.0439812400000000))*(cj21));
IkReal x494=((npx)*(x487));
IkReal x495=((npy)*(x488));
IkReal x496=((npy)*(x487));
IkReal x497=((npx)*(x488));
IkReal x498=((IkReal(3.45584198842907e-6))*(x494));
IkReal x499=((IkReal(3.45584198842907e-6))*(x495));
IkReal x500=((x499)+(x489));
evalcond[0]=((IkReal(-0.163958060000000))+(x496)+(x497)+(((IkReal(0.0219935900000000))*(sj19)))+(((IkReal(-0.182004560000000))*(cj19))));
evalcond[1]=((IkReal(0.0609752106658440))+(((IkReal(-1.00000000000000))*(x500)))+(((IkReal(-0.0152168389321252))*(sj19)))+(x498)+(((IkReal(0.0587149237772556))*(cj19))));
evalcond[2]=((((cj21)*(npz)))+(((sj21)*(x494)))+(((IkReal(-1.72792099421454e-6))*(sj21)))+(((IkReal(-1.00000000000000))*(sj21)*(x495))));
evalcond[3]=((IkReal(-1.72792099421454e-6))+(((IkReal(-1.00000000000000))*(x495)))+(x494)+(((IkReal(-1.00000000000000))*(cj21)*(x492)))+(((IkReal(0.0219906200000000))*(cj21)))+(((IkReal(-1.00000000000000))*(cj21)*(x491))));
evalcond[4]=((IkReal(0.0219906200000000))+(((IkReal(-1.72792099421454e-6))*(cj21)))+(((IkReal(-1.00000000000000))*(x492)))+(((cj21)*(x494)))+(((IkReal(-1.00000000000000))*(cj21)*(x495)))+(((IkReal(-1.00000000000000))*(x491)))+(((IkReal(-1.00000000000000))*(x490))));
evalcond[5]=((IkReal(0.00624354505194799))+(((IkReal(-1.00000000000000))*(x500)))+(((IkReal(0.0439812400000000))*(x490)))+(((IkReal(0.327916120000000))*(x496)))+(((x493)*(x495)))+(x498)+(((IkReal(7.59961079475881e-8))*(cj21)))+(((IkReal(-1.00000000000000))*(x493)*(x494)))+(((IkReal(0.327916120000000))*(x497))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j23array[1], cj23array[1], sj23array[1];
bool j23valid[1]={false};
_nj23 = 1;
IkReal x501=((IkReal(0.163958060000000))*(sj21));
IkReal x502=((npx)*(sj21));
IkReal x503=((IkReal(0.0219935900000000))*(sj19));
IkReal x504=((cj21)*(npz));
IkReal x505=((npy)*(sj21));
IkReal x506=((IkReal(0.182004560000000))*(cj19)*(sj21));
if( IKabs(((gconst49)*(((((npy)*(x504)))+(((IkReal(0.182004560000000))*(cj19)*(x502)))+(((IkReal(-1.00000000000000))*(x502)*(x503)))+(((IkReal(-1.72792099421454e-6))*(x505)))+(((npx)*(x501))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst49)*(((((IkReal(0.182004560000000))*(cj19)*(x505)))+(((npy)*(x501)))+(((IkReal(-1.00000000000000))*(npx)*(x504)))+(((IkReal(-1.00000000000000))*(x503)*(x505)))+(((IkReal(1.72792099421454e-6))*(x502))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j23array[0]=IKatan2(((gconst49)*(((((npy)*(x504)))+(((IkReal(0.182004560000000))*(cj19)*(x502)))+(((IkReal(-1.00000000000000))*(x502)*(x503)))+(((IkReal(-1.72792099421454e-6))*(x505)))+(((npx)*(x501)))))), ((gconst49)*(((((IkReal(0.182004560000000))*(cj19)*(x505)))+(((npy)*(x501)))+(((IkReal(-1.00000000000000))*(npx)*(x504)))+(((IkReal(-1.00000000000000))*(x503)*(x505)))+(((IkReal(1.72792099421454e-6))*(x502)))))));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
for(int ij23 = 0; ij23 < 1; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 1; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[6];
IkReal x507=IKcos(j23);
IkReal x508=IKsin(j23);
IkReal x509=((IkReal(1.00000000000000))*(pp));
IkReal x510=((npz)*(sj21));
IkReal x511=((IkReal(0.0219935900000000))*(cj19));
IkReal x512=((IkReal(0.182004560000000))*(sj19));
IkReal x513=((IkReal(0.0439812400000000))*(cj21));
IkReal x514=((npx)*(x507));
IkReal x515=((npy)*(x508));
IkReal x516=((npy)*(x507));
IkReal x517=((npx)*(x508));
IkReal x518=((IkReal(3.45584198842907e-6))*(x514));
IkReal x519=((IkReal(3.45584198842907e-6))*(x515));
IkReal x520=((x519)+(x509));
evalcond[0]=((IkReal(-0.163958060000000))+(x517)+(x516)+(((IkReal(0.0219935900000000))*(sj19)))+(((IkReal(-0.182004560000000))*(cj19))));
evalcond[1]=((IkReal(0.0609752106658440))+(x518)+(((IkReal(-0.0152168389321252))*(sj19)))+(((IkReal(-1.00000000000000))*(x520)))+(((IkReal(0.0587149237772556))*(cj19))));
evalcond[2]=((((cj21)*(npz)))+(((sj21)*(x514)))+(((IkReal(-1.72792099421454e-6))*(sj21)))+(((IkReal(-1.00000000000000))*(sj21)*(x515))));
evalcond[3]=((IkReal(-1.72792099421454e-6))+(((IkReal(-1.00000000000000))*(x515)))+(x514)+(((IkReal(-1.00000000000000))*(cj21)*(x512)))+(((IkReal(0.0219906200000000))*(cj21)))+(((IkReal(-1.00000000000000))*(cj21)*(x511))));
evalcond[4]=((IkReal(0.0219906200000000))+(((IkReal(-1.72792099421454e-6))*(cj21)))+(((IkReal(-1.00000000000000))*(cj21)*(x515)))+(((cj21)*(x514)))+(((IkReal(-1.00000000000000))*(x510)))+(((IkReal(-1.00000000000000))*(x512)))+(((IkReal(-1.00000000000000))*(x511))));
evalcond[5]=((IkReal(0.00624354505194799))+(x518)+(((x513)*(x515)))+(((IkReal(0.327916120000000))*(x516)))+(((IkReal(-1.00000000000000))*(x520)))+(((IkReal(0.327916120000000))*(x517)))+(((IkReal(0.0439812400000000))*(x510)))+(((IkReal(7.59961079475881e-8))*(cj21)))+(((IkReal(-1.00000000000000))*(x513)*(x514))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j23array[1], cj23array[1], sj23array[1];
bool j23valid[1]={false};
_nj23 = 1;
IkReal x521=((IkReal(800335059375000.))*(pp));
IkReal x522=((cj19)*(npy));
IkReal x523=((IkReal(60830564.0860658))*(sj19));
IkReal x524=((cj19)*(npx));
IkReal x525=((IkReal(12178569690242.2))*(sj19));
if( IKabs(((gconst48)*(((((IkReal(-1.00000000000000))*(npy)*(x521)))+(((IkReal(453480367.518764))*(npx)))+(((IkReal(-1.00000000000000))*(npx)*(x523)))+(((IkReal(46991612007468.5))*(x522)))+(((IkReal(503393945.737654))*(x524)))+(((IkReal(-1.00000000000000))*(npy)*(x525)))+(((IkReal(48800598848651.4))*(npy))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst48)*(((((IkReal(-48800598848651.4))*(npx)))+(((IkReal(503393945.737654))*(x522)))+(((npx)*(x525)))+(((IkReal(-46991612007468.5))*(x524)))+(((IkReal(-1.00000000000000))*(npy)*(x523)))+(((npx)*(x521)))+(((IkReal(453480367.518764))*(npy))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j23array[0]=IKatan2(((gconst48)*(((((IkReal(-1.00000000000000))*(npy)*(x521)))+(((IkReal(453480367.518764))*(npx)))+(((IkReal(-1.00000000000000))*(npx)*(x523)))+(((IkReal(46991612007468.5))*(x522)))+(((IkReal(503393945.737654))*(x524)))+(((IkReal(-1.00000000000000))*(npy)*(x525)))+(((IkReal(48800598848651.4))*(npy)))))), ((gconst48)*(((((IkReal(-48800598848651.4))*(npx)))+(((IkReal(503393945.737654))*(x522)))+(((npx)*(x525)))+(((IkReal(-46991612007468.5))*(x524)))+(((IkReal(-1.00000000000000))*(npy)*(x523)))+(((npx)*(x521)))+(((IkReal(453480367.518764))*(npy)))))));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
for(int ij23 = 0; ij23 < 1; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 1; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[2];
IkReal x526=IKcos(j23);
IkReal x527=IKsin(j23);
evalcond[0]=((IkReal(-0.163958060000000))+(((npx)*(x527)))+(((IkReal(0.0219935900000000))*(sj19)))+(((IkReal(-0.182004560000000))*(cj19)))+(((npy)*(x526))));
evalcond[1]=((IkReal(0.0609752106658440))+(((IkReal(-0.0152168389321252))*(sj19)))+(((IkReal(-3.45584198842907e-6))*(npy)*(x527)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(3.45584198842907e-6))*(npx)*(x526)))+(((IkReal(0.0587149237772556))*(cj19))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst55;
gconst55=IKsign(((IkReal(-0.0219906200000000))+(((IkReal(0.182004560000000))*(sj19)))+(((IkReal(0.0219935900000000))*(cj19)))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(1.00013505758364))*(cj19)))+(((IkReal(8.27646332845550))*(sj19))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst56;
gconst56=IKsign(((IkReal(-0.0219906200000000))+(((IkReal(0.182004560000000))*(sj19)))+(((IkReal(0.0219935900000000))*(cj19)))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(1.00013505758364))*(cj19)))+(((IkReal(8.27646332845550))*(sj19))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14160897184617))+(j19)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.345962978935389))+(((cj23)*(npy)))+(((npx)*(sj23))));
evalcond[2]=((IkReal(0.119690382781911))+(((IkReal(3.45584198842907e-6))*(cj23)*(npx)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-3.45584198842907e-6))*(npy)*(sj23))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((IkReal(3180467350.59437))*(npz))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(5495.59630650589))+(((IkReal(-3180467350.59437))*(cj23)*(npx)))+(((IkReal(3180467350.59437))*(npy)*(sj23))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(3180467350.59437))*(npz)))+IKsqr(((IkReal(5495.59630650589))+(((IkReal(-3180467350.59437))*(cj23)*(npx)))+(((IkReal(3180467350.59437))*(npy)*(sj23)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((IkReal(3180467350.59437))*(npz)), ((IkReal(5495.59630650589))+(((IkReal(-3180467350.59437))*(cj23)*(npx)))+(((IkReal(3180467350.59437))*(npy)*(sj23)))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[5];
IkReal x528=IKsin(j21);
IkReal x529=IKcos(j21);
IkReal x530=((npy)*(sj23));
IkReal x531=((cj23)*(npx));
IkReal x532=((IkReal(1.00000000000000))*(x528));
IkReal x533=((IkReal(0.0439812400000000))*(x529));
evalcond[0]=((((IkReal(-3.14419200000000e-10))*(x528)))+(npz));
evalcond[1]=((((IkReal(-1.00000000000000))*(x530)*(x532)))+(((x528)*(x531)))+(((IkReal(-1.72792099421454e-6))*(x528)))+(((npz)*(x529))));
evalcond[2]=((IkReal(-1.72792099421454e-6))+(((IkReal(3.14419200000000e-10))*(x529)))+(((IkReal(-1.00000000000000))*(x530)))+(x531));
evalcond[3]=((IkReal(3.14419200000000e-10))+(((x529)*(x531)))+(((IkReal(-1.72792099421454e-6))*(x529)))+(((IkReal(-1.00000000000000))*(npz)*(x532)))+(((IkReal(-1.00000000000000))*(x529)*(x530))));
evalcond[4]=((IkReal(0.00624354505194799))+(((IkReal(0.0439812400000000))*(npz)*(x528)))+(((IkReal(-1.00000000000000))*(x531)*(x533)))+(((IkReal(-3.45584198842907e-6))*(x530)))+(((IkReal(0.327916120000000))*(cj23)*(npy)))+(((IkReal(7.59961079475881e-8))*(x529)))+(((IkReal(0.327916120000000))*(npx)*(sj23)))+(((IkReal(-1.00000000000000))*(pp)))+(((x530)*(x533)))+(((IkReal(3.45584198842907e-6))*(x531))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(0.240499242000979))+(j19)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.0180468587837400))+(((cj23)*(npy)))+(((npx)*(sj23))));
evalcond[2]=((IkReal(0.000325689136848653))+(((IkReal(3.45584198842907e-6))*(cj23)*(npx)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-3.45584198842907e-6))*(npy)*(sj23))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((IkReal(-9671726696.86802))*(npz))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-16711.9796098235))+(((IkReal(-9671726696.86802))*(npy)*(sj23)))+(((IkReal(9671726696.86802))*(cj23)*(npx))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-9671726696.86802))*(npz)))+IKsqr(((IkReal(-16711.9796098235))+(((IkReal(-9671726696.86802))*(npy)*(sj23)))+(((IkReal(9671726696.86802))*(cj23)*(npx)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((IkReal(-9671726696.86802))*(npz)), ((IkReal(-16711.9796098235))+(((IkReal(-9671726696.86802))*(npy)*(sj23)))+(((IkReal(9671726696.86802))*(cj23)*(npx)))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[5];
IkReal x534=IKsin(j21);
IkReal x535=IKcos(j21);
IkReal x536=((npy)*(sj23));
IkReal x537=((cj23)*(npx));
IkReal x538=((IkReal(1.00000000000000))*(x534));
IkReal x539=((IkReal(0.0439812400000000))*(x535));
evalcond[0]=((npz)+(((IkReal(1.03394154047367e-10))*(x534))));
evalcond[1]=((((x534)*(x537)))+(((IkReal(-1.00000000000000))*(x536)*(x538)))+(((IkReal(-1.72792099421454e-6))*(x534)))+(((npz)*(x535))));
evalcond[2]=((IkReal(-1.72792099421454e-6))+(((IkReal(-1.03394154047367e-10))*(x535)))+(((IkReal(-1.00000000000000))*(x536)))+(x537));
evalcond[3]=((IkReal(-1.03394154047367e-10))+(((x535)*(x537)))+(((IkReal(-1.00000000000000))*(x535)*(x536)))+(((IkReal(-1.72792099421454e-6))*(x535)))+(((IkReal(-1.00000000000000))*(npz)*(x538))));
evalcond[4]=((IkReal(0.00624354505194799))+(((IkReal(7.59961079475881e-8))*(x535)))+(((IkReal(0.327916120000000))*(cj23)*(npy)))+(((IkReal(-3.45584198842907e-6))*(x536)))+(((x536)*(x539)))+(((IkReal(0.327916120000000))*(npx)*(sj23)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(3.45584198842907e-6))*(x537)))+(((IkReal(0.0439812400000000))*(npz)*(x534)))+(((IkReal(-1.00000000000000))*(x537)*(x539))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(gconst56)*(npz))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst56)*(((IkReal(-1.72792099421454e-6))+(((IkReal(-1.00000000000000))*(npy)*(sj23)))+(((cj23)*(npx))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j21array[0]=IKatan2(((IkReal(-1.00000000000000))*(gconst56)*(npz)), ((gconst56)*(((IkReal(-1.72792099421454e-6))+(((IkReal(-1.00000000000000))*(npy)*(sj23)))+(((cj23)*(npx)))))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[5];
IkReal x540=IKsin(j21);
IkReal x541=IKcos(j21);
IkReal x542=((cj23)*(npx));
IkReal x543=((IkReal(0.182004560000000))*(sj19));
IkReal x544=((npy)*(sj23));
IkReal x545=((IkReal(0.0219935900000000))*(cj19));
IkReal x546=((IkReal(0.0439812400000000))*(x541));
IkReal x547=((IkReal(1.00000000000000))*(x540));
evalcond[0]=((npz)+(((x540)*(x543)))+(((x540)*(x545)))+(((IkReal(-0.0219906200000000))*(x540))));
evalcond[1]=((((IkReal(-1.72792099421454e-6))*(x540)))+(((IkReal(-1.00000000000000))*(x544)*(x547)))+(((npz)*(x541)))+(((x540)*(x542))));
evalcond[2]=((IkReal(-1.72792099421454e-6))+(x542)+(((IkReal(-1.00000000000000))*(x544)))+(((IkReal(-1.00000000000000))*(x541)*(x545)))+(((IkReal(0.0219906200000000))*(x541)))+(((IkReal(-1.00000000000000))*(x541)*(x543))));
evalcond[3]=((IkReal(0.0219906200000000))+(((IkReal(-1.72792099421454e-6))*(x541)))+(((IkReal(-1.00000000000000))*(npz)*(x547)))+(((IkReal(-1.00000000000000))*(x541)*(x544)))+(((x541)*(x542)))+(((IkReal(-1.00000000000000))*(x543)))+(((IkReal(-1.00000000000000))*(x545))));
evalcond[4]=((IkReal(0.00624354505194799))+(((IkReal(0.327916120000000))*(cj23)*(npy)))+(((IkReal(7.59961079475881e-8))*(x541)))+(((x544)*(x546)))+(((IkReal(-1.00000000000000))*(x542)*(x546)))+(((IkReal(-3.45584198842907e-6))*(x544)))+(((IkReal(3.45584198842907e-6))*(x542)))+(((IkReal(0.327916120000000))*(npx)*(sj23)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0439812400000000))*(npz)*(x540))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(gconst55)*(npz))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst55)*(((IkReal(-1.72792099421454e-6))+(((IkReal(-1.00000000000000))*(npy)*(sj23)))+(((cj23)*(npx))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j21array[0]=IKatan2(((IkReal(-1.00000000000000))*(gconst55)*(npz)), ((gconst55)*(((IkReal(-1.72792099421454e-6))+(((IkReal(-1.00000000000000))*(npy)*(sj23)))+(((cj23)*(npx)))))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[5];
IkReal x548=IKsin(j21);
IkReal x549=IKcos(j21);
IkReal x550=((cj23)*(npx));
IkReal x551=((IkReal(0.182004560000000))*(sj19));
IkReal x552=((npy)*(sj23));
IkReal x553=((IkReal(0.0219935900000000))*(cj19));
IkReal x554=((IkReal(0.0439812400000000))*(x549));
IkReal x555=((IkReal(1.00000000000000))*(x548));
evalcond[0]=((npz)+(((x548)*(x551)))+(((IkReal(-0.0219906200000000))*(x548)))+(((x548)*(x553))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x552)*(x555)))+(((npz)*(x549)))+(((x548)*(x550)))+(((IkReal(-1.72792099421454e-6))*(x548))));
evalcond[2]=((IkReal(-1.72792099421454e-6))+(((IkReal(0.0219906200000000))*(x549)))+(((IkReal(-1.00000000000000))*(x549)*(x553)))+(((IkReal(-1.00000000000000))*(x552)))+(((IkReal(-1.00000000000000))*(x549)*(x551)))+(x550));
evalcond[3]=((IkReal(0.0219906200000000))+(((IkReal(-1.72792099421454e-6))*(x549)))+(((IkReal(-1.00000000000000))*(x551)))+(((x549)*(x550)))+(((IkReal(-1.00000000000000))*(x553)))+(((IkReal(-1.00000000000000))*(x549)*(x552)))+(((IkReal(-1.00000000000000))*(npz)*(x555))));
evalcond[4]=((IkReal(0.00624354505194799))+(((IkReal(-3.45584198842907e-6))*(x552)))+(((IkReal(0.327916120000000))*(cj23)*(npy)))+(((x552)*(x554)))+(((IkReal(0.327916120000000))*(npx)*(sj23)))+(((IkReal(7.59961079475881e-8))*(x549)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(3.45584198842907e-6))*(x550)))+(((IkReal(0.0439812400000000))*(npz)*(x548)))+(((IkReal(-1.00000000000000))*(x550)*(x554))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
    }

}

}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x191=((IkReal(1.00000000000000))*(cj23));
IkReal x192=((cj21)*(sj19));
IkReal x193=((sj19)*(sj21));
IkReal x194=((cj23)*(sj21));
IkReal x195=((IkReal(1.00000000000000))*(sj21)*(sj23));
IkReal x196=((IkReal(1.00000000000000))*(cj19)*(sj21));
IkReal x197=((IkReal(1.00000000000000))*(cj19)*(sj23));
IkReal x198=((((IkReal(-1.00000000000000))*(sj19)*(sj23)))+(((cj19)*(cj21)*(cj23))));
IkReal x199=((((sj23)*(x192)))+(((IkReal(-1.00000000000000))*(cj19)*(x191))));
IkReal x200=((((IkReal(-1.00000000000000))*(cj21)*(x197)))+(((IkReal(-1.00000000000000))*(sj19)*(x191))));
IkReal x201=((((IkReal(-1.00000000000000))*(x197)))+(((IkReal(-1.00000000000000))*(x191)*(x192))));
new_r00=((((r01)*(x200)))+(((IkReal(-1.00000000000000))*(r02)*(x196)))+(((r00)*(x198))));
new_r01=((((r10)*(x198)))+(((r11)*(x200)))+(((IkReal(-1.00000000000000))*(r12)*(x196))));
new_r02=((((r20)*(x198)))+(((r21)*(x200)))+(((IkReal(-1.00000000000000))*(r22)*(x196))));
new_r10=((((r00)*(x194)))+(((cj21)*(r02)))+(((IkReal(-1.00000000000000))*(r01)*(x195))));
new_r11=((((cj21)*(r12)))+(((r10)*(x194)))+(((IkReal(-1.00000000000000))*(r11)*(x195))));
new_r12=((((cj21)*(r22)))+(((IkReal(-1.00000000000000))*(r21)*(x195)))+(((r20)*(x194))));
new_r20=((((r00)*(x201)))+(((r01)*(x199)))+(((r02)*(x193))));
new_r21=((((r12)*(x193)))+(((r10)*(x201)))+(((r11)*(x199))));
new_r22=((((r21)*(x199)))+(((r22)*(x193)))+(((r20)*(x201))));
{
IkReal j15array[2], cj15array[2], sj15array[2];
bool j15valid[2]={false};
_nj15 = 2;
sj15array[0]=((IkReal(-1.00000000000000))*(new_r22));
if( sj15array[0] >= -1-IKFAST_SINCOS_THRESH && sj15array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j15valid[0] = j15valid[1] = true;
    j15array[0] = IKasin(sj15array[0]);
    cj15array[0] = IKcos(j15array[0]);
    sj15array[1] = sj15array[0];
    j15array[1] = j15array[0] > 0 ? (IKPI-j15array[0]) : (-IKPI-j15array[0]);
    cj15array[1] = -cj15array[0];
}
else if( isnan(sj15array[0]) )
{
    // probably any value will work
    j15valid[0] = true;
    cj15array[0] = 1; sj15array[0] = 0; j15array[0] = 0;
}
for(int ij15 = 0; ij15 < 2; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 2; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];

{
IkReal dummyeval[1];
IkReal gconst63;
gconst63=IKsign(cj15);
dummyeval[0]=cj15;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst64;
gconst64=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst65;
gconst65=IKsign(((((cj15)*(new_r10)*(new_r12)))+(((cj15)*(new_r00)*(new_r02)))));
dummyeval[0]=((((cj15)*(new_r10)*(new_r12)))+(((cj15)*(new_r00)*(new_r02))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j15)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(1.00000000000000))+(new_r22));
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[5]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[6]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j17array[2], cj17array[2], sj17array[2];
bool j17valid[2]={false};
_nj17 = 2;
if( IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x202=IKatan2(new_r12, new_r02);
j17array[0]=((IkReal(-1.00000000000000))*(x202));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
j17array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x202))));
sj17array[1]=IKsin(j17array[1]);
cj17array[1]=IKcos(j17array[1]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
if( j17array[1] > IKPI )
{
    j17array[1]-=IK2PI;
}
else if( j17array[1] < -IKPI )
{    j17array[1]+=IK2PI;
}
j17valid[1] = true;
for(int ij17 = 0; ij17 < 2; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 2; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[1];
evalcond[0]=((((new_r02)*(IKcos(j17))))+(((IkReal(-1.00000000000000))*(new_r12)*(IKsin(j17)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(((((cj17)*(new_r10)))+(((new_r00)*(sj17))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj17)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj17))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj17)*(new_r10)))+(((new_r00)*(sj17)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj17)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj17)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((cj17)*(new_r10)))+(((new_r00)*(sj17)))), ((((IkReal(-1.00000000000000))*(cj17)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj17)))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[4];
IkReal x203=IKcos(j13);
IkReal x204=((IkReal(1.00000000000000))*(sj17));
IkReal x205=((IkReal(1.00000000000000))*(IKsin(j13)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x203)))+(((IkReal(-1.00000000000000))*(new_r10)*(x204)))+(((cj17)*(new_r00))));
evalcond[1]=((((cj17)*(new_r01)))+(((IkReal(-1.00000000000000))*(x205)))+(((IkReal(-1.00000000000000))*(new_r11)*(x204))));
evalcond[2]=((((new_r01)*(sj17)))+(x203)+(((cj17)*(new_r11))));
evalcond[3]=((((cj17)*(new_r10)))+(((IkReal(-1.00000000000000))*(x205)))+(((new_r00)*(sj17))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j15;
vinfos[1].indices[0] = _ij15[0];
vinfos[1].indices[1] = _ij15[1];
vinfos[1].maxsolutions = _nj15;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j21;
vinfos[4].indices[0] = _ij21[0];
vinfos[4].indices[1] = _ij21[1];
vinfos[4].maxsolutions = _nj21;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
IkReal x206=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j15)), IkReal(6.28318530717959))));
evalcond[1]=x206;
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x206;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j17array[2], cj17array[2], sj17array[2];
bool j17valid[2]={false};
_nj17 = 2;
if( IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x207=IKatan2(new_r12, new_r02);
j17array[0]=((IkReal(-1.00000000000000))*(x207));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
j17array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x207))));
sj17array[1]=IKsin(j17array[1]);
cj17array[1]=IKcos(j17array[1]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
if( j17array[1] > IKPI )
{
    j17array[1]-=IK2PI;
}
else if( j17array[1] < -IKPI )
{    j17array[1]+=IK2PI;
}
j17valid[1] = true;
for(int ij17 = 0; ij17 < 2; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 2; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[1];
evalcond[0]=((((new_r02)*(IKcos(j17))))+(((IkReal(-1.00000000000000))*(new_r12)*(IKsin(j17)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(new_r00)*(sj17)))+(((IkReal(-1.00000000000000))*(cj17)*(new_r10))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r01)*(sj17)))+(((cj17)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r00)*(sj17)))+(((IkReal(-1.00000000000000))*(cj17)*(new_r10)))))+IKsqr(((((new_r01)*(sj17)))+(((cj17)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r00)*(sj17)))+(((IkReal(-1.00000000000000))*(cj17)*(new_r10)))), ((((new_r01)*(sj17)))+(((cj17)*(new_r11)))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[4];
IkReal x208=IKsin(j13);
IkReal x209=((IkReal(1.00000000000000))*(sj17));
IkReal x210=((IkReal(1.00000000000000))*(IKcos(j13)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x210)))+(((IkReal(-1.00000000000000))*(new_r10)*(x209)))+(((cj17)*(new_r00))));
evalcond[1]=((((cj17)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(x209)))+(((IkReal(-1.00000000000000))*(x208))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x210)))+(((new_r01)*(sj17)))+(((cj17)*(new_r11))));
evalcond[3]=((((cj17)*(new_r10)))+(x208)+(((new_r00)*(sj17))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j15;
vinfos[1].indices[0] = _ij15[0];
vinfos[1].indices[1] = _ij15[1];
vinfos[1].maxsolutions = _nj15;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j21;
vinfos[4].indices[0] = _ij21[0];
vinfos[4].indices[1] = _ij21[1];
vinfos[4].maxsolutions = _nj21;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
IkReal x211=((gconst65)*(new_r20)*(sj15));
if( IKabs(((new_r02)*(x211))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r12)*(x211))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j17array[0]=IKatan2(((new_r02)*(x211)), ((new_r12)*(x211)));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[6];
IkReal x212=IKcos(j17);
IkReal x213=IKsin(j17);
IkReal x214=((IkReal(1.00000000000000))*(new_r12));
IkReal x215=((IkReal(1.00000000000000))*(sj15));
IkReal x216=((IkReal(1.00000000000000))*(cj15));
IkReal x217=((cj15)*(x213));
IkReal x218=((new_r02)*(x213));
IkReal x219=((cj15)*(x212));
evalcond[0]=((((IkReal(-1.00000000000000))*(x213)*(x214)))+(((new_r02)*(x212))));
evalcond[1]=((x218)+(((new_r12)*(x212)))+(((IkReal(-1.00000000000000))*(x216))));
evalcond[2]=((((new_r00)*(x217)))+(((new_r10)*(x219)))+(((IkReal(-1.00000000000000))*(new_r20)*(x215))));
evalcond[3]=((((new_r01)*(x217)))+(((new_r11)*(x219)))+(((IkReal(-1.00000000000000))*(new_r21)*(x215))));
evalcond[4]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22)*(x215)))+(((new_r12)*(x219)))+(((new_r02)*(x217))));
evalcond[5]=((((IkReal(-1.00000000000000))*(sj15)*(x212)*(x214)))+(((IkReal(-1.00000000000000))*(x215)*(x218)))+(((IkReal(-1.00000000000000))*(new_r22)*(x216))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst66;
gconst66=IKsign(cj15);
dummyeval[0]=cj15;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj15;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=sj15;
dummyeval[1]=cj15;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x220=((((IkReal(-1.00000000000000))*(new_r12)*(sj17)))+(((cj17)*(new_r02))));
IkReal x221=((((cj17)*(new_r10)))+(((new_r00)*(sj17))));
IkReal x222=((((new_r01)*(sj17)))+(((cj17)*(new_r11))));
IkReal x223=((IkReal(-1.00000000000000))+(((cj17)*(new_r12)))+(((new_r02)*(sj17))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j15)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=x220;
evalcond[3]=x220;
evalcond[4]=x223;
evalcond[5]=x222;
evalcond[6]=x221;
evalcond[7]=x221;
evalcond[8]=x222;
evalcond[9]=x223;
evalcond[10]=((IkReal(-1.00000000000000))*(new_r22));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(((IkReal(-1.00000000000000))*(new_r21)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(new_r20, ((IkReal(-1.00000000000000))*(new_r21)));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[4];
IkReal x224=IKcos(j13);
IkReal x225=((IkReal(1.00000000000000))*(sj17));
IkReal x226=((IkReal(1.00000000000000))*(IKsin(j13)));
evalcond[0]=((new_r21)+(x224));
evalcond[1]=((new_r20)+(((IkReal(-1.00000000000000))*(x226))));
evalcond[2]=((((cj17)*(new_r00)))+(((IkReal(-1.00000000000000))*(x224)))+(((IkReal(-1.00000000000000))*(new_r10)*(x225))));
evalcond[3]=((((cj17)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(x225)))+(((IkReal(-1.00000000000000))*(x226))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j15;
vinfos[1].indices[0] = _ij15[0];
vinfos[1].indices[1] = _ij15[1];
vinfos[1].maxsolutions = _nj15;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j21;
vinfos[4].indices[0] = _ij21[0];
vinfos[4].indices[1] = _ij21[1];
vinfos[4].maxsolutions = _nj21;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x227=((IkReal(1.00000000000000))*(new_r12));
IkReal x228=((new_r02)*(sj17));
IkReal x229=((new_r01)*(sj17));
IkReal x230=((cj17)*(new_r11));
IkReal x231=((new_r00)*(sj17));
IkReal x232=((cj17)*(new_r10));
IkReal x233=((((IkReal(-1.00000000000000))*(sj17)*(x227)))+(((cj17)*(new_r02))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j15, IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=x233;
evalcond[3]=x233;
evalcond[4]=((IkReal(1.00000000000000))+(((cj17)*(new_r12)))+(x228));
evalcond[5]=((x230)+(x229));
evalcond[6]=((x232)+(x231));
evalcond[7]=((((IkReal(-1.00000000000000))*(x231)))+(((IkReal(-1.00000000000000))*(x232))));
evalcond[8]=((((IkReal(-1.00000000000000))*(x229)))+(((IkReal(-1.00000000000000))*(x230))));
evalcond[9]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(cj17)*(x227)))+(((IkReal(-1.00000000000000))*(x228))));
evalcond[10]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r20)))+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r20)), new_r21);
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[4];
IkReal x234=IKsin(j13);
IkReal x235=((IkReal(1.00000000000000))*(sj17));
IkReal x236=((IkReal(1.00000000000000))*(IKcos(j13)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x236)))+(new_r21));
evalcond[1]=((new_r20)+(x234));
evalcond[2]=((((IkReal(-1.00000000000000))*(x236)))+(((cj17)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(x235))));
evalcond[3]=((((cj17)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(x235)))+(((IkReal(-1.00000000000000))*(x234))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j15;
vinfos[1].indices[0] = _ij15[0];
vinfos[1].indices[1] = _ij15[1];
vinfos[1].maxsolutions = _nj15;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j21;
vinfos[4].indices[0] = _ij21[0];
vinfos[4].indices[1] = _ij21[1];
vinfos[4].maxsolutions = _nj21;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x237=((IkReal(1.00000000000000))*(new_r12));
IkReal x238=((new_r02)*(sj17));
IkReal x239=((((IkReal(-1.00000000000000))*(sj17)*(x237)))+(((cj17)*(new_r02))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j15)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(1.00000000000000))+(new_r22));
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=x239;
evalcond[5]=x239;
evalcond[6]=((((cj17)*(new_r12)))+(x238));
evalcond[7]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[8]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[9]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
evalcond[10]=((((IkReal(-1.00000000000000))*(x238)))+(((IkReal(-1.00000000000000))*(cj17)*(x237))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(((((cj17)*(new_r10)))+(((new_r00)*(sj17))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj17)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj17))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj17)*(new_r10)))+(((new_r00)*(sj17)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj17)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj17)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((cj17)*(new_r10)))+(((new_r00)*(sj17)))), ((((IkReal(-1.00000000000000))*(cj17)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj17)))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[4];
IkReal x240=IKcos(j13);
IkReal x241=((IkReal(1.00000000000000))*(sj17));
IkReal x242=((IkReal(1.00000000000000))*(IKsin(j13)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r10)*(x241)))+(((IkReal(-1.00000000000000))*(x240)))+(((cj17)*(new_r00))));
evalcond[1]=((((cj17)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(x241)))+(((IkReal(-1.00000000000000))*(x242))));
evalcond[2]=((((new_r01)*(sj17)))+(x240)+(((cj17)*(new_r11))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x242)))+(((cj17)*(new_r10)))+(((new_r00)*(sj17))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j15;
vinfos[1].indices[0] = _ij15[0];
vinfos[1].indices[1] = _ij15[1];
vinfos[1].maxsolutions = _nj15;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j21;
vinfos[4].indices[0] = _ij21[0];
vinfos[4].indices[1] = _ij21[1];
vinfos[4].maxsolutions = _nj21;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x243=((IkReal(-1.00000000000000))+(new_r22));
IkReal x244=((((IkReal(-1.00000000000000))*(new_r12)*(sj17)))+(((cj17)*(new_r02))));
IkReal x245=((((cj17)*(new_r12)))+(((new_r02)*(sj17))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j15)), IkReal(6.28318530717959))));
evalcond[1]=x243;
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=x244;
evalcond[5]=x244;
evalcond[6]=x245;
evalcond[7]=new_r20;
evalcond[8]=new_r21;
evalcond[9]=x243;
evalcond[10]=x245;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(new_r00)*(sj17)))+(((IkReal(-1.00000000000000))*(cj17)*(new_r10))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r01)*(sj17)))+(((cj17)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r00)*(sj17)))+(((IkReal(-1.00000000000000))*(cj17)*(new_r10)))))+IKsqr(((((new_r01)*(sj17)))+(((cj17)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r00)*(sj17)))+(((IkReal(-1.00000000000000))*(cj17)*(new_r10)))), ((((new_r01)*(sj17)))+(((cj17)*(new_r11)))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[4];
IkReal x246=IKsin(j13);
IkReal x247=((IkReal(1.00000000000000))*(sj17));
IkReal x248=((IkReal(1.00000000000000))*(IKcos(j13)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r10)*(x247)))+(((IkReal(-1.00000000000000))*(x248)))+(((cj17)*(new_r00))));
evalcond[1]=((((cj17)*(new_r01)))+(((IkReal(-1.00000000000000))*(x246)))+(((IkReal(-1.00000000000000))*(new_r11)*(x247))));
evalcond[2]=((((new_r01)*(sj17)))+(((IkReal(-1.00000000000000))*(x248)))+(((cj17)*(new_r11))));
evalcond[3]=((((cj17)*(new_r10)))+(((new_r00)*(sj17)))+(x246));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j15;
vinfos[1].indices[0] = _ij15[0];
vinfos[1].indices[1] = _ij15[1];
vinfos[1].maxsolutions = _nj15;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j21;
vinfos[4].indices[0] = _ij21[0];
vinfos[4].indices[1] = _ij21[1];
vinfos[4].maxsolutions = _nj21;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(((((IKabs(sj15) != 0)?((IkReal)1/(sj15)):(IkReal)1.0e30))*(((((cj17)*(new_r10)))+(((new_r00)*(sj17))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj15) != 0)?((IkReal)1/(cj15)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(sj15) != 0)?((IkReal)1/(sj15)):(IkReal)1.0e30))*(((((cj17)*(new_r10)))+(((new_r00)*(sj17)))))))+IKsqr(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj15) != 0)?((IkReal)1/(cj15)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((IKabs(sj15) != 0)?((IkReal)1/(sj15)):(IkReal)1.0e30))*(((((cj17)*(new_r10)))+(((new_r00)*(sj17)))))), ((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj15) != 0)?((IkReal)1/(cj15)):(IkReal)1.0e30))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x249=IKcos(j13);
IkReal x250=IKsin(j13);
IkReal x251=((IkReal(1.00000000000000))*(sj15));
IkReal x252=((cj17)*(new_r10));
IkReal x253=((new_r00)*(sj17));
IkReal x254=((new_r01)*(sj17));
IkReal x255=((cj17)*(new_r11));
IkReal x256=((IkReal(1.00000000000000))*(sj17));
IkReal x257=((IkReal(1.00000000000000))*(cj15));
IkReal x258=((IkReal(1.00000000000000))*(x249));
IkReal x259=((IkReal(1.00000000000000))*(x250));
evalcond[0]=((new_r21)+(((cj15)*(x249))));
evalcond[1]=((new_r20)+(((IkReal(-1.00000000000000))*(x250)*(x257))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x258)))+(((cj17)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(x256))));
evalcond[3]=((((cj17)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(x256)))+(((IkReal(-1.00000000000000))*(x259))));
evalcond[4]=((x254)+(x255)+(((sj15)*(x249))));
evalcond[5]=((x252)+(x253)+(((IkReal(-1.00000000000000))*(x250)*(x251))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r20)*(x257)))+(x250)+(((IkReal(-1.00000000000000))*(x251)*(x252)))+(((IkReal(-1.00000000000000))*(x251)*(x253))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x251)*(x255)))+(((IkReal(-1.00000000000000))*(x258)))+(((IkReal(-1.00000000000000))*(x251)*(x254)))+(((IkReal(-1.00000000000000))*(new_r21)*(x257))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j15;
vinfos[1].indices[0] = _ij15[0];
vinfos[1].indices[1] = _ij15[1];
vinfos[1].maxsolutions = _nj15;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j21;
vinfos[4].indices[0] = _ij21[0];
vinfos[4].indices[1] = _ij21[1];
vinfos[4].maxsolutions = _nj21;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(((((cj17)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj17))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj15) != 0)?((IkReal)1/(cj15)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj17)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj17)))))+IKsqr(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj15) != 0)?((IkReal)1/(cj15)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((cj17)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj17)))), ((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj15) != 0)?((IkReal)1/(cj15)):(IkReal)1.0e30))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x260=IKcos(j13);
IkReal x261=IKsin(j13);
IkReal x262=((IkReal(1.00000000000000))*(sj15));
IkReal x263=((cj17)*(new_r10));
IkReal x264=((new_r00)*(sj17));
IkReal x265=((new_r01)*(sj17));
IkReal x266=((cj17)*(new_r11));
IkReal x267=((IkReal(1.00000000000000))*(sj17));
IkReal x268=((IkReal(1.00000000000000))*(cj15));
IkReal x269=((IkReal(1.00000000000000))*(x260));
IkReal x270=((IkReal(1.00000000000000))*(x261));
evalcond[0]=((new_r21)+(((cj15)*(x260))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x261)*(x268)))+(new_r20));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r10)*(x267)))+(((IkReal(-1.00000000000000))*(x269)))+(((cj17)*(new_r00))));
evalcond[3]=((((cj17)*(new_r01)))+(((IkReal(-1.00000000000000))*(x270)))+(((IkReal(-1.00000000000000))*(new_r11)*(x267))));
evalcond[4]=((((sj15)*(x260)))+(x265)+(x266));
evalcond[5]=((((IkReal(-1.00000000000000))*(x261)*(x262)))+(x264)+(x263));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r20)*(x268)))+(((IkReal(-1.00000000000000))*(x262)*(x263)))+(x261)+(((IkReal(-1.00000000000000))*(x262)*(x264))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r21)*(x268)))+(((IkReal(-1.00000000000000))*(x269)))+(((IkReal(-1.00000000000000))*(x262)*(x265)))+(((IkReal(-1.00000000000000))*(x262)*(x266))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j15;
vinfos[1].indices[0] = _ij15[0];
vinfos[1].indices[1] = _ij15[1];
vinfos[1].maxsolutions = _nj15;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j21;
vinfos[4].indices[0] = _ij21[0];
vinfos[4].indices[1] = _ij21[1];
vinfos[4].maxsolutions = _nj21;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(((gconst66)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst66)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j13array[0]=IKatan2(((gconst66)*(new_r20)), ((IkReal(-1.00000000000000))*(gconst66)*(new_r21)));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x271=IKcos(j13);
IkReal x272=IKsin(j13);
IkReal x273=((IkReal(1.00000000000000))*(sj15));
IkReal x274=((cj17)*(new_r10));
IkReal x275=((new_r00)*(sj17));
IkReal x276=((new_r01)*(sj17));
IkReal x277=((cj17)*(new_r11));
IkReal x278=((IkReal(1.00000000000000))*(sj17));
IkReal x279=((IkReal(1.00000000000000))*(cj15));
IkReal x280=((IkReal(1.00000000000000))*(x271));
IkReal x281=((IkReal(1.00000000000000))*(x272));
evalcond[0]=((new_r21)+(((cj15)*(x271))));
evalcond[1]=((new_r20)+(((IkReal(-1.00000000000000))*(x272)*(x279))));
evalcond[2]=((((cj17)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(x278)))+(((IkReal(-1.00000000000000))*(x280))));
evalcond[3]=((((cj17)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(x278)))+(((IkReal(-1.00000000000000))*(x281))));
evalcond[4]=((((sj15)*(x271)))+(x276)+(x277));
evalcond[5]=((((IkReal(-1.00000000000000))*(x272)*(x273)))+(x274)+(x275));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r20)*(x279)))+(((IkReal(-1.00000000000000))*(x273)*(x275)))+(x272)+(((IkReal(-1.00000000000000))*(x273)*(x274))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x273)*(x276)))+(((IkReal(-1.00000000000000))*(x273)*(x277)))+(((IkReal(-1.00000000000000))*(new_r21)*(x279)))+(((IkReal(-1.00000000000000))*(x280))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j15;
vinfos[1].indices[0] = _ij15[0];
vinfos[1].indices[1] = _ij15[1];
vinfos[1].maxsolutions = _nj15;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j21;
vinfos[4].indices[0] = _ij21[0];
vinfos[4].indices[1] = _ij21[1];
vinfos[4].maxsolutions = _nj21;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
IkReal x282=((cj15)*(gconst64));
if( IKabs(((new_r02)*(x282))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r12)*(x282))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j17array[0]=IKatan2(((new_r02)*(x282)), ((new_r12)*(x282)));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[6];
IkReal x283=IKcos(j17);
IkReal x284=IKsin(j17);
IkReal x285=((IkReal(1.00000000000000))*(new_r12));
IkReal x286=((IkReal(1.00000000000000))*(sj15));
IkReal x287=((IkReal(1.00000000000000))*(cj15));
IkReal x288=((cj15)*(x284));
IkReal x289=((new_r02)*(x284));
IkReal x290=((cj15)*(x283));
evalcond[0]=((((new_r02)*(x283)))+(((IkReal(-1.00000000000000))*(x284)*(x285))));
evalcond[1]=((x289)+(((IkReal(-1.00000000000000))*(x287)))+(((new_r12)*(x283))));
evalcond[2]=((((new_r00)*(x288)))+(((IkReal(-1.00000000000000))*(new_r20)*(x286)))+(((new_r10)*(x290))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r21)*(x286)))+(((new_r11)*(x290)))+(((new_r01)*(x288))));
evalcond[4]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22)*(x286)))+(((new_r12)*(x290)))+(((new_r02)*(x288))));
evalcond[5]=((((IkReal(-1.00000000000000))*(sj15)*(x283)*(x285)))+(((IkReal(-1.00000000000000))*(x286)*(x289)))+(((IkReal(-1.00000000000000))*(new_r22)*(x287))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst66;
gconst66=IKsign(cj15);
dummyeval[0]=cj15;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj15;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=sj15;
dummyeval[1]=cj15;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x291=((((IkReal(-1.00000000000000))*(new_r12)*(sj17)))+(((cj17)*(new_r02))));
IkReal x292=((((cj17)*(new_r10)))+(((new_r00)*(sj17))));
IkReal x293=((((new_r01)*(sj17)))+(((cj17)*(new_r11))));
IkReal x294=((IkReal(-1.00000000000000))+(((cj17)*(new_r12)))+(((new_r02)*(sj17))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j15)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=x291;
evalcond[3]=x291;
evalcond[4]=x294;
evalcond[5]=x293;
evalcond[6]=x292;
evalcond[7]=x292;
evalcond[8]=x293;
evalcond[9]=x294;
evalcond[10]=((IkReal(-1.00000000000000))*(new_r22));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(((IkReal(-1.00000000000000))*(new_r21)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(new_r20, ((IkReal(-1.00000000000000))*(new_r21)));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[4];
IkReal x295=IKcos(j13);
IkReal x296=((IkReal(1.00000000000000))*(sj17));
IkReal x297=((IkReal(1.00000000000000))*(IKsin(j13)));
evalcond[0]=((new_r21)+(x295));
evalcond[1]=((new_r20)+(((IkReal(-1.00000000000000))*(x297))));
evalcond[2]=((((cj17)*(new_r00)))+(((IkReal(-1.00000000000000))*(x295)))+(((IkReal(-1.00000000000000))*(new_r10)*(x296))));
evalcond[3]=((((cj17)*(new_r01)))+(((IkReal(-1.00000000000000))*(x297)))+(((IkReal(-1.00000000000000))*(new_r11)*(x296))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j15;
vinfos[1].indices[0] = _ij15[0];
vinfos[1].indices[1] = _ij15[1];
vinfos[1].maxsolutions = _nj15;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j21;
vinfos[4].indices[0] = _ij21[0];
vinfos[4].indices[1] = _ij21[1];
vinfos[4].maxsolutions = _nj21;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x298=((IkReal(1.00000000000000))*(new_r12));
IkReal x299=((new_r02)*(sj17));
IkReal x300=((new_r01)*(sj17));
IkReal x301=((cj17)*(new_r11));
IkReal x302=((new_r00)*(sj17));
IkReal x303=((cj17)*(new_r10));
IkReal x304=((((IkReal(-1.00000000000000))*(sj17)*(x298)))+(((cj17)*(new_r02))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j15, IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=x304;
evalcond[3]=x304;
evalcond[4]=((IkReal(1.00000000000000))+(((cj17)*(new_r12)))+(x299));
evalcond[5]=((x300)+(x301));
evalcond[6]=((x302)+(x303));
evalcond[7]=((((IkReal(-1.00000000000000))*(x303)))+(((IkReal(-1.00000000000000))*(x302))));
evalcond[8]=((((IkReal(-1.00000000000000))*(x300)))+(((IkReal(-1.00000000000000))*(x301))));
evalcond[9]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(cj17)*(x298)))+(((IkReal(-1.00000000000000))*(x299))));
evalcond[10]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r20)))+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r20)), new_r21);
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[4];
IkReal x305=IKsin(j13);
IkReal x306=((IkReal(1.00000000000000))*(sj17));
IkReal x307=((IkReal(1.00000000000000))*(IKcos(j13)));
evalcond[0]=((new_r21)+(((IkReal(-1.00000000000000))*(x307))));
evalcond[1]=((x305)+(new_r20));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r10)*(x306)))+(((IkReal(-1.00000000000000))*(x307)))+(((cj17)*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x305)))+(((cj17)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(x306))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j15;
vinfos[1].indices[0] = _ij15[0];
vinfos[1].indices[1] = _ij15[1];
vinfos[1].maxsolutions = _nj15;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j21;
vinfos[4].indices[0] = _ij21[0];
vinfos[4].indices[1] = _ij21[1];
vinfos[4].maxsolutions = _nj21;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x308=((IkReal(1.00000000000000))*(new_r12));
IkReal x309=((new_r02)*(sj17));
IkReal x310=((((IkReal(-1.00000000000000))*(sj17)*(x308)))+(((cj17)*(new_r02))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j15)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(1.00000000000000))+(new_r22));
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=x310;
evalcond[5]=x310;
evalcond[6]=((((cj17)*(new_r12)))+(x309));
evalcond[7]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[8]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[9]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
evalcond[10]=((((IkReal(-1.00000000000000))*(cj17)*(x308)))+(((IkReal(-1.00000000000000))*(x309))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(((((cj17)*(new_r10)))+(((new_r00)*(sj17))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj17)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj17))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj17)*(new_r10)))+(((new_r00)*(sj17)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj17)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj17)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((cj17)*(new_r10)))+(((new_r00)*(sj17)))), ((((IkReal(-1.00000000000000))*(cj17)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj17)))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[4];
IkReal x311=IKcos(j13);
IkReal x312=((IkReal(1.00000000000000))*(sj17));
IkReal x313=((IkReal(1.00000000000000))*(IKsin(j13)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r10)*(x312)))+(((IkReal(-1.00000000000000))*(x311)))+(((cj17)*(new_r00))));
evalcond[1]=((((cj17)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(x312)))+(((IkReal(-1.00000000000000))*(x313))));
evalcond[2]=((((new_r01)*(sj17)))+(x311)+(((cj17)*(new_r11))));
evalcond[3]=((((cj17)*(new_r10)))+(((new_r00)*(sj17)))+(((IkReal(-1.00000000000000))*(x313))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j15;
vinfos[1].indices[0] = _ij15[0];
vinfos[1].indices[1] = _ij15[1];
vinfos[1].maxsolutions = _nj15;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j21;
vinfos[4].indices[0] = _ij21[0];
vinfos[4].indices[1] = _ij21[1];
vinfos[4].maxsolutions = _nj21;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x314=((IkReal(-1.00000000000000))+(new_r22));
IkReal x315=((((IkReal(-1.00000000000000))*(new_r12)*(sj17)))+(((cj17)*(new_r02))));
IkReal x316=((((cj17)*(new_r12)))+(((new_r02)*(sj17))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j15)), IkReal(6.28318530717959))));
evalcond[1]=x314;
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=x315;
evalcond[5]=x315;
evalcond[6]=x316;
evalcond[7]=new_r20;
evalcond[8]=new_r21;
evalcond[9]=x314;
evalcond[10]=x316;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(new_r00)*(sj17)))+(((IkReal(-1.00000000000000))*(cj17)*(new_r10))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r01)*(sj17)))+(((cj17)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r00)*(sj17)))+(((IkReal(-1.00000000000000))*(cj17)*(new_r10)))))+IKsqr(((((new_r01)*(sj17)))+(((cj17)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r00)*(sj17)))+(((IkReal(-1.00000000000000))*(cj17)*(new_r10)))), ((((new_r01)*(sj17)))+(((cj17)*(new_r11)))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[4];
IkReal x317=IKsin(j13);
IkReal x318=((IkReal(1.00000000000000))*(sj17));
IkReal x319=((IkReal(1.00000000000000))*(IKcos(j13)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x319)))+(((cj17)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(x318))));
evalcond[1]=((((cj17)*(new_r01)))+(((IkReal(-1.00000000000000))*(x317)))+(((IkReal(-1.00000000000000))*(new_r11)*(x318))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x319)))+(((new_r01)*(sj17)))+(((cj17)*(new_r11))));
evalcond[3]=((x317)+(((cj17)*(new_r10)))+(((new_r00)*(sj17))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j15;
vinfos[1].indices[0] = _ij15[0];
vinfos[1].indices[1] = _ij15[1];
vinfos[1].maxsolutions = _nj15;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j21;
vinfos[4].indices[0] = _ij21[0];
vinfos[4].indices[1] = _ij21[1];
vinfos[4].maxsolutions = _nj21;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(((((IKabs(sj15) != 0)?((IkReal)1/(sj15)):(IkReal)1.0e30))*(((((cj17)*(new_r10)))+(((new_r00)*(sj17))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj15) != 0)?((IkReal)1/(cj15)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(sj15) != 0)?((IkReal)1/(sj15)):(IkReal)1.0e30))*(((((cj17)*(new_r10)))+(((new_r00)*(sj17)))))))+IKsqr(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj15) != 0)?((IkReal)1/(cj15)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((IKabs(sj15) != 0)?((IkReal)1/(sj15)):(IkReal)1.0e30))*(((((cj17)*(new_r10)))+(((new_r00)*(sj17)))))), ((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj15) != 0)?((IkReal)1/(cj15)):(IkReal)1.0e30))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x320=IKcos(j13);
IkReal x321=IKsin(j13);
IkReal x322=((IkReal(1.00000000000000))*(sj15));
IkReal x323=((cj17)*(new_r10));
IkReal x324=((new_r00)*(sj17));
IkReal x325=((new_r01)*(sj17));
IkReal x326=((cj17)*(new_r11));
IkReal x327=((IkReal(1.00000000000000))*(sj17));
IkReal x328=((IkReal(1.00000000000000))*(cj15));
IkReal x329=((IkReal(1.00000000000000))*(x320));
IkReal x330=((IkReal(1.00000000000000))*(x321));
evalcond[0]=((new_r21)+(((cj15)*(x320))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x321)*(x328)))+(new_r20));
evalcond[2]=((((IkReal(-1.00000000000000))*(x329)))+(((IkReal(-1.00000000000000))*(new_r10)*(x327)))+(((cj17)*(new_r00))));
evalcond[3]=((((cj17)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(x327)))+(((IkReal(-1.00000000000000))*(x330))));
evalcond[4]=((x325)+(x326)+(((sj15)*(x320))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x321)*(x322)))+(x324)+(x323));
evalcond[6]=((((IkReal(-1.00000000000000))*(x322)*(x324)))+(((IkReal(-1.00000000000000))*(new_r20)*(x328)))+(x321)+(((IkReal(-1.00000000000000))*(x322)*(x323))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x329)))+(((IkReal(-1.00000000000000))*(x322)*(x325)))+(((IkReal(-1.00000000000000))*(x322)*(x326)))+(((IkReal(-1.00000000000000))*(new_r21)*(x328))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j15;
vinfos[1].indices[0] = _ij15[0];
vinfos[1].indices[1] = _ij15[1];
vinfos[1].maxsolutions = _nj15;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j21;
vinfos[4].indices[0] = _ij21[0];
vinfos[4].indices[1] = _ij21[1];
vinfos[4].maxsolutions = _nj21;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(((((cj17)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj17))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj15) != 0)?((IkReal)1/(cj15)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj17)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj17)))))+IKsqr(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj15) != 0)?((IkReal)1/(cj15)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((cj17)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj17)))), ((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj15) != 0)?((IkReal)1/(cj15)):(IkReal)1.0e30))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x331=IKcos(j13);
IkReal x332=IKsin(j13);
IkReal x333=((IkReal(1.00000000000000))*(sj15));
IkReal x334=((cj17)*(new_r10));
IkReal x335=((new_r00)*(sj17));
IkReal x336=((new_r01)*(sj17));
IkReal x337=((cj17)*(new_r11));
IkReal x338=((IkReal(1.00000000000000))*(sj17));
IkReal x339=((IkReal(1.00000000000000))*(cj15));
IkReal x340=((IkReal(1.00000000000000))*(x331));
IkReal x341=((IkReal(1.00000000000000))*(x332));
evalcond[0]=((((cj15)*(x331)))+(new_r21));
evalcond[1]=((new_r20)+(((IkReal(-1.00000000000000))*(x332)*(x339))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x340)))+(((cj17)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(x338))));
evalcond[3]=((((cj17)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(x338)))+(((IkReal(-1.00000000000000))*(x341))));
evalcond[4]=((x337)+(x336)+(((sj15)*(x331))));
evalcond[5]=((x335)+(x334)+(((IkReal(-1.00000000000000))*(x332)*(x333))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x333)*(x334)))+(((IkReal(-1.00000000000000))*(new_r20)*(x339)))+(x332)+(((IkReal(-1.00000000000000))*(x333)*(x335))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x333)*(x337)))+(((IkReal(-1.00000000000000))*(x333)*(x336)))+(((IkReal(-1.00000000000000))*(x340)))+(((IkReal(-1.00000000000000))*(new_r21)*(x339))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j15;
vinfos[1].indices[0] = _ij15[0];
vinfos[1].indices[1] = _ij15[1];
vinfos[1].maxsolutions = _nj15;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j21;
vinfos[4].indices[0] = _ij21[0];
vinfos[4].indices[1] = _ij21[1];
vinfos[4].maxsolutions = _nj21;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(((gconst66)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst66)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j13array[0]=IKatan2(((gconst66)*(new_r20)), ((IkReal(-1.00000000000000))*(gconst66)*(new_r21)));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x342=IKcos(j13);
IkReal x343=IKsin(j13);
IkReal x344=((IkReal(1.00000000000000))*(sj15));
IkReal x345=((cj17)*(new_r10));
IkReal x346=((new_r00)*(sj17));
IkReal x347=((new_r01)*(sj17));
IkReal x348=((cj17)*(new_r11));
IkReal x349=((IkReal(1.00000000000000))*(sj17));
IkReal x350=((IkReal(1.00000000000000))*(cj15));
IkReal x351=((IkReal(1.00000000000000))*(x342));
IkReal x352=((IkReal(1.00000000000000))*(x343));
evalcond[0]=((new_r21)+(((cj15)*(x342))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x343)*(x350)))+(new_r20));
evalcond[2]=((((IkReal(-1.00000000000000))*(x351)))+(((cj17)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(x349))));
evalcond[3]=((((cj17)*(new_r01)))+(((IkReal(-1.00000000000000))*(x352)))+(((IkReal(-1.00000000000000))*(new_r11)*(x349))));
evalcond[4]=((x347)+(x348)+(((sj15)*(x342))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x343)*(x344)))+(x346)+(x345));
evalcond[6]=((((IkReal(-1.00000000000000))*(x344)*(x346)))+(((IkReal(-1.00000000000000))*(x344)*(x345)))+(((IkReal(-1.00000000000000))*(new_r20)*(x350)))+(x343));
evalcond[7]=((((IkReal(-1.00000000000000))*(x351)))+(((IkReal(-1.00000000000000))*(x344)*(x348)))+(((IkReal(-1.00000000000000))*(new_r21)*(x350)))+(((IkReal(-1.00000000000000))*(x344)*(x347))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j15;
vinfos[1].indices[0] = _ij15[0];
vinfos[1].indices[1] = _ij15[1];
vinfos[1].maxsolutions = _nj15;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j21;
vinfos[4].indices[0] = _ij21[0];
vinfos[4].indices[1] = _ij21[1];
vinfos[4].maxsolutions = _nj21;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(((gconst63)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst63)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j13array[0]=IKatan2(((gconst63)*(new_r20)), ((IkReal(-1.00000000000000))*(gconst63)*(new_r21)));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[2];
evalcond[0]=((new_r21)+(((cj15)*(IKcos(j13)))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj15)*(IKsin(j13))))+(new_r20));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst67;
gconst67=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst68;
gconst68=IKsign(((((IkReal(-1.00000000000000))*(new_r01)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r11)*(new_r12)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r01)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r11)*(new_r12))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
IkReal x353=((cj13)*(gconst68)*(sj15));
if( IKabs(((new_r02)*(x353))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r12)*(x353))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j17array[0]=IKatan2(((new_r02)*(x353)), ((new_r12)*(x353)));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[12];
IkReal x354=IKcos(j17);
IkReal x355=IKsin(j17);
IkReal x356=((IkReal(1.00000000000000))*(cj13));
IkReal x357=((IkReal(1.00000000000000))*(sj15));
IkReal x358=((IkReal(1.00000000000000))*(cj15));
IkReal x359=((new_r00)*(x355));
IkReal x360=((new_r10)*(x354));
IkReal x361=((new_r11)*(x354));
IkReal x362=((new_r01)*(x355));
IkReal x363=((new_r02)*(x355));
IkReal x364=((new_r12)*(x354));
IkReal x365=((IkReal(1.00000000000000))*(x355));
evalcond[0]=((((new_r02)*(x354)))+(((IkReal(-1.00000000000000))*(new_r12)*(x365))));
evalcond[1]=((x363)+(x364)+(((IkReal(-1.00000000000000))*(x358))));
evalcond[2]=((((new_r00)*(x354)))+(((IkReal(-1.00000000000000))*(x356)))+(((IkReal(-1.00000000000000))*(new_r10)*(x365))));
evalcond[3]=((((new_r01)*(x354)))+(((IkReal(-1.00000000000000))*(sj13)))+(((IkReal(-1.00000000000000))*(new_r11)*(x365))));
evalcond[4]=((x361)+(x362)+(((cj13)*(sj15))));
evalcond[5]=((((IkReal(-1.00000000000000))*(sj13)*(x357)))+(x360)+(x359));
evalcond[6]=((((cj15)*(x359)))+(((IkReal(-1.00000000000000))*(new_r20)*(x357)))+(((cj15)*(x360))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r21)*(x357)))+(((cj15)*(x362)))+(((cj15)*(x361))));
evalcond[8]=((IkReal(-1.00000000000000))+(((cj15)*(x364)))+(((IkReal(-1.00000000000000))*(new_r22)*(x357)))+(((cj15)*(x363))));
evalcond[9]=((((IkReal(-1.00000000000000))*(x357)*(x363)))+(((IkReal(-1.00000000000000))*(x357)*(x364)))+(((IkReal(-1.00000000000000))*(new_r22)*(x358))));
evalcond[10]=((((IkReal(-1.00000000000000))*(new_r20)*(x358)))+(((IkReal(-1.00000000000000))*(x357)*(x359)))+(((IkReal(-1.00000000000000))*(x357)*(x360)))+(sj13));
evalcond[11]=((((IkReal(-1.00000000000000))*(x357)*(x362)))+(((IkReal(-1.00000000000000))*(x356)))+(((IkReal(-1.00000000000000))*(new_r21)*(x358)))+(((IkReal(-1.00000000000000))*(x357)*(x361))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j15;
vinfos[1].indices[0] = _ij15[0];
vinfos[1].indices[1] = _ij15[1];
vinfos[1].maxsolutions = _nj15;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j21;
vinfos[4].indices[0] = _ij21[0];
vinfos[4].indices[1] = _ij21[1];
vinfos[4].maxsolutions = _nj21;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
IkReal x366=((cj15)*(gconst67));
if( IKabs(((new_r02)*(x366))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r12)*(x366))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j17array[0]=IKatan2(((new_r02)*(x366)), ((new_r12)*(x366)));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[12];
IkReal x367=IKcos(j17);
IkReal x368=IKsin(j17);
IkReal x369=((IkReal(1.00000000000000))*(cj13));
IkReal x370=((IkReal(1.00000000000000))*(sj15));
IkReal x371=((IkReal(1.00000000000000))*(cj15));
IkReal x372=((new_r00)*(x368));
IkReal x373=((new_r10)*(x367));
IkReal x374=((new_r11)*(x367));
IkReal x375=((new_r01)*(x368));
IkReal x376=((new_r02)*(x368));
IkReal x377=((new_r12)*(x367));
IkReal x378=((IkReal(1.00000000000000))*(x368));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r12)*(x378)))+(((new_r02)*(x367))));
evalcond[1]=((x377)+(x376)+(((IkReal(-1.00000000000000))*(x371))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x369)))+(((new_r00)*(x367)))+(((IkReal(-1.00000000000000))*(new_r10)*(x378))));
evalcond[3]=((((IkReal(-1.00000000000000))*(sj13)))+(((new_r01)*(x367)))+(((IkReal(-1.00000000000000))*(new_r11)*(x378))));
evalcond[4]=((x375)+(x374)+(((cj13)*(sj15))));
evalcond[5]=((x373)+(x372)+(((IkReal(-1.00000000000000))*(sj13)*(x370))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r20)*(x370)))+(((cj15)*(x373)))+(((cj15)*(x372))));
evalcond[7]=((((cj15)*(x374)))+(((cj15)*(x375)))+(((IkReal(-1.00000000000000))*(new_r21)*(x370))));
evalcond[8]=((IkReal(-1.00000000000000))+(((cj15)*(x377)))+(((IkReal(-1.00000000000000))*(new_r22)*(x370)))+(((cj15)*(x376))));
evalcond[9]=((((IkReal(-1.00000000000000))*(x370)*(x376)))+(((IkReal(-1.00000000000000))*(x370)*(x377)))+(((IkReal(-1.00000000000000))*(new_r22)*(x371))));
evalcond[10]=((((IkReal(-1.00000000000000))*(new_r20)*(x371)))+(((IkReal(-1.00000000000000))*(x370)*(x372)))+(sj13)+(((IkReal(-1.00000000000000))*(x370)*(x373))));
evalcond[11]=((((IkReal(-1.00000000000000))*(x369)))+(((IkReal(-1.00000000000000))*(x370)*(x374)))+(((IkReal(-1.00000000000000))*(x370)*(x375)))+(((IkReal(-1.00000000000000))*(new_r21)*(x371))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j15;
vinfos[1].indices[0] = _ij15[0];
vinfos[1].indices[1] = _ij15[1];
vinfos[1].maxsolutions = _nj15;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j19;
vinfos[3].indices[0] = _ij19[0];
vinfos[3].indices[1] = _ij19[1];
vinfos[3].maxsolutions = _nj19;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j21;
vinfos[4].indices[0] = _ij21[0];
vinfos[4].indices[1] = _ij21[1];
vinfos[4].maxsolutions = _nj21;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots8(IkReal rawcoeffs[8+1], IkReal rawroots[8], int& numroots)
{
    using std::complex;
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[8];
    const int maxsteps = 110;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[8];
    IkReal err[8];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[8] = {false};
    for(int i = 0; i < 8; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 8; ++j) {
                if( abs(roots[i]-roots[j]) < 8*tolsqrt ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "15ed834d87b04a370ac0003a8308bde1"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
