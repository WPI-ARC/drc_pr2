/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 61 generated on 2013-04-03 11:34:23.411416
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==61);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67;
x0=IKsin(j[0]);
x1=IKcos(j[2]);
x2=IKsin(j[1]);
x3=IKcos(j[0]);
x4=IKsin(j[2]);
x5=IKcos(j[4]);
x6=IKcos(j[3]);
x7=IKsin(j[4]);
x8=IKsin(j[3]);
x9=IKcos(j[1]);
x10=IKsin(j[6]);
x11=IKsin(j[5]);
x12=IKcos(j[5]);
x13=IKcos(j[6]);
x14=((IkReal(0.176987500000000))*(x7));
x15=((IkReal(1.00000000000000))*(x12));
x16=((IkReal(1.00000000000000))*(x4));
x17=((IkReal(0.0300000000000000))*(x4));
x18=((IkReal(1.00000000000000))*(x8));
x19=((IkReal(1.00000000000000))*(x11));
x20=((IkReal(1.00000000000000))*(x6));
x21=((IkReal(0.176987500000000))*(x8));
x22=((IkReal(0.176987500000000))*(x5));
x23=((IkReal(0.300710000000000))*(x3));
x24=((x2)*(x6));
x25=((x1)*(x3));
x26=((x0)*(x9));
x27=((x6)*(x9));
x28=((x0)*(x1));
x29=((x1)*(x9));
x30=((x2)*(x8));
x31=((x2)*(x4));
x32=((x2)*(x3));
x33=((x0)*(x2));
x34=((IkReal(0.0300000000000000))*(x25));
x35=((IkReal(0.0300000000000000))*(x28));
x36=((x3)*(x8)*(x9));
x37=((x4)*(x8)*(x9));
x38=((x18)*(x26));
x39=((x20)*(x26));
x40=((x17)*(x33));
x41=((x16)*(x8)*(x9));
x42=((x16)*(x32));
x43=((x17)*(x32));
x44=((x25)+(((x0)*(x31))));
x45=((((IkReal(-1.00000000000000))*(x16)*(x3)))+(((x2)*(x28))));
x46=((x24)+(((IkReal(-1.00000000000000))*(x41))));
x47=((x30)+(((x27)*(x4))));
x48=((x28)+(((IkReal(-1.00000000000000))*(x42))));
x49=((((IkReal(-1.00000000000000))*(x28)))+(x42));
x50=((((IkReal(-1.00000000000000))*(x16)*(x33)))+(((IkReal(-1.00000000000000))*(x25))));
x51=((((IkReal(-1.00000000000000))*(x0)*(x16)))+(((IkReal(-1.00000000000000))*(x2)*(x25))));
x52=((x40)+(x34));
x53=((x48)*(x6));
x54=((x50)*(x8));
x55=((x51)*(x7));
x56=((((IkReal(-1.00000000000000))*(x38)))+(((x44)*(x6))));
x57=((((x29)*(x7)))+(((x47)*(x5))));
x58=((x53)+(x36));
x59=((((x27)*(x3)))+(((x49)*(x8))));
x60=((x54)+(((IkReal(-1.00000000000000))*(x39))));
x61=((((x29)*(x5)))+(((x7)*(((((IkReal(-1.00000000000000))*(x18)*(x2)))+(((IkReal(-1.00000000000000))*(x16)*(x27))))))));
x62=((x5)*(x58));
x63=((((x45)*(x7)))+(((x5)*(x56))));
x64=((((x45)*(x5)))+(((x7)*(((((IkReal(-1.00000000000000))*(x20)*(x44)))+(x38))))));
x65=((x55)+(x62));
x66=((x12)*(x63));
x67=((((x7)*(((((IkReal(1.00000000000000))*(x36)))+(((IkReal(1.00000000000000))*(x53)))))))+(((IkReal(-1.00000000000000))*(x5)*(x51))));
eerot[0]=((((x13)*(((x66)+(((x11)*(x60)))))))+(((x10)*(x64))));
eerot[1]=((((x10)*(((((IkReal(-1.00000000000000))*(x15)*(x63)))+(((IkReal(-1.00000000000000))*(x19)*(x60)))))))+(((x13)*(x64))));
eerot[2]=((((x11)*(x63)))+(((x12)*(((((IkReal(-1.00000000000000))*(x18)*(x50)))+(x39))))));
IkReal x68=((x26)*(x6));
eetrans[0]=((IkReal(0.00152455000000000))+(x52)+(((x11)*(((((IkReal(-1.00000000000000))*(x22)*(x56)))+(((IkReal(-1.00000000000000))*(x14)*(x45)))))))+(((IkReal(-0.300710000000000))*(x68)))+(((x12)*(((((IkReal(-0.176987500000000))*(x68)))+(((x21)*(x50)))))))+(((IkReal(-1.00000000000000))*(x52)*(x6)))+(((x8)*(((((IkReal(-1.00000000000000))*(x1)*(x23)))+(((IkReal(-0.300710000000000))*(x0)*(x31)))))))+(((IkReal(-0.300700000000000))*(x26)))+(((IkReal(0.0300000000000000))*(x26)*(x8))));
eerot[3]=((((x10)*(x61)))+(((x13)*(((((x12)*(x57)))+(((x11)*(x46))))))));
eerot[4]=((((x13)*(x61)))+(((x10)*(((((IkReal(-1.00000000000000))*(x19)*(x46)))+(((IkReal(-1.00000000000000))*(x15)*(x57))))))));
eerot[5]=((((x12)*(((x41)+(((IkReal(-1.00000000000000))*(x2)*(x20)))))))+(((x11)*(x57))));
eetrans[1]=((IkReal(0.208513409563377))+(((x12)*(((((IkReal(-1.00000000000000))*(x21)*(x4)*(x9)))+(((IkReal(0.176987500000000))*(x24)))))))+(((x17)*(x9)))+(((IkReal(0.300700000000000))*(x2)))+(((IkReal(-0.300710000000000))*(x37)))+(((IkReal(-0.0300000000000000))*(x30)))+(((IkReal(-1.00000000000000))*(x17)*(x27)))+(((x11)*(((((IkReal(-1.00000000000000))*(x14)*(x29)))+(((IkReal(-1.00000000000000))*(x22)*(x47)))))))+(((IkReal(0.300710000000000))*(x24))));
eerot[6]=((((x13)*(((((IkReal(-1.00000000000000))*(x19)*(x59)))+(((IkReal(-1.00000000000000))*(x15)*(x65)))))))+(((x10)*(x67))));
eerot[7]=((((x13)*(x67)))+(((x10)*(((((x11)*(x59)))+(((x12)*(x65))))))));
eerot[8]=((((x11)*(((((IkReal(-1.00000000000000))*(x55)))+(((IkReal(-1.00000000000000))*(x62)))))))+(((x12)*(x59))));
IkReal x69=((IkReal(1.00000000000000))*(x23));
eetrans[2]=((IkReal(0.197099990575467))+(((IkReal(-0.300700000000000))*(x3)*(x9)))+(((x11)*(((((x14)*(x51)))+(((x22)*(x58)))))))+(((x12)*(((((IkReal(-1.00000000000000))*(x21)*(x49)))+(((IkReal(-0.176987500000000))*(x27)*(x3)))))))+(x43)+(((IkReal(0.0300000000000000))*(x36)))+(((x6)*(((x35)+(((IkReal(-1.00000000000000))*(x43)))))))+(((IkReal(-1.00000000000000))*(x35)))+(((IkReal(-1.00000000000000))*(x27)*(x69)))+(((x8)*(((((IkReal(-1.00000000000000))*(x31)*(x69)))+(((IkReal(0.300710000000000))*(x28))))))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {4}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j7,cj7,sj7,htj7,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij6[2], _nj6,_ij7[2], _nj7,_ij5[2], _nj5;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1; j7=numeric_limits<IkReal>::quiet_NaN(); _ij7[0] = -1; _ij7[1] = -1; _nj7 = -1;  _ij5[0] = -1; _ij5[1] = -1; _nj5 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j5=pfree[0]; cj5=cos(pfree[0]); sj5=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((IkReal(-0.00152455000000000))+(((IkReal(0.176987500000000))*(r02)))+(px));
new_r10=((IkReal(-1.00000000000000))*(r20));
new_r11=((IkReal(-1.00000000000000))*(r21));
new_r12=((IkReal(-1.00000000000000))*(r22));
new_py=((IkReal(0.197099990575467))+(((IkReal(-0.176987500000000))*(r22)))+(((IkReal(-1.00000000000000))*(pz))));
new_r20=r10;
new_r21=r11;
new_r22=r12;
new_pz=((IkReal(-0.208513409563377))+(py)+(((IkReal(0.176987500000000))*(r12))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((pz)*(pz))+((py)*(py)));
npx=((((py)*(r10)))+(((pz)*(r20)))+(((px)*(r00))));
npy=((((px)*(r01)))+(((pz)*(r21)))+(((py)*(r11))));
npz=((((py)*(r12)))+(((pz)*(r22)))+(((px)*(r02))));
rxp0_0=((((IkReal(-1.00000000000000))*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((IkReal(-1.00000000000000))*(pz)*(r00))));
rxp0_2=((((py)*(r00)))+(((IkReal(-1.00000000000000))*(px)*(r10))));
rxp1_0=((((pz)*(r11)))+(((IkReal(-1.00000000000000))*(py)*(r21))));
rxp1_1=((((IkReal(-1.00000000000000))*(pz)*(r01)))+(((px)*(r21))));
rxp1_2=((((py)*(r01)))+(((IkReal(-1.00000000000000))*(px)*(r11))));
rxp2_0=((((IkReal(-1.00000000000000))*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((IkReal(-1.00000000000000))*(pz)*(r02))));
rxp2_2=((((py)*(r02)))+(((IkReal(-1.00000000000000))*(px)*(r12))));
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( (((IkReal(1.00000000054211))+(((IkReal(-5.47504220077449))*(pp))))) < -1-IKFAST_SINCOS_THRESH || (((IkReal(1.00000000054211))+(((IkReal(-5.47504220077449))*(pp))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x70=IKasin(((IkReal(1.00000000054211))+(((IkReal(-5.47504220077449))*(pp)))));
j4array[0]=((IkReal(-1.76966936552859))+(((IkReal(-1.00000000000000))*(x70))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(1.37192328806121))+(x70));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal dummyeval[1];
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal x71=(cj5)*(cj5);
IkReal x72=(cj4)*(cj4);
IkReal x73=(sj4)*(sj4);
IkReal x74=((IkReal(20.0466666666667))*(cj4)*(sj4));
dummyeval[0]=((IkReal(100.473893444444))+(((IkReal(-2.00000000000000))*(cj4)*(x71)))+(((IkReal(-1.00000000000000))*(x74)))+(((x71)*(x72)))+(((IkReal(-20.0473333333333))*(sj4)))+(x73)+(x71)+(((IkReal(100.467211111111))*(x72)))+(((x71)*(x74)))+(((IkReal(200.941104444444))*(cj4)))+(((IkReal(-20.0466666666667))*(sj4)*(x71)))+(((IkReal(100.467211111111))*(x71)*(x73))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
IkReal x75=((IkReal(0.0300000000000000))*(cj5));
IkReal x76=((IkReal(-0.300710000000000))+(((IkReal(0.0300000000000000))*(sj4)))+(((IkReal(-0.300700000000000))*(cj4))));
IkReal x77=((((cj4)*(x75)))+(((IkReal(-1.00000000000000))*(x75)))+(((IkReal(0.300700000000000))*(cj5)*(sj4))));
if( IKabs(x76) < IKFAST_ATAN2_MAGTHRESH && IKabs(x77) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x78=((IkReal(1.00000000000000))*(IKatan2(x76, x77)));
if( ((((x76)*(x76))+((x77)*(x77)))) < (IkReal)-0.00001 )
    continue;
if( (((npz)*(((IKabs(IKabs(IKsqrt((((x76)*(x76))+((x77)*(x77)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x76)*(x76))+((x77)*(x77))))))):(IkReal)1.0e30)))) < -1-IKFAST_SINCOS_THRESH || (((npz)*(((IKabs(IKabs(IKsqrt((((x76)*(x76))+((x77)*(x77)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x76)*(x76))+((x77)*(x77))))))):(IkReal)1.0e30)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x79=IKasin(((npz)*(((IKabs(IKabs(IKsqrt((((x76)*(x76))+((x77)*(x77)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x76)*(x76))+((x77)*(x77))))))):(IkReal)1.0e30))));
j6array[0]=((x79)+(((IkReal(-1.00000000000000))*(x78))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x78)))+(((IkReal(-1.00000000000000))*(x79))));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=IKsign(((((sj6)*((npx)*(npx))))+(((sj6)*((npy)*(npy))))));
dummyeval[0]=((((sj6)*((npx)*(npx))))+(((sj6)*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst1;
IkReal x80=((cj6)*(sj5));
gconst1=IKsign(((((x80)*((npy)*(npy))))+(((x80)*((npx)*(npx))))));
IkReal x81=((cj6)*(sj5));
dummyeval[0]=((((x81)*((npx)*(npx))))+(((x81)*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x82=((IkReal(0.0300000000000000))*(sj6));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.182646994100000))+(((IkReal(-0.0360846000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.179046994000000))*(cj4))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x82)))+(((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-0.300710000000000))*(cj6)))+(((IkReal(0.300700000000000))*(sj4)*(sj6)))+(((IkReal(0.0300000000000000))*(cj6)*(sj4)))+(((cj4)*(x82)))+(((IkReal(-0.300700000000000))*(cj4)*(cj6))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
gconst2=IKsign(((((cj6)*((npy)*(npy))))+(((cj6)*((npx)*(npx))))));
dummyeval[0]=((((cj6)*((npy)*(npy))))+(((cj6)*((npx)*(npx)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(((((sj6)*((npx)*(npx))))+(((sj6)*((npy)*(npy))))));
dummyeval[0]=((((sj6)*((npx)*(npx))))+(((sj6)*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x83=((IkReal(-0.300710000000000))+(((IkReal(-1.00000000000000))*(npz)))+(((IkReal(0.0300000000000000))*(sj4)))+(((IkReal(-0.300700000000000))*(cj4))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j6)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.182646994100000))+(((IkReal(-0.0360846000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.179046994000000))*(cj4))));
evalcond[2]=x83;
evalcond[3]=x83;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign((((npy)*(npy))+((npx)*(npx))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign(((((IkReal(-3.00000000000000))*((npx)*(npx))))+(((IkReal(-3.00000000000000))*((npy)*(npy))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x84=((IkReal(50.0000000000000))*(pp));
IkReal x85=((IkReal(30.0710000000000))*(npz));
if( IKabs(((gconst5)*(((((IkReal(-1.00000000000000))*(npy)*(x84)))+(((IkReal(-1.00000000000000))*(npy)*(x85)))+(((IkReal(-0.000300705000000000))*(npy))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst5)*(((((npx)*(x85)))+(((npx)*(x84)))+(((IkReal(0.000300705000000000))*(npx))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst5)*(((((IkReal(-1.00000000000000))*(npy)*(x84)))+(((IkReal(-1.00000000000000))*(npy)*(x85)))+(((IkReal(-0.000300705000000000))*(npy)))))), ((gconst5)*(((((npx)*(x85)))+(((npx)*(x84)))+(((IkReal(0.000300705000000000))*(npx)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x86=IKcos(j7);
IkReal x87=IKsin(j7);
IkReal x88=((npx)*(x86));
IkReal x89=((npy)*(x87));
evalcond[0]=((((npx)*(x87)))+(((npy)*(x86))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-0.300700000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(x89)))+(((IkReal(-0.0300000000000000))*(cj4)))+(x88));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(0.0600000000000000))*(x89)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x88)))+(((IkReal(-0.601420000000000))*(npz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x279=((IkReal(0.0300000000000000))*(npx));
IkReal x280=((IkReal(0.300700000000000))*(sj4));
IkReal x281=((IkReal(0.0300000000000000))*(npy));
if( IKabs(((gconst4)*(((x281)+(((IkReal(-1.00000000000000))*(cj4)*(x281)))+(((IkReal(-1.00000000000000))*(npy)*(x280))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst4)*(((((cj4)*(x279)))+(((npx)*(x280)))+(((IkReal(-1.00000000000000))*(x279))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst4)*(((x281)+(((IkReal(-1.00000000000000))*(cj4)*(x281)))+(((IkReal(-1.00000000000000))*(npy)*(x280)))))), ((gconst4)*(((((cj4)*(x279)))+(((npx)*(x280)))+(((IkReal(-1.00000000000000))*(x279)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x282=IKcos(j7);
IkReal x283=IKsin(j7);
IkReal x284=((npx)*(x282));
IkReal x285=((npy)*(x283));
evalcond[0]=((((npy)*(x282)))+(((npx)*(x283))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x285)))+(x284)+(((IkReal(-0.300700000000000))*(sj4)))+(((IkReal(-0.0300000000000000))*(cj4))));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(0.0600000000000000))*(x285)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.601420000000000))*(npz)))+(((IkReal(-0.0600000000000000))*(x284))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x286=((IkReal(0.300700000000000))*(cj4));
IkReal x287=((IkReal(0.0300000000000000))*(sj4));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j6, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.182646994100000))+(((IkReal(-0.0360846000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.179046994000000))*(cj4))));
evalcond[2]=((IkReal(-0.300710000000000))+(x287)+(npz)+(((IkReal(-1.00000000000000))*(x286))));
evalcond[3]=((IkReal(0.300710000000000))+(((IkReal(-1.00000000000000))*(npz)))+(x286)+(((IkReal(-1.00000000000000))*(x287))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst6;
gconst6=IKsign(((((IkReal(-1.00000000000000))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst7;
gconst7=IKsign(((((IkReal(3.00000000000000))*((npx)*(npx))))+(((IkReal(3.00000000000000))*((npy)*(npy))))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x288=((IkReal(50.0000000000000))*(pp));
IkReal x289=((IkReal(30.0710000000000))*(npz));
if( IKabs(((gconst7)*(((((npy)*(x289)))+(((IkReal(-0.000300705000000000))*(npy)))+(((IkReal(-1.00000000000000))*(npy)*(x288))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst7)*(((((IkReal(-1.00000000000000))*(npx)*(x289)))+(((npx)*(x288)))+(((IkReal(0.000300705000000000))*(npx))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst7)*(((((npy)*(x289)))+(((IkReal(-0.000300705000000000))*(npy)))+(((IkReal(-1.00000000000000))*(npy)*(x288)))))), ((gconst7)*(((((IkReal(-1.00000000000000))*(npx)*(x289)))+(((npx)*(x288)))+(((IkReal(0.000300705000000000))*(npx)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x290=IKsin(j7);
IkReal x291=IKcos(j7);
IkReal x292=((npx)*(x291));
IkReal x293=((npy)*(x290));
evalcond[0]=((((npy)*(x291)))+(((npx)*(x290))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-0.300700000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(x292)))+(x293)+(((IkReal(-0.0300000000000000))*(cj4))));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x293)))+(((IkReal(0.0600000000000000))*(x292)))+(((IkReal(0.601420000000000))*(npz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x294=((IkReal(0.0300000000000000))*(npx));
IkReal x295=((IkReal(0.300700000000000))*(sj4));
IkReal x296=((IkReal(0.0300000000000000))*(npy));
if( IKabs(((gconst6)*(((((IkReal(-1.00000000000000))*(npy)*(x295)))+(x296)+(((IkReal(-1.00000000000000))*(cj4)*(x296))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst6)*(((((npx)*(x295)))+(((cj4)*(x294)))+(((IkReal(-1.00000000000000))*(x294))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst6)*(((((IkReal(-1.00000000000000))*(npy)*(x295)))+(x296)+(((IkReal(-1.00000000000000))*(cj4)*(x296)))))), ((gconst6)*(((((npx)*(x295)))+(((cj4)*(x294)))+(((IkReal(-1.00000000000000))*(x294)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x297=IKsin(j7);
IkReal x298=IKcos(j7);
IkReal x299=((npx)*(x298));
IkReal x300=((npy)*(x297));
evalcond[0]=((((npy)*(x298)))+(((npx)*(x297))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-0.300700000000000))*(sj4)))+(x300)+(((IkReal(-0.0300000000000000))*(cj4)))+(((IkReal(-1.00000000000000))*(x299))));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(x299)))+(((IkReal(-0.0600000000000000))*(x300)))+(((IkReal(0.601420000000000))*(npz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x301=((IkReal(0.300700000000000))*(sj4));
IkReal x302=((IkReal(0.0300000000000000))*(cj4));
IkReal x303=((x302)+(x301));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j6)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.182646994100000))+(((IkReal(-0.0360846000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.179046994000000))*(cj4))));
evalcond[2]=((IkReal(-0.0300000000000000))+(((IkReal(-1.00000000000000))*(npz)))+(x303));
evalcond[3]=((IkReal(0.0300000000000000))+(npz)+(((IkReal(-1.00000000000000))*(x303))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst8;
gconst8=IKsign((((npy)*(npy))+((npx)*(npx))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst9;
gconst9=IKsign(((((IkReal(30071.0000000000))*((npx)*(npx))))+(((IkReal(30071.0000000000))*((npy)*(npy))))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x304=((IkReal(3000.00000000000))*(npz));
IkReal x305=((IkReal(50000.0000000000))*(pp));
if( IKabs(((gconst9)*(((((IkReal(-1.00000000000000))*(npy)*(x305)))+(((IkReal(-1.00000000000000))*(npy)*(x304)))+(((IkReal(-0.300705000000000))*(npy))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst9)*(((((IkReal(0.300705000000000))*(npx)))+(((npx)*(x305)))+(((npx)*(x304))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst9)*(((((IkReal(-1.00000000000000))*(npy)*(x305)))+(((IkReal(-1.00000000000000))*(npy)*(x304)))+(((IkReal(-0.300705000000000))*(npy)))))), ((gconst9)*(((((IkReal(0.300705000000000))*(npx)))+(((npx)*(x305)))+(((npx)*(x304)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x306=IKcos(j7);
IkReal x307=IKsin(j7);
IkReal x308=((npx)*(x306));
IkReal x309=((npy)*(x307));
evalcond[0]=((((npx)*(x307)))+(((npy)*(x306))));
evalcond[1]=((IkReal(-0.300710000000000))+(x308)+(((IkReal(0.0300000000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(x309)))+(((IkReal(-0.300700000000000))*(cj4))));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(-0.601420000000000))*(x309)))+(((IkReal(0.601420000000000))*(x308)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(npz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x310=((IkReal(0.0300000000000000))*(sj4));
IkReal x311=((IkReal(0.300700000000000))*(cj4));
if( IKabs(((gconst8)*(((((IkReal(-1.00000000000000))*(npy)*(x311)))+(((IkReal(-0.300710000000000))*(npy)))+(((npy)*(x310))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst8)*(((((IkReal(-1.00000000000000))*(npx)*(x310)))+(((npx)*(x311)))+(((IkReal(0.300710000000000))*(npx))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst8)*(((((IkReal(-1.00000000000000))*(npy)*(x311)))+(((IkReal(-0.300710000000000))*(npy)))+(((npy)*(x310)))))), ((gconst8)*(((((IkReal(-1.00000000000000))*(npx)*(x310)))+(((npx)*(x311)))+(((IkReal(0.300710000000000))*(npx)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x312=IKcos(j7);
IkReal x313=IKsin(j7);
IkReal x314=((npx)*(x312));
IkReal x315=((npy)*(x313));
evalcond[0]=((((npx)*(x313)))+(((npy)*(x312))));
evalcond[1]=((IkReal(-0.300710000000000))+(((IkReal(-1.00000000000000))*(x315)))+(((IkReal(0.0300000000000000))*(sj4)))+(x314)+(((IkReal(-0.300700000000000))*(cj4))));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(-0.601420000000000))*(x315)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.601420000000000))*(x314)))+(((IkReal(-0.0600000000000000))*(npz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x316=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-0.300700000000000))*(sj4)))+(((IkReal(-0.0300000000000000))*(cj4))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j6)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.182646994100000))+(((IkReal(-0.0360846000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.179046994000000))*(cj4))));
evalcond[2]=x316;
evalcond[3]=x316;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst10;
gconst10=IKsign(((((IkReal(-1.00000000000000))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst11;
gconst11=IKsign(((((IkReal(-30071.0000000000))*((npx)*(npx))))+(((IkReal(-30071.0000000000))*((npy)*(npy))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x317=((IkReal(50000.0000000000))*(pp));
IkReal x318=((IkReal(3000.00000000000))*(npz));
if( IKabs(((gconst11)*(((((IkReal(-1.00000000000000))*(npy)*(x317)))+(((IkReal(-0.300705000000000))*(npy)))+(((npy)*(x318))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst11)*(((((IkReal(0.300705000000000))*(npx)))+(((npx)*(x317)))+(((IkReal(-1.00000000000000))*(npx)*(x318))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst11)*(((((IkReal(-1.00000000000000))*(npy)*(x317)))+(((IkReal(-0.300705000000000))*(npy)))+(((npy)*(x318)))))), ((gconst11)*(((((IkReal(0.300705000000000))*(npx)))+(((npx)*(x317)))+(((IkReal(-1.00000000000000))*(npx)*(x318)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x319=IKsin(j7);
IkReal x320=IKcos(j7);
IkReal x321=((npx)*(x320));
IkReal x322=((npy)*(x319));
evalcond[0]=((((npy)*(x320)))+(((npx)*(x319))));
evalcond[1]=((IkReal(-0.300710000000000))+(((IkReal(-1.00000000000000))*(x321)))+(((IkReal(0.0300000000000000))*(sj4)))+(x322)+(((IkReal(-0.300700000000000))*(cj4))));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(npz)))+(((IkReal(-0.601420000000000))*(x321)))+(((IkReal(0.601420000000000))*(x322))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x323=((IkReal(0.0300000000000000))*(sj4));
IkReal x324=((IkReal(0.300700000000000))*(cj4));
if( IKabs(((gconst10)*(((((IkReal(-0.300710000000000))*(npy)))+(((npy)*(x323)))+(((IkReal(-1.00000000000000))*(npy)*(x324))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst10)*(((((npx)*(x324)))+(((IkReal(-1.00000000000000))*(npx)*(x323)))+(((IkReal(0.300710000000000))*(npx))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst10)*(((((IkReal(-0.300710000000000))*(npy)))+(((npy)*(x323)))+(((IkReal(-1.00000000000000))*(npy)*(x324)))))), ((gconst10)*(((((npx)*(x324)))+(((IkReal(-1.00000000000000))*(npx)*(x323)))+(((IkReal(0.300710000000000))*(npx)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x325=IKsin(j7);
IkReal x326=IKcos(j7);
IkReal x327=((npx)*(x326));
IkReal x328=((npy)*(x325));
evalcond[0]=((((npx)*(x325)))+(((npy)*(x326))));
evalcond[1]=((IkReal(-0.300710000000000))+(((IkReal(-1.00000000000000))*(x327)))+(((IkReal(0.0300000000000000))*(sj4)))+(x328)+(((IkReal(-0.300700000000000))*(cj4))));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(npz)))+(((IkReal(0.601420000000000))*(x328)))+(((IkReal(-0.601420000000000))*(x327))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x329=((IkReal(0.300700000000000))*(cj4));
IkReal x330=((IkReal(0.0300000000000000))*(sj4));
IkReal x331=((cj6)*(npz));
if( IKabs(((gconst3)*(((((IkReal(-0.300710000000000))*(npy)))+(((IkReal(-1.00000000000000))*(npy)*(x331)))+(((IkReal(-1.00000000000000))*(npy)*(x329)))+(((npy)*(x330))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((((npx)*(x331)))+(((IkReal(-1.00000000000000))*(npx)*(x330)))+(((IkReal(0.300710000000000))*(npx)))+(((npx)*(x329))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst3)*(((((IkReal(-0.300710000000000))*(npy)))+(((IkReal(-1.00000000000000))*(npy)*(x331)))+(((IkReal(-1.00000000000000))*(npy)*(x329)))+(((npy)*(x330)))))), ((gconst3)*(((((npx)*(x331)))+(((IkReal(-1.00000000000000))*(npx)*(x330)))+(((IkReal(0.300710000000000))*(npx)))+(((npx)*(x329)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x332=IKcos(j7);
IkReal x333=IKsin(j7);
IkReal x334=((IkReal(1.00000000000000))*(cj6));
IkReal x335=((IkReal(0.0600000000000000))*(cj6));
IkReal x336=((IkReal(0.0300000000000000))*(cj6));
IkReal x337=((IkReal(0.300700000000000))*(sj4));
IkReal x338=((npz)*(sj6));
IkReal x339=((IkReal(0.601420000000000))*(sj6));
IkReal x340=((IkReal(0.0300000000000000))*(sj4));
IkReal x341=((IkReal(0.300700000000000))*(cj4));
IkReal x342=((npx)*(x332));
IkReal x343=((npy)*(x333));
evalcond[0]=((((npx)*(x333)))+(((npy)*(x332))));
evalcond[1]=((IkReal(-0.300710000000000))+(((sj6)*(x342)))+(((IkReal(-1.00000000000000))*(sj6)*(x343)))+(x340)+(((IkReal(-1.00000000000000))*(npz)*(x334)))+(((IkReal(-1.00000000000000))*(x341))));
evalcond[2]=((IkReal(0.0300000000000000))+(((cj6)*(x342)))+(((IkReal(-1.00000000000000))*(x337)))+(((IkReal(-1.00000000000000))*(x334)*(x343)))+(x338)+(((IkReal(-0.0300000000000000))*(cj4))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x343)))+(((IkReal(-1.00000000000000))*(cj6)*(x337)))+(((IkReal(-1.00000000000000))*(sj6)*(x341)))+(x336)+(x342)+(((sj6)*(x340)))+(((IkReal(-0.300710000000000))*(sj6)))+(((IkReal(-1.00000000000000))*(cj4)*(x336))));
evalcond[4]=((IkReal(-6.01410000000000e-6))+(((IkReal(-1.00000000000000))*(x335)*(x342)))+(((IkReal(-1.00000000000000))*(x339)*(x343)))+(((IkReal(-1.00000000000000))*(pp)))+(((x339)*(x342)))+(((IkReal(-0.0600000000000000))*(x338)))+(((x335)*(x343)))+(((IkReal(-0.601420000000000))*(cj6)*(npz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x344=((npz)*(sj6));
IkReal x345=((IkReal(0.300700000000000))*(sj4));
IkReal x346=((IkReal(0.0300000000000000))*(npx));
IkReal x347=((IkReal(0.0300000000000000))*(npy));
if( IKabs(((gconst2)*(((((IkReal(-1.00000000000000))*(cj4)*(x347)))+(((npy)*(x344)))+(((IkReal(-1.00000000000000))*(npy)*(x345)))+(x347))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((((IkReal(-1.00000000000000))*(npx)*(x344)))+(((IkReal(-1.00000000000000))*(x346)))+(((cj4)*(x346)))+(((npx)*(x345))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst2)*(((((IkReal(-1.00000000000000))*(cj4)*(x347)))+(((npy)*(x344)))+(((IkReal(-1.00000000000000))*(npy)*(x345)))+(x347)))), ((gconst2)*(((((IkReal(-1.00000000000000))*(npx)*(x344)))+(((IkReal(-1.00000000000000))*(x346)))+(((cj4)*(x346)))+(((npx)*(x345)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x348=IKcos(j7);
IkReal x349=IKsin(j7);
IkReal x350=((IkReal(1.00000000000000))*(cj6));
IkReal x351=((IkReal(0.0600000000000000))*(cj6));
IkReal x352=((IkReal(0.0300000000000000))*(cj6));
IkReal x353=((IkReal(0.300700000000000))*(sj4));
IkReal x354=((npz)*(sj6));
IkReal x355=((IkReal(0.601420000000000))*(sj6));
IkReal x356=((IkReal(0.0300000000000000))*(sj4));
IkReal x357=((IkReal(0.300700000000000))*(cj4));
IkReal x358=((npx)*(x348));
IkReal x359=((npy)*(x349));
evalcond[0]=((((npx)*(x349)))+(((npy)*(x348))));
evalcond[1]=((IkReal(-0.300710000000000))+(((IkReal(-1.00000000000000))*(npz)*(x350)))+(((IkReal(-1.00000000000000))*(x357)))+(((sj6)*(x358)))+(x356)+(((IkReal(-1.00000000000000))*(sj6)*(x359))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x353)))+(((cj6)*(x358)))+(((IkReal(-0.0300000000000000))*(cj4)))+(x354)+(((IkReal(-1.00000000000000))*(x350)*(x359))));
evalcond[3]=((((IkReal(-1.00000000000000))*(sj6)*(x357)))+(((IkReal(-1.00000000000000))*(x359)))+(((IkReal(-1.00000000000000))*(cj4)*(x352)))+(x352)+(x358)+(((IkReal(-1.00000000000000))*(cj6)*(x353)))+(((sj6)*(x356)))+(((IkReal(-0.300710000000000))*(sj6))));
evalcond[4]=((IkReal(-6.01410000000000e-6))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x351)*(x358)))+(((IkReal(-1.00000000000000))*(x355)*(x359)))+(((IkReal(-0.0600000000000000))*(x354)))+(((IkReal(-0.601420000000000))*(cj6)*(npz)))+(((x351)*(x359)))+(((x355)*(x358))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x360=((IkReal(0.0300000000000000))*(sj6));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j5, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.182646994100000))+(((IkReal(-0.0360846000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.179046994000000))*(cj4))));
evalcond[2]=((((IkReal(-0.300700000000000))*(sj4)*(sj6)))+(((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-0.300710000000000))*(cj6)))+(x360)+(((IkReal(0.0300000000000000))*(cj6)*(sj4)))+(((IkReal(-1.00000000000000))*(cj4)*(x360)))+(((IkReal(-0.300700000000000))*(cj4)*(cj6))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst12;
gconst12=IKsign(((((sj6)*((npx)*(npx))))+(((sj6)*((npy)*(npy))))));
dummyeval[0]=((((sj6)*((npx)*(npx))))+(((sj6)*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst13;
gconst13=IKsign(((((cj6)*((npy)*(npy))))+(((cj6)*((npx)*(npx))))));
dummyeval[0]=((((cj6)*((npy)*(npy))))+(((cj6)*((npx)*(npx)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x361=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-0.300700000000000))*(sj4)))+(((IkReal(-0.0300000000000000))*(cj4))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j6)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.182646994100000))+(((IkReal(-0.0360846000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.179046994000000))*(cj4))));
evalcond[2]=x361;
evalcond[3]=x361;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst14;
gconst14=IKsign((((npy)*(npy))+((npx)*(npx))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst15;
gconst15=IKsign(((((IkReal(30071.0000000000))*((npx)*(npx))))+(((IkReal(30071.0000000000))*((npy)*(npy))))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x362=((IkReal(50000.0000000000))*(pp));
IkReal x363=((IkReal(3000.00000000000))*(npz));
if( IKabs(((gconst15)*(((((npy)*(x363)))+(((IkReal(-0.300705000000000))*(npy)))+(((IkReal(-1.00000000000000))*(npy)*(x362))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst15)*(((((IkReal(0.300705000000000))*(npx)))+(((IkReal(-1.00000000000000))*(npx)*(x363)))+(((npx)*(x362))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst15)*(((((npy)*(x363)))+(((IkReal(-0.300705000000000))*(npy)))+(((IkReal(-1.00000000000000))*(npy)*(x362)))))), ((gconst15)*(((((IkReal(0.300705000000000))*(npx)))+(((IkReal(-1.00000000000000))*(npx)*(x363)))+(((npx)*(x362)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x364=IKcos(j7);
IkReal x365=IKsin(j7);
IkReal x366=((npx)*(x364));
IkReal x367=((npy)*(x365));
evalcond[0]=((((npx)*(x365)))+(((npy)*(x364))));
evalcond[1]=((IkReal(-0.300710000000000))+(((IkReal(-1.00000000000000))*(x367)))+(x366)+(((IkReal(0.0300000000000000))*(sj4)))+(((IkReal(-0.300700000000000))*(cj4))));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(-0.601420000000000))*(x367)))+(((IkReal(0.601420000000000))*(x366)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(npz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x368=((IkReal(0.0300000000000000))*(sj4));
IkReal x369=((IkReal(0.300700000000000))*(cj4));
if( IKabs(((gconst14)*(((((IkReal(-1.00000000000000))*(npy)*(x369)))+(((npy)*(x368)))+(((IkReal(-0.300710000000000))*(npy))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst14)*(((((IkReal(0.300710000000000))*(npx)))+(((IkReal(-1.00000000000000))*(npx)*(x368)))+(((npx)*(x369))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst14)*(((((IkReal(-1.00000000000000))*(npy)*(x369)))+(((npy)*(x368)))+(((IkReal(-0.300710000000000))*(npy)))))), ((gconst14)*(((((IkReal(0.300710000000000))*(npx)))+(((IkReal(-1.00000000000000))*(npx)*(x368)))+(((npx)*(x369)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x370=IKcos(j7);
IkReal x371=IKsin(j7);
IkReal x372=((npx)*(x370));
IkReal x373=((npy)*(x371));
evalcond[0]=((((npy)*(x370)))+(((npx)*(x371))));
evalcond[1]=((IkReal(-0.300710000000000))+(x372)+(((IkReal(-1.00000000000000))*(x373)))+(((IkReal(0.0300000000000000))*(sj4)))+(((IkReal(-0.300700000000000))*(cj4))));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(0.601420000000000))*(x372)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.601420000000000))*(x373)))+(((IkReal(0.0600000000000000))*(npz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x374=((IkReal(0.300700000000000))*(sj4));
IkReal x375=((IkReal(0.0300000000000000))*(cj4));
IkReal x376=((x375)+(x374));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j6)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.182646994100000))+(((IkReal(-0.0360846000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.179046994000000))*(cj4))));
evalcond[2]=((IkReal(-0.0300000000000000))+(((IkReal(-1.00000000000000))*(npz)))+(x376));
evalcond[3]=((IkReal(0.0300000000000000))+(npz)+(((IkReal(-1.00000000000000))*(x376))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst16;
gconst16=IKsign(((((IkReal(-1.00000000000000))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst17;
gconst17=IKsign(((((IkReal(-30071.0000000000))*((npx)*(npx))))+(((IkReal(-30071.0000000000))*((npy)*(npy))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x377=((IkReal(50000.0000000000))*(pp));
IkReal x378=((IkReal(3000.00000000000))*(npz));
if( IKabs(((gconst17)*(((((IkReal(-0.300705000000000))*(npy)))+(((IkReal(-1.00000000000000))*(npy)*(x378)))+(((IkReal(-1.00000000000000))*(npy)*(x377))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst17)*(((((IkReal(0.300705000000000))*(npx)))+(((npx)*(x377)))+(((npx)*(x378))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst17)*(((((IkReal(-0.300705000000000))*(npy)))+(((IkReal(-1.00000000000000))*(npy)*(x378)))+(((IkReal(-1.00000000000000))*(npy)*(x377)))))), ((gconst17)*(((((IkReal(0.300705000000000))*(npx)))+(((npx)*(x377)))+(((npx)*(x378)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x379=IKsin(j7);
IkReal x380=IKcos(j7);
IkReal x381=((npx)*(x380));
IkReal x382=((npy)*(x379));
evalcond[0]=((((npx)*(x379)))+(((npy)*(x380))));
evalcond[1]=((IkReal(-0.300710000000000))+(x382)+(((IkReal(-1.00000000000000))*(x381)))+(((IkReal(0.0300000000000000))*(sj4)))+(((IkReal(-0.300700000000000))*(cj4))));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(-0.601420000000000))*(x381)))+(((IkReal(0.601420000000000))*(x382)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(npz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x383=((IkReal(0.0300000000000000))*(sj4));
IkReal x384=((IkReal(0.300700000000000))*(cj4));
if( IKabs(((gconst16)*(((((npy)*(x383)))+(((IkReal(-0.300710000000000))*(npy)))+(((IkReal(-1.00000000000000))*(npy)*(x384))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst16)*(((((IkReal(-1.00000000000000))*(npx)*(x383)))+(((IkReal(0.300710000000000))*(npx)))+(((npx)*(x384))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst16)*(((((npy)*(x383)))+(((IkReal(-0.300710000000000))*(npy)))+(((IkReal(-1.00000000000000))*(npy)*(x384)))))), ((gconst16)*(((((IkReal(-1.00000000000000))*(npx)*(x383)))+(((IkReal(0.300710000000000))*(npx)))+(((npx)*(x384)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x385=IKsin(j7);
IkReal x386=IKcos(j7);
IkReal x387=((npx)*(x386));
IkReal x388=((npy)*(x385));
evalcond[0]=((((npx)*(x385)))+(((npy)*(x386))));
evalcond[1]=((IkReal(-0.300710000000000))+(x388)+(((IkReal(0.0300000000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(x387)))+(((IkReal(-0.300700000000000))*(cj4))));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(-0.601420000000000))*(x387)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(npz)))+(((IkReal(0.601420000000000))*(x388))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x389=((IkReal(-0.300710000000000))+(((IkReal(-1.00000000000000))*(npz)))+(((IkReal(0.0300000000000000))*(sj4)))+(((IkReal(-0.300700000000000))*(cj4))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j6)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.182646994100000))+(((IkReal(-0.0360846000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.179046994000000))*(cj4))));
evalcond[2]=x389;
evalcond[3]=x389;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst18;
gconst18=IKsign(((((IkReal(-1.00000000000000))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst19;
gconst19=IKsign(((((IkReal(3.00000000000000))*((npx)*(npx))))+(((IkReal(3.00000000000000))*((npy)*(npy))))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x390=((IkReal(50.0000000000000))*(pp));
IkReal x391=((IkReal(30.0710000000000))*(npz));
if( IKabs(((gconst19)*(((((IkReal(-1.00000000000000))*(npy)*(x390)))+(((IkReal(-1.00000000000000))*(npy)*(x391)))+(((IkReal(-0.000300705000000000))*(npy))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst19)*(((((npx)*(x391)))+(((npx)*(x390)))+(((IkReal(0.000300705000000000))*(npx))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst19)*(((((IkReal(-1.00000000000000))*(npy)*(x390)))+(((IkReal(-1.00000000000000))*(npy)*(x391)))+(((IkReal(-0.000300705000000000))*(npy)))))), ((gconst19)*(((((npx)*(x391)))+(((npx)*(x390)))+(((IkReal(0.000300705000000000))*(npx)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x392=IKsin(j7);
IkReal x393=IKcos(j7);
IkReal x394=((npx)*(x393));
IkReal x395=((npy)*(x392));
evalcond[0]=((((npy)*(x393)))+(((npx)*(x392))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-0.300700000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(x394)))+(((IkReal(-0.0300000000000000))*(cj4)))+(x395));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x395)))+(((IkReal(0.0600000000000000))*(x394)))+(((IkReal(-0.601420000000000))*(npz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x396=((IkReal(0.300700000000000))*(sj4));
IkReal x397=((IkReal(0.0300000000000000))*(npx));
IkReal x398=((IkReal(0.0300000000000000))*(npy));
if( IKabs(((gconst18)*(((((IkReal(-1.00000000000000))*(cj4)*(x398)))+(((IkReal(-1.00000000000000))*(npy)*(x396)))+(x398))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst18)*(((((cj4)*(x397)))+(((IkReal(-1.00000000000000))*(x397)))+(((npx)*(x396))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst18)*(((((IkReal(-1.00000000000000))*(cj4)*(x398)))+(((IkReal(-1.00000000000000))*(npy)*(x396)))+(x398)))), ((gconst18)*(((((cj4)*(x397)))+(((IkReal(-1.00000000000000))*(x397)))+(((npx)*(x396)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x399=IKsin(j7);
IkReal x400=IKcos(j7);
IkReal x401=((npx)*(x400));
IkReal x402=((npy)*(x399));
evalcond[0]=((((npy)*(x400)))+(((npx)*(x399))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-0.300700000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(x401)))+(((IkReal(-0.0300000000000000))*(cj4)))+(x402));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(0.0600000000000000))*(x401)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x402)))+(((IkReal(-0.601420000000000))*(npz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x403=((IkReal(0.300700000000000))*(cj4));
IkReal x404=((IkReal(0.0300000000000000))*(sj4));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j6, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.182646994100000))+(((IkReal(-0.0360846000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.179046994000000))*(cj4))));
evalcond[2]=((IkReal(-0.300710000000000))+(((IkReal(-1.00000000000000))*(x403)))+(npz)+(x404));
evalcond[3]=((IkReal(0.300710000000000))+(((IkReal(-1.00000000000000))*(x404)))+(((IkReal(-1.00000000000000))*(npz)))+(x403));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst20;
gconst20=IKsign((((npy)*(npy))+((npx)*(npx))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst21;
gconst21=IKsign(((((IkReal(-3.00000000000000))*((npx)*(npx))))+(((IkReal(-3.00000000000000))*((npy)*(npy))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x405=((IkReal(50.0000000000000))*(pp));
IkReal x406=((IkReal(30.0710000000000))*(npz));
if( IKabs(((gconst21)*(((((IkReal(-1.00000000000000))*(npy)*(x405)))+(((IkReal(-0.000300705000000000))*(npy)))+(((npy)*(x406))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst21)*(((((IkReal(-1.00000000000000))*(npx)*(x406)))+(((npx)*(x405)))+(((IkReal(0.000300705000000000))*(npx))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst21)*(((((IkReal(-1.00000000000000))*(npy)*(x405)))+(((IkReal(-0.000300705000000000))*(npy)))+(((npy)*(x406)))))), ((gconst21)*(((((IkReal(-1.00000000000000))*(npx)*(x406)))+(((npx)*(x405)))+(((IkReal(0.000300705000000000))*(npx)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x407=IKcos(j7);
IkReal x408=IKsin(j7);
IkReal x409=((npx)*(x407));
IkReal x410=((npy)*(x408));
evalcond[0]=((((npx)*(x408)))+(((npy)*(x407))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-0.300700000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(x410)))+(((IkReal(-0.0300000000000000))*(cj4)))+(x409));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(0.0600000000000000))*(x410)))+(((IkReal(-0.0600000000000000))*(x409)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.601420000000000))*(npz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x411=((IkReal(0.0300000000000000))*(npx));
IkReal x412=((IkReal(0.300700000000000))*(sj4));
IkReal x413=((IkReal(0.0300000000000000))*(npy));
if( IKabs(((gconst20)*(((((IkReal(-1.00000000000000))*(npy)*(x412)))+(((IkReal(-1.00000000000000))*(cj4)*(x413)))+(x413))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst20)*(((((IkReal(-1.00000000000000))*(x411)))+(((cj4)*(x411)))+(((npx)*(x412))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst20)*(((((IkReal(-1.00000000000000))*(npy)*(x412)))+(((IkReal(-1.00000000000000))*(cj4)*(x413)))+(x413)))), ((gconst20)*(((((IkReal(-1.00000000000000))*(x411)))+(((cj4)*(x411)))+(((npx)*(x412)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x414=IKcos(j7);
IkReal x415=IKsin(j7);
IkReal x416=((npx)*(x414));
IkReal x417=((npy)*(x415));
evalcond[0]=((((npx)*(x415)))+(((npy)*(x414))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-0.300700000000000))*(sj4)))+(((IkReal(-0.0300000000000000))*(cj4)))+(((IkReal(-1.00000000000000))*(x417)))+(x416));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(0.0600000000000000))*(x417)))+(((IkReal(-0.0600000000000000))*(x416)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.601420000000000))*(npz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x418=((npz)*(sj6));
IkReal x419=((IkReal(0.300700000000000))*(sj4));
IkReal x420=((IkReal(0.0300000000000000))*(npx));
IkReal x421=((IkReal(0.0300000000000000))*(npy));
if( IKabs(((gconst13)*(((((cj4)*(x421)))+(((IkReal(-1.00000000000000))*(x421)))+(((npy)*(x419)))+(((npy)*(x418))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst13)*(((((IkReal(-1.00000000000000))*(npx)*(x418)))+(x420)+(((IkReal(-1.00000000000000))*(cj4)*(x420)))+(((IkReal(-1.00000000000000))*(npx)*(x419))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst13)*(((((cj4)*(x421)))+(((IkReal(-1.00000000000000))*(x421)))+(((npy)*(x419)))+(((npy)*(x418)))))), ((gconst13)*(((((IkReal(-1.00000000000000))*(npx)*(x418)))+(x420)+(((IkReal(-1.00000000000000))*(cj4)*(x420)))+(((IkReal(-1.00000000000000))*(npx)*(x419)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x422=IKcos(j7);
IkReal x423=IKsin(j7);
IkReal x424=((IkReal(1.00000000000000))*(cj6));
IkReal x425=((IkReal(0.0600000000000000))*(cj6));
IkReal x426=((IkReal(0.0300000000000000))*(cj6));
IkReal x427=((IkReal(0.300700000000000))*(sj4));
IkReal x428=((IkReal(1.00000000000000))*(sj6));
IkReal x429=((IkReal(0.601420000000000))*(sj6));
IkReal x430=((IkReal(0.0300000000000000))*(sj4));
IkReal x431=((IkReal(0.300700000000000))*(cj4));
IkReal x432=((npx)*(x422));
IkReal x433=((npy)*(x423));
evalcond[0]=((((npx)*(x423)))+(((npy)*(x422))));
evalcond[1]=((IkReal(-0.300710000000000))+(x430)+(((IkReal(-1.00000000000000))*(x431)))+(((IkReal(-1.00000000000000))*(x428)*(x433)))+(((sj6)*(x432)))+(((IkReal(-1.00000000000000))*(npz)*(x424))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(npz)*(x428)))+(((IkReal(-0.0300000000000000))*(cj4)))+(((IkReal(-1.00000000000000))*(x427)))+(((IkReal(-1.00000000000000))*(x424)*(x432)))+(((cj6)*(x433))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x426)))+(x432)+(((sj6)*(x430)))+(((IkReal(-1.00000000000000))*(sj6)*(x431)))+(((cj4)*(x426)))+(((cj6)*(x427)))+(((IkReal(-1.00000000000000))*(x433)))+(((IkReal(-0.300710000000000))*(sj6))));
evalcond[4]=((IkReal(-6.01410000000000e-6))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x429)*(x433)))+(((x429)*(x432)))+(((IkReal(0.0600000000000000))*(npz)*(sj6)))+(((IkReal(-0.601420000000000))*(cj6)*(npz)))+(((IkReal(-1.00000000000000))*(x425)*(x433)))+(((x425)*(x432))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x434=((IkReal(0.0300000000000000))*(sj4));
IkReal x435=((IkReal(0.300700000000000))*(cj4));
IkReal x436=((cj6)*(npz));
if( IKabs(((gconst12)*(((((IkReal(-1.00000000000000))*(npy)*(x436)))+(((IkReal(-0.300710000000000))*(npy)))+(((npy)*(x434)))+(((IkReal(-1.00000000000000))*(npy)*(x435))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst12)*(((((IkReal(-1.00000000000000))*(npx)*(x434)))+(((IkReal(0.300710000000000))*(npx)))+(((npx)*(x435)))+(((npx)*(x436))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst12)*(((((IkReal(-1.00000000000000))*(npy)*(x436)))+(((IkReal(-0.300710000000000))*(npy)))+(((npy)*(x434)))+(((IkReal(-1.00000000000000))*(npy)*(x435)))))), ((gconst12)*(((((IkReal(-1.00000000000000))*(npx)*(x434)))+(((IkReal(0.300710000000000))*(npx)))+(((npx)*(x435)))+(((npx)*(x436)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x437=IKcos(j7);
IkReal x438=IKsin(j7);
IkReal x439=((IkReal(1.00000000000000))*(cj6));
IkReal x440=((IkReal(0.0600000000000000))*(cj6));
IkReal x441=((IkReal(0.0300000000000000))*(cj6));
IkReal x442=((IkReal(0.300700000000000))*(sj4));
IkReal x443=((IkReal(1.00000000000000))*(sj6));
IkReal x444=((IkReal(0.601420000000000))*(sj6));
IkReal x445=((IkReal(0.0300000000000000))*(sj4));
IkReal x446=((IkReal(0.300700000000000))*(cj4));
IkReal x447=((npx)*(x437));
IkReal x448=((npy)*(x438));
evalcond[0]=((((npx)*(x438)))+(((npy)*(x437))));
evalcond[1]=((IkReal(-0.300710000000000))+(((IkReal(-1.00000000000000))*(x443)*(x448)))+(x445)+(((sj6)*(x447)))+(((IkReal(-1.00000000000000))*(npz)*(x439)))+(((IkReal(-1.00000000000000))*(x446))));
evalcond[2]=((IkReal(0.0300000000000000))+(((cj6)*(x448)))+(((IkReal(-1.00000000000000))*(npz)*(x443)))+(((IkReal(-0.0300000000000000))*(cj4)))+(((IkReal(-1.00000000000000))*(x439)*(x447)))+(((IkReal(-1.00000000000000))*(x442))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x448)))+(x447)+(((sj6)*(x445)))+(((cj6)*(x442)))+(((IkReal(-1.00000000000000))*(x441)))+(((cj4)*(x441)))+(((IkReal(-1.00000000000000))*(sj6)*(x446)))+(((IkReal(-0.300710000000000))*(sj6))));
evalcond[4]=((IkReal(-6.01410000000000e-6))+(((IkReal(-1.00000000000000))*(x444)*(x448)))+(((IkReal(-1.00000000000000))*(pp)))+(((x444)*(x447)))+(((x440)*(x447)))+(((IkReal(-1.00000000000000))*(x440)*(x448)))+(((IkReal(0.0600000000000000))*(npz)*(sj6)))+(((IkReal(-0.601420000000000))*(cj6)*(npz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x449=((IkReal(0.0300000000000000))*(cj5));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j6)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.182646994100000))+(((IkReal(-0.0360846000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.179046994000000))*(cj4))));
evalcond[2]=((((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-1.00000000000000))*(x449)))+(((IkReal(0.300700000000000))*(cj5)*(sj4)))+(((cj4)*(x449))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst22;
gconst22=IKsign(((((cj5)*((npy)*(npy))))+(((cj5)*((npx)*(npx))))));
dummyeval[0]=((((cj5)*((npy)*(npy))))+(((cj5)*((npx)*(npx)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst23;
gconst23=IKsign((((npy)*(npy))+((npx)*(npx))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.182646994100000))+(((IkReal(-0.0360846000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.179046994000000))*(cj4))));
evalcond[2]=npz;
evalcond[3]=((IkReal(-1.00000000000000))*(npz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst24;
gconst24=IKsign((((npy)*(npy))+((npx)*(npx))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst25;
gconst25=IKsign(((((IkReal(0.601420000000000))*((npx)*(npx))))+(((IkReal(0.601420000000000))*((npy)*(npy))))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x450=((cj4)*(npx));
IkReal x451=((npx)*(sj4));
IkReal x452=((IkReal(0.0180426000000000))*(npy));
IkReal x453=((npy)*(sj4));
if( IKabs(((gconst25)*(((((IkReal(-0.0180426000000000))*(x450)))+(((IkReal(-0.180846994000000))*(x451)))+(((IkReal(-1.00000000000000))*(npy)*(pp)))+(((IkReal(0.0180426000000000))*(npx)))+(((IkReal(0.00179398590000000))*(npy)))+(((IkReal(-0.00180000000000000))*(cj4)*(npy)))+(((IkReal(-0.0180420000000000))*(x453))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst25)*(((((IkReal(0.0180420000000000))*(x451)))+(((npx)*(pp)))+(((IkReal(0.00180000000000000))*(x450)))+(x452)+(((IkReal(-0.00179398590000000))*(npx)))+(((IkReal(-1.00000000000000))*(cj4)*(x452)))+(((IkReal(-0.180846994000000))*(x453))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst25)*(((((IkReal(-0.0180426000000000))*(x450)))+(((IkReal(-0.180846994000000))*(x451)))+(((IkReal(-1.00000000000000))*(npy)*(pp)))+(((IkReal(0.0180426000000000))*(npx)))+(((IkReal(0.00179398590000000))*(npy)))+(((IkReal(-0.00180000000000000))*(cj4)*(npy)))+(((IkReal(-0.0180420000000000))*(x453)))))), ((gconst25)*(((((IkReal(0.0180420000000000))*(x451)))+(((npx)*(pp)))+(((IkReal(0.00180000000000000))*(x450)))+(x452)+(((IkReal(-0.00179398590000000))*(npx)))+(((IkReal(-1.00000000000000))*(cj4)*(x452)))+(((IkReal(-0.180846994000000))*(x453)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x454=IKcos(j7);
IkReal x455=IKsin(j7);
IkReal x456=((npx)*(x455));
IkReal x457=((npy)*(x454));
IkReal x458=((npx)*(x454));
IkReal x459=((npy)*(x455));
evalcond[0]=((IkReal(-0.0300000000000000))+(((IkReal(0.300700000000000))*(sj4)))+(x456)+(x457)+(((IkReal(0.0300000000000000))*(cj4))));
evalcond[1]=((IkReal(-0.300710000000000))+(x458)+(((IkReal(-1.00000000000000))*(x459)))+(((IkReal(0.0300000000000000))*(sj4)))+(((IkReal(-0.300700000000000))*(cj4))));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(0.601420000000000))*(x458)))+(((IkReal(0.0600000000000000))*(x456)))+(((IkReal(-0.601420000000000))*(x459)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(x457))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x460=((npx)*(sj4));
IkReal x461=((IkReal(0.300700000000000))*(npy));
IkReal x462=((IkReal(0.0300000000000000))*(npx));
IkReal x463=((IkReal(0.0300000000000000))*(npy));
if( IKabs(((gconst24)*(((x462)+(((IkReal(-1.00000000000000))*(cj4)*(x462)))+(((IkReal(-0.300710000000000))*(npy)))+(((IkReal(-1.00000000000000))*(cj4)*(x461)))+(((IkReal(-0.300700000000000))*(x460)))+(((sj4)*(x463))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst24)*(((((IkReal(-1.00000000000000))*(cj4)*(x463)))+(((IkReal(0.300700000000000))*(cj4)*(npx)))+(x463)+(((IkReal(-0.0300000000000000))*(x460)))+(((IkReal(0.300710000000000))*(npx)))+(((IkReal(-1.00000000000000))*(sj4)*(x461))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst24)*(((x462)+(((IkReal(-1.00000000000000))*(cj4)*(x462)))+(((IkReal(-0.300710000000000))*(npy)))+(((IkReal(-1.00000000000000))*(cj4)*(x461)))+(((IkReal(-0.300700000000000))*(x460)))+(((sj4)*(x463)))))), ((gconst24)*(((((IkReal(-1.00000000000000))*(cj4)*(x463)))+(((IkReal(0.300700000000000))*(cj4)*(npx)))+(x463)+(((IkReal(-0.0300000000000000))*(x460)))+(((IkReal(0.300710000000000))*(npx)))+(((IkReal(-1.00000000000000))*(sj4)*(x461)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x464=IKcos(j7);
IkReal x465=IKsin(j7);
IkReal x466=((npx)*(x465));
IkReal x467=((npy)*(x464));
IkReal x468=((npx)*(x464));
IkReal x469=((npy)*(x465));
evalcond[0]=((IkReal(-0.0300000000000000))+(((IkReal(0.300700000000000))*(sj4)))+(x467)+(x466)+(((IkReal(0.0300000000000000))*(cj4))));
evalcond[1]=((IkReal(-0.300710000000000))+(((IkReal(0.0300000000000000))*(sj4)))+(x468)+(((IkReal(-1.00000000000000))*(x469)))+(((IkReal(-0.300700000000000))*(cj4))));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(0.601420000000000))*(x468)))+(((IkReal(0.0600000000000000))*(x466)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(x467)))+(((IkReal(-0.601420000000000))*(x469))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x470=((IkReal(-1.00000000000000))*(npz));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.182646994100000))+(((IkReal(-0.0360846000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.179046994000000))*(cj4))));
evalcond[2]=x470;
evalcond[3]=x470;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst26;
gconst26=IKsign((((npy)*(npy))+((npx)*(npx))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst27;
gconst27=IKsign(((((IkReal(0.601420000000000))*((npx)*(npx))))+(((IkReal(0.601420000000000))*((npy)*(npy))))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x471=((cj4)*(npx));
IkReal x472=((npx)*(sj4));
IkReal x473=((IkReal(0.0180426000000000))*(npy));
IkReal x474=((npy)*(sj4));
if( IKabs(((gconst27)*(((((IkReal(-0.0180426000000000))*(npx)))+(((IkReal(0.0180426000000000))*(x471)))+(((IkReal(-1.00000000000000))*(npy)*(pp)))+(((IkReal(0.180846994000000))*(x472)))+(((IkReal(0.00179398590000000))*(npy)))+(((IkReal(-0.00180000000000000))*(cj4)*(npy)))+(((IkReal(-0.0180420000000000))*(x474))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst27)*(((((cj4)*(x473)))+(((IkReal(0.0180420000000000))*(x472)))+(((npx)*(pp)))+(((IkReal(-1.00000000000000))*(x473)))+(((IkReal(0.00180000000000000))*(x471)))+(((IkReal(0.180846994000000))*(x474)))+(((IkReal(-0.00179398590000000))*(npx))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst27)*(((((IkReal(-0.0180426000000000))*(npx)))+(((IkReal(0.0180426000000000))*(x471)))+(((IkReal(-1.00000000000000))*(npy)*(pp)))+(((IkReal(0.180846994000000))*(x472)))+(((IkReal(0.00179398590000000))*(npy)))+(((IkReal(-0.00180000000000000))*(cj4)*(npy)))+(((IkReal(-0.0180420000000000))*(x474)))))), ((gconst27)*(((((cj4)*(x473)))+(((IkReal(0.0180420000000000))*(x472)))+(((npx)*(pp)))+(((IkReal(-1.00000000000000))*(x473)))+(((IkReal(0.00180000000000000))*(x471)))+(((IkReal(0.180846994000000))*(x474)))+(((IkReal(-0.00179398590000000))*(npx)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x475=IKcos(j7);
IkReal x476=IKsin(j7);
IkReal x477=((npx)*(x476));
IkReal x478=((npy)*(x475));
IkReal x479=((npx)*(x475));
IkReal x480=((npy)*(x476));
evalcond[0]=((IkReal(0.0300000000000000))+(x477)+(x478)+(((IkReal(-0.300700000000000))*(sj4)))+(((IkReal(-0.0300000000000000))*(cj4))));
evalcond[1]=((IkReal(-0.300710000000000))+(x479)+(((IkReal(-1.00000000000000))*(x480)))+(((IkReal(0.0300000000000000))*(sj4)))+(((IkReal(-0.300700000000000))*(cj4))));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(-0.0600000000000000))*(x478)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x477)))+(((IkReal(0.601420000000000))*(x479)))+(((IkReal(-0.601420000000000))*(x480))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x481=((npx)*(sj4));
IkReal x482=((IkReal(0.300700000000000))*(npy));
IkReal x483=((IkReal(0.0300000000000000))*(npx));
IkReal x484=((IkReal(0.0300000000000000))*(npy));
if( IKabs(((gconst26)*(((((IkReal(-1.00000000000000))*(x483)))+(((cj4)*(x483)))+(((IkReal(-0.300710000000000))*(npy)))+(((IkReal(-1.00000000000000))*(cj4)*(x482)))+(((sj4)*(x484)))+(((IkReal(0.300700000000000))*(x481))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst26)*(((((IkReal(0.300700000000000))*(cj4)*(npx)))+(((IkReal(-1.00000000000000))*(x484)))+(((cj4)*(x484)))+(((IkReal(0.300710000000000))*(npx)))+(((IkReal(-0.0300000000000000))*(x481)))+(((sj4)*(x482))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst26)*(((((IkReal(-1.00000000000000))*(x483)))+(((cj4)*(x483)))+(((IkReal(-0.300710000000000))*(npy)))+(((IkReal(-1.00000000000000))*(cj4)*(x482)))+(((sj4)*(x484)))+(((IkReal(0.300700000000000))*(x481)))))), ((gconst26)*(((((IkReal(0.300700000000000))*(cj4)*(npx)))+(((IkReal(-1.00000000000000))*(x484)))+(((cj4)*(x484)))+(((IkReal(0.300710000000000))*(npx)))+(((IkReal(-0.0300000000000000))*(x481)))+(((sj4)*(x482)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x485=IKcos(j7);
IkReal x486=IKsin(j7);
IkReal x487=((npx)*(x486));
IkReal x488=((npy)*(x485));
IkReal x489=((npx)*(x485));
IkReal x490=((npy)*(x486));
evalcond[0]=((IkReal(0.0300000000000000))+(((IkReal(-0.300700000000000))*(sj4)))+(((IkReal(-0.0300000000000000))*(cj4)))+(x488)+(x487));
evalcond[1]=((IkReal(-0.300710000000000))+(((IkReal(0.0300000000000000))*(sj4)))+(x489)+(((IkReal(-1.00000000000000))*(x490)))+(((IkReal(-0.300700000000000))*(cj4))));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(0.601420000000000))*(x489)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x487)))+(((IkReal(-0.601420000000000))*(x490)))+(((IkReal(-0.0600000000000000))*(x488))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x491=((npx)*(sj4));
IkReal x492=((IkReal(0.300700000000000))*(sj5));
IkReal x493=((IkReal(0.0300000000000000))*(sj5));
IkReal x494=((cj4)*(npx));
IkReal x495=((cj4)*(npy));
IkReal x496=((npy)*(sj4));
if( IKabs(((gconst23)*(((((IkReal(-0.300700000000000))*(x495)))+(((IkReal(0.0300000000000000))*(x496)))+(((npx)*(x493)))+(((IkReal(-0.300710000000000))*(npy)))+(((IkReal(-1.00000000000000))*(x493)*(x494)))+(((IkReal(-1.00000000000000))*(x491)*(x492))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst23)*(((((IkReal(0.300700000000000))*(x494)))+(((IkReal(0.300710000000000))*(npx)))+(((npy)*(x493)))+(((IkReal(-1.00000000000000))*(x493)*(x495)))+(((IkReal(-0.0300000000000000))*(x491)))+(((IkReal(-1.00000000000000))*(x492)*(x496))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst23)*(((((IkReal(-0.300700000000000))*(x495)))+(((IkReal(0.0300000000000000))*(x496)))+(((npx)*(x493)))+(((IkReal(-0.300710000000000))*(npy)))+(((IkReal(-1.00000000000000))*(x493)*(x494)))+(((IkReal(-1.00000000000000))*(x491)*(x492)))))), ((gconst23)*(((((IkReal(0.300700000000000))*(x494)))+(((IkReal(0.300710000000000))*(npx)))+(((npy)*(x493)))+(((IkReal(-1.00000000000000))*(x493)*(x495)))+(((IkReal(-0.0300000000000000))*(x491)))+(((IkReal(-1.00000000000000))*(x492)*(x496)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x497=IKcos(j7);
IkReal x498=IKsin(j7);
IkReal x499=((IkReal(0.300700000000000))*(sj4));
IkReal x500=((IkReal(1.00000000000000))*(sj5));
IkReal x501=((IkReal(0.0600000000000000))*(sj5));
IkReal x502=((IkReal(0.0300000000000000))*(sj5));
IkReal x503=((cj5)*(npz));
IkReal x504=((npy)*(x497));
IkReal x505=((npx)*(x498));
IkReal x506=((npx)*(x497));
IkReal x507=((npy)*(x498));
evalcond[0]=((((sj5)*(x499)))+(((IkReal(-1.00000000000000))*(x502)))+(((cj4)*(x502)))+(x504)+(x505));
evalcond[1]=((IkReal(-0.300710000000000))+(((IkReal(0.0300000000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(x507)))+(((IkReal(-0.300700000000000))*(cj4)))+(x506));
evalcond[2]=((((npz)*(sj5)))+(((cj5)*(x505)))+(((cj5)*(x504))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x500)*(x505)))+(((IkReal(-1.00000000000000))*(x500)*(x504)))+(((IkReal(-0.0300000000000000))*(cj4)))+(((IkReal(-1.00000000000000))*(x499)))+(x503));
evalcond[4]=((IkReal(-6.01410000000000e-6))+(((IkReal(-1.00000000000000))*(pp)))+(((x501)*(x504)))+(((IkReal(0.601420000000000))*(x506)))+(((IkReal(-0.601420000000000))*(x507)))+(((IkReal(-0.0600000000000000))*(x503)))+(((x501)*(x505))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x508=((cj5)*(npx));
IkReal x509=((IkReal(0.0300000000000000))*(sj4));
IkReal x510=((IkReal(0.300700000000000))*(cj4));
IkReal x511=((cj5)*(npy));
IkReal x512=((IkReal(1.00000000000000))*(npz)*(sj5));
if( IKabs(((gconst22)*(((((x509)*(x511)))+(((IkReal(-1.00000000000000))*(x510)*(x511)))+(((IkReal(-1.00000000000000))*(npx)*(x512)))+(((IkReal(-0.300710000000000))*(x511))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst22)*(((((IkReal(0.300710000000000))*(x508)))+(((x508)*(x510)))+(((IkReal(-1.00000000000000))*(npy)*(x512)))+(((IkReal(-1.00000000000000))*(x508)*(x509))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst22)*(((((x509)*(x511)))+(((IkReal(-1.00000000000000))*(x510)*(x511)))+(((IkReal(-1.00000000000000))*(npx)*(x512)))+(((IkReal(-0.300710000000000))*(x511)))))), ((gconst22)*(((((IkReal(0.300710000000000))*(x508)))+(((x508)*(x510)))+(((IkReal(-1.00000000000000))*(npy)*(x512)))+(((IkReal(-1.00000000000000))*(x508)*(x509)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x513=IKcos(j7);
IkReal x514=IKsin(j7);
IkReal x515=((IkReal(0.300700000000000))*(sj4));
IkReal x516=((IkReal(1.00000000000000))*(sj5));
IkReal x517=((IkReal(0.0600000000000000))*(sj5));
IkReal x518=((IkReal(0.0300000000000000))*(sj5));
IkReal x519=((cj5)*(npz));
IkReal x520=((npy)*(x513));
IkReal x521=((npx)*(x514));
IkReal x522=((npx)*(x513));
IkReal x523=((npy)*(x514));
evalcond[0]=((((IkReal(-1.00000000000000))*(x518)))+(((cj4)*(x518)))+(((sj5)*(x515)))+(x520)+(x521));
evalcond[1]=((IkReal(-0.300710000000000))+(((IkReal(-1.00000000000000))*(x523)))+(((IkReal(0.0300000000000000))*(sj4)))+(x522)+(((IkReal(-0.300700000000000))*(cj4))));
evalcond[2]=((((npz)*(sj5)))+(((cj5)*(x521)))+(((cj5)*(x520))));
evalcond[3]=((IkReal(0.0300000000000000))+(x519)+(((IkReal(-1.00000000000000))*(x516)*(x520)))+(((IkReal(-0.0300000000000000))*(cj4)))+(((IkReal(-1.00000000000000))*(x516)*(x521)))+(((IkReal(-1.00000000000000))*(x515))));
evalcond[4]=((IkReal(-6.01410000000000e-6))+(((IkReal(-0.601420000000000))*(x523)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.601420000000000))*(x522)))+(((x517)*(x520)))+(((IkReal(-0.0600000000000000))*(x519)))+(((x517)*(x521))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x524=((IkReal(0.0300000000000000))*(cj5));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j6)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.182646994100000))+(((IkReal(-0.0360846000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.179046994000000))*(cj4))));
evalcond[2]=((((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-1.00000000000000))*(cj4)*(x524)))+(((IkReal(-0.300700000000000))*(cj5)*(sj4)))+(x524));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst28;
gconst28=IKsign(((((cj5)*((npy)*(npy))))+(((cj5)*((npx)*(npx))))));
dummyeval[0]=((((cj5)*((npy)*(npy))))+(((cj5)*((npx)*(npx)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst29;
gconst29=IKsign(((((IkReal(-1.00000000000000))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x525=((IkReal(-1.00000000000000))*(npz));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.182646994100000))+(((IkReal(-0.0360846000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.179046994000000))*(cj4))));
evalcond[2]=x525;
evalcond[3]=x525;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst30;
gconst30=IKsign(((((IkReal(-1.00000000000000))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst31;
gconst31=IKsign(((((IkReal(-0.601420000000000))*((npx)*(npx))))+(((IkReal(-0.601420000000000))*((npy)*(npy))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x526=((cj4)*(npx));
IkReal x527=((npx)*(sj4));
IkReal x528=((IkReal(0.0180426000000000))*(npy));
IkReal x529=((npy)*(sj4));
if( IKabs(((gconst31)*(((((IkReal(-0.0180426000000000))*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(pp)))+(((IkReal(-0.0180420000000000))*(x529)))+(((IkReal(0.00179398590000000))*(npy)))+(((IkReal(-0.00180000000000000))*(cj4)*(npy)))+(((IkReal(0.180846994000000))*(x527)))+(((IkReal(0.0180426000000000))*(x526))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst31)*(((((npx)*(pp)))+(((IkReal(-1.00000000000000))*(x528)))+(((IkReal(0.180846994000000))*(x529)))+(((IkReal(-0.00179398590000000))*(npx)))+(((IkReal(0.0180420000000000))*(x527)))+(((cj4)*(x528)))+(((IkReal(0.00180000000000000))*(x526))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst31)*(((((IkReal(-0.0180426000000000))*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(pp)))+(((IkReal(-0.0180420000000000))*(x529)))+(((IkReal(0.00179398590000000))*(npy)))+(((IkReal(-0.00180000000000000))*(cj4)*(npy)))+(((IkReal(0.180846994000000))*(x527)))+(((IkReal(0.0180426000000000))*(x526)))))), ((gconst31)*(((((npx)*(pp)))+(((IkReal(-1.00000000000000))*(x528)))+(((IkReal(0.180846994000000))*(x529)))+(((IkReal(-0.00179398590000000))*(npx)))+(((IkReal(0.0180420000000000))*(x527)))+(((cj4)*(x528)))+(((IkReal(0.00180000000000000))*(x526)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x530=IKsin(j7);
IkReal x531=IKcos(j7);
IkReal x532=((npy)*(x531));
IkReal x533=((npx)*(x531));
IkReal x534=((npx)*(x530));
IkReal x535=((npy)*(x530));
evalcond[0]=((IkReal(-0.0300000000000000))+(((IkReal(0.300700000000000))*(sj4)))+(((IkReal(0.0300000000000000))*(cj4)))+(x532)+(x534));
evalcond[1]=((IkReal(-0.300710000000000))+(((IkReal(0.0300000000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(x533)))+(((IkReal(-0.300700000000000))*(cj4)))+(x535));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(0.601420000000000))*(x535)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(x534)))+(((IkReal(-0.601420000000000))*(x533)))+(((IkReal(0.0600000000000000))*(x532))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x536=((npx)*(sj4));
IkReal x537=((IkReal(0.300700000000000))*(cj4));
IkReal x538=((IkReal(0.0300000000000000))*(npx));
IkReal x539=((IkReal(0.0300000000000000))*(npy));
if( IKabs(((gconst30)*(((((cj4)*(x538)))+(((IkReal(-1.00000000000000))*(npy)*(x537)))+(((IkReal(-0.300710000000000))*(npy)))+(((IkReal(-1.00000000000000))*(x538)))+(((sj4)*(x539)))+(((IkReal(0.300700000000000))*(x536))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst30)*(((((npx)*(x537)))+(((cj4)*(x539)))+(((IkReal(0.300710000000000))*(npx)))+(((IkReal(0.300700000000000))*(npy)*(sj4)))+(((IkReal(-0.0300000000000000))*(x536)))+(((IkReal(-1.00000000000000))*(x539))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst30)*(((((cj4)*(x538)))+(((IkReal(-1.00000000000000))*(npy)*(x537)))+(((IkReal(-0.300710000000000))*(npy)))+(((IkReal(-1.00000000000000))*(x538)))+(((sj4)*(x539)))+(((IkReal(0.300700000000000))*(x536)))))), ((gconst30)*(((((npx)*(x537)))+(((cj4)*(x539)))+(((IkReal(0.300710000000000))*(npx)))+(((IkReal(0.300700000000000))*(npy)*(sj4)))+(((IkReal(-0.0300000000000000))*(x536)))+(((IkReal(-1.00000000000000))*(x539)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x540=IKsin(j7);
IkReal x541=IKcos(j7);
IkReal x542=((npy)*(x541));
IkReal x543=((npx)*(x541));
IkReal x544=((npx)*(x540));
IkReal x545=((npy)*(x540));
evalcond[0]=((IkReal(-0.0300000000000000))+(((IkReal(0.300700000000000))*(sj4)))+(x544)+(x542)+(((IkReal(0.0300000000000000))*(cj4))));
evalcond[1]=((IkReal(-0.300710000000000))+(x545)+(((IkReal(0.0300000000000000))*(sj4)))+(((IkReal(-0.300700000000000))*(cj4)))+(((IkReal(-1.00000000000000))*(x543))));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(0.601420000000000))*(x545)))+(((IkReal(-0.601420000000000))*(x543)))+(((IkReal(0.0600000000000000))*(x542)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(x544))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.182646994100000))+(((IkReal(-0.0360846000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.179046994000000))*(cj4))));
evalcond[2]=npz;
evalcond[3]=((IkReal(-1.00000000000000))*(npz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst32;
gconst32=IKsign(((((IkReal(-1.00000000000000))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst33;
gconst33=IKsign(((((IkReal(-0.601420000000000))*((npx)*(npx))))+(((IkReal(-0.601420000000000))*((npy)*(npy))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x546=((cj4)*(npx));
IkReal x547=((npx)*(sj4));
IkReal x548=((IkReal(0.0180426000000000))*(npy));
IkReal x549=((npy)*(sj4));
if( IKabs(((gconst33)*(((((IkReal(-0.0180426000000000))*(x546)))+(((IkReal(-0.180846994000000))*(x547)))+(((IkReal(-0.0180420000000000))*(x549)))+(((IkReal(-1.00000000000000))*(npy)*(pp)))+(((IkReal(0.0180426000000000))*(npx)))+(((IkReal(0.00179398590000000))*(npy)))+(((IkReal(-0.00180000000000000))*(cj4)*(npy))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst33)*(((((npx)*(pp)))+(x548)+(((IkReal(0.00180000000000000))*(x546)))+(((IkReal(-0.00179398590000000))*(npx)))+(((IkReal(-1.00000000000000))*(cj4)*(x548)))+(((IkReal(0.0180420000000000))*(x547)))+(((IkReal(-0.180846994000000))*(x549))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst33)*(((((IkReal(-0.0180426000000000))*(x546)))+(((IkReal(-0.180846994000000))*(x547)))+(((IkReal(-0.0180420000000000))*(x549)))+(((IkReal(-1.00000000000000))*(npy)*(pp)))+(((IkReal(0.0180426000000000))*(npx)))+(((IkReal(0.00179398590000000))*(npy)))+(((IkReal(-0.00180000000000000))*(cj4)*(npy)))))), ((gconst33)*(((((npx)*(pp)))+(x548)+(((IkReal(0.00180000000000000))*(x546)))+(((IkReal(-0.00179398590000000))*(npx)))+(((IkReal(-1.00000000000000))*(cj4)*(x548)))+(((IkReal(0.0180420000000000))*(x547)))+(((IkReal(-0.180846994000000))*(x549)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x550=IKsin(j7);
IkReal x551=IKcos(j7);
IkReal x552=((npy)*(x551));
IkReal x553=((npx)*(x551));
IkReal x554=((npx)*(x550));
IkReal x555=((npy)*(x550));
evalcond[0]=((IkReal(0.0300000000000000))+(((IkReal(-0.300700000000000))*(sj4)))+(((IkReal(-0.0300000000000000))*(cj4)))+(x552)+(x554));
evalcond[1]=((IkReal(-0.300710000000000))+(((IkReal(-1.00000000000000))*(x553)))+(((IkReal(0.0300000000000000))*(sj4)))+(((IkReal(-0.300700000000000))*(cj4)))+(x555));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(-0.601420000000000))*(x553)))+(((IkReal(-0.0600000000000000))*(x554)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x552)))+(((IkReal(0.601420000000000))*(x555))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x556=((npx)*(sj4));
IkReal x557=((IkReal(0.300700000000000))*(npy));
IkReal x558=((IkReal(0.0300000000000000))*(npx));
IkReal x559=((IkReal(0.0300000000000000))*(npy));
if( IKabs(((gconst32)*(((((IkReal(-1.00000000000000))*(cj4)*(x558)))+(((IkReal(-0.300710000000000))*(npy)))+(((IkReal(-1.00000000000000))*(cj4)*(x557)))+(((IkReal(-0.300700000000000))*(x556)))+(((sj4)*(x559)))+(x558))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst32)*(((((IkReal(-0.0300000000000000))*(x556)))+(((IkReal(0.300700000000000))*(cj4)*(npx)))+(((IkReal(0.300710000000000))*(npx)))+(((IkReal(-1.00000000000000))*(cj4)*(x559)))+(((IkReal(-1.00000000000000))*(sj4)*(x557)))+(x559))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst32)*(((((IkReal(-1.00000000000000))*(cj4)*(x558)))+(((IkReal(-0.300710000000000))*(npy)))+(((IkReal(-1.00000000000000))*(cj4)*(x557)))+(((IkReal(-0.300700000000000))*(x556)))+(((sj4)*(x559)))+(x558)))), ((gconst32)*(((((IkReal(-0.0300000000000000))*(x556)))+(((IkReal(0.300700000000000))*(cj4)*(npx)))+(((IkReal(0.300710000000000))*(npx)))+(((IkReal(-1.00000000000000))*(cj4)*(x559)))+(((IkReal(-1.00000000000000))*(sj4)*(x557)))+(x559)))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x560=IKsin(j7);
IkReal x561=IKcos(j7);
IkReal x562=((npy)*(x561));
IkReal x563=((npx)*(x561));
IkReal x564=((npx)*(x560));
IkReal x565=((npy)*(x560));
evalcond[0]=((IkReal(0.0300000000000000))+(((IkReal(-0.300700000000000))*(sj4)))+(x564)+(x562)+(((IkReal(-0.0300000000000000))*(cj4))));
evalcond[1]=((IkReal(-0.300710000000000))+(((IkReal(-1.00000000000000))*(x563)))+(x565)+(((IkReal(0.0300000000000000))*(sj4)))+(((IkReal(-0.300700000000000))*(cj4))));
evalcond[2]=((IkReal(-6.01410000000000e-6))+(((IkReal(0.601420000000000))*(x565)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x562)))+(((IkReal(-0.601420000000000))*(x563)))+(((IkReal(-0.0600000000000000))*(x564))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x566=((npx)*(sj5));
IkReal x567=((IkReal(0.300700000000000))*(sj4));
IkReal x568=((IkReal(0.0300000000000000))*(cj4));
IkReal x569=((IkReal(0.300700000000000))*(cj4));
IkReal x570=((IkReal(0.0300000000000000))*(npy));
IkReal x571=((npy)*(sj5));
if( IKabs(((gconst29)*(((((x566)*(x567)))+(((IkReal(-1.00000000000000))*(npy)*(x569)))+(((IkReal(-0.0300000000000000))*(x566)))+(((IkReal(-0.300710000000000))*(npy)))+(((x566)*(x568)))+(((sj4)*(x570))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst29)*(((((IkReal(-0.0300000000000000))*(npx)*(sj4)))+(((IkReal(0.300710000000000))*(npx)))+(((x567)*(x571)))+(((IkReal(-1.00000000000000))*(sj5)*(x570)))+(((npx)*(x569)))+(((x568)*(x571))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst29)*(((((x566)*(x567)))+(((IkReal(-1.00000000000000))*(npy)*(x569)))+(((IkReal(-0.0300000000000000))*(x566)))+(((IkReal(-0.300710000000000))*(npy)))+(((x566)*(x568)))+(((sj4)*(x570)))))), ((gconst29)*(((((IkReal(-0.0300000000000000))*(npx)*(sj4)))+(((IkReal(0.300710000000000))*(npx)))+(((x567)*(x571)))+(((IkReal(-1.00000000000000))*(sj5)*(x570)))+(((npx)*(x569)))+(((x568)*(x571)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x572=IKsin(j7);
IkReal x573=IKcos(j7);
IkReal x574=((IkReal(1.00000000000000))*(npz));
IkReal x575=((IkReal(0.300700000000000))*(sj4));
IkReal x576=((IkReal(1.00000000000000))*(sj5));
IkReal x577=((IkReal(0.0600000000000000))*(sj5));
IkReal x578=((IkReal(0.0300000000000000))*(sj5));
IkReal x579=((npy)*(x573));
IkReal x580=((npy)*(x572));
IkReal x581=((npx)*(x572));
IkReal x582=((npx)*(x573));
evalcond[0]=((x579)+(((cj4)*(x578)))+(((sj5)*(x575)))+(((IkReal(-1.00000000000000))*(x578)))+(x581));
evalcond[1]=((IkReal(-0.300710000000000))+(((IkReal(-1.00000000000000))*(x582)))+(((IkReal(0.0300000000000000))*(sj4)))+(x580)+(((IkReal(-0.300700000000000))*(cj4))));
evalcond[2]=((((cj5)*(x581)))+(((IkReal(-1.00000000000000))*(sj5)*(x574)))+(((cj5)*(x579))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x576)*(x581)))+(((IkReal(-1.00000000000000))*(x575)))+(((IkReal(-1.00000000000000))*(x576)*(x579)))+(((IkReal(-0.0300000000000000))*(cj4)))+(((IkReal(-1.00000000000000))*(cj5)*(x574))));
evalcond[4]=((IkReal(-6.01410000000000e-6))+(((x577)*(x581)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.601420000000000))*(x580)))+(((IkReal(-0.601420000000000))*(x582)))+(((x577)*(x579)))+(((IkReal(0.0600000000000000))*(cj5)*(npz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x583=((npz)*(sj5));
IkReal x584=((cj5)*(npx));
IkReal x585=((IkReal(0.0300000000000000))*(sj4));
IkReal x586=((IkReal(0.300700000000000))*(cj4));
IkReal x587=((cj5)*(npy));
if( IKabs(((gconst28)*(((((IkReal(-1.00000000000000))*(x585)*(x587)))+(((IkReal(0.300710000000000))*(x587)))+(((npx)*(x583)))+(((x586)*(x587))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst28)*(((((IkReal(-1.00000000000000))*(x584)*(x586)))+(((x584)*(x585)))+(((IkReal(-0.300710000000000))*(x584)))+(((npy)*(x583))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst28)*(((((IkReal(-1.00000000000000))*(x585)*(x587)))+(((IkReal(0.300710000000000))*(x587)))+(((npx)*(x583)))+(((x586)*(x587)))))), ((gconst28)*(((((IkReal(-1.00000000000000))*(x584)*(x586)))+(((x584)*(x585)))+(((IkReal(-0.300710000000000))*(x584)))+(((npy)*(x583)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x588=IKsin(j7);
IkReal x589=IKcos(j7);
IkReal x590=((IkReal(1.00000000000000))*(npz));
IkReal x591=((IkReal(0.300700000000000))*(sj4));
IkReal x592=((IkReal(1.00000000000000))*(sj5));
IkReal x593=((IkReal(0.0600000000000000))*(sj5));
IkReal x594=((IkReal(0.0300000000000000))*(sj5));
IkReal x595=((npy)*(x589));
IkReal x596=((npy)*(x588));
IkReal x597=((npx)*(x588));
IkReal x598=((npx)*(x589));
evalcond[0]=((((cj4)*(x594)))+(((IkReal(-1.00000000000000))*(x594)))+(((sj5)*(x591)))+(x597)+(x595));
evalcond[1]=((IkReal(-0.300710000000000))+(((IkReal(0.0300000000000000))*(sj4)))+(x596)+(((IkReal(-0.300700000000000))*(cj4)))+(((IkReal(-1.00000000000000))*(x598))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj5)*(x590)))+(((cj5)*(x597)))+(((cj5)*(x595))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x592)*(x595)))+(((IkReal(-1.00000000000000))*(x591)))+(((IkReal(-0.0300000000000000))*(cj4)))+(((IkReal(-1.00000000000000))*(x592)*(x597)))+(((IkReal(-1.00000000000000))*(cj5)*(x590))));
evalcond[4]=((IkReal(-6.01410000000000e-6))+(((x593)*(x595)))+(((IkReal(-0.601420000000000))*(x598)))+(((IkReal(-1.00000000000000))*(pp)))+(((x593)*(x597)))+(((IkReal(0.601420000000000))*(x596)))+(((IkReal(0.0600000000000000))*(cj5)*(npz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x599=((IkReal(-0.300710000000000))+(((IkReal(-1.00000000000000))*(npz)))+(((IkReal(0.0300000000000000))*(sj4)))+(((IkReal(-0.300700000000000))*(cj4))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j6)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.182646994100000))+(((IkReal(-0.0360846000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.179046994000000))*(cj4))));
evalcond[2]=x599;
evalcond[3]=x599;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst34;
gconst34=IKsign((((npy)*(npy))+((npx)*(npx))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst35;
IkReal x600=((IkReal(1.00000000000000))*(sj5));
gconst35=IKsign(((((IkReal(-1.00000000000000))*(x600)*((npy)*(npy))))+(((IkReal(-1.00000000000000))*(x600)*((npx)*(npx))))));
IkReal x601=((IkReal(1.00000000000000))*(sj5));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x601)*((npy)*(npy))))+(((IkReal(-1.00000000000000))*(x601)*((npx)*(npx)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x602=(sj5)*(sj5);
IkReal x603=((IkReal(0.0300000000000000))*(npx));
IkReal x604=((cj5)*(sj5));
IkReal x605=((IkReal(0.300700000000000))*(sj4));
IkReal x606=((IkReal(0.0300000000000000))*(npy));
IkReal x607=((cj4)*(x602));
IkReal x608=((npy)*(x602));
if( IKabs(((gconst35)*(((((IkReal(-1.00000000000000))*(x602)*(x603)))+(((npx)*(x602)*(x605)))+(((cj4)*(x604)*(x606)))+(((npy)*(x604)*(x605)))+(((x603)*(x607)))+(((IkReal(-1.00000000000000))*(x604)*(x606))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst35)*(((((x605)*(x608)))+(((IkReal(-1.00000000000000))*(x602)*(x606)))+(((IkReal(-1.00000000000000))*(cj4)*(x603)*(x604)))+(((x606)*(x607)))+(((IkReal(-1.00000000000000))*(npx)*(x604)*(x605)))+(((x603)*(x604))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst35)*(((((IkReal(-1.00000000000000))*(x602)*(x603)))+(((npx)*(x602)*(x605)))+(((cj4)*(x604)*(x606)))+(((npy)*(x604)*(x605)))+(((x603)*(x607)))+(((IkReal(-1.00000000000000))*(x604)*(x606)))))), ((gconst35)*(((((x605)*(x608)))+(((IkReal(-1.00000000000000))*(x602)*(x606)))+(((IkReal(-1.00000000000000))*(cj4)*(x603)*(x604)))+(((x606)*(x607)))+(((IkReal(-1.00000000000000))*(npx)*(x604)*(x605)))+(((x603)*(x604)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x609=IKcos(j7);
IkReal x610=IKsin(j7);
IkReal x611=((cj5)*(npy));
IkReal x612=((IkReal(0.300700000000000))*(sj4));
IkReal x613=((IkReal(1.00000000000000))*(sj5));
IkReal x614=((npx)*(sj5));
IkReal x615=((IkReal(0.0300000000000000))*(cj4));
IkReal x616=((cj5)*(npx));
IkReal x617=((npy)*(x609));
IkReal x618=((IkReal(0.0600000000000000))*(x610));
IkReal x619=((npy)*(x610));
IkReal x620=((npx)*(x610));
evalcond[0]=((((sj5)*(x615)))+(x617)+(((sj5)*(x612)))+(x620)+(((IkReal(-0.0300000000000000))*(sj5))));
evalcond[1]=((((x610)*(x616)))+(((IkReal(-1.00000000000000))*(x613)*(x619)))+(((x609)*(x614)))+(((x609)*(x611))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x612)))+(((IkReal(-1.00000000000000))*(x613)*(x617)))+(((IkReal(-1.00000000000000))*(x610)*(x611)))+(((IkReal(-1.00000000000000))*(x613)*(x620)))+(((x609)*(x616)))+(((IkReal(-1.00000000000000))*(x615))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj5)*(x615)))+(((IkReal(-1.00000000000000))*(x619)))+(((npx)*(x609)))+(((IkReal(0.0300000000000000))*(cj5)))+(((IkReal(-1.00000000000000))*(cj5)*(x612))));
evalcond[4]=((IkReal(-6.01410000000000e-6))+(((IkReal(0.0600000000000000))*(sj5)*(x617)))+(((x614)*(x618)))+(((IkReal(-1.00000000000000))*(pp)))+(((x611)*(x618)))+(((IkReal(-0.0600000000000000))*(x609)*(x616)))+(((IkReal(-0.601420000000000))*(npz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x621=((npx)*(sj5));
IkReal x622=((IkReal(0.300700000000000))*(sj4));
IkReal x623=((IkReal(0.0300000000000000))*(cj4));
IkReal x624=((cj5)*(npy));
IkReal x625=((npy)*(sj5));
IkReal x626=((cj5)*(npx));
if( IKabs(((gconst34)*(((((IkReal(-1.00000000000000))*(x621)*(x623)))+(((IkReal(-1.00000000000000))*(x621)*(x622)))+(((IkReal(-1.00000000000000))*(x623)*(x624)))+(((IkReal(0.0300000000000000))*(x624)))+(((IkReal(-1.00000000000000))*(x622)*(x624)))+(((IkReal(0.0300000000000000))*(x621))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst34)*(((((IkReal(0.0300000000000000))*(x625)))+(((x622)*(x626)))+(((x623)*(x626)))+(((IkReal(-1.00000000000000))*(x622)*(x625)))+(((IkReal(-1.00000000000000))*(x623)*(x625)))+(((IkReal(-0.0300000000000000))*(x626))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst34)*(((((IkReal(-1.00000000000000))*(x621)*(x623)))+(((IkReal(-1.00000000000000))*(x621)*(x622)))+(((IkReal(-1.00000000000000))*(x623)*(x624)))+(((IkReal(0.0300000000000000))*(x624)))+(((IkReal(-1.00000000000000))*(x622)*(x624)))+(((IkReal(0.0300000000000000))*(x621)))))), ((gconst34)*(((((IkReal(0.0300000000000000))*(x625)))+(((x622)*(x626)))+(((x623)*(x626)))+(((IkReal(-1.00000000000000))*(x622)*(x625)))+(((IkReal(-1.00000000000000))*(x623)*(x625)))+(((IkReal(-0.0300000000000000))*(x626)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x627=IKcos(j7);
IkReal x628=IKsin(j7);
IkReal x629=((cj5)*(npy));
IkReal x630=((IkReal(0.300700000000000))*(sj4));
IkReal x631=((IkReal(1.00000000000000))*(sj5));
IkReal x632=((npx)*(sj5));
IkReal x633=((IkReal(0.0300000000000000))*(cj4));
IkReal x634=((cj5)*(npx));
IkReal x635=((npy)*(x627));
IkReal x636=((IkReal(0.0600000000000000))*(x628));
IkReal x637=((npy)*(x628));
IkReal x638=((npx)*(x628));
evalcond[0]=((((sj5)*(x630)))+(((sj5)*(x633)))+(x635)+(x638)+(((IkReal(-0.0300000000000000))*(sj5))));
evalcond[1]=((((x628)*(x634)))+(((x627)*(x632)))+(((IkReal(-1.00000000000000))*(x631)*(x637)))+(((x627)*(x629))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x630)))+(((IkReal(-1.00000000000000))*(x628)*(x629)))+(((IkReal(-1.00000000000000))*(x631)*(x635)))+(((IkReal(-1.00000000000000))*(x631)*(x638)))+(((x627)*(x634)))+(((IkReal(-1.00000000000000))*(x633))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x637)))+(((npx)*(x627)))+(((IkReal(-1.00000000000000))*(cj5)*(x630)))+(((IkReal(-1.00000000000000))*(cj5)*(x633)))+(((IkReal(0.0300000000000000))*(cj5))));
evalcond[4]=((IkReal(-6.01410000000000e-6))+(((x632)*(x636)))+(((x629)*(x636)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x627)*(x634)))+(((IkReal(0.0600000000000000))*(sj5)*(x635)))+(((IkReal(-0.601420000000000))*(npz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x639=((IkReal(0.300700000000000))*(cj4));
IkReal x640=((IkReal(0.0300000000000000))*(sj4));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j6, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.182646994100000))+(((IkReal(-0.0360846000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.179046994000000))*(cj4))));
evalcond[2]=((IkReal(-0.300710000000000))+(x640)+(npz)+(((IkReal(-1.00000000000000))*(x639))));
evalcond[3]=((IkReal(0.300710000000000))+(((IkReal(-1.00000000000000))*(npz)))+(x639)+(((IkReal(-1.00000000000000))*(x640))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst36;
gconst36=IKsign((((npy)*(npy))+((npx)*(npx))));
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst37;
gconst37=IKsign(((((sj5)*((npx)*(npx))))+(((sj5)*((npy)*(npy))))));
dummyeval[0]=((((sj5)*((npx)*(npx))))+(((sj5)*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x641=(sj5)*(sj5);
IkReal x642=((IkReal(0.0300000000000000))*(npx));
IkReal x643=((cj5)*(sj5));
IkReal x644=((IkReal(0.0300000000000000))*(npy));
IkReal x645=((cj4)*(x641));
IkReal x646=((IkReal(0.300700000000000))*(npx)*(sj4));
IkReal x647=((IkReal(0.300700000000000))*(npy)*(sj4));
if( IKabs(((gconst37)*(((((IkReal(-1.00000000000000))*(x641)*(x646)))+(((IkReal(-1.00000000000000))*(x643)*(x644)))+(((cj4)*(x643)*(x644)))+(((IkReal(-1.00000000000000))*(x642)*(x645)))+(((x643)*(x647)))+(((x641)*(x642))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst37)*(((((IkReal(-1.00000000000000))*(x643)*(x646)))+(((IkReal(-1.00000000000000))*(x641)*(x647)))+(((x642)*(x643)))+(((IkReal(-1.00000000000000))*(x644)*(x645)))+(((x641)*(x644)))+(((IkReal(-1.00000000000000))*(cj4)*(x642)*(x643))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst37)*(((((IkReal(-1.00000000000000))*(x641)*(x646)))+(((IkReal(-1.00000000000000))*(x643)*(x644)))+(((cj4)*(x643)*(x644)))+(((IkReal(-1.00000000000000))*(x642)*(x645)))+(((x643)*(x647)))+(((x641)*(x642)))))), ((gconst37)*(((((IkReal(-1.00000000000000))*(x643)*(x646)))+(((IkReal(-1.00000000000000))*(x641)*(x647)))+(((x642)*(x643)))+(((IkReal(-1.00000000000000))*(x644)*(x645)))+(((x641)*(x644)))+(((IkReal(-1.00000000000000))*(cj4)*(x642)*(x643)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x648=IKsin(j7);
IkReal x649=IKcos(j7);
IkReal x650=((IkReal(0.0600000000000000))*(cj5));
IkReal x651=((IkReal(0.300700000000000))*(sj4));
IkReal x652=((IkReal(1.00000000000000))*(sj5));
IkReal x653=((IkReal(0.0600000000000000))*(sj5));
IkReal x654=((IkReal(0.0300000000000000))*(sj5));
IkReal x655=((IkReal(0.0300000000000000))*(cj5));
IkReal x656=((npy)*(x649));
IkReal x657=((npy)*(x648));
IkReal x658=((npx)*(x648));
IkReal x659=((npx)*(x649));
evalcond[0]=((x656)+(x658)+(((sj5)*(x651)))+(((IkReal(-1.00000000000000))*(x654)))+(((cj4)*(x654))));
evalcond[1]=((((cj5)*(x658)))+(((sj5)*(x657)))+(((IkReal(-1.00000000000000))*(x652)*(x659)))+(((cj5)*(x656))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x652)*(x658)))+(((cj5)*(x657)))+(((IkReal(-1.00000000000000))*(x651)))+(((IkReal(-1.00000000000000))*(x652)*(x656)))+(((IkReal(-0.0300000000000000))*(cj4)))+(((IkReal(-1.00000000000000))*(cj5)*(x659))));
evalcond[3]=((((cj5)*(x651)))+(x659)+(((IkReal(-1.00000000000000))*(x657)))+(((IkReal(-1.00000000000000))*(x655)))+(((cj4)*(x655))));
evalcond[4]=((IkReal(-6.01410000000000e-6))+(((x650)*(x659)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x650)*(x657)))+(((x653)*(x656)))+(((x653)*(x658)))+(((IkReal(0.601420000000000))*(npz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x660=((IkReal(0.0300000000000000))*(cj4));
IkReal x661=((npx)*(sj5));
IkReal x662=((cj5)*(npy));
IkReal x663=((npy)*(sj5));
IkReal x664=((IkReal(0.300700000000000))*(sj4));
IkReal x665=((cj5)*(npx));
IkReal x666=((npx)*(x664));
if( IKabs(((gconst36)*(((((IkReal(0.0300000000000000))*(x661)))+(((x660)*(x662)))+(((IkReal(-1.00000000000000))*(x661)*(x664)))+(((IkReal(-0.0300000000000000))*(x662)))+(((x662)*(x664)))+(((IkReal(-1.00000000000000))*(x660)*(x661))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst36)*(((((IkReal(-1.00000000000000))*(x663)*(x664)))+(((IkReal(-1.00000000000000))*(x660)*(x663)))+(((IkReal(0.0300000000000000))*(x663)))+(((IkReal(-1.00000000000000))*(x660)*(x665)))+(((IkReal(-1.00000000000000))*(x664)*(x665)))+(((IkReal(0.0300000000000000))*(x665))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst36)*(((((IkReal(0.0300000000000000))*(x661)))+(((x660)*(x662)))+(((IkReal(-1.00000000000000))*(x661)*(x664)))+(((IkReal(-0.0300000000000000))*(x662)))+(((x662)*(x664)))+(((IkReal(-1.00000000000000))*(x660)*(x661)))))), ((gconst36)*(((((IkReal(-1.00000000000000))*(x663)*(x664)))+(((IkReal(-1.00000000000000))*(x660)*(x663)))+(((IkReal(0.0300000000000000))*(x663)))+(((IkReal(-1.00000000000000))*(x660)*(x665)))+(((IkReal(-1.00000000000000))*(x664)*(x665)))+(((IkReal(0.0300000000000000))*(x665)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x667=IKsin(j7);
IkReal x668=IKcos(j7);
IkReal x669=((IkReal(0.0600000000000000))*(cj5));
IkReal x670=((IkReal(0.300700000000000))*(sj4));
IkReal x671=((IkReal(1.00000000000000))*(sj5));
IkReal x672=((IkReal(0.0600000000000000))*(sj5));
IkReal x673=((IkReal(0.0300000000000000))*(sj5));
IkReal x674=((IkReal(0.0300000000000000))*(cj5));
IkReal x675=((npy)*(x668));
IkReal x676=((npy)*(x667));
IkReal x677=((npx)*(x667));
IkReal x678=((npx)*(x668));
evalcond[0]=((((sj5)*(x670)))+(((cj4)*(x673)))+(((IkReal(-1.00000000000000))*(x673)))+(x677)+(x675));
evalcond[1]=((((cj5)*(x677)))+(((cj5)*(x675)))+(((IkReal(-1.00000000000000))*(x671)*(x678)))+(((sj5)*(x676))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(cj5)*(x678)))+(((IkReal(-1.00000000000000))*(x670)))+(((IkReal(-1.00000000000000))*(x671)*(x675)))+(((IkReal(-0.0300000000000000))*(cj4)))+(((IkReal(-1.00000000000000))*(x671)*(x677)))+(((cj5)*(x676))));
evalcond[3]=((((cj5)*(x670)))+(((IkReal(-1.00000000000000))*(x674)))+(((IkReal(-1.00000000000000))*(x676)))+(((cj4)*(x674)))+(x678));
evalcond[4]=((IkReal(-6.01410000000000e-6))+(((x672)*(x675)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x669)*(x676)))+(((x672)*(x677)))+(((x669)*(x678)))+(((IkReal(0.601420000000000))*(npz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x679=(sj5)*(sj5);
IkReal x680=((npx)*(sj5));
IkReal x681=((IkReal(0.0300000000000000))*(cj5));
IkReal x682=((npz)*(sj6));
IkReal x683=((IkReal(0.0300000000000000))*(cj4));
IkReal x684=((IkReal(0.300700000000000))*(sj4));
IkReal x685=((npy)*(sj5));
IkReal x686=((cj6)*(npy)*(x679));
IkReal x687=((cj6)*(npx)*(x679));
if( IKabs(((gconst1)*(((((x682)*(x685)))+(((IkReal(0.0300000000000000))*(x687)))+(((IkReal(-1.00000000000000))*(x683)*(x687)))+(((IkReal(-1.00000000000000))*(cj5)*(x684)*(x685)))+(((x681)*(x685)))+(((IkReal(-1.00000000000000))*(x684)*(x687)))+(((IkReal(-1.00000000000000))*(cj4)*(x681)*(x685))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((IkReal(-1.00000000000000))*(x680)*(x681)))+(((cj5)*(x680)*(x684)))+(((IkReal(-1.00000000000000))*(x680)*(x682)))+(((IkReal(-1.00000000000000))*(x683)*(x686)))+(((cj4)*(x680)*(x681)))+(((IkReal(0.0300000000000000))*(x686)))+(((IkReal(-1.00000000000000))*(x684)*(x686))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst1)*(((((x682)*(x685)))+(((IkReal(0.0300000000000000))*(x687)))+(((IkReal(-1.00000000000000))*(x683)*(x687)))+(((IkReal(-1.00000000000000))*(cj5)*(x684)*(x685)))+(((x681)*(x685)))+(((IkReal(-1.00000000000000))*(x684)*(x687)))+(((IkReal(-1.00000000000000))*(cj4)*(x681)*(x685)))))), ((gconst1)*(((((IkReal(-1.00000000000000))*(x680)*(x681)))+(((cj5)*(x680)*(x684)))+(((IkReal(-1.00000000000000))*(x680)*(x682)))+(((IkReal(-1.00000000000000))*(x683)*(x686)))+(((cj4)*(x680)*(x681)))+(((IkReal(0.0300000000000000))*(x686)))+(((IkReal(-1.00000000000000))*(x684)*(x686)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x688=IKcos(j7);
IkReal x689=IKsin(j7);
IkReal x690=((cj6)*(npz));
IkReal x691=((IkReal(0.300700000000000))*(sj4));
IkReal x692=((IkReal(0.0300000000000000))*(sj4));
IkReal x693=((IkReal(1.00000000000000))*(sj5));
IkReal x694=((npz)*(sj6));
IkReal x695=((cj5)*(cj6));
IkReal x696=((IkReal(0.0300000000000000))*(sj5));
IkReal x697=((IkReal(0.300700000000000))*(cj4));
IkReal x698=((IkReal(0.0300000000000000))*(cj4));
IkReal x699=((cj6)*(sj5));
IkReal x700=((IkReal(0.601420000000000))*(sj6));
IkReal x701=((IkReal(0.0600000000000000))*(sj5));
IkReal x702=((npy)*(x688));
IkReal x703=((npx)*(x688));
IkReal x704=((npx)*(x689));
IkReal x705=((npy)*(x689));
IkReal x706=((IkReal(1.00000000000000))*(x705));
evalcond[0]=((((cj4)*(x696)))+(((sj5)*(x691)))+(x702)+(x704)+(((IkReal(-1.00000000000000))*(x696))));
evalcond[1]=((IkReal(-0.300710000000000))+(x692)+(((IkReal(-1.00000000000000))*(x690)))+(((IkReal(-1.00000000000000))*(sj6)*(x706)))+(((sj6)*(x703)))+(((IkReal(-1.00000000000000))*(x697))));
evalcond[2]=((((sj5)*(x694)))+(((cj5)*(x702)))+(((x699)*(x703)))+(((IkReal(-1.00000000000000))*(cj6)*(x693)*(x705)))+(((cj5)*(x704))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x695)*(x706)))+(((x695)*(x703)))+(((cj5)*(x694)))+(((IkReal(-1.00000000000000))*(x693)*(x704)))+(((IkReal(-1.00000000000000))*(x691)))+(((IkReal(-1.00000000000000))*(x693)*(x702)))+(((IkReal(-1.00000000000000))*(x698))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x706)))+(((IkReal(0.0300000000000000))*(x695)))+(((sj6)*(x692)))+(((IkReal(-1.00000000000000))*(x695)*(x698)))+(((IkReal(-1.00000000000000))*(sj6)*(x697)))+(x703)+(((IkReal(-1.00000000000000))*(x691)*(x695)))+(((IkReal(-0.300710000000000))*(sj6))));
evalcond[5]=((IkReal(-6.01410000000000e-6))+(((x700)*(x703)))+(((x701)*(x704)))+(((IkReal(-0.0600000000000000))*(cj5)*(x694)))+(((IkReal(-1.00000000000000))*(x700)*(x705)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(x695)*(x705)))+(((IkReal(-0.601420000000000))*(x690)))+(((IkReal(-0.0600000000000000))*(x695)*(x703)))+(((x701)*(x702))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x707=((IkReal(0.300700000000000))*(cj4));
IkReal x708=((npx)*(sj4));
IkReal x709=((cj6)*(npz));
IkReal x710=((npy)*(sj4));
IkReal x711=((IkReal(0.0300000000000000))*(sj5)*(sj6));
IkReal x712=((IkReal(0.300700000000000))*(sj5)*(sj6));
if( IKabs(((gconst0)*(((((npx)*(x711)))+(((IkReal(-1.00000000000000))*(npy)*(x709)))+(((IkReal(0.0300000000000000))*(x710)))+(((IkReal(-0.300710000000000))*(npy)))+(((IkReal(-1.00000000000000))*(npy)*(x707)))+(((IkReal(-1.00000000000000))*(cj4)*(npx)*(x711)))+(((IkReal(-1.00000000000000))*(x708)*(x712))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((npx)*(x709)))+(((npy)*(x711)))+(((IkReal(-1.00000000000000))*(cj4)*(npy)*(x711)))+(((IkReal(0.300710000000000))*(npx)))+(((IkReal(-1.00000000000000))*(x710)*(x712)))+(((npx)*(x707)))+(((IkReal(-0.0300000000000000))*(x708))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst0)*(((((npx)*(x711)))+(((IkReal(-1.00000000000000))*(npy)*(x709)))+(((IkReal(0.0300000000000000))*(x710)))+(((IkReal(-0.300710000000000))*(npy)))+(((IkReal(-1.00000000000000))*(npy)*(x707)))+(((IkReal(-1.00000000000000))*(cj4)*(npx)*(x711)))+(((IkReal(-1.00000000000000))*(x708)*(x712)))))), ((gconst0)*(((((npx)*(x709)))+(((npy)*(x711)))+(((IkReal(-1.00000000000000))*(cj4)*(npy)*(x711)))+(((IkReal(0.300710000000000))*(npx)))+(((IkReal(-1.00000000000000))*(x710)*(x712)))+(((npx)*(x707)))+(((IkReal(-0.0300000000000000))*(x708)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x713=IKcos(j7);
IkReal x714=IKsin(j7);
IkReal x715=((cj6)*(npz));
IkReal x716=((IkReal(0.300700000000000))*(sj4));
IkReal x717=((IkReal(0.0300000000000000))*(sj4));
IkReal x718=((IkReal(1.00000000000000))*(sj5));
IkReal x719=((npz)*(sj6));
IkReal x720=((cj5)*(cj6));
IkReal x721=((IkReal(0.0300000000000000))*(sj5));
IkReal x722=((IkReal(0.300700000000000))*(cj4));
IkReal x723=((IkReal(0.0300000000000000))*(cj4));
IkReal x724=((cj6)*(sj5));
IkReal x725=((IkReal(0.601420000000000))*(sj6));
IkReal x726=((IkReal(0.0600000000000000))*(sj5));
IkReal x727=((npy)*(x713));
IkReal x728=((npx)*(x713));
IkReal x729=((npx)*(x714));
IkReal x730=((npy)*(x714));
IkReal x731=((IkReal(1.00000000000000))*(x730));
evalcond[0]=((x727)+(x729)+(((IkReal(-1.00000000000000))*(x721)))+(((cj4)*(x721)))+(((sj5)*(x716))));
evalcond[1]=((IkReal(-0.300710000000000))+(((IkReal(-1.00000000000000))*(sj6)*(x731)))+(((IkReal(-1.00000000000000))*(x722)))+(((IkReal(-1.00000000000000))*(x715)))+(x717)+(((sj6)*(x728))));
evalcond[2]=((((sj5)*(x719)))+(((cj5)*(x729)))+(((IkReal(-1.00000000000000))*(cj6)*(x718)*(x730)))+(((cj5)*(x727)))+(((x724)*(x728))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x718)*(x727)))+(((cj5)*(x719)))+(((IkReal(-1.00000000000000))*(x720)*(x731)))+(((x720)*(x728)))+(((IkReal(-1.00000000000000))*(x718)*(x729)))+(((IkReal(-1.00000000000000))*(x716)))+(((IkReal(-1.00000000000000))*(x723))));
evalcond[4]=((((IkReal(-1.00000000000000))*(sj6)*(x722)))+(((IkReal(-1.00000000000000))*(x720)*(x723)))+(x728)+(((sj6)*(x717)))+(((IkReal(-1.00000000000000))*(x731)))+(((IkReal(0.0300000000000000))*(x720)))+(((IkReal(-1.00000000000000))*(x716)*(x720)))+(((IkReal(-0.300710000000000))*(sj6))));
evalcond[5]=((IkReal(-6.01410000000000e-6))+(((x726)*(x727)))+(((IkReal(-1.00000000000000))*(x725)*(x730)))+(((x726)*(x729)))+(((IkReal(-1.00000000000000))*(pp)))+(((x725)*(x728)))+(((IkReal(-0.0600000000000000))*(x720)*(x728)))+(((IkReal(-0.601420000000000))*(x715)))+(((IkReal(-0.0600000000000000))*(cj5)*(x719)))+(((IkReal(0.0600000000000000))*(x720)*(x730))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
IkReal x732=((IkReal(0.0300000000000000))*(sj5));
if( IKabs(npy) < IKFAST_ATAN2_MAGTHRESH && IKabs(npx) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x733=((IkReal(1.00000000000000))*(IKatan2(npy, npx)));
if( ((((npy)*(npy))+((npx)*(npx)))) < (IkReal)-0.00001 )
    continue;
if( (((((IKabs(IKabs(IKsqrt((((npy)*(npy))+((npx)*(npx)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((npy)*(npy))+((npx)*(npx))))))):(IkReal)1.0e30))*(((((IkReal(0.300700000000000))*(sj4)*(sj5)))+(((IkReal(-1.00000000000000))*(x732)))+(((cj4)*(x732))))))) < -1-IKFAST_SINCOS_THRESH || (((((IKabs(IKabs(IKsqrt((((npy)*(npy))+((npx)*(npx)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((npy)*(npy))+((npx)*(npx))))))):(IkReal)1.0e30))*(((((IkReal(0.300700000000000))*(sj4)*(sj5)))+(((IkReal(-1.00000000000000))*(x732)))+(((cj4)*(x732))))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x734=IKasin(((((IKabs(IKabs(IKsqrt((((npy)*(npy))+((npx)*(npx)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((npy)*(npy))+((npx)*(npx))))))):(IkReal)1.0e30))*(((((IkReal(0.300700000000000))*(sj4)*(sj5)))+(((IkReal(-1.00000000000000))*(x732)))+(((cj4)*(x732)))))));
j7array[0]=((((IkReal(-1.00000000000000))*(x734)))+(((IkReal(-1.00000000000000))*(x733))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((IkReal(3.14159265358979))+(x734)+(((IkReal(-1.00000000000000))*(x733))));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[2];
IkReal x735=(sj5)*(sj5);
IkReal x736=(cj5)*(cj5);
IkReal x737=(npx)*(npx);
IkReal x738=IKcos(j7);
IkReal x739=(npy)*(npy);
IkReal x740=IKsin(j7);
IkReal x741=((npx)*(sj5));
IkReal x742=((IkReal(0.300700000000000))*(sj4));
IkReal x743=((npx)*(npy));
IkReal x744=((IkReal(0.0300000000000000))*(cj4));
IkReal x745=((npy)*(sj5));
IkReal x746=((IkReal(1.00000000000000))*(x739));
evalcond[0]=((((x741)*(x742)))+(((x741)*(x744)))+(((x738)*(((((x736)*(x743)))+(((x735)*(x743)))))))+(((IkReal(-0.0300000000000000))*(x741)))+(((x740)*(((((x736)*(x737)))+(((x735)*(x737))))))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x742)*(x745)))+(((x738)*(((((IkReal(-1.00000000000000))*(x735)*(x746)))+(((IkReal(-1.00000000000000))*(x736)*(x746)))))))+(((IkReal(0.0300000000000000))*(x745)))+(((IkReal(-1.00000000000000))*(x744)*(x745)))+(((x740)*(((((IkReal(-1.00000000000000))*(x736)*(x743)))+(((IkReal(-1.00000000000000))*(x735)*(x743))))))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst39;
IkReal x747=((IkReal(0.0300000000000000))*(sj4));
IkReal x748=((npy)*(sj7));
IkReal x749=((cj7)*(npx));
IkReal x750=((IkReal(0.300700000000000))*(cj4));
IkReal x751=((cj5)*(npz));
gconst39=IKsign(((((x747)*(x749)))+(((IkReal(-1.00000000000000))*(x747)*(x748)))+(((x748)*(x750)))+(((IkReal(0.300700000000000))*(sj4)*(x751)))+(((IkReal(0.300710000000000))*(x748)))+(((IkReal(-1.00000000000000))*(x749)*(x750)))+(((IkReal(0.0300000000000000))*(cj4)*(x751)))+(((IkReal(-0.0300000000000000))*(x751)))+(((IkReal(-0.300710000000000))*(x749)))));
IkReal x752=((cj7)*(npx));
IkReal x753=((IkReal(10.0233333333333))*(cj4));
IkReal x754=((cj5)*(npz));
IkReal x755=((npy)*(sj7));
dummyeval[0]=((((cj4)*(x754)))+(((IkReal(10.0236666666667))*(x755)))+(((sj4)*(x752)))+(((IkReal(-1.00000000000000))*(x752)*(x753)))+(((IkReal(-1.00000000000000))*(x754)))+(((x753)*(x755)))+(((IkReal(-1.00000000000000))*(sj4)*(x755)))+(((IkReal(-10.0236666666667))*(x752)))+(((IkReal(10.0233333333333))*(sj4)*(x754))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst38;
IkReal x756=((IkReal(1.00000000000000))*(sj5));
gconst38=IKsign(((((IkReal(2.00000000000000))*(cj7)*(npx)*(npy)*(sj5)*(sj7)))+(((IkReal(-1.00000000000000))*(x756)*((cj7)*(cj7))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*(x756)*((npz)*(npz))))+(((IkReal(-1.00000000000000))*(x756)*((npy)*(npy))*((sj7)*(sj7))))));
IkReal x757=((IkReal(1.00000000000000))*(sj5));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x757)*((cj7)*(cj7))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*(x757)*((npy)*(npy))*((sj7)*(sj7))))+(((IkReal(2.00000000000000))*(cj7)*(npx)*(npy)*(sj5)*(sj7)))+(((IkReal(-1.00000000000000))*(x757)*((npz)*(npz)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x758=((((cj7)*(npy)))+(((npx)*(sj7))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.182646994100000))+(((IkReal(-0.0360846000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.179046994000000))*(cj4))));
evalcond[2]=x758;
evalcond[3]=x758;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst41;
IkReal x759=((cj7)*(npx));
IkReal x760=((IkReal(0.300700000000000))*(sj4));
IkReal x761=((IkReal(0.0300000000000000))*(cj4));
IkReal x762=((npy)*(sj7));
gconst41=IKsign(((((IkReal(-1.00000000000000))*(x759)*(x760)))+(((IkReal(0.0300000000000000))*(npz)*(sj4)))+(((x760)*(x762)))+(((IkReal(-1.00000000000000))*(x759)*(x761)))+(((IkReal(-0.300700000000000))*(cj4)*(npz)))+(((x761)*(x762)))+(((IkReal(-0.0300000000000000))*(x762)))+(((IkReal(0.0300000000000000))*(x759)))+(((IkReal(-0.300710000000000))*(npz)))));
IkReal x763=((npy)*(sj7));
IkReal x764=((cj7)*(npx));
IkReal x765=((IkReal(10.0233333333333))*(sj4));
dummyeval[0]=((((x763)*(x765)))+(((cj4)*(x763)))+(x764)+(((IkReal(-10.0236666666667))*(npz)))+(((IkReal(-1.00000000000000))*(x764)*(x765)))+(((IkReal(-10.0233333333333))*(cj4)*(npz)))+(((npz)*(sj4)))+(((IkReal(-1.00000000000000))*(x763)))+(((IkReal(-1.00000000000000))*(cj4)*(x764))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst40;
gconst40=IKsign(((((IkReal(2.00000000000000))*(cj7)*(npx)*(npy)*(sj7)))+(((IkReal(-1.00000000000000))*((cj7)*(cj7))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy))*((sj7)*(sj7))))+(((IkReal(-1.00000000000000))*((npz)*(npz))))));
dummyeval[0]=((((IkReal(2.00000000000000))*(cj7)*(npx)*(npy)*(sj7)))+(((IkReal(-1.00000000000000))*((cj7)*(cj7))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy))*((sj7)*(sj7))))+(((IkReal(-1.00000000000000))*((npz)*(npz)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x766=((IkReal(0.300700000000000))*(cj4));
IkReal x767=((cj7)*(npx));
IkReal x768=((npy)*(sj7));
IkReal x769=((IkReal(0.300700000000000))*(sj4));
IkReal x770=((IkReal(0.0300000000000000))*(npz));
IkReal x771=((IkReal(0.0300000000000000))*(x767));
IkReal x772=((IkReal(0.0300000000000000))*(x768));
if( IKabs(((gconst40)*(((((IkReal(-0.300710000000000))*(x767)))+(((IkReal(-1.00000000000000))*(npz)*(x769)))+(((x766)*(x768)))+(((IkReal(0.300710000000000))*(x768)))+(((IkReal(-1.00000000000000))*(cj4)*(x770)))+(((IkReal(-1.00000000000000))*(sj4)*(x772)))+(((IkReal(-1.00000000000000))*(x766)*(x767)))+(((sj4)*(x771)))+(x770))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst40)*(((((x768)*(x769)))+(((cj4)*(x772)))+(((IkReal(-1.00000000000000))*(sj4)*(x770)))+(((IkReal(0.300710000000000))*(npz)))+(((IkReal(-1.00000000000000))*(cj4)*(x771)))+(x771)+(((IkReal(-1.00000000000000))*(x772)))+(((IkReal(-1.00000000000000))*(x767)*(x769)))+(((npz)*(x766))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst40)*(((((IkReal(-0.300710000000000))*(x767)))+(((IkReal(-1.00000000000000))*(npz)*(x769)))+(((x766)*(x768)))+(((IkReal(0.300710000000000))*(x768)))+(((IkReal(-1.00000000000000))*(cj4)*(x770)))+(((IkReal(-1.00000000000000))*(sj4)*(x772)))+(((IkReal(-1.00000000000000))*(x766)*(x767)))+(((sj4)*(x771)))+(x770)))), ((gconst40)*(((((x768)*(x769)))+(((cj4)*(x772)))+(((IkReal(-1.00000000000000))*(sj4)*(x770)))+(((IkReal(0.300710000000000))*(npz)))+(((IkReal(-1.00000000000000))*(cj4)*(x771)))+(x771)+(((IkReal(-1.00000000000000))*(x772)))+(((IkReal(-1.00000000000000))*(x767)*(x769)))+(((npz)*(x766)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[5];
IkReal x773=IKsin(j6);
IkReal x774=IKcos(j6);
IkReal x775=((cj7)*(npx));
IkReal x776=((IkReal(0.300700000000000))*(sj4));
IkReal x777=((IkReal(0.0300000000000000))*(sj4));
IkReal x778=((IkReal(1.00000000000000))*(npz));
IkReal x779=((IkReal(0.300700000000000))*(cj4));
IkReal x780=((npy)*(sj7));
IkReal x781=((IkReal(1.00000000000000))*(x780));
IkReal x782=((npz)*(x773));
IkReal x783=((IkReal(0.0300000000000000))*(x773));
IkReal x784=((IkReal(0.0600000000000000))*(x774));
IkReal x785=((IkReal(0.0300000000000000))*(x774));
IkReal x786=((IkReal(0.601420000000000))*(x773));
evalcond[0]=((IkReal(-0.300710000000000))+(((x773)*(x775)))+(x777)+(((IkReal(-1.00000000000000))*(x779)))+(((IkReal(-1.00000000000000))*(x774)*(x778)))+(((IkReal(-1.00000000000000))*(x773)*(x781))));
evalcond[1]=((((x774)*(x777)))+(((IkReal(-1.00000000000000))*(x774)*(x779)))+(((x773)*(x776)))+(((IkReal(-0.300710000000000))*(x774)))+(((IkReal(-1.00000000000000))*(x783)))+(((cj4)*(x783)))+(((IkReal(-1.00000000000000))*(x778))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x776)))+(x782)+(((IkReal(-1.00000000000000))*(x774)*(x781)))+(((x774)*(x775)))+(((IkReal(-0.0300000000000000))*(cj4))));
evalcond[3]=((x785)+(((x773)*(x777)))+(((IkReal(-1.00000000000000))*(x781)))+(((IkReal(-0.300710000000000))*(x773)))+(((IkReal(-1.00000000000000))*(x773)*(x779)))+(((IkReal(-1.00000000000000))*(x774)*(x776)))+(((IkReal(-1.00000000000000))*(cj4)*(x785)))+(x775));
evalcond[4]=((IkReal(-6.01410000000000e-6))+(((x775)*(x786)))+(((IkReal(-0.0600000000000000))*(x782)))+(((IkReal(-1.00000000000000))*(x780)*(x786)))+(((IkReal(-1.00000000000000))*(pp)))+(((x780)*(x784)))+(((IkReal(-0.601420000000000))*(npz)*(x774)))+(((IkReal(-1.00000000000000))*(x775)*(x784))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x787=(sj4)*(sj4);
IkReal x788=(cj4)*(cj4);
IkReal x789=((IkReal(0.0180420000000000))*(sj4));
if( IKabs(((gconst41)*(((IkReal(0.00902130000000000))+(((IkReal(-0.00902100000000000))*(x788)))+(((npy)*(npz)*(sj7)))+(((IkReal(-0.0895204900000000))*(cj4)*(sj4)))+(((IkReal(-3.00000000000000e-7))*(cj4)))+(((IkReal(-1.00000000000000))*(cj7)*(npx)*(npz)))+(((IkReal(0.00902100000000000))*(x787)))+(((IkReal(-0.0913234970000000))*(sj4))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst41)*(((IkReal(-0.000900000000000000))+(x789)+(((IkReal(-0.0904204900000000))*(x787)))+(((IkReal(0.00180000000000000))*(cj4)))+(((IkReal(-0.000900000000000000))*(x788)))+((npz)*(npz))+(((IkReal(-1.00000000000000))*(cj4)*(x789))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst41)*(((IkReal(0.00902130000000000))+(((IkReal(-0.00902100000000000))*(x788)))+(((npy)*(npz)*(sj7)))+(((IkReal(-0.0895204900000000))*(cj4)*(sj4)))+(((IkReal(-3.00000000000000e-7))*(cj4)))+(((IkReal(-1.00000000000000))*(cj7)*(npx)*(npz)))+(((IkReal(0.00902100000000000))*(x787)))+(((IkReal(-0.0913234970000000))*(sj4)))))), ((gconst41)*(((IkReal(-0.000900000000000000))+(x789)+(((IkReal(-0.0904204900000000))*(x787)))+(((IkReal(0.00180000000000000))*(cj4)))+(((IkReal(-0.000900000000000000))*(x788)))+((npz)*(npz))+(((IkReal(-1.00000000000000))*(cj4)*(x789)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[5];
IkReal x790=IKsin(j6);
IkReal x791=IKcos(j6);
IkReal x792=((cj7)*(npx));
IkReal x793=((IkReal(0.300700000000000))*(sj4));
IkReal x794=((IkReal(0.0300000000000000))*(sj4));
IkReal x795=((IkReal(1.00000000000000))*(npz));
IkReal x796=((IkReal(0.300700000000000))*(cj4));
IkReal x797=((npy)*(sj7));
IkReal x798=((IkReal(1.00000000000000))*(x797));
IkReal x799=((npz)*(x790));
IkReal x800=((IkReal(0.0300000000000000))*(x790));
IkReal x801=((IkReal(0.0600000000000000))*(x791));
IkReal x802=((IkReal(0.0300000000000000))*(x791));
IkReal x803=((IkReal(0.601420000000000))*(x790));
evalcond[0]=((IkReal(-0.300710000000000))+(((x790)*(x792)))+(((IkReal(-1.00000000000000))*(x796)))+(((IkReal(-1.00000000000000))*(x791)*(x795)))+(x794)+(((IkReal(-1.00000000000000))*(x790)*(x798))));
evalcond[1]=((((x791)*(x794)))+(((cj4)*(x800)))+(((x790)*(x793)))+(((IkReal(-1.00000000000000))*(x795)))+(((IkReal(-1.00000000000000))*(x791)*(x796)))+(((IkReal(-1.00000000000000))*(x800)))+(((IkReal(-0.300710000000000))*(x791))));
evalcond[2]=((IkReal(0.0300000000000000))+(x799)+(((IkReal(-1.00000000000000))*(x791)*(x798)))+(((IkReal(-1.00000000000000))*(x793)))+(((IkReal(-0.0300000000000000))*(cj4)))+(((x791)*(x792))));
evalcond[3]=((x802)+(((IkReal(-1.00000000000000))*(x790)*(x796)))+(((IkReal(-1.00000000000000))*(x798)))+(x792)+(((IkReal(-1.00000000000000))*(x791)*(x793)))+(((IkReal(-0.300710000000000))*(x790)))+(((x790)*(x794)))+(((IkReal(-1.00000000000000))*(cj4)*(x802))));
evalcond[4]=((IkReal(-6.01410000000000e-6))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.601420000000000))*(npz)*(x791)))+(((IkReal(-1.00000000000000))*(x797)*(x803)))+(((IkReal(-0.0600000000000000))*(x799)))+(((IkReal(-1.00000000000000))*(x792)*(x801)))+(((x792)*(x803)))+(((x797)*(x801))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x804=((cj7)*(npy));
IkReal x805=((npx)*(sj7));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j5, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.182646994100000))+(((IkReal(-0.0360846000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.179046994000000))*(cj4))));
evalcond[2]=((x805)+(x804));
evalcond[3]=((((IkReal(-1.00000000000000))*(x804)))+(((IkReal(-1.00000000000000))*(x805))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst43;
IkReal x806=((cj7)*(npx));
IkReal x807=((IkReal(0.0300000000000000))*(sj4));
IkReal x808=((IkReal(0.300700000000000))*(cj4));
IkReal x809=((npy)*(sj7));
IkReal x810=((IkReal(0.0300000000000000))*(npz));
gconst43=IKsign(((((IkReal(0.300710000000000))*(x809)))+(((x808)*(x809)))+(x810)+(((IkReal(-1.00000000000000))*(cj4)*(x810)))+(((IkReal(-1.00000000000000))*(x806)*(x808)))+(((IkReal(-0.300710000000000))*(x806)))+(((IkReal(-0.300700000000000))*(npz)*(sj4)))+(((x806)*(x807)))+(((IkReal(-1.00000000000000))*(x807)*(x809)))));
IkReal x811=((cj7)*(npx));
IkReal x812=((IkReal(10.0233333333333))*(cj4));
IkReal x813=((npy)*(sj7));
dummyeval[0]=((((x812)*(x813)))+(((IkReal(10.0236666666667))*(x813)))+(((IkReal(-10.0236666666667))*(x811)))+(((IkReal(-10.0233333333333))*(npz)*(sj4)))+(((IkReal(-1.00000000000000))*(sj4)*(x813)))+(npz)+(((sj4)*(x811)))+(((IkReal(-1.00000000000000))*(x811)*(x812)))+(((IkReal(-1.00000000000000))*(cj4)*(npz))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst42;
gconst42=IKsign(((((IkReal(2.00000000000000))*(cj7)*(npx)*(npy)*(sj7)))+(((IkReal(-1.00000000000000))*((cj7)*(cj7))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy))*((sj7)*(sj7))))+(((IkReal(-1.00000000000000))*((npz)*(npz))))));
dummyeval[0]=((((IkReal(2.00000000000000))*(cj7)*(npx)*(npy)*(sj7)))+(((IkReal(-1.00000000000000))*((cj7)*(cj7))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy))*((sj7)*(sj7))))+(((IkReal(-1.00000000000000))*((npz)*(npz)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x814=((IkReal(0.300700000000000))*(cj4));
IkReal x815=((cj7)*(npx));
IkReal x816=((npy)*(sj7));
IkReal x817=((IkReal(0.0300000000000000))*(npz));
IkReal x818=((IkReal(0.300700000000000))*(sj4));
IkReal x819=((IkReal(0.0300000000000000))*(x815));
IkReal x820=((IkReal(0.0300000000000000))*(x816));
if( IKabs(((gconst42)*(((((IkReal(-0.300710000000000))*(x815)))+(((cj4)*(x817)))+(((IkReal(-1.00000000000000))*(sj4)*(x820)))+(((x814)*(x816)))+(((sj4)*(x819)))+(((IkReal(-1.00000000000000))*(x814)*(x815)))+(((npz)*(x818)))+(((IkReal(0.300710000000000))*(x816)))+(((IkReal(-1.00000000000000))*(x817))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst42)*(((x820)+(((IkReal(-1.00000000000000))*(sj4)*(x817)))+(((IkReal(0.300710000000000))*(npz)))+(((IkReal(-1.00000000000000))*(x819)))+(((IkReal(-1.00000000000000))*(x816)*(x818)))+(((cj4)*(x819)))+(((npz)*(x814)))+(((IkReal(-1.00000000000000))*(cj4)*(x820)))+(((x815)*(x818))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst42)*(((((IkReal(-0.300710000000000))*(x815)))+(((cj4)*(x817)))+(((IkReal(-1.00000000000000))*(sj4)*(x820)))+(((x814)*(x816)))+(((sj4)*(x819)))+(((IkReal(-1.00000000000000))*(x814)*(x815)))+(((npz)*(x818)))+(((IkReal(0.300710000000000))*(x816)))+(((IkReal(-1.00000000000000))*(x817)))))), ((gconst42)*(((x820)+(((IkReal(-1.00000000000000))*(sj4)*(x817)))+(((IkReal(0.300710000000000))*(npz)))+(((IkReal(-1.00000000000000))*(x819)))+(((IkReal(-1.00000000000000))*(x816)*(x818)))+(((cj4)*(x819)))+(((npz)*(x814)))+(((IkReal(-1.00000000000000))*(cj4)*(x820)))+(((x815)*(x818)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[5];
IkReal x821=IKsin(j6);
IkReal x822=IKcos(j6);
IkReal x823=((cj7)*(npx));
IkReal x824=((IkReal(0.300700000000000))*(sj4));
IkReal x825=((IkReal(0.0300000000000000))*(sj4));
IkReal x826=((npy)*(sj7));
IkReal x827=((IkReal(0.300700000000000))*(cj4));
IkReal x828=((IkReal(1.00000000000000))*(x821));
IkReal x829=((IkReal(1.00000000000000))*(x822));
IkReal x830=((IkReal(0.0300000000000000))*(x821));
IkReal x831=((IkReal(0.0600000000000000))*(x822));
IkReal x832=((IkReal(0.0300000000000000))*(x822));
IkReal x833=((IkReal(0.601420000000000))*(x821));
evalcond[0]=((IkReal(-0.300710000000000))+(x825)+(((IkReal(-1.00000000000000))*(x826)*(x828)))+(((IkReal(-1.00000000000000))*(x827)))+(((IkReal(-1.00000000000000))*(npz)*(x829)))+(((x821)*(x823))));
evalcond[1]=((((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-1.00000000000000))*(cj4)*(x830)))+(((IkReal(-0.300710000000000))*(x822)))+(((x822)*(x825)))+(((IkReal(-1.00000000000000))*(x821)*(x824)))+(x830)+(((IkReal(-1.00000000000000))*(x822)*(x827))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(npz)*(x828)))+(((IkReal(-1.00000000000000))*(x824)))+(((IkReal(-0.0300000000000000))*(cj4)))+(((IkReal(-1.00000000000000))*(x823)*(x829)))+(((x822)*(x826))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x821)*(x827)))+(x823)+(((x822)*(x824)))+(((x821)*(x825)))+(((IkReal(-1.00000000000000))*(x826)))+(((IkReal(-0.300710000000000))*(x821)))+(((IkReal(-1.00000000000000))*(x832)))+(((cj4)*(x832))));
evalcond[4]=((IkReal(-6.01410000000000e-6))+(((IkReal(-0.601420000000000))*(npz)*(x822)))+(((IkReal(-1.00000000000000))*(x826)*(x831)))+(((IkReal(0.0600000000000000))*(npz)*(x821)))+(((x823)*(x833)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x826)*(x833)))+(((x823)*(x831))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x834=(cj4)*(cj4);
IkReal x835=(sj4)*(sj4);
IkReal x836=((cj4)*(sj4));
if( IKabs(((gconst43)*(((IkReal(-0.0904265041000000))+(((IkReal(-0.0904204900000000))*(x834)))+(((IkReal(-0.180846994000000))*(cj4)))+((npz)*(npz))+(((IkReal(0.0180420000000000))*(x836)))+(((IkReal(-0.000900000000000000))*(x835)))+(((IkReal(0.0180426000000000))*(sj4))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst43)*(((IkReal(-0.00902130000000000))+(((IkReal(0.0895204900000000))*(x836)))+(((IkReal(-1.00000000000000))*(npy)*(npz)*(sj7)))+(((IkReal(-0.00902100000000000))*(x835)))+(((IkReal(0.0913234970000000))*(sj4)))+(((IkReal(0.00902100000000000))*(x834)))+(((cj7)*(npx)*(npz)))+(((IkReal(3.00000000000000e-7))*(cj4))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst43)*(((IkReal(-0.0904265041000000))+(((IkReal(-0.0904204900000000))*(x834)))+(((IkReal(-0.180846994000000))*(cj4)))+((npz)*(npz))+(((IkReal(0.0180420000000000))*(x836)))+(((IkReal(-0.000900000000000000))*(x835)))+(((IkReal(0.0180426000000000))*(sj4)))))), ((gconst43)*(((IkReal(-0.00902130000000000))+(((IkReal(0.0895204900000000))*(x836)))+(((IkReal(-1.00000000000000))*(npy)*(npz)*(sj7)))+(((IkReal(-0.00902100000000000))*(x835)))+(((IkReal(0.0913234970000000))*(sj4)))+(((IkReal(0.00902100000000000))*(x834)))+(((cj7)*(npx)*(npz)))+(((IkReal(3.00000000000000e-7))*(cj4)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[5];
IkReal x837=IKsin(j6);
IkReal x838=IKcos(j6);
IkReal x839=((cj7)*(npx));
IkReal x840=((IkReal(0.300700000000000))*(sj4));
IkReal x841=((IkReal(0.0300000000000000))*(sj4));
IkReal x842=((npy)*(sj7));
IkReal x843=((IkReal(0.300700000000000))*(cj4));
IkReal x844=((IkReal(1.00000000000000))*(x837));
IkReal x845=((IkReal(1.00000000000000))*(x838));
IkReal x846=((IkReal(0.0300000000000000))*(x837));
IkReal x847=((IkReal(0.0600000000000000))*(x838));
IkReal x848=((IkReal(0.0300000000000000))*(x838));
IkReal x849=((IkReal(0.601420000000000))*(x837));
evalcond[0]=((IkReal(-0.300710000000000))+(((x837)*(x839)))+(((IkReal(-1.00000000000000))*(npz)*(x845)))+(((IkReal(-1.00000000000000))*(x842)*(x844)))+(x841)+(((IkReal(-1.00000000000000))*(x843))));
evalcond[1]=((((x838)*(x841)))+(((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-1.00000000000000))*(x838)*(x843)))+(((IkReal(-1.00000000000000))*(cj4)*(x846)))+(x846)+(((IkReal(-0.300710000000000))*(x838)))+(((IkReal(-1.00000000000000))*(x837)*(x840))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x840)))+(((x838)*(x842)))+(((IkReal(-0.0300000000000000))*(cj4)))+(((IkReal(-1.00000000000000))*(x839)*(x845)))+(((IkReal(-1.00000000000000))*(npz)*(x844))));
evalcond[3]=((((x838)*(x840)))+(((IkReal(-0.300710000000000))*(x837)))+(((x837)*(x841)))+(((IkReal(-1.00000000000000))*(x848)))+(((cj4)*(x848)))+(((IkReal(-1.00000000000000))*(x837)*(x843)))+(x839)+(((IkReal(-1.00000000000000))*(x842))));
evalcond[4]=((IkReal(-6.01410000000000e-6))+(((IkReal(-1.00000000000000))*(x842)*(x847)))+(((IkReal(-0.601420000000000))*(npz)*(x838)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(npz)*(x837)))+(((IkReal(-1.00000000000000))*(x842)*(x849)))+(((x839)*(x847)))+(((x839)*(x849))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x850=((IkReal(0.300710000000000))*(sj5));
IkReal x851=((cj7)*(npx));
IkReal x852=((npy)*(sj7));
IkReal x853=((cj5)*(cj7));
IkReal x854=((cj5)*(npx)*(npy));
IkReal x855=((IkReal(0.0300000000000000))*(sj4)*(sj5));
IkReal x856=((IkReal(0.300700000000000))*(cj4)*(sj5));
if( IKabs(((gconst38)*(((((x852)*(x856)))+(((npy)*(npz)*(x853)))+(((IkReal(-1.00000000000000))*(x852)*(x855)))+(((IkReal(-1.00000000000000))*(x851)*(x856)))+(((x850)*(x852)))+(((IkReal(-1.00000000000000))*(x850)*(x851)))+(((x851)*(x855)))+(((cj5)*(npx)*(npz)*(sj7))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst38)*(((((npy)*(x851)*(x853)))+(((npz)*(x856)))+(((IkReal(-1.00000000000000))*(cj5)*(npx)*(sj7)*(x852)))+(((npz)*(x850)))+(((IkReal(-1.00000000000000))*(npy)*(x852)*(x853)))+(((IkReal(-1.00000000000000))*(npz)*(x855)))+(((cj5)*(npx)*(sj7)*(x851))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst38)*(((((x852)*(x856)))+(((npy)*(npz)*(x853)))+(((IkReal(-1.00000000000000))*(x852)*(x855)))+(((IkReal(-1.00000000000000))*(x851)*(x856)))+(((x850)*(x852)))+(((IkReal(-1.00000000000000))*(x850)*(x851)))+(((x851)*(x855)))+(((cj5)*(npx)*(npz)*(sj7)))))), ((gconst38)*(((((npy)*(x851)*(x853)))+(((npz)*(x856)))+(((IkReal(-1.00000000000000))*(cj5)*(npx)*(sj7)*(x852)))+(((npz)*(x850)))+(((IkReal(-1.00000000000000))*(npy)*(x852)*(x853)))+(((IkReal(-1.00000000000000))*(npz)*(x855)))+(((cj5)*(npx)*(sj7)*(x851)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x857=IKsin(j6);
IkReal x858=IKcos(j6);
IkReal x859=((IkReal(0.0300000000000000))*(cj4));
IkReal x860=((cj7)*(npx));
IkReal x861=((IkReal(0.300700000000000))*(sj4));
IkReal x862=((IkReal(0.0300000000000000))*(sj4));
IkReal x863=((IkReal(0.300700000000000))*(cj4));
IkReal x864=((IkReal(1.00000000000000))*(npz));
IkReal x865=((IkReal(0.0600000000000000))*(sj7));
IkReal x866=((npx)*(sj5));
IkReal x867=((cj5)*(x858));
IkReal x868=((cj7)*(npy)*(sj5));
IkReal x869=((IkReal(1.00000000000000))*(npy)*(sj7));
IkReal x870=((cj5)*(x857));
IkReal x871=((sj5)*(x858));
IkReal x872=((IkReal(0.601420000000000))*(x857));
IkReal x873=((npz)*(x870));
evalcond[0]=((IkReal(-0.300710000000000))+(((IkReal(-1.00000000000000))*(x858)*(x864)))+(x862)+(((x857)*(x860)))+(((IkReal(-1.00000000000000))*(x863)))+(((IkReal(-1.00000000000000))*(x857)*(x869))));
evalcond[1]=((((npz)*(sj5)*(x857)))+(((cj5)*(npx)*(sj7)))+(((IkReal(-1.00000000000000))*(x869)*(x871)))+(((x860)*(x871)))+(((cj5)*(cj7)*(npy))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x864)))+(((x861)*(x870)))+(((IkReal(-0.0300000000000000))*(x870)))+(((x858)*(x862)))+(((IkReal(-0.300710000000000))*(x858)))+(((IkReal(-1.00000000000000))*(x858)*(x863)))+(((x859)*(x870))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x868)))+(((IkReal(-1.00000000000000))*(x861)))+(((IkReal(-1.00000000000000))*(x867)*(x869)))+(x873)+(((IkReal(-1.00000000000000))*(sj7)*(x866)))+(((IkReal(-1.00000000000000))*(x859)))+(((x860)*(x867))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x861)*(x867)))+(((IkReal(-0.300710000000000))*(x857)))+(x860)+(((IkReal(0.0300000000000000))*(x867)))+(((x857)*(x862)))+(((IkReal(-1.00000000000000))*(x869)))+(((IkReal(-1.00000000000000))*(x857)*(x863)))+(((IkReal(-1.00000000000000))*(x859)*(x867))));
evalcond[5]=((IkReal(-6.01410000000000e-6))+(((IkReal(-0.601420000000000))*(npz)*(x858)))+(((IkReal(-1.00000000000000))*(npy)*(sj7)*(x872)))+(((x865)*(x866)))+(((IkReal(-0.0600000000000000))*(x860)*(x867)))+(((x860)*(x872)))+(((IkReal(-0.0600000000000000))*(x873)))+(((IkReal(-1.00000000000000))*(pp)))+(((npy)*(x865)*(x867)))+(((IkReal(0.0600000000000000))*(x868))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x874=(sj4)*(sj4);
IkReal x875=(cj4)*(cj4);
IkReal x876=((cj4)*(cj5));
IkReal x877=((IkReal(0.00902100000000000))*(cj5));
if( IKabs(((gconst39)*(((IkReal(-0.0904265041000000))+(((IkReal(-0.000900000000000000))*(x874)))+(((IkReal(0.0180420000000000))*(cj4)*(sj4)))+(((IkReal(-0.180846994000000))*(cj4)))+((npz)*(npz))+(((IkReal(-0.0904204900000000))*(x875)))+(((IkReal(0.0180426000000000))*(sj4))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst39)*(((((IkReal(-1.00000000000000))*(x875)*(x877)))+(((IkReal(0.00902130000000000))*(cj5)))+(((IkReal(-0.0913234970000000))*(cj5)*(sj4)))+(((IkReal(-1.00000000000000))*(npy)*(npz)*(sj7)))+(((IkReal(-3.00000000000000e-7))*(x876)))+(((x874)*(x877)))+(((cj7)*(npx)*(npz)))+(((IkReal(-0.0895204900000000))*(sj4)*(x876))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst39)*(((IkReal(-0.0904265041000000))+(((IkReal(-0.000900000000000000))*(x874)))+(((IkReal(0.0180420000000000))*(cj4)*(sj4)))+(((IkReal(-0.180846994000000))*(cj4)))+((npz)*(npz))+(((IkReal(-0.0904204900000000))*(x875)))+(((IkReal(0.0180426000000000))*(sj4)))))), ((gconst39)*(((((IkReal(-1.00000000000000))*(x875)*(x877)))+(((IkReal(0.00902130000000000))*(cj5)))+(((IkReal(-0.0913234970000000))*(cj5)*(sj4)))+(((IkReal(-1.00000000000000))*(npy)*(npz)*(sj7)))+(((IkReal(-3.00000000000000e-7))*(x876)))+(((x874)*(x877)))+(((cj7)*(npx)*(npz)))+(((IkReal(-0.0895204900000000))*(sj4)*(x876)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x878=IKsin(j6);
IkReal x879=IKcos(j6);
IkReal x880=((IkReal(0.0300000000000000))*(cj4));
IkReal x881=((cj7)*(npx));
IkReal x882=((IkReal(0.300700000000000))*(sj4));
IkReal x883=((IkReal(0.0300000000000000))*(sj4));
IkReal x884=((IkReal(0.300700000000000))*(cj4));
IkReal x885=((IkReal(1.00000000000000))*(npz));
IkReal x886=((IkReal(0.0600000000000000))*(sj7));
IkReal x887=((npx)*(sj5));
IkReal x888=((cj5)*(x879));
IkReal x889=((cj7)*(npy)*(sj5));
IkReal x890=((IkReal(1.00000000000000))*(npy)*(sj7));
IkReal x891=((cj5)*(x878));
IkReal x892=((sj5)*(x879));
IkReal x893=((IkReal(0.601420000000000))*(x878));
IkReal x894=((npz)*(x891));
evalcond[0]=((IkReal(-0.300710000000000))+(((IkReal(-1.00000000000000))*(x878)*(x890)))+(x883)+(((x878)*(x881)))+(((IkReal(-1.00000000000000))*(x879)*(x885)))+(((IkReal(-1.00000000000000))*(x884))));
evalcond[1]=((((npz)*(sj5)*(x878)))+(((cj5)*(npx)*(sj7)))+(((IkReal(-1.00000000000000))*(x890)*(x892)))+(((cj5)*(cj7)*(npy)))+(((x881)*(x892))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x879)*(x884)))+(((IkReal(-0.300710000000000))*(x879)))+(((x882)*(x891)))+(((x879)*(x883)))+(((IkReal(-1.00000000000000))*(x885)))+(((x880)*(x891)))+(((IkReal(-0.0300000000000000))*(x891))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x889)))+(((IkReal(-1.00000000000000))*(x880)))+(((IkReal(-1.00000000000000))*(sj7)*(x887)))+(((IkReal(-1.00000000000000))*(x882)))+(((IkReal(-1.00000000000000))*(x888)*(x890)))+(x894)+(((x881)*(x888))));
evalcond[4]=((x881)+(((IkReal(-1.00000000000000))*(x890)))+(((IkReal(-1.00000000000000))*(x882)*(x888)))+(((IkReal(-0.300710000000000))*(x878)))+(((x878)*(x883)))+(((IkReal(-1.00000000000000))*(x880)*(x888)))+(((IkReal(0.0300000000000000))*(x888)))+(((IkReal(-1.00000000000000))*(x878)*(x884))));
evalcond[5]=((IkReal(-6.01410000000000e-6))+(((npy)*(x886)*(x888)))+(((x881)*(x893)))+(((IkReal(-0.0600000000000000))*(x894)))+(((IkReal(-1.00000000000000))*(npy)*(sj7)*(x893)))+(((IkReal(0.0600000000000000))*(x889)))+(((IkReal(-0.0600000000000000))*(x881)*(x888)))+(((IkReal(-1.00000000000000))*(pp)))+(((x886)*(x887)))+(((IkReal(-0.601420000000000))*(npz)*(x879))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
IkReal x895=((IkReal(0.0300000000000000))*(sj5));
if( IKabs(npy) < IKFAST_ATAN2_MAGTHRESH && IKabs(npx) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x896=((IkReal(1.00000000000000))*(IKatan2(npy, npx)));
if( ((((npy)*(npy))+((npx)*(npx)))) < (IkReal)-0.00001 )
    continue;
if( (((((IKabs(IKabs(IKsqrt((((npy)*(npy))+((npx)*(npx)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((npy)*(npy))+((npx)*(npx))))))):(IkReal)1.0e30))*(((((IkReal(0.300700000000000))*(sj4)*(sj5)))+(((cj4)*(x895)))+(((IkReal(-1.00000000000000))*(x895))))))) < -1-IKFAST_SINCOS_THRESH || (((((IKabs(IKabs(IKsqrt((((npy)*(npy))+((npx)*(npx)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((npy)*(npy))+((npx)*(npx))))))):(IkReal)1.0e30))*(((((IkReal(0.300700000000000))*(sj4)*(sj5)))+(((cj4)*(x895)))+(((IkReal(-1.00000000000000))*(x895))))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x897=IKasin(((((IKabs(IKabs(IKsqrt((((npy)*(npy))+((npx)*(npx)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((npy)*(npy))+((npx)*(npx))))))):(IkReal)1.0e30))*(((((IkReal(0.300700000000000))*(sj4)*(sj5)))+(((cj4)*(x895)))+(((IkReal(-1.00000000000000))*(x895)))))));
j7array[0]=((((IkReal(-1.00000000000000))*(x897)))+(((IkReal(-1.00000000000000))*(x896))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((IkReal(3.14159265358979))+(x897)+(((IkReal(-1.00000000000000))*(x896))));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];

{
IkReal dummyeval[1];
IkReal gconst39;
IkReal x898=((IkReal(0.0300000000000000))*(sj4));
IkReal x899=((npy)*(sj7));
IkReal x900=((cj7)*(npx));
IkReal x901=((IkReal(0.300700000000000))*(cj4));
IkReal x902=((cj5)*(npz));
gconst39=IKsign(((((IkReal(-1.00000000000000))*(x898)*(x899)))+(((IkReal(-0.0300000000000000))*(x902)))+(((IkReal(-0.300710000000000))*(x900)))+(((IkReal(0.0300000000000000))*(cj4)*(x902)))+(((IkReal(0.300710000000000))*(x899)))+(((IkReal(-1.00000000000000))*(x900)*(x901)))+(((x898)*(x900)))+(((IkReal(0.300700000000000))*(sj4)*(x902)))+(((x899)*(x901)))));
IkReal x903=((cj7)*(npx));
IkReal x904=((IkReal(10.0233333333333))*(cj4));
IkReal x905=((cj5)*(npz));
IkReal x906=((npy)*(sj7));
dummyeval[0]=((((IkReal(10.0233333333333))*(sj4)*(x905)))+(((IkReal(-1.00000000000000))*(x903)*(x904)))+(((IkReal(-10.0236666666667))*(x903)))+(((sj4)*(x903)))+(((cj4)*(x905)))+(((IkReal(-1.00000000000000))*(sj4)*(x906)))+(((IkReal(-1.00000000000000))*(x905)))+(((IkReal(10.0236666666667))*(x906)))+(((x904)*(x906))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst38;
IkReal x907=((IkReal(1.00000000000000))*(sj5));
gconst38=IKsign(((((IkReal(-1.00000000000000))*(x907)*((npz)*(npz))))+(((IkReal(-1.00000000000000))*(x907)*((npy)*(npy))*((sj7)*(sj7))))+(((IkReal(2.00000000000000))*(cj7)*(npx)*(npy)*(sj5)*(sj7)))+(((IkReal(-1.00000000000000))*(x907)*((cj7)*(cj7))*((npx)*(npx))))));
IkReal x908=((IkReal(1.00000000000000))*(sj5));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x908)*((npz)*(npz))))+(((IkReal(-1.00000000000000))*(x908)*((cj7)*(cj7))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*(x908)*((npy)*(npy))*((sj7)*(sj7))))+(((IkReal(2.00000000000000))*(cj7)*(npx)*(npy)*(sj5)*(sj7))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x909=((((cj7)*(npy)))+(((npx)*(sj7))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.182646994100000))+(((IkReal(-0.0360846000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.179046994000000))*(cj4))));
evalcond[2]=x909;
evalcond[3]=x909;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst41;
IkReal x910=((cj7)*(npx));
IkReal x911=((IkReal(0.300700000000000))*(sj4));
IkReal x912=((IkReal(0.0300000000000000))*(cj4));
IkReal x913=((npy)*(sj7));
gconst41=IKsign(((((x911)*(x913)))+(((IkReal(0.0300000000000000))*(x910)))+(((IkReal(-1.00000000000000))*(x910)*(x911)))+(((x912)*(x913)))+(((IkReal(0.0300000000000000))*(npz)*(sj4)))+(((IkReal(-0.300700000000000))*(cj4)*(npz)))+(((IkReal(-1.00000000000000))*(x910)*(x912)))+(((IkReal(-0.0300000000000000))*(x913)))+(((IkReal(-0.300710000000000))*(npz)))));
IkReal x914=((npy)*(sj7));
IkReal x915=((cj7)*(npx));
IkReal x916=((IkReal(10.0233333333333))*(sj4));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x914)))+(((cj4)*(x914)))+(((IkReal(-1.00000000000000))*(x915)*(x916)))+(((IkReal(-10.0236666666667))*(npz)))+(((x914)*(x916)))+(((IkReal(-1.00000000000000))*(cj4)*(x915)))+(x915)+(((IkReal(-10.0233333333333))*(cj4)*(npz)))+(((npz)*(sj4))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst40;
gconst40=IKsign(((((IkReal(2.00000000000000))*(cj7)*(npx)*(npy)*(sj7)))+(((IkReal(-1.00000000000000))*((cj7)*(cj7))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy))*((sj7)*(sj7))))+(((IkReal(-1.00000000000000))*((npz)*(npz))))));
dummyeval[0]=((((IkReal(2.00000000000000))*(cj7)*(npx)*(npy)*(sj7)))+(((IkReal(-1.00000000000000))*((cj7)*(cj7))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy))*((sj7)*(sj7))))+(((IkReal(-1.00000000000000))*((npz)*(npz)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x917=((IkReal(0.300700000000000))*(cj4));
IkReal x918=((cj7)*(npx));
IkReal x919=((npy)*(sj7));
IkReal x920=((IkReal(0.300700000000000))*(sj4));
IkReal x921=((IkReal(0.0300000000000000))*(npz));
IkReal x922=((IkReal(0.0300000000000000))*(x918));
IkReal x923=((IkReal(0.0300000000000000))*(x919));
if( IKabs(((gconst40)*(((((sj4)*(x922)))+(((IkReal(0.300710000000000))*(x919)))+(x921)+(((IkReal(-1.00000000000000))*(sj4)*(x923)))+(((IkReal(-1.00000000000000))*(cj4)*(x921)))+(((IkReal(-1.00000000000000))*(npz)*(x920)))+(((IkReal(-1.00000000000000))*(x917)*(x918)))+(((IkReal(-0.300710000000000))*(x918)))+(((x917)*(x919))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst40)*(((x922)+(((cj4)*(x923)))+(((IkReal(-1.00000000000000))*(sj4)*(x921)))+(((IkReal(0.300710000000000))*(npz)))+(((IkReal(-1.00000000000000))*(cj4)*(x922)))+(((x919)*(x920)))+(((IkReal(-1.00000000000000))*(x918)*(x920)))+(((IkReal(-1.00000000000000))*(x923)))+(((npz)*(x917))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst40)*(((((sj4)*(x922)))+(((IkReal(0.300710000000000))*(x919)))+(x921)+(((IkReal(-1.00000000000000))*(sj4)*(x923)))+(((IkReal(-1.00000000000000))*(cj4)*(x921)))+(((IkReal(-1.00000000000000))*(npz)*(x920)))+(((IkReal(-1.00000000000000))*(x917)*(x918)))+(((IkReal(-0.300710000000000))*(x918)))+(((x917)*(x919)))))), ((gconst40)*(((x922)+(((cj4)*(x923)))+(((IkReal(-1.00000000000000))*(sj4)*(x921)))+(((IkReal(0.300710000000000))*(npz)))+(((IkReal(-1.00000000000000))*(cj4)*(x922)))+(((x919)*(x920)))+(((IkReal(-1.00000000000000))*(x918)*(x920)))+(((IkReal(-1.00000000000000))*(x923)))+(((npz)*(x917)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[5];
IkReal x924=IKsin(j6);
IkReal x925=IKcos(j6);
IkReal x926=((cj7)*(npx));
IkReal x927=((IkReal(0.300700000000000))*(sj4));
IkReal x928=((IkReal(0.0300000000000000))*(sj4));
IkReal x929=((IkReal(1.00000000000000))*(npz));
IkReal x930=((IkReal(0.300700000000000))*(cj4));
IkReal x931=((npy)*(sj7));
IkReal x932=((IkReal(1.00000000000000))*(x931));
IkReal x933=((npz)*(x924));
IkReal x934=((IkReal(0.0300000000000000))*(x924));
IkReal x935=((IkReal(0.0600000000000000))*(x925));
IkReal x936=((IkReal(0.0300000000000000))*(x925));
IkReal x937=((IkReal(0.601420000000000))*(x924));
evalcond[0]=((IkReal(-0.300710000000000))+(x928)+(((IkReal(-1.00000000000000))*(x925)*(x929)))+(((x924)*(x926)))+(((IkReal(-1.00000000000000))*(x930)))+(((IkReal(-1.00000000000000))*(x924)*(x932))));
evalcond[1]=((((x925)*(x928)))+(((IkReal(-1.00000000000000))*(x929)))+(((x924)*(x927)))+(((cj4)*(x934)))+(((IkReal(-0.300710000000000))*(x925)))+(((IkReal(-1.00000000000000))*(x925)*(x930)))+(((IkReal(-1.00000000000000))*(x934))));
evalcond[2]=((IkReal(0.0300000000000000))+(((x925)*(x926)))+(((IkReal(-1.00000000000000))*(x925)*(x932)))+(((IkReal(-1.00000000000000))*(x927)))+(x933)+(((IkReal(-0.0300000000000000))*(cj4))));
evalcond[3]=((x926)+(((IkReal(-1.00000000000000))*(x924)*(x930)))+(((x924)*(x928)))+(((IkReal(-1.00000000000000))*(x932)))+(((IkReal(-1.00000000000000))*(cj4)*(x936)))+(x936)+(((IkReal(-0.300710000000000))*(x924)))+(((IkReal(-1.00000000000000))*(x925)*(x927))));
evalcond[4]=((IkReal(-6.01410000000000e-6))+(((x931)*(x935)))+(((IkReal(-1.00000000000000))*(x926)*(x935)))+(((x926)*(x937)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x933)))+(((IkReal(-0.601420000000000))*(npz)*(x925)))+(((IkReal(-1.00000000000000))*(x931)*(x937))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x938=(sj4)*(sj4);
IkReal x939=(cj4)*(cj4);
IkReal x940=((IkReal(0.0180420000000000))*(sj4));
if( IKabs(((gconst41)*(((IkReal(0.00902130000000000))+(((IkReal(0.00902100000000000))*(x938)))+(((npy)*(npz)*(sj7)))+(((IkReal(-0.0895204900000000))*(cj4)*(sj4)))+(((IkReal(-3.00000000000000e-7))*(cj4)))+(((IkReal(-1.00000000000000))*(cj7)*(npx)*(npz)))+(((IkReal(-0.0913234970000000))*(sj4)))+(((IkReal(-0.00902100000000000))*(x939))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst41)*(((IkReal(-0.000900000000000000))+(((IkReal(-1.00000000000000))*(cj4)*(x940)))+(((IkReal(-0.0904204900000000))*(x938)))+(((IkReal(0.00180000000000000))*(cj4)))+(x940)+((npz)*(npz))+(((IkReal(-0.000900000000000000))*(x939))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst41)*(((IkReal(0.00902130000000000))+(((IkReal(0.00902100000000000))*(x938)))+(((npy)*(npz)*(sj7)))+(((IkReal(-0.0895204900000000))*(cj4)*(sj4)))+(((IkReal(-3.00000000000000e-7))*(cj4)))+(((IkReal(-1.00000000000000))*(cj7)*(npx)*(npz)))+(((IkReal(-0.0913234970000000))*(sj4)))+(((IkReal(-0.00902100000000000))*(x939)))))), ((gconst41)*(((IkReal(-0.000900000000000000))+(((IkReal(-1.00000000000000))*(cj4)*(x940)))+(((IkReal(-0.0904204900000000))*(x938)))+(((IkReal(0.00180000000000000))*(cj4)))+(x940)+((npz)*(npz))+(((IkReal(-0.000900000000000000))*(x939)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[5];
IkReal x941=IKsin(j6);
IkReal x942=IKcos(j6);
IkReal x943=((cj7)*(npx));
IkReal x944=((IkReal(0.300700000000000))*(sj4));
IkReal x945=((IkReal(0.0300000000000000))*(sj4));
IkReal x946=((IkReal(1.00000000000000))*(npz));
IkReal x947=((IkReal(0.300700000000000))*(cj4));
IkReal x948=((npy)*(sj7));
IkReal x949=((IkReal(1.00000000000000))*(x948));
IkReal x950=((npz)*(x941));
IkReal x951=((IkReal(0.0300000000000000))*(x941));
IkReal x952=((IkReal(0.0600000000000000))*(x942));
IkReal x953=((IkReal(0.0300000000000000))*(x942));
IkReal x954=((IkReal(0.601420000000000))*(x941));
evalcond[0]=((IkReal(-0.300710000000000))+(((IkReal(-1.00000000000000))*(x947)))+(x945)+(((IkReal(-1.00000000000000))*(x942)*(x946)))+(((IkReal(-1.00000000000000))*(x941)*(x949)))+(((x941)*(x943))));
evalcond[1]=((((cj4)*(x951)))+(((IkReal(-1.00000000000000))*(x951)))+(((IkReal(-0.300710000000000))*(x942)))+(((IkReal(-1.00000000000000))*(x942)*(x947)))+(((x941)*(x944)))+(((IkReal(-1.00000000000000))*(x946)))+(((x942)*(x945))));
evalcond[2]=((IkReal(0.0300000000000000))+(((x942)*(x943)))+(((IkReal(-1.00000000000000))*(x942)*(x949)))+(x950)+(((IkReal(-1.00000000000000))*(x944)))+(((IkReal(-0.0300000000000000))*(cj4))));
evalcond[3]=((((x941)*(x945)))+(((IkReal(-1.00000000000000))*(x941)*(x947)))+(((IkReal(-1.00000000000000))*(cj4)*(x953)))+(x943)+(x953)+(((IkReal(-1.00000000000000))*(x942)*(x944)))+(((IkReal(-0.300710000000000))*(x941)))+(((IkReal(-1.00000000000000))*(x949))));
evalcond[4]=((IkReal(-6.01410000000000e-6))+(((IkReal(-1.00000000000000))*(x948)*(x954)))+(((IkReal(-0.0600000000000000))*(x950)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x943)*(x952)))+(((x948)*(x952)))+(((x943)*(x954)))+(((IkReal(-0.601420000000000))*(npz)*(x942))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x955=((cj7)*(npy));
IkReal x956=((npx)*(sj7));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j5, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.182646994100000))+(((IkReal(-0.0360846000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.179046994000000))*(cj4))));
evalcond[2]=((x956)+(x955));
evalcond[3]=((((IkReal(-1.00000000000000))*(x955)))+(((IkReal(-1.00000000000000))*(x956))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst43;
IkReal x957=((cj7)*(npx));
IkReal x958=((IkReal(0.0300000000000000))*(sj4));
IkReal x959=((IkReal(0.300700000000000))*(cj4));
IkReal x960=((npy)*(sj7));
IkReal x961=((IkReal(0.0300000000000000))*(npz));
gconst43=IKsign(((((x957)*(x958)))+(((x959)*(x960)))+(((IkReal(-0.300710000000000))*(x957)))+(((IkReal(-1.00000000000000))*(x957)*(x959)))+(((IkReal(-1.00000000000000))*(x958)*(x960)))+(((IkReal(0.300710000000000))*(x960)))+(((IkReal(-1.00000000000000))*(cj4)*(x961)))+(((IkReal(-0.300700000000000))*(npz)*(sj4)))+(x961)));
IkReal x962=((cj7)*(npx));
IkReal x963=((IkReal(10.0233333333333))*(cj4));
IkReal x964=((npy)*(sj7));
dummyeval[0]=((((IkReal(-10.0236666666667))*(x962)))+(((IkReal(10.0236666666667))*(x964)))+(((IkReal(-10.0233333333333))*(npz)*(sj4)))+(npz)+(((IkReal(-1.00000000000000))*(sj4)*(x964)))+(((sj4)*(x962)))+(((IkReal(-1.00000000000000))*(x962)*(x963)))+(((IkReal(-1.00000000000000))*(cj4)*(npz)))+(((x963)*(x964))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst42;
gconst42=IKsign(((((IkReal(2.00000000000000))*(cj7)*(npx)*(npy)*(sj7)))+(((IkReal(-1.00000000000000))*((cj7)*(cj7))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy))*((sj7)*(sj7))))+(((IkReal(-1.00000000000000))*((npz)*(npz))))));
dummyeval[0]=((((IkReal(2.00000000000000))*(cj7)*(npx)*(npy)*(sj7)))+(((IkReal(-1.00000000000000))*((cj7)*(cj7))*((npx)*(npx))))+(((IkReal(-1.00000000000000))*((npy)*(npy))*((sj7)*(sj7))))+(((IkReal(-1.00000000000000))*((npz)*(npz)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x965=((IkReal(0.300700000000000))*(cj4));
IkReal x966=((cj7)*(npx));
IkReal x967=((npy)*(sj7));
IkReal x968=((IkReal(0.0300000000000000))*(npz));
IkReal x969=((IkReal(0.300700000000000))*(sj4));
IkReal x970=((IkReal(0.0300000000000000))*(x966));
IkReal x971=((IkReal(0.0300000000000000))*(x967));
if( IKabs(((gconst42)*(((((x965)*(x967)))+(((npz)*(x969)))+(((sj4)*(x970)))+(((IkReal(-1.00000000000000))*(sj4)*(x971)))+(((IkReal(-0.300710000000000))*(x966)))+(((IkReal(-1.00000000000000))*(x968)))+(((IkReal(-1.00000000000000))*(x965)*(x966)))+(((cj4)*(x968)))+(((IkReal(0.300710000000000))*(x967))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst42)*(((x971)+(((IkReal(-1.00000000000000))*(x967)*(x969)))+(((cj4)*(x970)))+(((IkReal(0.300710000000000))*(npz)))+(((npz)*(x965)))+(((x966)*(x969)))+(((IkReal(-1.00000000000000))*(x970)))+(((IkReal(-1.00000000000000))*(sj4)*(x968)))+(((IkReal(-1.00000000000000))*(cj4)*(x971))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst42)*(((((x965)*(x967)))+(((npz)*(x969)))+(((sj4)*(x970)))+(((IkReal(-1.00000000000000))*(sj4)*(x971)))+(((IkReal(-0.300710000000000))*(x966)))+(((IkReal(-1.00000000000000))*(x968)))+(((IkReal(-1.00000000000000))*(x965)*(x966)))+(((cj4)*(x968)))+(((IkReal(0.300710000000000))*(x967)))))), ((gconst42)*(((x971)+(((IkReal(-1.00000000000000))*(x967)*(x969)))+(((cj4)*(x970)))+(((IkReal(0.300710000000000))*(npz)))+(((npz)*(x965)))+(((x966)*(x969)))+(((IkReal(-1.00000000000000))*(x970)))+(((IkReal(-1.00000000000000))*(sj4)*(x968)))+(((IkReal(-1.00000000000000))*(cj4)*(x971)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[5];
IkReal x972=IKsin(j6);
IkReal x973=IKcos(j6);
IkReal x974=((cj7)*(npx));
IkReal x975=((IkReal(0.300700000000000))*(sj4));
IkReal x976=((IkReal(0.0300000000000000))*(sj4));
IkReal x977=((npy)*(sj7));
IkReal x978=((IkReal(0.300700000000000))*(cj4));
IkReal x979=((IkReal(1.00000000000000))*(x972));
IkReal x980=((IkReal(1.00000000000000))*(x973));
IkReal x981=((IkReal(0.0300000000000000))*(x972));
IkReal x982=((IkReal(0.0600000000000000))*(x973));
IkReal x983=((IkReal(0.0300000000000000))*(x973));
IkReal x984=((IkReal(0.601420000000000))*(x972));
evalcond[0]=((IkReal(-0.300710000000000))+(((x972)*(x974)))+(x976)+(((IkReal(-1.00000000000000))*(x978)))+(((IkReal(-1.00000000000000))*(npz)*(x980)))+(((IkReal(-1.00000000000000))*(x977)*(x979))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj4)*(x981)))+(((IkReal(-1.00000000000000))*(npz)))+(((x973)*(x976)))+(((IkReal(-1.00000000000000))*(x972)*(x975)))+(x981)+(((IkReal(-1.00000000000000))*(x973)*(x978)))+(((IkReal(-0.300710000000000))*(x973))));
evalcond[2]=((IkReal(0.0300000000000000))+(((x973)*(x977)))+(((IkReal(-1.00000000000000))*(npz)*(x979)))+(((IkReal(-0.0300000000000000))*(cj4)))+(((IkReal(-1.00000000000000))*(x975)))+(((IkReal(-1.00000000000000))*(x974)*(x980))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x983)))+(x974)+(((IkReal(-1.00000000000000))*(x977)))+(((IkReal(-0.300710000000000))*(x972)))+(((x973)*(x975)))+(((cj4)*(x983)))+(((IkReal(-1.00000000000000))*(x972)*(x978)))+(((x972)*(x976))));
evalcond[4]=((IkReal(-6.01410000000000e-6))+(((IkReal(-0.601420000000000))*(npz)*(x973)))+(((x974)*(x982)))+(((x974)*(x984)))+(((IkReal(-1.00000000000000))*(x977)*(x984)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(npz)*(x972)))+(((IkReal(-1.00000000000000))*(x977)*(x982))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x985=(cj4)*(cj4);
IkReal x986=(sj4)*(sj4);
IkReal x987=((cj4)*(sj4));
if( IKabs(((gconst43)*(((IkReal(-0.0904265041000000))+(((IkReal(0.0180420000000000))*(x987)))+(((IkReal(-0.000900000000000000))*(x986)))+(((IkReal(-0.180846994000000))*(cj4)))+((npz)*(npz))+(((IkReal(-0.0904204900000000))*(x985)))+(((IkReal(0.0180426000000000))*(sj4))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst43)*(((IkReal(-0.00902130000000000))+(((IkReal(0.00902100000000000))*(x985)))+(((IkReal(0.0895204900000000))*(x987)))+(((IkReal(-1.00000000000000))*(npy)*(npz)*(sj7)))+(((IkReal(0.0913234970000000))*(sj4)))+(((cj7)*(npx)*(npz)))+(((IkReal(-0.00902100000000000))*(x986)))+(((IkReal(3.00000000000000e-7))*(cj4))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst43)*(((IkReal(-0.0904265041000000))+(((IkReal(0.0180420000000000))*(x987)))+(((IkReal(-0.000900000000000000))*(x986)))+(((IkReal(-0.180846994000000))*(cj4)))+((npz)*(npz))+(((IkReal(-0.0904204900000000))*(x985)))+(((IkReal(0.0180426000000000))*(sj4)))))), ((gconst43)*(((IkReal(-0.00902130000000000))+(((IkReal(0.00902100000000000))*(x985)))+(((IkReal(0.0895204900000000))*(x987)))+(((IkReal(-1.00000000000000))*(npy)*(npz)*(sj7)))+(((IkReal(0.0913234970000000))*(sj4)))+(((cj7)*(npx)*(npz)))+(((IkReal(-0.00902100000000000))*(x986)))+(((IkReal(3.00000000000000e-7))*(cj4)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[5];
IkReal x988=IKsin(j6);
IkReal x989=IKcos(j6);
IkReal x990=((cj7)*(npx));
IkReal x991=((IkReal(0.300700000000000))*(sj4));
IkReal x992=((IkReal(0.0300000000000000))*(sj4));
IkReal x993=((npy)*(sj7));
IkReal x994=((IkReal(0.300700000000000))*(cj4));
IkReal x995=((IkReal(1.00000000000000))*(x988));
IkReal x996=((IkReal(1.00000000000000))*(x989));
IkReal x997=((IkReal(0.0300000000000000))*(x988));
IkReal x998=((IkReal(0.0600000000000000))*(x989));
IkReal x999=((IkReal(0.0300000000000000))*(x989));
IkReal x1000=((IkReal(0.601420000000000))*(x988));
evalcond[0]=((IkReal(-0.300710000000000))+(((IkReal(-1.00000000000000))*(x994)))+(((x988)*(x990)))+(((IkReal(-1.00000000000000))*(npz)*(x996)))+(((IkReal(-1.00000000000000))*(x993)*(x995)))+(x992));
evalcond[1]=((((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-1.00000000000000))*(x989)*(x994)))+(((x989)*(x992)))+(((IkReal(-1.00000000000000))*(cj4)*(x997)))+(((IkReal(-0.300710000000000))*(x989)))+(((IkReal(-1.00000000000000))*(x988)*(x991)))+(x997));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(npz)*(x995)))+(((IkReal(-1.00000000000000))*(x990)*(x996)))+(((IkReal(-1.00000000000000))*(x991)))+(((IkReal(-0.0300000000000000))*(cj4)))+(((x989)*(x993))));
evalcond[3]=((((x989)*(x991)))+(((IkReal(-1.00000000000000))*(x999)))+(((x988)*(x992)))+(((cj4)*(x999)))+(((IkReal(-1.00000000000000))*(x988)*(x994)))+(((IkReal(-0.300710000000000))*(x988)))+(((IkReal(-1.00000000000000))*(x993)))+(x990));
evalcond[4]=((IkReal(-6.01410000000000e-6))+(((IkReal(0.0600000000000000))*(npz)*(x988)))+(((x990)*(x998)))+(((IkReal(-1.00000000000000))*(x1000)*(x993)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.601420000000000))*(npz)*(x989)))+(((x1000)*(x990)))+(((IkReal(-1.00000000000000))*(x993)*(x998))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1001=((IkReal(0.300710000000000))*(sj5));
IkReal x1002=((cj7)*(npx));
IkReal x1003=((npy)*(sj7));
IkReal x1004=((cj5)*(cj7));
IkReal x1005=((cj5)*(npx)*(npy));
IkReal x1006=((IkReal(0.0300000000000000))*(sj4)*(sj5));
IkReal x1007=((IkReal(0.300700000000000))*(cj4)*(sj5));
if( IKabs(((gconst38)*(((((npy)*(npz)*(x1004)))+(((x1002)*(x1006)))+(((IkReal(-1.00000000000000))*(x1003)*(x1006)))+(((IkReal(-1.00000000000000))*(x1001)*(x1002)))+(((cj5)*(npx)*(npz)*(sj7)))+(((x1003)*(x1007)))+(((x1001)*(x1003)))+(((IkReal(-1.00000000000000))*(x1002)*(x1007))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst38)*(((((IkReal(-1.00000000000000))*(npy)*(x1003)*(x1004)))+(((cj5)*(npx)*(sj7)*(x1002)))+(((IkReal(-1.00000000000000))*(npz)*(x1006)))+(((npz)*(x1001)))+(((npz)*(x1007)))+(((IkReal(-1.00000000000000))*(cj5)*(npx)*(sj7)*(x1003)))+(((npy)*(x1002)*(x1004))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst38)*(((((npy)*(npz)*(x1004)))+(((x1002)*(x1006)))+(((IkReal(-1.00000000000000))*(x1003)*(x1006)))+(((IkReal(-1.00000000000000))*(x1001)*(x1002)))+(((cj5)*(npx)*(npz)*(sj7)))+(((x1003)*(x1007)))+(((x1001)*(x1003)))+(((IkReal(-1.00000000000000))*(x1002)*(x1007)))))), ((gconst38)*(((((IkReal(-1.00000000000000))*(npy)*(x1003)*(x1004)))+(((cj5)*(npx)*(sj7)*(x1002)))+(((IkReal(-1.00000000000000))*(npz)*(x1006)))+(((npz)*(x1001)))+(((npz)*(x1007)))+(((IkReal(-1.00000000000000))*(cj5)*(npx)*(sj7)*(x1003)))+(((npy)*(x1002)*(x1004)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x1008=IKsin(j6);
IkReal x1009=IKcos(j6);
IkReal x1010=((IkReal(0.0300000000000000))*(cj4));
IkReal x1011=((cj7)*(npx));
IkReal x1012=((IkReal(0.300700000000000))*(sj4));
IkReal x1013=((IkReal(0.0300000000000000))*(sj4));
IkReal x1014=((IkReal(0.300700000000000))*(cj4));
IkReal x1015=((IkReal(1.00000000000000))*(npz));
IkReal x1016=((IkReal(0.0600000000000000))*(sj7));
IkReal x1017=((npx)*(sj5));
IkReal x1018=((cj5)*(x1009));
IkReal x1019=((cj7)*(npy)*(sj5));
IkReal x1020=((IkReal(1.00000000000000))*(npy)*(sj7));
IkReal x1021=((cj5)*(x1008));
IkReal x1022=((sj5)*(x1009));
IkReal x1023=((IkReal(0.601420000000000))*(x1008));
IkReal x1024=((npz)*(x1021));
evalcond[0]=((IkReal(-0.300710000000000))+(((x1008)*(x1011)))+(((IkReal(-1.00000000000000))*(x1008)*(x1020)))+(x1013)+(((IkReal(-1.00000000000000))*(x1009)*(x1015)))+(((IkReal(-1.00000000000000))*(x1014))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1020)*(x1022)))+(((x1011)*(x1022)))+(((cj5)*(npx)*(sj7)))+(((cj5)*(cj7)*(npy)))+(((npz)*(sj5)*(x1008))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x1009)*(x1014)))+(((x1010)*(x1021)))+(((x1012)*(x1021)))+(((IkReal(-0.0300000000000000))*(x1021)))+(((IkReal(-0.300710000000000))*(x1009)))+(((IkReal(-1.00000000000000))*(x1015)))+(((x1009)*(x1013))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x1012)))+(((x1011)*(x1018)))+(((IkReal(-1.00000000000000))*(x1019)))+(((IkReal(-1.00000000000000))*(x1010)))+(((IkReal(-1.00000000000000))*(sj7)*(x1017)))+(x1024)+(((IkReal(-1.00000000000000))*(x1018)*(x1020))));
evalcond[4]=((((IkReal(-0.300710000000000))*(x1008)))+(((IkReal(-1.00000000000000))*(x1008)*(x1014)))+(((IkReal(-1.00000000000000))*(x1020)))+(((x1008)*(x1013)))+(((IkReal(-1.00000000000000))*(x1012)*(x1018)))+(((IkReal(-1.00000000000000))*(x1010)*(x1018)))+(x1011)+(((IkReal(0.0300000000000000))*(x1018))));
evalcond[5]=((IkReal(-6.01410000000000e-6))+(((x1011)*(x1023)))+(((IkReal(-1.00000000000000))*(npy)*(sj7)*(x1023)))+(((npy)*(x1016)*(x1018)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x1011)*(x1018)))+(((IkReal(-0.601420000000000))*(npz)*(x1009)))+(((IkReal(-0.0600000000000000))*(x1024)))+(((x1016)*(x1017)))+(((IkReal(0.0600000000000000))*(x1019))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1025=(sj4)*(sj4);
IkReal x1026=(cj4)*(cj4);
IkReal x1027=((cj4)*(cj5));
IkReal x1028=((IkReal(0.00902100000000000))*(cj5));
if( IKabs(((gconst39)*(((IkReal(-0.0904265041000000))+(((IkReal(-0.0904204900000000))*(x1026)))+(((IkReal(0.0180420000000000))*(cj4)*(sj4)))+(((IkReal(-0.180846994000000))*(cj4)))+((npz)*(npz))+(((IkReal(-0.000900000000000000))*(x1025)))+(((IkReal(0.0180426000000000))*(sj4))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst39)*(((((IkReal(-1.00000000000000))*(x1026)*(x1028)))+(((IkReal(0.00902130000000000))*(cj5)))+(((IkReal(-0.0913234970000000))*(cj5)*(sj4)))+(((IkReal(-1.00000000000000))*(npy)*(npz)*(sj7)))+(((x1025)*(x1028)))+(((IkReal(-3.00000000000000e-7))*(x1027)))+(((cj7)*(npx)*(npz)))+(((IkReal(-0.0895204900000000))*(sj4)*(x1027))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst39)*(((IkReal(-0.0904265041000000))+(((IkReal(-0.0904204900000000))*(x1026)))+(((IkReal(0.0180420000000000))*(cj4)*(sj4)))+(((IkReal(-0.180846994000000))*(cj4)))+((npz)*(npz))+(((IkReal(-0.000900000000000000))*(x1025)))+(((IkReal(0.0180426000000000))*(sj4)))))), ((gconst39)*(((((IkReal(-1.00000000000000))*(x1026)*(x1028)))+(((IkReal(0.00902130000000000))*(cj5)))+(((IkReal(-0.0913234970000000))*(cj5)*(sj4)))+(((IkReal(-1.00000000000000))*(npy)*(npz)*(sj7)))+(((x1025)*(x1028)))+(((IkReal(-3.00000000000000e-7))*(x1027)))+(((cj7)*(npx)*(npz)))+(((IkReal(-0.0895204900000000))*(sj4)*(x1027)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x1029=IKsin(j6);
IkReal x1030=IKcos(j6);
IkReal x1031=((IkReal(0.0300000000000000))*(cj4));
IkReal x1032=((cj7)*(npx));
IkReal x1033=((IkReal(0.300700000000000))*(sj4));
IkReal x1034=((IkReal(0.0300000000000000))*(sj4));
IkReal x1035=((IkReal(0.300700000000000))*(cj4));
IkReal x1036=((IkReal(1.00000000000000))*(npz));
IkReal x1037=((IkReal(0.0600000000000000))*(sj7));
IkReal x1038=((npx)*(sj5));
IkReal x1039=((cj5)*(x1030));
IkReal x1040=((cj7)*(npy)*(sj5));
IkReal x1041=((IkReal(1.00000000000000))*(npy)*(sj7));
IkReal x1042=((cj5)*(x1029));
IkReal x1043=((sj5)*(x1030));
IkReal x1044=((IkReal(0.601420000000000))*(x1029));
IkReal x1045=((npz)*(x1042));
evalcond[0]=((IkReal(-0.300710000000000))+(x1034)+(((IkReal(-1.00000000000000))*(x1029)*(x1041)))+(((IkReal(-1.00000000000000))*(x1035)))+(((x1029)*(x1032)))+(((IkReal(-1.00000000000000))*(x1030)*(x1036))));
evalcond[1]=((((cj5)*(npx)*(sj7)))+(((IkReal(-1.00000000000000))*(x1041)*(x1043)))+(((npz)*(sj5)*(x1029)))+(((x1032)*(x1043)))+(((cj5)*(cj7)*(npy))));
evalcond[2]=((((x1030)*(x1034)))+(((x1033)*(x1042)))+(((IkReal(-1.00000000000000))*(x1036)))+(((IkReal(-0.300710000000000))*(x1030)))+(((x1031)*(x1042)))+(((IkReal(-0.0300000000000000))*(x1042)))+(((IkReal(-1.00000000000000))*(x1030)*(x1035))));
evalcond[3]=((IkReal(0.0300000000000000))+(x1045)+(((IkReal(-1.00000000000000))*(x1033)))+(((x1032)*(x1039)))+(((IkReal(-1.00000000000000))*(x1031)))+(((IkReal(-1.00000000000000))*(sj7)*(x1038)))+(((IkReal(-1.00000000000000))*(x1040)))+(((IkReal(-1.00000000000000))*(x1039)*(x1041))));
evalcond[4]=((((IkReal(-0.300710000000000))*(x1029)))+(((IkReal(-1.00000000000000))*(x1033)*(x1039)))+(((IkReal(-1.00000000000000))*(x1031)*(x1039)))+(x1032)+(((IkReal(-1.00000000000000))*(x1041)))+(((IkReal(0.0300000000000000))*(x1039)))+(((x1029)*(x1034)))+(((IkReal(-1.00000000000000))*(x1029)*(x1035))));
evalcond[5]=((IkReal(-6.01410000000000e-6))+(((npy)*(x1037)*(x1039)))+(((IkReal(-0.0600000000000000))*(x1045)))+(((IkReal(-0.0600000000000000))*(x1032)*(x1039)))+(((IkReal(-1.00000000000000))*(npy)*(sj7)*(x1044)))+(((IkReal(-1.00000000000000))*(pp)))+(((x1037)*(x1038)))+(((x1032)*(x1044)))+(((IkReal(0.0600000000000000))*(x1040)))+(((IkReal(-0.601420000000000))*(npz)*(x1030))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x90=((sj5)*(sj6));
IkReal x91=((IkReal(1.00000000000000))*(sj7));
IkReal x92=((cj6)*(sj5));
IkReal x93=((cj4)*(cj6));
IkReal x94=((IkReal(1.00000000000000))*(sj6));
IkReal x95=((cj5)*(sj4));
IkReal x96=((cj7)*(sj5));
IkReal x97=((sj5)*(sj7));
IkReal x98=((sj4)*(x96));
IkReal x99=((IkReal(-1.00000000000000))*(cj4));
IkReal x100=((IkReal(-1.00000000000000))*(sj7));
IkReal x101=((((IkReal(-1.00000000000000))*(sj4)*(x94)))+(((cj5)*(x93))));
IkReal x102=((((cj4)*(cj5)*(sj6)))+(((cj6)*(sj4))));
IkReal x103=((((cj7)*(x92)))+(((cj5)*(sj7))));
IkReal x104=((((cj5)*(cj7)))+(((IkReal(-1.00000000000000))*(x91)*(x92))));
IkReal x105=((((IkReal(-1.00000000000000))*(x94)*(x95)))+(x93));
IkReal x106=((cj7)*(x101));
IkReal x107=((((IkReal(-1.00000000000000))*(cj6)*(x95)))+(((IkReal(-1.00000000000000))*(cj4)*(x94))));
IkReal x108=((x106)+(((IkReal(-1.00000000000000))*(cj4)*(sj5)*(x91))));
IkReal x109=((((sj4)*(x97)))+(((cj7)*(x107))));
IkReal x110=((((x96)*(x99)))+(((x100)*(x101))));
IkReal x111=((((x100)*(x107)))+(x98));
new_r00=((((r01)*(x110)))+(((r00)*(x108)))+(((r02)*(x102))));
new_r01=((((r11)*(((((IkReal(-1.00000000000000))*(cj4)*(x96)))+(((IkReal(-1.00000000000000))*(x101)*(x91)))))))+(((r12)*(x102)))+(((r10)*(((((x97)*(x99)))+(x106))))));
new_r02=((((r21)*(x110)))+(((r20)*(x108)))+(((r22)*(x102))));
new_r10=((((r02)*(x90)))+(((r00)*(x103)))+(((r01)*(x104))));
new_r11=((((r12)*(x90)))+(((r11)*(x104)))+(((r10)*(x103))));
new_r12=((((r22)*(x90)))+(((r21)*(x104)))+(((r20)*(x103))));
new_r20=((((r02)*(x105)))+(((r01)*(((((IkReal(-1.00000000000000))*(x107)*(x91)))+(x98)))))+(((r00)*(x109))));
new_r21=((((r12)*(x105)))+(((r10)*(x109)))+(((r11)*(x111))));
new_r22=((((r22)*(x105)))+(((r20)*(x109)))+(((r21)*(x111))));
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
sj2array[0]=((IkReal(-1.00000000000000))*(new_r22));
if( sj2array[0] >= -1-IKFAST_SINCOS_THRESH && sj2array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j2valid[0] = j2valid[1] = true;
    j2array[0] = IKasin(sj2array[0]);
    cj2array[0] = IKcos(j2array[0]);
    sj2array[1] = sj2array[0];
    j2array[1] = j2array[0] > 0 ? (IKPI-j2array[0]) : (-IKPI-j2array[0]);
    cj2array[1] = -cj2array[0];
}
else if( isnan(sj2array[0]) )
{
    // probably any value will work
    j2valid[0] = true;
    cj2array[0] = 1; sj2array[0] = 0; j2array[0] = 0;
}
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal dummyeval[1];
IkReal gconst44;
gconst44=IKsign(cj2);
dummyeval[0]=cj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst45;
gconst45=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst46;
gconst46=IKsign(((((cj2)*(new_r00)*(new_r02)))+(((cj2)*(new_r10)*(new_r12)))));
dummyeval[0]=((((cj2)*(new_r00)*(new_r02)))+(((cj2)*(new_r10)*(new_r12))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(1.00000000000000))+(new_r22));
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[5]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[6]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
if( IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x112=IKatan2(new_r12, new_r02);
j3array[0]=((IkReal(-1.00000000000000))*(x112));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x112))));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r12)*(IKsin(j3))))+(((new_r02)*(IKcos(j3)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((((cj3)*(new_r10)))+(((new_r00)*(sj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(new_r01)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj3)*(new_r10)))+(((new_r00)*(sj3)))))+IKsqr(((((IkReal(-1.00000000000000))*(new_r01)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((cj3)*(new_r10)))+(((new_r00)*(sj3)))), ((((IkReal(-1.00000000000000))*(new_r01)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(new_r11)))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x113=IKcos(j1);
IkReal x114=((IkReal(1.00000000000000))*(sj3));
IkReal x115=((IkReal(1.00000000000000))*(IKsin(j1)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r10)*(x114)))+(((IkReal(-1.00000000000000))*(x113)))+(((cj3)*(new_r00))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x115)))+(((IkReal(-1.00000000000000))*(new_r11)*(x114)))+(((cj3)*(new_r01))));
evalcond[2]=((((cj3)*(new_r11)))+(((new_r01)*(sj3)))+(x113));
evalcond[3]=((((cj3)*(new_r10)))+(((IkReal(-1.00000000000000))*(x115)))+(((new_r00)*(sj3))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
IkReal x116=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=x116;
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x116;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
if( IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x117=IKatan2(new_r12, new_r02);
j3array[0]=((IkReal(-1.00000000000000))*(x117));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x117))));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r12)*(IKsin(j3))))+(((new_r02)*(IKcos(j3)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj3)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj3)*(new_r11)))+(((new_r01)*(sj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj3)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj3)))))+IKsqr(((((cj3)*(new_r11)))+(((new_r01)*(sj3)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj3)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj3)))), ((((cj3)*(new_r11)))+(((new_r01)*(sj3)))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x118=IKsin(j1);
IkReal x119=((IkReal(1.00000000000000))*(sj3));
IkReal x120=((IkReal(1.00000000000000))*(IKcos(j1)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r10)*(x119)))+(((IkReal(-1.00000000000000))*(x120)))+(((cj3)*(new_r00))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x118)))+(((IkReal(-1.00000000000000))*(new_r11)*(x119)))+(((cj3)*(new_r01))));
evalcond[2]=((((cj3)*(new_r11)))+(((IkReal(-1.00000000000000))*(x120)))+(((new_r01)*(sj3))));
evalcond[3]=((((cj3)*(new_r10)))+(x118)+(((new_r00)*(sj3))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x121=((gconst46)*(new_r20)*(sj2));
if( IKabs(((new_r02)*(x121))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r12)*(x121))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((new_r02)*(x121)), ((new_r12)*(x121)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x122=IKcos(j3);
IkReal x123=IKsin(j3);
IkReal x124=((IkReal(1.00000000000000))*(sj2));
IkReal x125=((IkReal(1.00000000000000))*(cj2));
IkReal x126=((cj2)*(x122));
IkReal x127=((cj2)*(x123));
IkReal x128=((new_r12)*(x122));
IkReal x129=((new_r02)*(x123));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r12)*(x123)))+(((new_r02)*(x122))));
evalcond[1]=((x128)+(x129)+(((IkReal(-1.00000000000000))*(x125))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r20)*(x124)))+(((new_r00)*(x127)))+(((new_r10)*(x126))));
evalcond[3]=((((new_r01)*(x127)))+(((IkReal(-1.00000000000000))*(new_r21)*(x124)))+(((new_r11)*(x126))));
evalcond[4]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22)*(x124)))+(((new_r02)*(x127)))+(((new_r12)*(x126))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x124)*(x128)))+(((IkReal(-1.00000000000000))*(x124)*(x129)))+(((IkReal(-1.00000000000000))*(new_r22)*(x125))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst47;
gconst47=IKsign(cj2);
dummyeval[0]=cj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=sj2;
dummyeval[1]=cj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x130=((((IkReal(-1.00000000000000))*(new_r12)*(sj3)))+(((cj3)*(new_r02))));
IkReal x131=((((cj3)*(new_r10)))+(((new_r00)*(sj3))));
IkReal x132=((((cj3)*(new_r11)))+(((new_r01)*(sj3))));
IkReal x133=((IkReal(-1.00000000000000))+(((cj3)*(new_r12)))+(((new_r02)*(sj3))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=x130;
evalcond[3]=x130;
evalcond[4]=x133;
evalcond[5]=x132;
evalcond[6]=x131;
evalcond[7]=x131;
evalcond[8]=x132;
evalcond[9]=x133;
evalcond[10]=((IkReal(-1.00000000000000))*(new_r22));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(((IkReal(-1.00000000000000))*(new_r21)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(new_r20, ((IkReal(-1.00000000000000))*(new_r21)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x134=IKcos(j1);
IkReal x135=((IkReal(1.00000000000000))*(sj3));
IkReal x136=((IkReal(1.00000000000000))*(IKsin(j1)));
evalcond[0]=((new_r21)+(x134));
evalcond[1]=((new_r20)+(((IkReal(-1.00000000000000))*(x136))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r10)*(x135)))+(((IkReal(-1.00000000000000))*(x134)))+(((cj3)*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x136)))+(((IkReal(-1.00000000000000))*(new_r11)*(x135)))+(((cj3)*(new_r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x137=((cj3)*(new_r12));
IkReal x138=((new_r01)*(sj3));
IkReal x139=((IkReal(1.00000000000000))*(cj3));
IkReal x140=((new_r00)*(sj3));
IkReal x141=((new_r02)*(sj3));
IkReal x142=((((IkReal(-1.00000000000000))*(new_r12)*(sj3)))+(((cj3)*(new_r02))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j2, IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=x142;
evalcond[3]=x142;
evalcond[4]=((IkReal(1.00000000000000))+(x137)+(x141));
evalcond[5]=((((cj3)*(new_r11)))+(x138));
evalcond[6]=((((cj3)*(new_r10)))+(x140));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r10)*(x139)))+(((IkReal(-1.00000000000000))*(x140))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r11)*(x139)))+(((IkReal(-1.00000000000000))*(x138))));
evalcond[9]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(x137)))+(((IkReal(-1.00000000000000))*(x141))));
evalcond[10]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r20)))+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r20)), new_r21);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x143=IKsin(j1);
IkReal x144=((IkReal(1.00000000000000))*(sj3));
IkReal x145=((IkReal(1.00000000000000))*(IKcos(j1)));
evalcond[0]=((new_r21)+(((IkReal(-1.00000000000000))*(x145))));
evalcond[1]=((new_r20)+(x143));
evalcond[2]=((((IkReal(-1.00000000000000))*(x145)))+(((IkReal(-1.00000000000000))*(new_r10)*(x144)))+(((cj3)*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r11)*(x144)))+(((IkReal(-1.00000000000000))*(x143)))+(((cj3)*(new_r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x146=((cj3)*(new_r12));
IkReal x147=((new_r02)*(sj3));
IkReal x148=((((IkReal(-1.00000000000000))*(new_r12)*(sj3)))+(((cj3)*(new_r02))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(1.00000000000000))+(new_r22));
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=x148;
evalcond[5]=x148;
evalcond[6]=((x146)+(x147));
evalcond[7]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[8]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[9]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
evalcond[10]=((((IkReal(-1.00000000000000))*(x147)))+(((IkReal(-1.00000000000000))*(x146))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((((cj3)*(new_r10)))+(((new_r00)*(sj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(new_r01)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj3)*(new_r10)))+(((new_r00)*(sj3)))))+IKsqr(((((IkReal(-1.00000000000000))*(new_r01)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((cj3)*(new_r10)))+(((new_r00)*(sj3)))), ((((IkReal(-1.00000000000000))*(new_r01)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(new_r11)))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x149=IKcos(j1);
IkReal x150=((IkReal(1.00000000000000))*(sj3));
IkReal x151=((IkReal(1.00000000000000))*(IKsin(j1)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r10)*(x150)))+(((IkReal(-1.00000000000000))*(x149)))+(((cj3)*(new_r00))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r11)*(x150)))+(((IkReal(-1.00000000000000))*(x151)))+(((cj3)*(new_r01))));
evalcond[2]=((((cj3)*(new_r11)))+(((new_r01)*(sj3)))+(x149));
evalcond[3]=((((cj3)*(new_r10)))+(((IkReal(-1.00000000000000))*(x151)))+(((new_r00)*(sj3))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x152=((IkReal(-1.00000000000000))+(new_r22));
IkReal x153=((((IkReal(-1.00000000000000))*(new_r12)*(sj3)))+(((cj3)*(new_r02))));
IkReal x154=((((cj3)*(new_r12)))+(((new_r02)*(sj3))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=x152;
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=x153;
evalcond[5]=x153;
evalcond[6]=x154;
evalcond[7]=new_r20;
evalcond[8]=new_r21;
evalcond[9]=x152;
evalcond[10]=x154;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj3)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj3)*(new_r11)))+(((new_r01)*(sj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj3)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj3)))))+IKsqr(((((cj3)*(new_r11)))+(((new_r01)*(sj3)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj3)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj3)))), ((((cj3)*(new_r11)))+(((new_r01)*(sj3)))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x155=IKsin(j1);
IkReal x156=((IkReal(1.00000000000000))*(sj3));
IkReal x157=((IkReal(1.00000000000000))*(IKcos(j1)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x157)))+(((IkReal(-1.00000000000000))*(new_r10)*(x156)))+(((cj3)*(new_r00))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r11)*(x156)))+(((IkReal(-1.00000000000000))*(x155)))+(((cj3)*(new_r01))));
evalcond[2]=((((cj3)*(new_r11)))+(((IkReal(-1.00000000000000))*(x157)))+(((new_r01)*(sj3))));
evalcond[3]=((x155)+(((cj3)*(new_r10)))+(((new_r00)*(sj3))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((((IKabs(sj2) != 0)?((IkReal)1/(sj2)):(IkReal)1.0e30))*(((((cj3)*(new_r10)))+(((new_r00)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj2) != 0)?((IkReal)1/(cj2)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(sj2) != 0)?((IkReal)1/(sj2)):(IkReal)1.0e30))*(((((cj3)*(new_r10)))+(((new_r00)*(sj3)))))))+IKsqr(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj2) != 0)?((IkReal)1/(cj2)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IKabs(sj2) != 0)?((IkReal)1/(sj2)):(IkReal)1.0e30))*(((((cj3)*(new_r10)))+(((new_r00)*(sj3)))))), ((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj2) != 0)?((IkReal)1/(cj2)):(IkReal)1.0e30))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x158=IKcos(j1);
IkReal x159=IKsin(j1);
IkReal x160=((new_r00)*(sj3));
IkReal x161=((IkReal(1.00000000000000))*(sj2));
IkReal x162=((IkReal(1.00000000000000))*(cj2));
IkReal x163=((new_r01)*(sj3));
IkReal x164=((cj3)*(new_r10));
IkReal x165=((IkReal(1.00000000000000))*(sj3));
IkReal x166=((cj3)*(new_r11));
IkReal x167=((IkReal(1.00000000000000))*(x158));
evalcond[0]=((new_r21)+(((cj2)*(x158))));
evalcond[1]=((new_r20)+(((IkReal(-1.00000000000000))*(x159)*(x162))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x167)))+(((IkReal(-1.00000000000000))*(new_r10)*(x165)))+(((cj3)*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r11)*(x165)))+(((IkReal(-1.00000000000000))*(x159)))+(((cj3)*(new_r01))));
evalcond[4]=((x163)+(x166)+(((sj2)*(x158))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x159)*(x161)))+(x160)+(x164));
evalcond[6]=((((IkReal(-1.00000000000000))*(x160)*(x161)))+(x159)+(((IkReal(-1.00000000000000))*(x161)*(x164)))+(((IkReal(-1.00000000000000))*(new_r20)*(x162))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x161)*(x163)))+(((IkReal(-1.00000000000000))*(x167)))+(((IkReal(-1.00000000000000))*(new_r21)*(x162)))+(((IkReal(-1.00000000000000))*(x161)*(x166))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(new_r11)*(sj3)))+(((cj3)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj2) != 0)?((IkReal)1/(cj2)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r11)*(sj3)))+(((cj3)*(new_r01)))))+IKsqr(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj2) != 0)?((IkReal)1/(cj2)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r11)*(sj3)))+(((cj3)*(new_r01)))), ((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj2) != 0)?((IkReal)1/(cj2)):(IkReal)1.0e30))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x168=IKcos(j1);
IkReal x169=IKsin(j1);
IkReal x170=((new_r00)*(sj3));
IkReal x171=((IkReal(1.00000000000000))*(sj2));
IkReal x172=((IkReal(1.00000000000000))*(cj2));
IkReal x173=((new_r01)*(sj3));
IkReal x174=((cj3)*(new_r10));
IkReal x175=((IkReal(1.00000000000000))*(sj3));
IkReal x176=((cj3)*(new_r11));
IkReal x177=((IkReal(1.00000000000000))*(x168));
evalcond[0]=((new_r21)+(((cj2)*(x168))));
evalcond[1]=((new_r20)+(((IkReal(-1.00000000000000))*(x169)*(x172))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r10)*(x175)))+(((IkReal(-1.00000000000000))*(x177)))+(((cj3)*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r11)*(x175)))+(((cj3)*(new_r01)))+(((IkReal(-1.00000000000000))*(x169))));
evalcond[4]=((x173)+(x176)+(((sj2)*(x168))));
evalcond[5]=((x170)+(x174)+(((IkReal(-1.00000000000000))*(x169)*(x171))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r20)*(x172)))+(((IkReal(-1.00000000000000))*(x171)*(x174)))+(x169)+(((IkReal(-1.00000000000000))*(x170)*(x171))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x171)*(x173)))+(((IkReal(-1.00000000000000))*(x177)))+(((IkReal(-1.00000000000000))*(new_r21)*(x172)))+(((IkReal(-1.00000000000000))*(x171)*(x176))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((gconst47)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst47)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst47)*(new_r20)), ((IkReal(-1.00000000000000))*(gconst47)*(new_r21)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x178=IKcos(j1);
IkReal x179=IKsin(j1);
IkReal x180=((new_r00)*(sj3));
IkReal x181=((IkReal(1.00000000000000))*(sj2));
IkReal x182=((IkReal(1.00000000000000))*(cj2));
IkReal x183=((new_r01)*(sj3));
IkReal x184=((cj3)*(new_r10));
IkReal x185=((IkReal(1.00000000000000))*(sj3));
IkReal x186=((cj3)*(new_r11));
IkReal x187=((IkReal(1.00000000000000))*(x178));
evalcond[0]=((new_r21)+(((cj2)*(x178))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x179)*(x182)))+(new_r20));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r10)*(x185)))+(((IkReal(-1.00000000000000))*(x187)))+(((cj3)*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r11)*(x185)))+(((IkReal(-1.00000000000000))*(x179)))+(((cj3)*(new_r01))));
evalcond[4]=((((sj2)*(x178)))+(x186)+(x183));
evalcond[5]=((x184)+(x180)+(((IkReal(-1.00000000000000))*(x179)*(x181))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x181)*(x184)))+(x179)+(((IkReal(-1.00000000000000))*(x180)*(x181)))+(((IkReal(-1.00000000000000))*(new_r20)*(x182))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x181)*(x186)))+(((IkReal(-1.00000000000000))*(x187)))+(((IkReal(-1.00000000000000))*(new_r21)*(x182)))+(((IkReal(-1.00000000000000))*(x181)*(x183))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x188=((cj2)*(gconst45));
if( IKabs(((new_r02)*(x188))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r12)*(x188))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((new_r02)*(x188)), ((new_r12)*(x188)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x189=IKcos(j3);
IkReal x190=IKsin(j3);
IkReal x191=((IkReal(1.00000000000000))*(sj2));
IkReal x192=((IkReal(1.00000000000000))*(cj2));
IkReal x193=((cj2)*(x189));
IkReal x194=((cj2)*(x190));
IkReal x195=((new_r12)*(x189));
IkReal x196=((new_r02)*(x190));
evalcond[0]=((((new_r02)*(x189)))+(((IkReal(-1.00000000000000))*(new_r12)*(x190))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x192)))+(x196)+(x195));
evalcond[2]=((((new_r00)*(x194)))+(((new_r10)*(x193)))+(((IkReal(-1.00000000000000))*(new_r20)*(x191))));
evalcond[3]=((((new_r01)*(x194)))+(((new_r11)*(x193)))+(((IkReal(-1.00000000000000))*(new_r21)*(x191))));
evalcond[4]=((IkReal(-1.00000000000000))+(((new_r12)*(x193)))+(((IkReal(-1.00000000000000))*(new_r22)*(x191)))+(((new_r02)*(x194))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x191)*(x195)))+(((IkReal(-1.00000000000000))*(x191)*(x196)))+(((IkReal(-1.00000000000000))*(new_r22)*(x192))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst47;
gconst47=IKsign(cj2);
dummyeval[0]=cj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=sj2;
dummyeval[1]=cj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x197=((((IkReal(-1.00000000000000))*(new_r12)*(sj3)))+(((cj3)*(new_r02))));
IkReal x198=((((cj3)*(new_r10)))+(((new_r00)*(sj3))));
IkReal x199=((((cj3)*(new_r11)))+(((new_r01)*(sj3))));
IkReal x200=((IkReal(-1.00000000000000))+(((cj3)*(new_r12)))+(((new_r02)*(sj3))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=x197;
evalcond[3]=x197;
evalcond[4]=x200;
evalcond[5]=x199;
evalcond[6]=x198;
evalcond[7]=x198;
evalcond[8]=x199;
evalcond[9]=x200;
evalcond[10]=((IkReal(-1.00000000000000))*(new_r22));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(((IkReal(-1.00000000000000))*(new_r21)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(new_r20, ((IkReal(-1.00000000000000))*(new_r21)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x201=IKcos(j1);
IkReal x202=((IkReal(1.00000000000000))*(sj3));
IkReal x203=((IkReal(1.00000000000000))*(IKsin(j1)));
evalcond[0]=((new_r21)+(x201));
evalcond[1]=((((IkReal(-1.00000000000000))*(x203)))+(new_r20));
evalcond[2]=((((IkReal(-1.00000000000000))*(x201)))+(((IkReal(-1.00000000000000))*(new_r10)*(x202)))+(((cj3)*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r11)*(x202)))+(((IkReal(-1.00000000000000))*(x203)))+(((cj3)*(new_r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x204=((cj3)*(new_r12));
IkReal x205=((new_r01)*(sj3));
IkReal x206=((IkReal(1.00000000000000))*(cj3));
IkReal x207=((new_r00)*(sj3));
IkReal x208=((new_r02)*(sj3));
IkReal x209=((((IkReal(-1.00000000000000))*(new_r12)*(sj3)))+(((cj3)*(new_r02))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j2, IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=x209;
evalcond[3]=x209;
evalcond[4]=((IkReal(1.00000000000000))+(x204)+(x208));
evalcond[5]=((((cj3)*(new_r11)))+(x205));
evalcond[6]=((x207)+(((cj3)*(new_r10))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r10)*(x206)))+(((IkReal(-1.00000000000000))*(x207))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r11)*(x206)))+(((IkReal(-1.00000000000000))*(x205))));
evalcond[9]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(x204)))+(((IkReal(-1.00000000000000))*(x208))));
evalcond[10]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r20)))+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r20)), new_r21);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x210=IKsin(j1);
IkReal x211=((IkReal(1.00000000000000))*(sj3));
IkReal x212=((IkReal(1.00000000000000))*(IKcos(j1)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x212)))+(new_r21));
evalcond[1]=((new_r20)+(x210));
evalcond[2]=((((IkReal(-1.00000000000000))*(x212)))+(((IkReal(-1.00000000000000))*(new_r10)*(x211)))+(((cj3)*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r11)*(x211)))+(((IkReal(-1.00000000000000))*(x210)))+(((cj3)*(new_r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x213=((cj3)*(new_r12));
IkReal x214=((new_r02)*(sj3));
IkReal x215=((((IkReal(-1.00000000000000))*(new_r12)*(sj3)))+(((cj3)*(new_r02))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(1.00000000000000))+(new_r22));
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=x215;
evalcond[5]=x215;
evalcond[6]=((x213)+(x214));
evalcond[7]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[8]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[9]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
evalcond[10]=((((IkReal(-1.00000000000000))*(x214)))+(((IkReal(-1.00000000000000))*(x213))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((((cj3)*(new_r10)))+(((new_r00)*(sj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(new_r01)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj3)*(new_r10)))+(((new_r00)*(sj3)))))+IKsqr(((((IkReal(-1.00000000000000))*(new_r01)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((cj3)*(new_r10)))+(((new_r00)*(sj3)))), ((((IkReal(-1.00000000000000))*(new_r01)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(new_r11)))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x216=IKcos(j1);
IkReal x217=((IkReal(1.00000000000000))*(sj3));
IkReal x218=((IkReal(1.00000000000000))*(IKsin(j1)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x216)))+(((IkReal(-1.00000000000000))*(new_r10)*(x217)))+(((cj3)*(new_r00))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x218)))+(((IkReal(-1.00000000000000))*(new_r11)*(x217)))+(((cj3)*(new_r01))));
evalcond[2]=((x216)+(((cj3)*(new_r11)))+(((new_r01)*(sj3))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x218)))+(((cj3)*(new_r10)))+(((new_r00)*(sj3))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x219=((IkReal(-1.00000000000000))+(new_r22));
IkReal x220=((((IkReal(-1.00000000000000))*(new_r12)*(sj3)))+(((cj3)*(new_r02))));
IkReal x221=((((cj3)*(new_r12)))+(((new_r02)*(sj3))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=x219;
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=x220;
evalcond[5]=x220;
evalcond[6]=x221;
evalcond[7]=new_r20;
evalcond[8]=new_r21;
evalcond[9]=x219;
evalcond[10]=x221;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj3)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj3)*(new_r11)))+(((new_r01)*(sj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj3)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj3)))))+IKsqr(((((cj3)*(new_r11)))+(((new_r01)*(sj3)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj3)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj3)))), ((((cj3)*(new_r11)))+(((new_r01)*(sj3)))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x222=IKsin(j1);
IkReal x223=((IkReal(1.00000000000000))*(sj3));
IkReal x224=((IkReal(1.00000000000000))*(IKcos(j1)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r10)*(x223)))+(((IkReal(-1.00000000000000))*(x224)))+(((cj3)*(new_r00))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r11)*(x223)))+(((IkReal(-1.00000000000000))*(x222)))+(((cj3)*(new_r01))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x224)))+(((cj3)*(new_r11)))+(((new_r01)*(sj3))));
evalcond[3]=((x222)+(((cj3)*(new_r10)))+(((new_r00)*(sj3))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((((IKabs(sj2) != 0)?((IkReal)1/(sj2)):(IkReal)1.0e30))*(((((cj3)*(new_r10)))+(((new_r00)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj2) != 0)?((IkReal)1/(cj2)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(sj2) != 0)?((IkReal)1/(sj2)):(IkReal)1.0e30))*(((((cj3)*(new_r10)))+(((new_r00)*(sj3)))))))+IKsqr(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj2) != 0)?((IkReal)1/(cj2)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IKabs(sj2) != 0)?((IkReal)1/(sj2)):(IkReal)1.0e30))*(((((cj3)*(new_r10)))+(((new_r00)*(sj3)))))), ((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj2) != 0)?((IkReal)1/(cj2)):(IkReal)1.0e30))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x225=IKcos(j1);
IkReal x226=IKsin(j1);
IkReal x227=((new_r00)*(sj3));
IkReal x228=((IkReal(1.00000000000000))*(sj2));
IkReal x229=((IkReal(1.00000000000000))*(cj2));
IkReal x230=((new_r01)*(sj3));
IkReal x231=((cj3)*(new_r10));
IkReal x232=((IkReal(1.00000000000000))*(sj3));
IkReal x233=((cj3)*(new_r11));
IkReal x234=((IkReal(1.00000000000000))*(x225));
evalcond[0]=((new_r21)+(((cj2)*(x225))));
evalcond[1]=((new_r20)+(((IkReal(-1.00000000000000))*(x226)*(x229))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r10)*(x232)))+(((IkReal(-1.00000000000000))*(x234)))+(((cj3)*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r11)*(x232)))+(((IkReal(-1.00000000000000))*(x226)))+(((cj3)*(new_r01))));
evalcond[4]=((x233)+(x230)+(((sj2)*(x225))));
evalcond[5]=((x231)+(x227)+(((IkReal(-1.00000000000000))*(x226)*(x228))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x228)*(x231)))+(((IkReal(-1.00000000000000))*(x227)*(x228)))+(x226)+(((IkReal(-1.00000000000000))*(new_r20)*(x229))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r21)*(x229)))+(((IkReal(-1.00000000000000))*(x228)*(x233)))+(((IkReal(-1.00000000000000))*(x234)))+(((IkReal(-1.00000000000000))*(x228)*(x230))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(new_r11)*(sj3)))+(((cj3)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj2) != 0)?((IkReal)1/(cj2)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r11)*(sj3)))+(((cj3)*(new_r01)))))+IKsqr(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj2) != 0)?((IkReal)1/(cj2)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r11)*(sj3)))+(((cj3)*(new_r01)))), ((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj2) != 0)?((IkReal)1/(cj2)):(IkReal)1.0e30))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x235=IKcos(j1);
IkReal x236=IKsin(j1);
IkReal x237=((new_r00)*(sj3));
IkReal x238=((IkReal(1.00000000000000))*(sj2));
IkReal x239=((IkReal(1.00000000000000))*(cj2));
IkReal x240=((new_r01)*(sj3));
IkReal x241=((cj3)*(new_r10));
IkReal x242=((IkReal(1.00000000000000))*(sj3));
IkReal x243=((cj3)*(new_r11));
IkReal x244=((IkReal(1.00000000000000))*(x235));
evalcond[0]=((new_r21)+(((cj2)*(x235))));
evalcond[1]=((new_r20)+(((IkReal(-1.00000000000000))*(x236)*(x239))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x244)))+(((IkReal(-1.00000000000000))*(new_r10)*(x242)))+(((cj3)*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r11)*(x242)))+(((IkReal(-1.00000000000000))*(x236)))+(((cj3)*(new_r01))));
evalcond[4]=((((sj2)*(x235)))+(x243)+(x240));
evalcond[5]=((x237)+(((IkReal(-1.00000000000000))*(x236)*(x238)))+(x241));
evalcond[6]=((x236)+(((IkReal(-1.00000000000000))*(new_r20)*(x239)))+(((IkReal(-1.00000000000000))*(x238)*(x241)))+(((IkReal(-1.00000000000000))*(x237)*(x238))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x238)*(x240)))+(((IkReal(-1.00000000000000))*(x244)))+(((IkReal(-1.00000000000000))*(x238)*(x243)))+(((IkReal(-1.00000000000000))*(new_r21)*(x239))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((gconst47)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst47)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst47)*(new_r20)), ((IkReal(-1.00000000000000))*(gconst47)*(new_r21)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x245=IKcos(j1);
IkReal x246=IKsin(j1);
IkReal x247=((new_r00)*(sj3));
IkReal x248=((IkReal(1.00000000000000))*(sj2));
IkReal x249=((IkReal(1.00000000000000))*(cj2));
IkReal x250=((new_r01)*(sj3));
IkReal x251=((cj3)*(new_r10));
IkReal x252=((IkReal(1.00000000000000))*(sj3));
IkReal x253=((cj3)*(new_r11));
IkReal x254=((IkReal(1.00000000000000))*(x245));
evalcond[0]=((((cj2)*(x245)))+(new_r21));
evalcond[1]=((new_r20)+(((IkReal(-1.00000000000000))*(x246)*(x249))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r10)*(x252)))+(((IkReal(-1.00000000000000))*(x254)))+(((cj3)*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x246)))+(((IkReal(-1.00000000000000))*(new_r11)*(x252)))+(((cj3)*(new_r01))));
evalcond[4]=((((sj2)*(x245)))+(x250)+(x253));
evalcond[5]=((x251)+(x247)+(((IkReal(-1.00000000000000))*(x246)*(x248))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x247)*(x248)))+(((IkReal(-1.00000000000000))*(x248)*(x251)))+(x246)+(((IkReal(-1.00000000000000))*(new_r20)*(x249))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r21)*(x249)))+(((IkReal(-1.00000000000000))*(x248)*(x253)))+(((IkReal(-1.00000000000000))*(x254)))+(((IkReal(-1.00000000000000))*(x248)*(x250))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((gconst44)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst44)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst44)*(new_r20)), ((IkReal(-1.00000000000000))*(gconst44)*(new_r21)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[2];
evalcond[0]=((new_r21)+(((cj2)*(IKcos(j1)))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj2)*(IKsin(j1))))+(new_r20));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst48;
gconst48=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst49;
gconst49=IKsign(((((IkReal(-1.00000000000000))*(new_r01)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r11)*(new_r12)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r01)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r11)*(new_r12))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x255=((cj1)*(gconst49)*(sj2));
if( IKabs(((new_r02)*(x255))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r12)*(x255))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((new_r02)*(x255)), ((new_r12)*(x255)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[12];
IkReal x256=IKcos(j3);
IkReal x257=IKsin(j3);
IkReal x258=((IkReal(1.00000000000000))*(cj1));
IkReal x259=((IkReal(1.00000000000000))*(sj1));
IkReal x260=((IkReal(1.00000000000000))*(sj2));
IkReal x261=((IkReal(1.00000000000000))*(cj2));
IkReal x262=((IkReal(1.00000000000000))*(x257));
IkReal x263=((new_r11)*(x256));
IkReal x264=((cj2)*(x257));
IkReal x265=((new_r12)*(x256));
IkReal x266=((new_r10)*(x256));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r12)*(x262)))+(((new_r02)*(x256))));
evalcond[1]=((((new_r02)*(x257)))+(((IkReal(-1.00000000000000))*(x261)))+(x265));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r10)*(x262)))+(((IkReal(-1.00000000000000))*(x258)))+(((new_r00)*(x256))));
evalcond[3]=((((new_r01)*(x256)))+(((IkReal(-1.00000000000000))*(new_r11)*(x262)))+(((IkReal(-1.00000000000000))*(x259))));
evalcond[4]=((((cj1)*(sj2)))+(((new_r01)*(x257)))+(x263));
evalcond[5]=((((IkReal(-1.00000000000000))*(sj2)*(x259)))+(((new_r00)*(x257)))+(x266));
evalcond[6]=((((cj2)*(x266)))+(((new_r00)*(x264)))+(((IkReal(-1.00000000000000))*(new_r20)*(x260))));
evalcond[7]=((((cj2)*(x263)))+(((new_r01)*(x264)))+(((IkReal(-1.00000000000000))*(new_r21)*(x260))));
evalcond[8]=((IkReal(-1.00000000000000))+(((new_r02)*(x264)))+(((IkReal(-1.00000000000000))*(new_r22)*(x260)))+(((cj2)*(x265))));
evalcond[9]=((((IkReal(-1.00000000000000))*(x260)*(x265)))+(((IkReal(-1.00000000000000))*(new_r02)*(x257)*(x260)))+(((IkReal(-1.00000000000000))*(new_r22)*(x261))));
evalcond[10]=((((IkReal(-1.00000000000000))*(new_r20)*(x261)))+(sj1)+(((IkReal(-1.00000000000000))*(x260)*(x266)))+(((IkReal(-1.00000000000000))*(new_r00)*(x257)*(x260))));
evalcond[11]=((((IkReal(-1.00000000000000))*(x258)))+(((IkReal(-1.00000000000000))*(new_r21)*(x261)))+(((IkReal(-1.00000000000000))*(x260)*(x263)))+(((IkReal(-1.00000000000000))*(new_r01)*(x257)*(x260))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x267=((cj2)*(gconst48));
if( IKabs(((new_r02)*(x267))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r12)*(x267))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((new_r02)*(x267)), ((new_r12)*(x267)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[12];
IkReal x268=IKcos(j3);
IkReal x269=IKsin(j3);
IkReal x270=((IkReal(1.00000000000000))*(cj1));
IkReal x271=((IkReal(1.00000000000000))*(sj1));
IkReal x272=((IkReal(1.00000000000000))*(sj2));
IkReal x273=((IkReal(1.00000000000000))*(cj2));
IkReal x274=((IkReal(1.00000000000000))*(x269));
IkReal x275=((new_r11)*(x268));
IkReal x276=((cj2)*(x269));
IkReal x277=((new_r12)*(x268));
IkReal x278=((new_r10)*(x268));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r12)*(x274)))+(((new_r02)*(x268))));
evalcond[1]=((x277)+(((new_r02)*(x269)))+(((IkReal(-1.00000000000000))*(x273))));
evalcond[2]=((((new_r00)*(x268)))+(((IkReal(-1.00000000000000))*(new_r10)*(x274)))+(((IkReal(-1.00000000000000))*(x270))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r11)*(x274)))+(((IkReal(-1.00000000000000))*(x271)))+(((new_r01)*(x268))));
evalcond[4]=((((cj1)*(sj2)))+(x275)+(((new_r01)*(x269))));
evalcond[5]=((((IkReal(-1.00000000000000))*(sj2)*(x271)))+(((new_r00)*(x269)))+(x278));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r20)*(x272)))+(((cj2)*(x278)))+(((new_r00)*(x276))));
evalcond[7]=((((cj2)*(x275)))+(((IkReal(-1.00000000000000))*(new_r21)*(x272)))+(((new_r01)*(x276))));
evalcond[8]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22)*(x272)))+(((cj2)*(x277)))+(((new_r02)*(x276))));
evalcond[9]=((((IkReal(-1.00000000000000))*(x272)*(x277)))+(((IkReal(-1.00000000000000))*(new_r22)*(x273)))+(((IkReal(-1.00000000000000))*(new_r02)*(x269)*(x272))));
evalcond[10]=((((IkReal(-1.00000000000000))*(new_r00)*(x269)*(x272)))+(sj1)+(((IkReal(-1.00000000000000))*(x272)*(x278)))+(((IkReal(-1.00000000000000))*(new_r20)*(x273))));
evalcond[11]=((((IkReal(-1.00000000000000))*(new_r01)*(x269)*(x272)))+(((IkReal(-1.00000000000000))*(x270)))+(((IkReal(-1.00000000000000))*(x272)*(x275)))+(((IkReal(-1.00000000000000))*(new_r21)*(x273))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "0229b3eae1df50dfdce3ab018683afc2"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
