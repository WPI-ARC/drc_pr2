"""autogenerated by genpy from feedback_devices/tacta_pr2_grippers.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class tacta_pr2_grippers(genpy.Message):
  _md5sum = "6f511160451a24188f64b49198493eca"
  _type = "feedback_devices/tacta_pr2_grippers"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

#uint8 RH_RF=0
#uint8 RH_LF=1
#uint8 LH_RF=3
#uint8 LH_LF=4

#int32[4] freq
#int32[4] min_amp
#int32[4] max_amp

int32 rh_rf_freq
int32 rh_lf_freq
int32 rh_rf_amp
int32 rh_lf_amp

int32 lh_rf_freq
int32 lh_lf_freq
int32 lh_rf_amp
int32 lh_lf_amp

int32[6] rh_grip_quality
int32[6] lh_grip_quality

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

"""
  __slots__ = ['header','rh_rf_freq','rh_lf_freq','rh_rf_amp','rh_lf_amp','lh_rf_freq','lh_lf_freq','lh_rf_amp','lh_lf_amp','rh_grip_quality','lh_grip_quality']
  _slot_types = ['std_msgs/Header','int32','int32','int32','int32','int32','int32','int32','int32','int32[6]','int32[6]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,rh_rf_freq,rh_lf_freq,rh_rf_amp,rh_lf_amp,lh_rf_freq,lh_lf_freq,lh_rf_amp,lh_lf_amp,rh_grip_quality,lh_grip_quality

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(tacta_pr2_grippers, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.rh_rf_freq is None:
        self.rh_rf_freq = 0
      if self.rh_lf_freq is None:
        self.rh_lf_freq = 0
      if self.rh_rf_amp is None:
        self.rh_rf_amp = 0
      if self.rh_lf_amp is None:
        self.rh_lf_amp = 0
      if self.lh_rf_freq is None:
        self.lh_rf_freq = 0
      if self.lh_lf_freq is None:
        self.lh_lf_freq = 0
      if self.lh_rf_amp is None:
        self.lh_rf_amp = 0
      if self.lh_lf_amp is None:
        self.lh_lf_amp = 0
      if self.rh_grip_quality is None:
        self.rh_grip_quality = [0,0,0,0,0,0]
      if self.lh_grip_quality is None:
        self.lh_grip_quality = [0,0,0,0,0,0]
    else:
      self.header = std_msgs.msg.Header()
      self.rh_rf_freq = 0
      self.rh_lf_freq = 0
      self.rh_rf_amp = 0
      self.rh_lf_amp = 0
      self.lh_rf_freq = 0
      self.lh_lf_freq = 0
      self.lh_rf_amp = 0
      self.lh_lf_amp = 0
      self.rh_grip_quality = [0,0,0,0,0,0]
      self.lh_grip_quality = [0,0,0,0,0,0]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_8i.pack(_x.rh_rf_freq, _x.rh_lf_freq, _x.rh_rf_amp, _x.rh_lf_amp, _x.lh_rf_freq, _x.lh_lf_freq, _x.lh_rf_amp, _x.lh_lf_amp))
      buff.write(_struct_6i.pack(*self.rh_grip_quality))
      buff.write(_struct_6i.pack(*self.lh_grip_quality))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.rh_rf_freq, _x.rh_lf_freq, _x.rh_rf_amp, _x.rh_lf_amp, _x.lh_rf_freq, _x.lh_lf_freq, _x.lh_rf_amp, _x.lh_lf_amp,) = _struct_8i.unpack(str[start:end])
      start = end
      end += 24
      self.rh_grip_quality = _struct_6i.unpack(str[start:end])
      start = end
      end += 24
      self.lh_grip_quality = _struct_6i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_8i.pack(_x.rh_rf_freq, _x.rh_lf_freq, _x.rh_rf_amp, _x.rh_lf_amp, _x.lh_rf_freq, _x.lh_lf_freq, _x.lh_rf_amp, _x.lh_lf_amp))
      buff.write(self.rh_grip_quality.tostring())
      buff.write(self.lh_grip_quality.tostring())
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.rh_rf_freq, _x.rh_lf_freq, _x.rh_rf_amp, _x.rh_lf_amp, _x.lh_rf_freq, _x.lh_lf_freq, _x.lh_rf_amp, _x.lh_lf_amp,) = _struct_8i.unpack(str[start:end])
      start = end
      end += 24
      self.rh_grip_quality = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=6)
      start = end
      end += 24
      self.lh_grip_quality = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=6)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_6i = struct.Struct("<6i")
_struct_3I = struct.Struct("<3I")
_struct_8i = struct.Struct("<8i")
